import{i as a}from"./vendor.2a83d1c9.js";import{C as f}from"./index.b1c16674.js";function E(r){if(!r)return"";if(r.message)return r.message;const t=r.target;return t?r.target.error&&r.target.error.message?t.error.message:r.target.src?`Failed to load "${t.src}"`:t instanceof XMLHttpRequest?`Network Error: ${t.status||"Unknown Status."} ${t.statusText||"Unknown Error. Possibly a CORS error."}`:`Unknown error on ${t}.`:`Unknown error: "${JSON.stringify(r)}"`}class g extends Error{constructor(t){super(t);this.name=this.constructor.name,this.message=t,typeof Error.captureStackTrace=="function"?Error.captureStackTrace(this,this.constructor):this.stack=new Error(t).stack}}class w extends g{originalError;constructor(t,e){super(`${t}:
  Cause:
    ${E(e).replace(/\n/g,`
    `)}`);this.originalError=e,this.stack+=`
`+e.stack}}const h=()=>{const r=localStorage.getItem(f.publicRuntimeConfig.feathersStoreKey);if(r==null||r.length===0)throw new Error(a.t("editor:errors.notAuthenticated"));return r},p=f.publicRuntimeConfig.apiServer,$=async(r,t,e,c,d)=>{const l=h();return await new Promise((m,i)=>{const o=new XMLHttpRequest,u=()=>{o.abort();const s=new Error(a.t("editor:errors.uploadAborted"));s.name="AbortError",s.aborted=!0,i(s)};e&&e.addEventListener("abort",u),console.log("Posting to: ",`${p}/media`),o.open("post",`${p}/media`,!0),o.upload.addEventListener("progress",s=>{t&&t(s.loaded/s.total)}),o.addEventListener("error",s=>{e&&e.removeEventListener("abort",u),i(new w(a.t("editor:errors.uploadFailed"),s))}),o.addEventListener("load",()=>{if(e&&e.removeEventListener("abort",u),o.status<300){const s=JSON.parse(o.responseText);m(s)}else i(new Error(a.t("editor:errors.uploadFailed",{reason:o.statusText})))});const n=new FormData;d&&n.set("projectId",d),c&&n.set("fileIdentifier",c),n.set("media",r),o.setRequestHeader("Authorization",`Bearer ${l}`),o.send(n)})};export{$ as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
