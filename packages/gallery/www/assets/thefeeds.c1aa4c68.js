import{R as e,r as m}from"./vendor.2a83d1c9.js";import{D as O}from"./index.ec931bf1.js";import{b as P,D as U}from"./_app.41131035.js";import{c as g,A as v}from"./capitalize.75c82fb0.js";import{u as _}from"./upload.d8a16837.js";import{A as z}from"./AuthService.10b9bc61.js";import{m as W}from"./makeStyles.39fa1a38.js";import{a as q}from"./Typography.a1510182.js";import{B as d}from"./Button.11e5af54.js";import{T as G,a as J,b as K,c as k,d as n,e as Q}from"./TableRow.da8a69a4.js";import{P as X}from"./Paper.678a179e.js";import{M as Y}from"./Modal.22c32aef.js";import{F as H,b as V,a as L,c as w}from"./InputLabel.ed2935ea.js";import"./createSvgIcon.50054fae.js";import"./useControlled.91b72ab4.js";import"./IconButton.5bf8eb2a.js";import"./Backdrop.311b8a3e.js";import"./Slide.79bdeba3.js";import"./List.0dd6030d.js";import"./index.b1c16674.js";const p={thefeedsRetrieved:r=>({type:"THEFEEDS_RETRIEVED",thefeeds:r}),fetchingTheFeeds:()=>({type:"THEFEEDS_FETCH"}),deleteTheFeeds:r=>({type:"REMOVE_THEFEEDS",thefeeds:r}),addTheFeeds:r=>({type:"ADD_THEFEEDS",thefeeds:r}),updateTheFeedsInList:r=>({type:"UPDATE_THEFEEDS",thefeeds:r}),addTheFeedsFire:r=>({type:"ADD_THEFEEDS_FIRES",thefeeds:r}),removeTheFeedsFire:r=>({type:"REMOVE_THEFEEDS_FIRES",thefeeds:r})},F={getTheFeedsNew:()=>async r=>{try{r(p.fetchingTheFeeds());const a=await g.service("thefeeds").find();r(p.thefeedsRetrieved(a.data))}catch(a){console.log(a),v.dispatchAlertError(r,a.message)}},createTheFeedsNew:r=>async a=>{try{const i=await _(r.video,null);console.log("storedVideo",i);const l=await g.service("thefeeds").create({title:r.title,videoId:i.file_id,description:r.description});a(p.addTheFeeds(l))}catch(i){console.log(i),v.dispatchAlertError(a,i.message)}},updateTheFeedsAsAdmin:r=>async a=>{try{let i={id:r.id,title:r.title,videoId:r.video,description:r.description};if(typeof r.video=="object"){const o=await _(r.video,null);i.videoId=o.file_id}const l=await g.service("thefeeds").patch(i.id,i);a(p.updateTheFeedsInList(l))}catch(i){console.log(i),v.dispatchAlertError(a,i.message)}},removeTheFeeds:r=>async a=>{try{await g.service("thefeeds").remove(r),a(p.deleteTheFeeds(r))}catch(i){console.log(i),v.dispatchAlertError(a,i.message)}}},Z=({create:r,list:a,deleteTheFeed:i,update:l})=>{var o=a.map(t=>y(t.title,t.id,t.videoUrl,t.description,t.videoId));const b=W({table:{minWidth:650},form:{display:"Flex",flexDirection:"column",marginLeft:"auto",marginRight:"auto",marginTop:"90px",width:"max-content",padding:"60px",background:"#fff"}});function y(t,E,f,T,M){return{title:t,id:E,videoUrl:f,description:T,videoId:M}}const s=b(),[B,S]=e.useState(!1),[u,D]=m.exports.useState(null),[c,j]=m.exports.useState(null),[C,x]=m.exports.useState(null),[h,A]=m.exports.useState(null),I=(t,E,f,T)=>{S(!0),t&&D(t),E&&j(E),f&&x(f),T&&A(T)},R=()=>{S(!1)},N=t=>{t.preventDefault(),c!==""&&c!==null?l({id:c,title:u,video:C,description:h}):r({title:u,description:h,video:C}),S(!1),D(""),j(""),x(""),A("")};return e.createElement("div",null,e.createElement(q,{variant:"h1",color:"primary"},"Social Feeds List"),e.createElement(d,{onClick:()=>{I("","","","")},variant:"outlined",color:"secondary"},"Create"),e.createElement(G,{component:X},e.createElement(J,{className:s.table,size:"small","aria-label":"a dense table"},e.createElement(K,null,e.createElement(k,null,e.createElement(n,null,"Title"),e.createElement(n,{align:"right"},"Id"),e.createElement(n,{align:"right"},"Video"),e.createElement(n,{align:"right"},"Description"))),o&&o.length>0&&e.createElement(Q,null,o.reverse().map(t=>e.createElement(k,{key:t.title},e.createElement(n,{component:"th",scope:"row"},t.title),e.createElement(n,{align:"right"},t.id),e.createElement(n,{align:"right"},t.videoUrl),e.createElement(n,{align:"right"},t.description),e.createElement(n,{align:"right"},e.createElement(d,{onClick:()=>I(t.title,t.id,t.videoId,t.description)},"Edit")),e.createElement(n,{align:"right"},e.createElement(d,{onClick:()=>i(t.id)},"Delete"))))))),e.createElement(Y,{open:B,onClose:R,"aria-labelledby":"simple-modal-title","aria-describedby":"simple-modal-description"},e.createElement("div",null,e.createElement("form",{className:s.form,noValidate:!0,onSubmit:t=>N(t)},e.createElement(H,null,e.createElement(V,{htmlFor:"thefeeds-title"},"Title"),e.createElement(L,{value:u||"",onChange:t=>D(t.target.value),id:"thefeeds-title",type:"text","aria-describedby":"my-helper-text"}),e.createElement(w,{id:"my-helper-text"},"Tip&Trick Title.")),e.createElement("input",{value:c||"",onChange:t=>j(t.target.value),id:"thefeeds-id",type:"number",hidden:!0}),e.createElement(d,{variant:"contained",component:"label"},"Upload File",e.createElement("input",{onChange:t=>{x(t.target.files[0])},id:"thefeeds-video",type:"file",hidden:!0})),e.createElement(H,null,e.createElement(V,{htmlFor:"thefeeds-description"},"Description"),e.createElement(L,{value:h||"",onChange:t=>A(t.target.value),id:"thefeeds-description",type:"text","aria-describedby":"my-helper-text"}),e.createElement(w,{id:"my-helper-text"},"Tip&Trick short description.")),e.createElement(d,{variant:"contained",color:"primary",type:"submit"},"Save"),e.createElement(d,{variant:"contained",color:"secondary",onClick:()=>R()},"Close")))))},ve=r=>{const a=P(),i=U(),l=s=>{a(F.createTheFeedsNew(s))},o=s=>{a(F.removeTheFeeds(s))},b=s=>{a(F.updateTheFeedsAsAdmin(s))};m.exports.useEffect(()=>{a(z.doLoginAuto(!0,!0)),a(F.getTheFeedsNew())},[]);const y=i?.thefeeds?.value||[];return e.createElement(e.Fragment,null,e.createElement("div",null,e.createElement(O,null,e.createElement(Z,{create:l,list:y,deleteTheFeed:o,update:b}))))};export{ve as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
