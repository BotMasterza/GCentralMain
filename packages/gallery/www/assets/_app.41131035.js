import{_ as ln,g as ko,R as g,r as ie,o as Tl,c as Al,d as Rl,e as Tr,f as Mo,h as Ar,j as wl,k as ha,l as Lo}from"./vendor.2a83d1c9.js";import{C as _a,_ as ce}from"./index.b1c16674.js";function No(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),r.push.apply(r,n)}return r}function Fo(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?No(Object(r),!0).forEach(function(n){ln(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):No(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function Ue(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var jo=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}(),ga=function(){return Math.random().toString(36).substring(7).split("").join(".")},Rr={INIT:"@@redux/INIT"+ga(),REPLACE:"@@redux/REPLACE"+ga(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ga()}};function Ol(e){if(typeof e!="object"||e===null)return!1;for(var t=e;Object.getPrototypeOf(t)!==null;)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function va(e,t,r){var n;if(typeof t=="function"&&typeof r=="function"||typeof r=="function"&&typeof arguments[3]=="function")throw new Error(Ue(0));if(typeof t=="function"&&typeof r=="undefined"&&(r=t,t=void 0),typeof r!="undefined"){if(typeof r!="function")throw new Error(Ue(1));return r(va)(e,t)}if(typeof e!="function")throw new Error(Ue(2));var a=e,i=t,o=[],s=o,u=!1;function c(){s===o&&(s=o.slice())}function l(){if(u)throw new Error(Ue(3));return i}function f(_){if(typeof _!="function")throw new Error(Ue(4));if(u)throw new Error(Ue(5));var v=!0;return c(),s.push(_),function(){if(!!v){if(u)throw new Error(Ue(6));v=!1,c();var T=s.indexOf(_);s.splice(T,1),o=null}}}function d(_){if(!Ol(_))throw new Error(Ue(7));if(typeof _.type=="undefined")throw new Error(Ue(8));if(u)throw new Error(Ue(9));try{u=!0,i=a(i,_)}finally{u=!1}for(var v=o=s,A=0;A<v.length;A++){var T=v[A];T()}return _}function p(_){if(typeof _!="function")throw new Error(Ue(10));a=_,d({type:Rr.REPLACE})}function m(){var _,v=f;return _={subscribe:function(T){if(typeof T!="object"||T===null)throw new Error(Ue(11));function j(){T.next&&T.next(l())}j();var L=v(j);return{unsubscribe:L}}},_[jo]=function(){return this},_}return d({type:Rr.INIT}),n={dispatch:d,subscribe:f,getState:l,replaceReducer:p},n[jo]=m,n}function Dl(e){Object.keys(e).forEach(function(t){var r=e[t],n=r(void 0,{type:Rr.INIT});if(typeof n=="undefined")throw new Error(Ue(12));if(typeof r(void 0,{type:Rr.PROBE_UNKNOWN_ACTION()})=="undefined")throw new Error(Ue(13))})}function Il(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var a=t[n];typeof e[a]=="function"&&(r[a]=e[a])}var i=Object.keys(r),o;try{Dl(r)}catch(s){o=s}return function(u,c){if(u===void 0&&(u={}),o)throw o;for(var l=!1,f={},d=0;d<i.length;d++){var p=i[d],m=r[p],_=u[p],v=m(_,c);if(typeof v=="undefined")throw c&&c.type,new Error(Ue(14));f[p]=v,l=l||v!==_}return l=l||i.length!==Object.keys(u).length,l?f:u}}function Vo(e,t){return function(){return t(e.apply(this,arguments))}}function Cl(e,t){if(typeof e=="function")return Vo(e,t);if(typeof e!="object"||e===null)throw new Error(Ue(16));var r={};for(var n in e){var a=e[n];typeof a=="function"&&(r[n]=Vo(a,t))}return r}function Ho(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.length===0?function(n){return n}:t.length===1?t[0]:t.reduce(function(n,a){return function(){return n(a.apply(void 0,arguments))}})}function Go(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(n){return function(){var a=n.apply(void 0,arguments),i=function(){throw new Error(Ue(15))},o={getState:a.getState,dispatch:function(){return i.apply(void 0,arguments)}},s=t.map(function(u){return u(o)});return i=Ho.apply(void 0,s)(a.dispatch),Fo(Fo({},a),{},{dispatch:i})}}}var Ul=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",__DO_NOT_USE__ActionTypes:Rr,applyMiddleware:Go,bindActionCreators:Cl,combineReducers:Il,compose:Ho,createStore:va});function Pl(){if(!window)return;const e=localStorage.getItem(_a.publicRuntimeConfig.localStorageKey);return e?JSON.parse(e):void 0}function xl(e){e.isLoggedIn&&localStorage.setItem(_a.publicRuntimeConfig.localStorageKey,JSON.stringify(e))}function zo(e){return function(t){var r=t.dispatch,n=t.getState;return function(a){return function(i){return typeof i=="function"?i(r,n,e):a(i)}}}}var $o=zo();$o.withExtraArgument=zo;var wr="delete",he=5,Xe=1<<he,Ne=Xe-1,te={};function ya(){return{value:!1}}function Ze(e){e&&(e.value=!0)}function Ea(){}function Jt(e){return e.size===void 0&&(e.size=e.__iterate(Bo)),e.size}function St(e,t){if(typeof t!="number"){var r=t>>>0;if(""+r!==t||r===4294967295)return NaN;t=r}return t<0?Jt(e)+t:t}function Bo(){return!0}function Or(e,t,r){return(e===0&&!Wo(e)||r!==void 0&&e<=-r)&&(t===void 0||r!==void 0&&t>=r)}function Xt(e,t){return qo(e,t,0)}function Dr(e,t){return qo(e,t,t)}function qo(e,t,r){return e===void 0?r:Wo(e)?t===1/0?t:Math.max(0,t+e)|0:t===void 0||t===e?e:Math.min(t,e)|0}function Wo(e){return e<0||e===0&&1/e==-1/0}var Yo="@@__IMMUTABLE_ITERABLE__@@";function ke(e){return Boolean(e&&e[Yo])}var Ko="@@__IMMUTABLE_KEYED__@@";function le(e){return Boolean(e&&e[Ko])}var Jo="@@__IMMUTABLE_INDEXED__@@";function Pe(e){return Boolean(e&&e[Jo])}function Zt(e){return le(e)||Pe(e)}var _e=function(t){return ke(t)?t:Me(t)},Qe=function(e){function t(r){return le(r)?r:bt(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(_e),jt=function(e){function t(r){return Pe(r)?r:tt(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(_e),Qt=function(e){function t(r){return ke(r)&&!Zt(r)?r:rr(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(_e);_e.Keyed=Qe;_e.Indexed=jt;_e.Set=Qt;var Xo="@@__IMMUTABLE_SEQ__@@";function Ir(e){return Boolean(e&&e[Xo])}var Zo="@@__IMMUTABLE_RECORD__@@";function Vt(e){return Boolean(e&&e[Zo])}function $e(e){return ke(e)||Vt(e)}var er="@@__IMMUTABLE_ORDERED__@@";function Be(e){return Boolean(e&&e[er])}var Cr=0,nt=1,et=2,Sa=typeof Symbol=="function"&&Symbol.iterator,Qo="@@iterator",fn=Sa||Qo,re=function(t){this.next=t};re.prototype.toString=function(){return"[Iterator]"};re.KEYS=Cr;re.VALUES=nt;re.ENTRIES=et;re.prototype.inspect=re.prototype.toSource=function(){return this.toString()};re.prototype[fn]=function(){return this};function ge(e,t,r,n){var a=e===0?t:e===1?r:[t,r];return n?n.value=a:n={value:a,done:!1},n}function Fe(){return{value:void 0,done:!0}}function ba(e){return Array.isArray(e)?!0:!!dn(e)}function es(e){return e&&typeof e.next=="function"}function Ta(e){var t=dn(e);return t&&t.call(e)}function dn(e){var t=e&&(Sa&&e[Sa]||e[Qo]);if(typeof t=="function")return t}function kl(e){var t=dn(e);return t&&t===e.entries}function Ml(e){var t=dn(e);return t&&t===e.keys}var tr=Object.prototype.hasOwnProperty;function Aa(e){return Array.isArray(e)||typeof e=="string"?!0:e&&typeof e=="object"&&Number.isInteger(e.length)&&e.length>=0&&(e.length===0?Object.keys(e).length===1:e.hasOwnProperty(e.length-1))}var Me=function(e){function t(r){return r==null?wa():$e(r)?r.toSeq():Nl(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(n,a){var i=this._cache;if(i){for(var o=i.length,s=0;s!==o;){var u=i[a?o-++s:s++];if(n(u[1],u[0],this)===!1)break}return s}return this.__iterateUncached(n,a)},t.prototype.__iterator=function(n,a){var i=this._cache;if(i){var o=i.length,s=0;return new re(function(){if(s===o)return Fe();var u=i[a?o-++s:s++];return ge(n,u[0],u[1])})}return this.__iteratorUncached(n,a)},t}(_e),bt=function(e){function t(r){return r==null?wa().toKeyedSeq():ke(r)?le(r)?r.toSeq():r.fromEntrySeq():Vt(r)?r.toSeq():Oa(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(Me),tt=function(e){function t(r){return r==null?wa():ke(r)?le(r)?r.entrySeq():r.toIndexedSeq():Vt(r)?r.toSeq().entrySeq():rs(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(Me),rr=function(e){function t(r){return(ke(r)&&!Zt(r)?r:tt(r)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(Me);Me.isSeq=Ir;Me.Keyed=bt;Me.Set=rr;Me.Indexed=tt;Me.prototype[Xo]=!0;var Ht=function(e){function t(r){this._array=r,this.size=r.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(n,a){return this.has(n)?this._array[St(this,n)]:a},t.prototype.__iterate=function(n,a){for(var i=this._array,o=i.length,s=0;s!==o;){var u=a?o-++s:s++;if(n(i[u],u,this)===!1)break}return s},t.prototype.__iterator=function(n,a){var i=this._array,o=i.length,s=0;return new re(function(){if(s===o)return Fe();var u=a?o-++s:s++;return ge(n,u,i[u])})},t}(tt),Ra=function(e){function t(r){var n=Object.keys(r);this._object=r,this._keys=n,this.size=n.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(n,a){return a!==void 0&&!this.has(n)?a:this._object[n]},t.prototype.has=function(n){return tr.call(this._object,n)},t.prototype.__iterate=function(n,a){for(var i=this._object,o=this._keys,s=o.length,u=0;u!==s;){var c=o[a?s-++u:u++];if(n(i[c],c,this)===!1)break}return u},t.prototype.__iterator=function(n,a){var i=this._object,o=this._keys,s=o.length,u=0;return new re(function(){if(u===s)return Fe();var c=o[a?s-++u:u++];return ge(n,c,i[c])})},t}(bt);Ra.prototype[er]=!0;var Ll=function(e){function t(r){this._collection=r,this.size=r.length||r.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(n,a){if(a)return this.cacheResult().__iterate(n,a);var i=this._collection,o=Ta(i),s=0;if(es(o))for(var u;!(u=o.next()).done&&n(u.value,s++,this)!==!1;);return s},t.prototype.__iteratorUncached=function(n,a){if(a)return this.cacheResult().__iterator(n,a);var i=this._collection,o=Ta(i);if(!es(o))return new re(Fe);var s=0;return new re(function(){var u=o.next();return u.done?u:ge(n,s++,u.value)})},t}(tt),ts;function wa(){return ts||(ts=new Ht([]))}function Oa(e){var t=Da(e);if(t)return t.fromEntrySeq();if(typeof e=="object")return new Ra(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function rs(e){var t=Da(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function Nl(e){var t=Da(e);if(t)return kl(e)?t.fromEntrySeq():Ml(e)?t.toSetSeq():t;if(typeof e=="object")return new Ra(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}function Da(e){return Aa(e)?new Ht(e):ba(e)?new Ll(e):void 0}var ns="@@__IMMUTABLE_MAP__@@";function Ur(e){return Boolean(e&&e[ns])}function pn(e){return Ur(e)&&Be(e)}function mn(e){return Boolean(e&&typeof e.equals=="function"&&typeof e.hashCode=="function")}function Ie(e,t){if(e===t||e!==e&&t!==t)return!0;if(!e||!t)return!1;if(typeof e.valueOf=="function"&&typeof t.valueOf=="function"){if(e=e.valueOf(),t=t.valueOf(),e===t||e!==e&&t!==t)return!0;if(!e||!t)return!1}return!!(mn(e)&&mn(t)&&e.equals(t))}var Pr=typeof Math.imul=="function"&&Math.imul(4294967295,2)===-2?Math.imul:function(t,r){t|=0,r|=0;var n=t&65535,a=r&65535;return n*a+((t>>>16)*a+n*(r>>>16)<<16>>>0)|0};function hn(e){return e>>>1&1073741824|e&3221225471}var Fl=Object.prototype.valueOf;function je(e){if(e==null)return as(e);if(typeof e.hashCode=="function")return hn(e.hashCode(e));var t=$l(e);if(t==null)return as(t);switch(typeof t){case"boolean":return t?1108378657:1108378656;case"number":return jl(t);case"string":return t.length>Bl?Vl(t):Ia(t);case"object":case"function":return Gl(t);case"symbol":return Hl(t);default:if(typeof t.toString=="function")return Ia(t.toString());throw new Error("Value type "+typeof t+" cannot be hashed.")}}function as(e){return e===null?1108378658:1108378659}function jl(e){if(e!==e||e===1/0)return 0;var t=e|0;for(t!==e&&(t^=e*4294967295);e>4294967295;)e/=4294967295,t^=e;return hn(t)}function Vl(e){var t=ka[e];return t===void 0&&(t=Ia(e),xa===ql&&(xa=0,ka={}),xa++,ka[e]=t),t}function Ia(e){for(var t=0,r=0;r<e.length;r++)t=31*t+e.charCodeAt(r)|0;return hn(t)}function Hl(e){var t=us[e];return t!==void 0||(t=ss(),us[e]=t),t}function Gl(e){var t;if(Ca&&(t=Ua.get(e),t!==void 0)||(t=e[Gt],t!==void 0)||!os&&(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[Gt],t!==void 0||(t=zl(e),t!==void 0)))return t;if(t=ss(),Ca)Ua.set(e,t);else{if(is!==void 0&&is(e)===!1)throw new Error("Non-extensible objects are not allowed as keys.");if(os)Object.defineProperty(e,Gt,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(e.propertyIsEnumerable!==void 0&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[Gt]=t;else if(e.nodeType!==void 0)e[Gt]=t;else throw new Error("Unable to set a non-enumerable property on object.")}return t}var is=Object.isExtensible,os=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}();function zl(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}function $l(e){return e.valueOf!==Fl&&typeof e.valueOf=="function"?e.valueOf(e):e}function ss(){var e=++Pa;return Pa&1073741824&&(Pa=0),e}var Ca=typeof WeakMap=="function",Ua;Ca&&(Ua=new WeakMap);var us=Object.create(null),Pa=0,Gt="__immutablehash__";typeof Symbol=="function"&&(Gt=Symbol(Gt));var Bl=16,ql=255,xa=0,ka={},_n=function(e){function t(r,n){this._iter=r,this._useKeys=n,this.size=r.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(n,a){return this._iter.get(n,a)},t.prototype.has=function(n){return this._iter.has(n)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var n=this,a=Ma(this,!0);return this._useKeys||(a.valueSeq=function(){return n._iter.toSeq().reverse()}),a},t.prototype.map=function(n,a){var i=this,o=ps(this,n,a);return this._useKeys||(o.valueSeq=function(){return i._iter.toSeq().map(n,a)}),o},t.prototype.__iterate=function(n,a){var i=this;return this._iter.__iterate(function(o,s){return n(o,s,i)},a)},t.prototype.__iterator=function(n,a){return this._iter.__iterator(n,a)},t}(bt);_n.prototype[er]=!0;var cs=function(e){function t(r){this._iter=r,this.size=r.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(n){return this._iter.includes(n)},t.prototype.__iterate=function(n,a){var i=this,o=0;return a&&Jt(this),this._iter.__iterate(function(s){return n(s,a?i.size-++o:o++,i)},a)},t.prototype.__iterator=function(n,a){var i=this,o=this._iter.__iterator(nt,a),s=0;return a&&Jt(this),new re(function(){var u=o.next();return u.done?u:ge(n,a?i.size-++s:s++,u.value,u)})},t}(tt),ls=function(e){function t(r){this._iter=r,this.size=r.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(n){return this._iter.includes(n)},t.prototype.__iterate=function(n,a){var i=this;return this._iter.__iterate(function(o){return n(o,o,i)},a)},t.prototype.__iterator=function(n,a){var i=this._iter.__iterator(nt,a);return new re(function(){var o=i.next();return o.done?o:ge(n,o.value,o.value,o)})},t}(rr),fs=function(e){function t(r){this._iter=r,this.size=r.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(n,a){var i=this;return this._iter.__iterate(function(o){if(o){vs(o);var s=ke(o);return n(s?o.get(1):o[1],s?o.get(0):o[0],i)}},a)},t.prototype.__iterator=function(n,a){var i=this._iter.__iterator(nt,a);return new re(function(){for(;;){var o=i.next();if(o.done)return o;var s=o.value;if(s){vs(s);var u=ke(s);return ge(n,u?s.get(0):s[0],u?s.get(1):s[1],o)}}})},t}(bt);cs.prototype.cacheResult=_n.prototype.cacheResult=ls.prototype.cacheResult=fs.prototype.cacheResult=Na;function ds(e){var t=ct(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var r=e.reverse.apply(this);return r.flip=function(){return e.reverse()},r},t.has=function(r){return e.includes(r)},t.includes=function(r){return e.has(r)},t.cacheResult=Na,t.__iterateUncached=function(r,n){var a=this;return e.__iterate(function(i,o){return r(o,i,a)!==!1},n)},t.__iteratorUncached=function(r,n){if(r===et){var a=e.__iterator(r,n);return new re(function(){var i=a.next();if(!i.done){var o=i.value[0];i.value[0]=i.value[1],i.value[1]=o}return i})}return e.__iterator(r===nt?Cr:nt,n)},t}function ps(e,t,r){var n=ct(e);return n.size=e.size,n.has=function(a){return e.has(a)},n.get=function(a,i){var o=e.get(a,te);return o===te?i:t.call(r,o,a,e)},n.__iterateUncached=function(a,i){var o=this;return e.__iterate(function(s,u,c){return a(t.call(r,s,u,c),u,o)!==!1},i)},n.__iteratorUncached=function(a,i){var o=e.__iterator(et,i);return new re(function(){var s=o.next();if(s.done)return s;var u=s.value,c=u[0];return ge(a,c,t.call(r,u[1],c,e),s)})},n}function Ma(e,t){var r=this,n=ct(e);return n._iter=e,n.size=e.size,n.reverse=function(){return e},e.flip&&(n.flip=function(){var a=ds(e);return a.reverse=function(){return e.flip()},a}),n.get=function(a,i){return e.get(t?a:-1-a,i)},n.has=function(a){return e.has(t?a:-1-a)},n.includes=function(a){return e.includes(a)},n.cacheResult=Na,n.__iterate=function(a,i){var o=this,s=0;return i&&Jt(e),e.__iterate(function(u,c){return a(u,t?c:i?o.size-++s:s++,o)},!i)},n.__iterator=function(a,i){var o=0;i&&Jt(e);var s=e.__iterator(et,!i);return new re(function(){var u=s.next();if(u.done)return u;var c=u.value;return ge(a,t?c[0]:i?r.size-++o:o++,c[1],u)})},n}function ms(e,t,r,n){var a=ct(e);return n&&(a.has=function(i){var o=e.get(i,te);return o!==te&&!!t.call(r,o,i,e)},a.get=function(i,o){var s=e.get(i,te);return s!==te&&t.call(r,s,i,e)?s:o}),a.__iterateUncached=function(i,o){var s=this,u=0;return e.__iterate(function(c,l,f){if(t.call(r,c,l,f))return u++,i(c,n?l:u-1,s)},o),u},a.__iteratorUncached=function(i,o){var s=e.__iterator(et,o),u=0;return new re(function(){for(;;){var c=s.next();if(c.done)return c;var l=c.value,f=l[0],d=l[1];if(t.call(r,d,f,e))return ge(i,n?f:u++,d,c)}})},a}function Wl(e,t,r){var n=Rt().asMutable();return e.__iterate(function(a,i){n.update(t.call(r,a,i,e),0,function(o){return o+1})}),n.asImmutable()}function Yl(e,t,r){var n=le(e),a=(Be(e)?it():Rt()).asMutable();e.__iterate(function(o,s){a.update(t.call(r,o,s,e),function(u){return u=u||[],u.push(n?[s,o]:o),u})});var i=ys(e);return a.map(function(o){return fe(e,i(o))}).asImmutable()}function La(e,t,r,n){var a=e.size;if(Or(t,r,a))return e;var i=Xt(t,a),o=Dr(r,a);if(i!==i||o!==o)return La(e.toSeq().cacheResult(),t,r,n);var s=o-i,u;s===s&&(u=s<0?0:s);var c=ct(e);return c.size=u===0?u:e.size&&u||void 0,!n&&Ir(e)&&u>=0&&(c.get=function(l,f){return l=St(this,l),l>=0&&l<u?e.get(l+i,f):f}),c.__iterateUncached=function(l,f){var d=this;if(u===0)return 0;if(f)return this.cacheResult().__iterate(l,f);var p=0,m=!0,_=0;return e.__iterate(function(v,A){if(!(m&&(m=p++<i)))return _++,l(v,n?A:_-1,d)!==!1&&_!==u}),_},c.__iteratorUncached=function(l,f){if(u!==0&&f)return this.cacheResult().__iterator(l,f);if(u===0)return new re(Fe);var d=e.__iterator(l,f),p=0,m=0;return new re(function(){for(;p++<i;)d.next();if(++m>u)return Fe();var _=d.next();return n||l===nt||_.done?_:l===Cr?ge(l,m-1,void 0,_):ge(l,m-1,_.value[1],_)})},c}function Kl(e,t,r){var n=ct(e);return n.__iterateUncached=function(a,i){var o=this;if(i)return this.cacheResult().__iterate(a,i);var s=0;return e.__iterate(function(u,c,l){return t.call(r,u,c,l)&&++s&&a(u,c,o)}),s},n.__iteratorUncached=function(a,i){var o=this;if(i)return this.cacheResult().__iterator(a,i);var s=e.__iterator(et,i),u=!0;return new re(function(){if(!u)return Fe();var c=s.next();if(c.done)return c;var l=c.value,f=l[0],d=l[1];return t.call(r,d,f,o)?a===et?c:ge(a,f,d,c):(u=!1,Fe())})},n}function hs(e,t,r,n){var a=ct(e);return a.__iterateUncached=function(i,o){var s=this;if(o)return this.cacheResult().__iterate(i,o);var u=!0,c=0;return e.__iterate(function(l,f,d){if(!(u&&(u=t.call(r,l,f,d))))return c++,i(l,n?f:c-1,s)}),c},a.__iteratorUncached=function(i,o){var s=this;if(o)return this.cacheResult().__iterator(i,o);var u=e.__iterator(et,o),c=!0,l=0;return new re(function(){var f,d,p;do{if(f=u.next(),f.done)return n||i===nt?f:i===Cr?ge(i,l++,void 0,f):ge(i,l++,f.value[1],f);var m=f.value;d=m[0],p=m[1],c&&(c=t.call(r,p,d,s))}while(c);return i===et?f:ge(i,d,p,f)})},a}function Jl(e,t){var r=le(e),n=[e].concat(t).map(function(o){return ke(o)?r&&(o=Qe(o)):o=r?Oa(o):rs(Array.isArray(o)?o:[o]),o}).filter(function(o){return o.size!==0});if(n.length===0)return e;if(n.length===1){var a=n[0];if(a===e||r&&le(a)||Pe(e)&&Pe(a))return a}var i=new Ht(n);return r?i=i.toKeyedSeq():Pe(e)||(i=i.toSetSeq()),i=i.flatten(!0),i.size=n.reduce(function(o,s){if(o!==void 0){var u=s.size;if(u!==void 0)return o+u}},0),i}function _s(e,t,r){var n=ct(e);return n.__iterateUncached=function(a,i){if(i)return this.cacheResult().__iterate(a,i);var o=0,s=!1;function u(c,l){c.__iterate(function(f,d){return(!t||l<t)&&ke(f)?u(f,l+1):(o++,a(f,r?d:o-1,n)===!1&&(s=!0)),!s},i)}return u(e,0),o},n.__iteratorUncached=function(a,i){if(i)return this.cacheResult().__iterator(a,i);var o=e.__iterator(a,i),s=[],u=0;return new re(function(){for(;o;){var c=o.next();if(c.done!==!1){o=s.pop();continue}var l=c.value;if(a===et&&(l=l[1]),(!t||s.length<t)&&ke(l))s.push(o),o=l.__iterator(a,i);else return r?c:ge(a,u++,l,c)}return Fe()})},n}function Xl(e,t,r){var n=ys(e);return e.toSeq().map(function(a,i){return n(t.call(r,a,i,e))}).flatten(!0)}function Zl(e,t){var r=ct(e);return r.size=e.size&&e.size*2-1,r.__iterateUncached=function(n,a){var i=this,o=0;return e.__iterate(function(s){return(!o||n(t,o++,i)!==!1)&&n(s,o++,i)!==!1},a),o},r.__iteratorUncached=function(n,a){var i=e.__iterator(nt,a),o=0,s;return new re(function(){return(!s||o%2)&&(s=i.next(),s.done)?s:o%2?ge(n,o++,t):ge(n,o++,s.value,s)})},r}function nr(e,t,r){t||(t=Es);var n=le(e),a=0,i=e.toSeq().map(function(o,s){return[s,o,a++,r?r(o,s,e):o]}).valueSeq().toArray();return i.sort(function(o,s){return t(o[3],s[3])||o[2]-s[2]}).forEach(n?function(o,s){i[s].length=2}:function(o,s){i[s]=o[1]}),n?bt(i):Pe(e)?tt(i):rr(i)}function gn(e,t,r){if(t||(t=Es),r){var n=e.toSeq().map(function(a,i){return[a,r(a,i,e)]}).reduce(function(a,i){return gs(t,a[1],i[1])?i:a});return n&&n[0]}return e.reduce(function(a,i){return gs(t,a,i)?i:a})}function gs(e,t,r){var n=e(r,t);return n===0&&r!==t&&(r==null||r!==r)||n>0}function vn(e,t,r,n){var a=ct(e),i=new Ht(r).map(function(o){return o.size});return a.size=n?i.max():i.min(),a.__iterate=function(o,s){for(var u=this.__iterator(nt,s),c,l=0;!(c=u.next()).done&&o(c.value,l++,this)!==!1;);return l},a.__iteratorUncached=function(o,s){var u=r.map(function(f){return f=_e(f),Ta(s?f.reverse():f)}),c=0,l=!1;return new re(function(){var f;return l||(f=u.map(function(d){return d.next()}),l=n?f.every(function(d){return d.done}):f.some(function(d){return d.done})),l?Fe():ge(o,c++,t.apply(null,f.map(function(d){return d.value})))})},a}function fe(e,t){return e===t?e:Ir(e)?t:e.constructor(t)}function vs(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function ys(e){return le(e)?Qe:Pe(e)?jt:Qt}function ct(e){return Object.create((le(e)?bt:Pe(e)?tt:rr).prototype)}function Na(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Me.prototype.cacheResult.call(this)}function Es(e,t){return e===void 0&&t===void 0?0:e===void 0?1:t===void 0?-1:e>t?1:e<t?-1:0}function lt(e,t){t=t||0;for(var r=Math.max(0,e.length-t),n=new Array(r),a=0;a<r;a++)n[a]=e[a+t];return n}function Fa(e,t){if(!e)throw new Error(t)}function rt(e){Fa(e!==1/0,"Cannot perform this action with an infinite size.")}function Ss(e){if(Aa(e)&&typeof e!="string")return e;if(Be(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}var Ql=Object.prototype.toString;function yn(e){if(!e||typeof e!="object"||Ql.call(e)!=="[object Object]")return!1;var t=Object.getPrototypeOf(e);if(t===null)return!0;for(var r=t,n=Object.getPrototypeOf(t);n!==null;)r=n,n=Object.getPrototypeOf(r);return r===t}function Tt(e){return typeof e=="object"&&($e(e)||Array.isArray(e)||yn(e))}function xr(e){try{return typeof e=="string"?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function ja(e,t){return $e(e)?e.has(t):Tt(e)&&tr.call(e,t)}function En(e,t,r){return $e(e)?e.get(t,r):ja(e,t)?typeof e.get=="function"?e.get(t):e[t]:r}function Sn(e){if(Array.isArray(e))return lt(e);var t={};for(var r in e)tr.call(e,r)&&(t[r]=e[r]);return t}function Va(e,t){if(!Tt(e))throw new TypeError("Cannot update non-data-structure value: "+e);if($e(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!tr.call(e,t))return e;var r=Sn(e);return Array.isArray(r)?r.splice(t,1):delete r[t],r}function Ha(e,t,r){if(!Tt(e))throw new TypeError("Cannot update non-data-structure value: "+e);if($e(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,r)}if(tr.call(e,t)&&r===e[t])return e;var n=Sn(e);return n[t]=r,n}function At(e,t,r,n){n||(n=r,r=void 0);var a=bs($e(e),e,Ss(t),0,r,n);return a===te?r:a}function bs(e,t,r,n,a,i){var o=t===te;if(n===r.length){var s=o?a:t,u=i(s);return u===s?t:u}if(!o&&!Tt(t))throw new TypeError("Cannot update within non-data-structure value in path ["+r.slice(0,n).map(xr)+"]: "+t);var c=r[n],l=o?te:En(t,c,te),f=bs(l===te?e:$e(l),l,r,n+1,a,i);return f===l?t:f===te?Va(t,c):Ha(o?e?at():{}:t,c,f)}function Ga(e,t,r){return At(e,t,te,function(){return r})}function za(e,t){return Ga(this,e,t)}function $a(e,t){return At(e,t,function(){return te})}function Ba(e){return $a(this,e)}function bn(e,t,r,n){return At(e,[t],r,n)}function qa(e,t,r){return arguments.length===1?e(this):bn(this,e,t,r)}function Wa(e,t,r){return At(this,e,t,r)}function Ts(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Rs(this,e)}function As(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];if(typeof e!="function")throw new TypeError("Invalid merger function: "+e);return Rs(this,t,e)}function Rs(e,t,r){for(var n=[],a=0;a<t.length;a++){var i=Qe(t[a]);i.size!==0&&n.push(i)}return n.length===0?e:e.toSeq().size===0&&!e.__ownerID&&n.length===1?e.constructor(n[0]):e.withMutations(function(o){for(var s=r?function(c,l){bn(o,l,te,function(f){return f===te?c:r(f,c,l)})}:function(c,l){o.set(l,c)},u=0;u<n.length;u++)n[u].forEach(s)})}function ws(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return Mr(e,t)}function Os(e,t){for(var r=[],n=arguments.length-2;n-- >0;)r[n]=arguments[n+2];return Mr(t,r,e)}function Ds(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return kr(e,t)}function Is(e,t){for(var r=[],n=arguments.length-2;n-- >0;)r[n]=arguments[n+2];return kr(t,r,e)}function kr(e,t,r){return Mr(e,t,ef(r))}function Mr(e,t,r){if(!Tt(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if($e(e))return typeof r=="function"&&e.mergeWith?e.mergeWith.apply(e,[r].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var n=Array.isArray(e),a=e,i=n?jt:Qe,o=n?function(u){a===e&&(a=Sn(a)),a.push(u)}:function(u,c){var l=tr.call(a,c),f=l&&r?r(a[c],u,c):u;(!l||f!==a[c])&&(a===e&&(a=Sn(a)),a[c]=f)},s=0;s<t.length;s++)i(t[s]).forEach(o);return a}function ef(e){function t(r,n,a){return Tt(r)&&Tt(n)&&tf(r,n)?Mr(r,[n],t):e?e(r,n,a):n}return t}function tf(e,t){var r=Me(e),n=Me(t);return Pe(r)===Pe(n)&&le(r)===le(n)}function Cs(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return kr(this,e)}function Us(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return kr(this,t,e)}function Ya(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return At(this,e,at(),function(n){return Mr(n,t)})}function Ka(e){for(var t=[],r=arguments.length-1;r-- >0;)t[r]=arguments[r+1];return At(this,e,at(),function(n){return kr(n,t)})}function Lr(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function Nr(){return this.__ownerID?this:this.__ensureOwner(new Ea)}function Fr(){return this.__ensureOwner()}function Ja(){return this.__altered}var Rt=function(e){function t(r){return r==null?at():Ur(r)&&!Be(r)?r:at().withMutations(function(n){var a=e(r);rt(a.size),a.forEach(function(i,o){return n.set(o,i)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];return at().withMutations(function(i){for(var o=0;o<n.length;o+=2){if(o+1>=n.length)throw new Error("Missing value for key: "+n[o]);i.set(n[o],n[o+1])}})},t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(n,a){return this._root?this._root.get(0,void 0,n,a):a},t.prototype.set=function(n,a){return ks(this,n,a)},t.prototype.remove=function(n){return ks(this,n,te)},t.prototype.deleteAll=function(n){var a=_e(n);return a.size===0?this:this.withMutations(function(i){a.forEach(function(o){return i.remove(o)})})},t.prototype.clear=function(){return this.size===0?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):at()},t.prototype.sort=function(n){return it(nr(this,n))},t.prototype.sortBy=function(n,a){return it(nr(this,a,n))},t.prototype.map=function(n,a){var i=this;return this.withMutations(function(o){o.forEach(function(s,u){o.set(u,n.call(a,s,u,i))})})},t.prototype.__iterator=function(n,a){return new rf(this,n,a)},t.prototype.__iterate=function(n,a){var i=this,o=0;return this._root&&this._root.iterate(function(s){return o++,n(s[1],s[0],i)},a),o},t.prototype.__ensureOwner=function(n){return n===this.__ownerID?this:n?Za(this.size,this._root,n,this.__hash):this.size===0?at():(this.__ownerID=n,this.__altered=!1,this)},t}(Qe);Rt.isMap=Ur;var ve=Rt.prototype;ve[ns]=!0;ve[wr]=ve.remove;ve.removeAll=ve.deleteAll;ve.setIn=za;ve.removeIn=ve.deleteIn=Ba;ve.update=qa;ve.updateIn=Wa;ve.merge=ve.concat=Ts;ve.mergeWith=As;ve.mergeDeep=Cs;ve.mergeDeepWith=Us;ve.mergeIn=Ya;ve.mergeDeepIn=Ka;ve.withMutations=Lr;ve.wasAltered=Ja;ve.asImmutable=Fr;ve["@@transducer/init"]=ve.asMutable=Nr;ve["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])};ve["@@transducer/result"]=function(e){return e.asImmutable()};var jr=function(t,r){this.ownerID=t,this.entries=r};jr.prototype.get=function(t,r,n,a){for(var i=this.entries,o=0,s=i.length;o<s;o++)if(Ie(n,i[o][0]))return i[o][1];return a};jr.prototype.update=function(t,r,n,a,i,o,s){for(var u=i===te,c=this.entries,l=0,f=c.length;l<f&&!Ie(a,c[l][0]);l++);var d=l<f;if(d?c[l][1]===i:u)return this;if(Ze(s),(u||!d)&&Ze(o),!(u&&c.length===1)){if(!d&&!u&&c.length>=cf)return nf(t,c,a,i);var p=t&&t===this.ownerID,m=p?c:lt(c);return d?u?l===f-1?m.pop():m[l]=m.pop():m[l]=[a,i]:m.push([a,i]),p?(this.entries=m,this):new jr(t,m)}};var ar=function(t,r,n){this.ownerID=t,this.bitmap=r,this.nodes=n};ar.prototype.get=function(t,r,n,a){r===void 0&&(r=je(n));var i=1<<((t===0?r:r>>>t)&Ne),o=this.bitmap;return(o&i)==0?a:this.nodes[Ls(o&i-1)].get(t+he,r,n,a)};ar.prototype.update=function(t,r,n,a,i,o,s){n===void 0&&(n=je(a));var u=(r===0?n:n>>>r)&Ne,c=1<<u,l=this.bitmap,f=(l&c)!=0;if(!f&&i===te)return this;var d=Ls(l&c-1),p=this.nodes,m=f?p[d]:void 0,_=Qa(m,t,r+he,n,a,i,o,s);if(_===m)return this;if(!f&&_&&p.length>=lf)return of(t,p,l,u,_);if(f&&!_&&p.length===2&&Ms(p[d^1]))return p[d^1];if(f&&_&&p.length===1&&Ms(_))return _;var v=t&&t===this.ownerID,A=f?_?l:l^c:l|c,T=f?_?Ns(p,d,_,v):uf(p,d,v):sf(p,d,_,v);return v?(this.bitmap=A,this.nodes=T,this):new ar(t,A,T)};var Vr=function(t,r,n){this.ownerID=t,this.count=r,this.nodes=n};Vr.prototype.get=function(t,r,n,a){r===void 0&&(r=je(n));var i=(t===0?r:r>>>t)&Ne,o=this.nodes[i];return o?o.get(t+he,r,n,a):a};Vr.prototype.update=function(t,r,n,a,i,o,s){n===void 0&&(n=je(a));var u=(r===0?n:n>>>r)&Ne,c=i===te,l=this.nodes,f=l[u];if(c&&!f)return this;var d=Qa(f,t,r+he,n,a,i,o,s);if(d===f)return this;var p=this.count;if(!f)p++;else if(!d&&(p--,p<ff))return af(t,l,p,u);var m=t&&t===this.ownerID,_=Ns(l,u,d,m);return m?(this.count=p,this.nodes=_,this):new Vr(t,p,_)};var ir=function(t,r,n){this.ownerID=t,this.keyHash=r,this.entries=n};ir.prototype.get=function(t,r,n,a){for(var i=this.entries,o=0,s=i.length;o<s;o++)if(Ie(n,i[o][0]))return i[o][1];return a};ir.prototype.update=function(t,r,n,a,i,o,s){n===void 0&&(n=je(a));var u=i===te;if(n!==this.keyHash)return u?this:(Ze(s),Ze(o),ei(this,t,r,n,[a,i]));for(var c=this.entries,l=0,f=c.length;l<f&&!Ie(a,c[l][0]);l++);var d=l<f;if(d?c[l][1]===i:u)return this;if(Ze(s),(u||!d)&&Ze(o),u&&f===2)return new mt(t,this.keyHash,c[l^1]);var p=t&&t===this.ownerID,m=p?c:lt(c);return d?u?l===f-1?m.pop():m[l]=m.pop():m[l]=[a,i]:m.push([a,i]),p?(this.entries=m,this):new ir(t,this.keyHash,m)};var mt=function(t,r,n){this.ownerID=t,this.keyHash=r,this.entry=n};mt.prototype.get=function(t,r,n,a){return Ie(n,this.entry[0])?this.entry[1]:a};mt.prototype.update=function(t,r,n,a,i,o,s){var u=i===te,c=Ie(a,this.entry[0]);if(c?i===this.entry[1]:u)return this;if(Ze(s),u){Ze(o);return}return c?t&&t===this.ownerID?(this.entry[1]=i,this):new mt(t,this.keyHash,[a,i]):(Ze(o),ei(this,t,r,je(a),[a,i]))};jr.prototype.iterate=ir.prototype.iterate=function(e,t){for(var r=this.entries,n=0,a=r.length-1;n<=a;n++)if(e(r[t?a-n:n])===!1)return!1};ar.prototype.iterate=Vr.prototype.iterate=function(e,t){for(var r=this.nodes,n=0,a=r.length-1;n<=a;n++){var i=r[t?a-n:n];if(i&&i.iterate(e,t)===!1)return!1}};mt.prototype.iterate=function(e,t){return e(this.entry)};var rf=function(e){function t(r,n,a){this._type=n,this._reverse=a,this._stack=r._root&&Ps(r._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var n=this._type,a=this._stack;a;){var i=a.node,o=a.index++,s=void 0;if(i.entry){if(o===0)return Xa(n,i.entry)}else if(i.entries){if(s=i.entries.length-1,o<=s)return Xa(n,i.entries[this._reverse?s-o:o])}else if(s=i.nodes.length-1,o<=s){var u=i.nodes[this._reverse?s-o:o];if(u){if(u.entry)return Xa(n,u.entry);a=this._stack=Ps(u,a)}continue}a=this._stack=this._stack.__prev}return Fe()},t}(re);function Xa(e,t){return ge(e,t[0],t[1])}function Ps(e,t){return{node:e,index:0,__prev:t}}function Za(e,t,r,n){var a=Object.create(ve);return a.size=e,a._root=t,a.__ownerID=r,a.__hash=n,a.__altered=!1,a}var xs;function at(){return xs||(xs=Za(0))}function ks(e,t,r){var n,a;if(e._root){var i=ya(),o=ya();if(n=Qa(e._root,e.__ownerID,0,void 0,t,r,i,o),!o.value)return e;a=e.size+(i.value?r===te?-1:1:0)}else{if(r===te)return e;a=1,n=new jr(e.__ownerID,[[t,r]])}return e.__ownerID?(e.size=a,e._root=n,e.__hash=void 0,e.__altered=!0,e):n?Za(a,n):at()}function Qa(e,t,r,n,a,i,o,s){return e?e.update(t,r,n,a,i,o,s):i===te?e:(Ze(s),Ze(o),new mt(t,n,[a,i]))}function Ms(e){return e.constructor===mt||e.constructor===ir}function ei(e,t,r,n,a){if(e.keyHash===n)return new ir(t,n,[e.entry,a]);var i=(r===0?e.keyHash:e.keyHash>>>r)&Ne,o=(r===0?n:n>>>r)&Ne,s,u=i===o?[ei(e,t,r+he,n,a)]:(s=new mt(t,n,a),i<o?[e,s]:[s,e]);return new ar(t,1<<i|1<<o,u)}function nf(e,t,r,n){e||(e=new Ea);for(var a=new mt(e,je(r),[r,n]),i=0;i<t.length;i++){var o=t[i];a=a.update(e,0,void 0,o[0],o[1])}return a}function af(e,t,r,n){for(var a=0,i=0,o=new Array(r),s=0,u=1,c=t.length;s<c;s++,u<<=1){var l=t[s];l!==void 0&&s!==n&&(a|=u,o[i++]=l)}return new ar(e,a,o)}function of(e,t,r,n,a){for(var i=0,o=new Array(Xe),s=0;r!==0;s++,r>>>=1)o[s]=r&1?t[i++]:void 0;return o[n]=a,new Vr(e,i+1,o)}function Ls(e){return e-=e>>1&1431655765,e=(e&858993459)+(e>>2&858993459),e=e+(e>>4)&252645135,e+=e>>8,e+=e>>16,e&127}function Ns(e,t,r,n){var a=n?e:lt(e);return a[t]=r,a}function sf(e,t,r,n){var a=e.length+1;if(n&&t+1===a)return e[t]=r,e;for(var i=new Array(a),o=0,s=0;s<a;s++)s===t?(i[s]=r,o=-1):i[s]=e[s+o];return i}function uf(e,t,r){var n=e.length-1;if(r&&t===n)return e.pop(),e;for(var a=new Array(n),i=0,o=0;o<n;o++)o===t&&(i=1),a[o]=e[o+i];return a}var cf=Xe/4,lf=Xe/2,ff=Xe/4,Fs="@@__IMMUTABLE_LIST__@@";function Tn(e){return Boolean(e&&e[Fs])}var or=function(e){function t(r){var n=An();if(r==null)return n;if(Tn(r))return r;var a=e(r),i=a.size;return i===0?n:(rt(i),i>0&&i<Xe?Gr(0,i,he,null,new wt(a.toArray())):n.withMutations(function(o){o.setSize(i),a.forEach(function(s,u){return o.set(u,s)})}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(n,a){if(n=St(this,n),n>=0&&n<this.size){n+=this._origin;var i=Hs(this,n);return i&&i.array[n&Ne]}return a},t.prototype.set=function(n,a){return df(this,n,a)},t.prototype.remove=function(n){return this.has(n)?n===0?this.shift():n===this.size-1?this.pop():this.splice(n,1):this},t.prototype.insert=function(n,a){return this.splice(n,0,a)},t.prototype.clear=function(){return this.size===0?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=he,this._root=this._tail=this.__hash=void 0,this.__altered=!0,this):An()},t.prototype.push=function(){var n=arguments,a=this.size;return this.withMutations(function(i){Ot(i,0,a+n.length);for(var o=0;o<n.length;o++)i.set(a+o,n[o])})},t.prototype.pop=function(){return Ot(this,0,-1)},t.prototype.unshift=function(){var n=arguments;return this.withMutations(function(a){Ot(a,-n.length);for(var i=0;i<n.length;i++)a.set(i,n[i])})},t.prototype.shift=function(){return Ot(this,1)},t.prototype.concat=function(){for(var n=arguments,a=[],i=0;i<arguments.length;i++){var o=n[i],s=e(typeof o!="string"&&ba(o)?o:[o]);s.size!==0&&a.push(s)}return a.length===0?this:this.size===0&&!this.__ownerID&&a.length===1?this.constructor(a[0]):this.withMutations(function(u){a.forEach(function(c){return c.forEach(function(l){return u.push(l)})})})},t.prototype.setSize=function(n){return Ot(this,0,n)},t.prototype.map=function(n,a){var i=this;return this.withMutations(function(o){for(var s=0;s<i.size;s++)o.set(s,n.call(a,o.get(s),s,i))})},t.prototype.slice=function(n,a){var i=this.size;return Or(n,a,i)?this:Ot(this,Xt(n,i),Dr(a,i))},t.prototype.__iterator=function(n,a){var i=a?this.size:0,o=js(this,a);return new re(function(){var s=o();return s===Hr?Fe():ge(n,a?--i:i++,s)})},t.prototype.__iterate=function(n,a){for(var i=a?this.size:0,o=js(this,a),s;(s=o())!==Hr&&n(s,a?--i:i++,this)!==!1;);return i},t.prototype.__ensureOwner=function(n){return n===this.__ownerID?this:n?Gr(this._origin,this._capacity,this._level,this._root,this._tail,n,this.__hash):this.size===0?An():(this.__ownerID=n,this.__altered=!1,this)},t}(jt);or.isList=Tn;var Oe=or.prototype;Oe[Fs]=!0;Oe[wr]=Oe.remove;Oe.merge=Oe.concat;Oe.setIn=za;Oe.deleteIn=Oe.removeIn=Ba;Oe.update=qa;Oe.updateIn=Wa;Oe.mergeIn=Ya;Oe.mergeDeepIn=Ka;Oe.withMutations=Lr;Oe.wasAltered=Ja;Oe.asImmutable=Fr;Oe["@@transducer/init"]=Oe.asMutable=Nr;Oe["@@transducer/step"]=function(e,t){return e.push(t)};Oe["@@transducer/result"]=function(e){return e.asImmutable()};var wt=function(t,r){this.array=t,this.ownerID=r};wt.prototype.removeBefore=function(t,r,n){if(n===r?1<<r:this.array.length===0)return this;var a=n>>>r&Ne;if(a>=this.array.length)return new wt([],t);var i=a===0,o;if(r>0){var s=this.array[a];if(o=s&&s.removeBefore(t,r-he,n),o===s&&i)return this}if(i&&!o)return this;var u=sr(this,t);if(!i)for(var c=0;c<a;c++)u.array[c]=void 0;return o&&(u.array[a]=o),u};wt.prototype.removeAfter=function(t,r,n){if(n===(r?1<<r:0)||this.array.length===0)return this;var a=n-1>>>r&Ne;if(a>=this.array.length)return this;var i;if(r>0){var o=this.array[a];if(i=o&&o.removeAfter(t,r-he,n),i===o&&a===this.array.length-1)return this}var s=sr(this,t);return s.array.splice(a+1),i&&(s.array[a]=i),s};var Hr={};function js(e,t){var r=e._origin,n=e._capacity,a=zr(n),i=e._tail;return o(e._root,e._level,0);function o(c,l,f){return l===0?s(c,f):u(c,l,f)}function s(c,l){var f=l===a?i&&i.array:c&&c.array,d=l>r?0:r-l,p=n-l;return p>Xe&&(p=Xe),function(){if(d===p)return Hr;var m=t?--p:d++;return f&&f[m]}}function u(c,l,f){var d,p=c&&c.array,m=f>r?0:r-f>>l,_=(n-f>>l)+1;return _>Xe&&(_=Xe),function(){for(;;){if(d){var v=d();if(v!==Hr)return v;d=null}if(m===_)return Hr;var A=t?--_:m++;d=o(p&&p[A],l-he,f+(A<<l))}}}}function Gr(e,t,r,n,a,i,o){var s=Object.create(Oe);return s.size=t-e,s._origin=e,s._capacity=t,s._level=r,s._root=n,s._tail=a,s.__ownerID=i,s.__hash=o,s.__altered=!1,s}var Vs;function An(){return Vs||(Vs=Gr(0,0,he))}function df(e,t,r){if(t=St(e,t),t!==t)return e;if(t>=e.size||t<0)return e.withMutations(function(o){t<0?Ot(o,t).set(0,r):Ot(o,0,t+1).set(t,r)});t+=e._origin;var n=e._tail,a=e._root,i=ya();return t>=zr(e._capacity)?n=ti(n,e.__ownerID,0,t,r,i):a=ti(a,e.__ownerID,e._level,t,r,i),i.value?e.__ownerID?(e._root=a,e._tail=n,e.__hash=void 0,e.__altered=!0,e):Gr(e._origin,e._capacity,e._level,a,n):e}function ti(e,t,r,n,a,i){var o=n>>>r&Ne,s=e&&o<e.array.length;if(!s&&a===void 0)return e;var u;if(r>0){var c=e&&e.array[o],l=ti(c,t,r-he,n,a,i);return l===c?e:(u=sr(e,t),u.array[o]=l,u)}return s&&e.array[o]===a?e:(i&&Ze(i),u=sr(e,t),a===void 0&&o===u.array.length-1?u.array.pop():u.array[o]=a,u)}function sr(e,t){return t&&e&&t===e.ownerID?e:new wt(e?e.array.slice():[],t)}function Hs(e,t){if(t>=zr(e._capacity))return e._tail;if(t<1<<e._level+he){for(var r=e._root,n=e._level;r&&n>0;)r=r.array[t>>>n&Ne],n-=he;return r}}function Ot(e,t,r){t!==void 0&&(t|=0),r!==void 0&&(r|=0);var n=e.__ownerID||new Ea,a=e._origin,i=e._capacity,o=a+t,s=r===void 0?i:r<0?i+r:a+r;if(o===a&&s===i)return e;if(o>=s)return e.clear();for(var u=e._level,c=e._root,l=0;o+l<0;)c=new wt(c&&c.array.length?[void 0,c]:[],n),u+=he,l+=1<<u;l&&(o+=l,a+=l,s+=l,i+=l);for(var f=zr(i),d=zr(s);d>=1<<u+he;)c=new wt(c&&c.array.length?[c]:[],n),u+=he;var p=e._tail,m=d<f?Hs(e,s-1):d>f?new wt([],n):p;if(p&&d>f&&o<i&&p.array.length){c=sr(c,n);for(var _=c,v=u;v>he;v-=he){var A=f>>>v&Ne;_=_.array[A]=sr(_.array[A],n)}_.array[f>>>he&Ne]=p}if(s<i&&(m=m&&m.removeAfter(n,0,s)),o>=d)o-=d,s-=d,u=he,c=null,m=m&&m.removeBefore(n,0,o);else if(o>a||d<f){for(l=0;c;){var T=o>>>u&Ne;if(T!==d>>>u&Ne)break;T&&(l+=(1<<u)*T),u-=he,c=c.array[T]}c&&o>a&&(c=c.removeBefore(n,u,o-l)),c&&d<f&&(c=c.removeAfter(n,u,d-l)),l&&(o-=l,s-=l)}return e.__ownerID?(e.size=s-o,e._origin=o,e._capacity=s,e._level=u,e._root=c,e._tail=m,e.__hash=void 0,e.__altered=!0,e):Gr(o,s,u,c,m)}function zr(e){return e<Xe?0:e-1>>>he<<he}var it=function(e){function t(r){return r==null?$r():pn(r)?r:$r().withMutations(function(n){var a=Qe(r);rt(a.size),a.forEach(function(i,o){return n.set(o,i)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(n,a){var i=this._map.get(n);return i!==void 0?this._list.get(i)[1]:a},t.prototype.clear=function(){return this.size===0?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this.__altered=!0,this):$r()},t.prototype.set=function(n,a){return zs(this,n,a)},t.prototype.remove=function(n){return zs(this,n,te)},t.prototype.__iterate=function(n,a){var i=this;return this._list.__iterate(function(o){return o&&n(o[1],o[0],i)},a)},t.prototype.__iterator=function(n,a){return this._list.fromEntrySeq().__iterator(n,a)},t.prototype.__ensureOwner=function(n){if(n===this.__ownerID)return this;var a=this._map.__ensureOwner(n),i=this._list.__ensureOwner(n);return n?ri(a,i,n,this.__hash):this.size===0?$r():(this.__ownerID=n,this.__altered=!1,this._map=a,this._list=i,this)},t}(Rt);it.isOrderedMap=pn;it.prototype[er]=!0;it.prototype[wr]=it.prototype.remove;function ri(e,t,r,n){var a=Object.create(it.prototype);return a.size=e?e.size:0,a._map=e,a._list=t,a.__ownerID=r,a.__hash=n,a.__altered=!1,a}var Gs;function $r(){return Gs||(Gs=ri(at(),An()))}function zs(e,t,r){var n=e._map,a=e._list,i=n.get(t),o=i!==void 0,s,u;if(r===te){if(!o)return e;a.size>=Xe&&a.size>=n.size*2?(u=a.filter(function(c,l){return c!==void 0&&i!==l}),s=u.toKeyedSeq().map(function(c){return c[0]}).flip().toMap(),e.__ownerID&&(s.__ownerID=u.__ownerID=e.__ownerID)):(s=n.remove(t),u=i===a.size-1?a.pop():a.set(i,void 0))}else if(o){if(r===a.get(i)[1])return e;s=n,u=a.set(i,[t,r])}else s=n.set(t,a.size),u=a.set(a.size,[t,r]);return e.__ownerID?(e.size=s.size,e._map=s,e._list=u,e.__hash=void 0,e.__altered=!0,e):ri(s,u)}var $s="@@__IMMUTABLE_STACK__@@";function Br(e){return Boolean(e&&e[$s])}var qr=function(e){function t(r){return r==null?Rn():Br(r)?r:Rn().pushAll(r)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(n,a){var i=this._head;for(n=St(this,n);i&&n--;)i=i.next;return i?i.value:a},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var n=arguments;if(arguments.length===0)return this;for(var a=this.size+arguments.length,i=this._head,o=arguments.length-1;o>=0;o--)i={value:n[o],next:i};return this.__ownerID?(this.size=a,this._head=i,this.__hash=void 0,this.__altered=!0,this):Wr(a,i)},t.prototype.pushAll=function(n){if(n=e(n),n.size===0)return this;if(this.size===0&&Br(n))return n;rt(n.size);var a=this.size,i=this._head;return n.__iterate(function(o){a++,i={value:o,next:i}},!0),this.__ownerID?(this.size=a,this._head=i,this.__hash=void 0,this.__altered=!0,this):Wr(a,i)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return this.size===0?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Rn()},t.prototype.slice=function(n,a){if(Or(n,a,this.size))return this;var i=Xt(n,this.size),o=Dr(a,this.size);if(o!==this.size)return e.prototype.slice.call(this,n,a);for(var s=this.size-i,u=this._head;i--;)u=u.next;return this.__ownerID?(this.size=s,this._head=u,this.__hash=void 0,this.__altered=!0,this):Wr(s,u)},t.prototype.__ensureOwner=function(n){return n===this.__ownerID?this:n?Wr(this.size,this._head,n,this.__hash):this.size===0?Rn():(this.__ownerID=n,this.__altered=!1,this)},t.prototype.__iterate=function(n,a){var i=this;if(a)return new Ht(this.toArray()).__iterate(function(u,c){return n(u,c,i)},a);for(var o=0,s=this._head;s&&n(s.value,o++,this)!==!1;)s=s.next;return o},t.prototype.__iterator=function(n,a){if(a)return new Ht(this.toArray()).__iterator(n,a);var i=0,o=this._head;return new re(function(){if(o){var s=o.value;return o=o.next,ge(n,i++,s)}return Fe()})},t}(jt);qr.isStack=Br;var Ve=qr.prototype;Ve[$s]=!0;Ve.shift=Ve.pop;Ve.unshift=Ve.push;Ve.unshiftAll=Ve.pushAll;Ve.withMutations=Lr;Ve.wasAltered=Ja;Ve.asImmutable=Fr;Ve["@@transducer/init"]=Ve.asMutable=Nr;Ve["@@transducer/step"]=function(e,t){return e.unshift(t)};Ve["@@transducer/result"]=function(e){return e.asImmutable()};function Wr(e,t,r,n){var a=Object.create(Ve);return a.size=e,a._head=t,a.__ownerID=r,a.__hash=n,a.__altered=!1,a}var Bs;function Rn(){return Bs||(Bs=Wr(0))}var qs="@@__IMMUTABLE_SET__@@";function Yr(e){return Boolean(e&&e[qs])}function wn(e){return Yr(e)&&Be(e)}function ni(e,t){if(e===t)return!0;if(!ke(t)||e.size!==void 0&&t.size!==void 0&&e.size!==t.size||e.__hash!==void 0&&t.__hash!==void 0&&e.__hash!==t.__hash||le(e)!==le(t)||Pe(e)!==Pe(t)||Be(e)!==Be(t))return!1;if(e.size===0&&t.size===0)return!0;var r=!Zt(e);if(Be(e)){var n=e.entries();return t.every(function(u,c){var l=n.next().value;return l&&Ie(l[1],u)&&(r||Ie(l[0],c))})&&n.next().done}var a=!1;if(e.size===void 0)if(t.size===void 0)typeof e.cacheResult=="function"&&e.cacheResult();else{a=!0;var i=e;e=t,t=i}var o=!0,s=t.__iterate(function(u,c){if(r?!e.has(u):a?!Ie(u,e.get(c,te)):!Ie(e.get(c,te),u))return o=!1,!1});return o&&e.size===s}function zt(e,t){var r=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(r),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(r),e}function On(e){if(!e||typeof e!="object")return e;if(!ke(e)){if(!Tt(e))return e;e=Me(e)}if(le(e)){var t={};return e.__iterate(function(n,a){t[a]=On(n)}),t}var r=[];return e.__iterate(function(n){r.push(On(n))}),r}var ur=function(e){function t(r){return r==null?Kr():Yr(r)&&!Be(r)?r:Kr().withMutations(function(n){var a=e(r);rt(a.size),a.forEach(function(i){return n.add(i)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(n){return this(Qe(n).keySeq())},t.intersect=function(n){return n=_e(n).toArray(),n.length?xe.intersect.apply(t(n.pop()),n):Kr()},t.union=function(n){return n=_e(n).toArray(),n.length?xe.union.apply(t(n.pop()),n):Kr()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(n){return this._map.has(n)},t.prototype.add=function(n){return Dn(this,this._map.set(n,n))},t.prototype.remove=function(n){return Dn(this,this._map.remove(n))},t.prototype.clear=function(){return Dn(this,this._map.clear())},t.prototype.map=function(n,a){var i=this,o=!1,s=Dn(this,this._map.mapEntries(function(u){var c=u[1],l=n.call(a,c,c,i);return l!==c&&(o=!0),[l,l]},a));return o?s:this},t.prototype.union=function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];return n=n.filter(function(i){return i.size!==0}),n.length===0?this:this.size===0&&!this.__ownerID&&n.length===1?this.constructor(n[0]):this.withMutations(function(i){for(var o=0;o<n.length;o++)e(n[o]).forEach(function(s){return i.add(s)})})},t.prototype.intersect=function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(n.length===0)return this;n=n.map(function(o){return e(o)});var i=[];return this.forEach(function(o){n.every(function(s){return s.includes(o)})||i.push(o)}),this.withMutations(function(o){i.forEach(function(s){o.remove(s)})})},t.prototype.subtract=function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(n.length===0)return this;n=n.map(function(o){return e(o)});var i=[];return this.forEach(function(o){n.some(function(s){return s.includes(o)})&&i.push(o)}),this.withMutations(function(o){i.forEach(function(s){o.remove(s)})})},t.prototype.sort=function(n){return $t(nr(this,n))},t.prototype.sortBy=function(n,a){return $t(nr(this,a,n))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(n,a){var i=this;return this._map.__iterate(function(o){return n(o,o,i)},a)},t.prototype.__iterator=function(n,a){return this._map.__iterator(n,a)},t.prototype.__ensureOwner=function(n){if(n===this.__ownerID)return this;var a=this._map.__ensureOwner(n);return n?this.__make(a,n):this.size===0?this.__empty():(this.__ownerID=n,this._map=a,this)},t}(Qt);ur.isSet=Yr;var xe=ur.prototype;xe[qs]=!0;xe[wr]=xe.remove;xe.merge=xe.concat=xe.union;xe.withMutations=Lr;xe.asImmutable=Fr;xe["@@transducer/init"]=xe.asMutable=Nr;xe["@@transducer/step"]=function(e,t){return e.add(t)};xe["@@transducer/result"]=function(e){return e.asImmutable()};xe.__empty=Kr;xe.__make=Ws;function Dn(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:t.size===0?e.__empty():e.__make(t)}function Ws(e,t){var r=Object.create(xe);return r.size=e?e.size:0,r._map=e,r.__ownerID=t,r}var Ys;function Kr(){return Ys||(Ys=Ws(at()))}var ai=function(e){function t(r,n,a){if(!(this instanceof t))return new t(r,n,a);if(Fa(a!==0,"Cannot step a Range by 0"),r=r||0,n===void 0&&(n=1/0),a=a===void 0?1:Math.abs(a),n<r&&(a=-a),this._start=r,this._end=n,this._step=a,this.size=Math.max(0,Math.ceil((n-r)/a-1)+1),this.size===0){if(ii)return ii;ii=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return this.size===0?"Range []":"Range [ "+this._start+"..."+this._end+(this._step!==1?" by "+this._step:"")+" ]"},t.prototype.get=function(n,a){return this.has(n)?this._start+St(this,n)*this._step:a},t.prototype.includes=function(n){var a=(n-this._start)/this._step;return a>=0&&a<this.size&&a===Math.floor(a)},t.prototype.slice=function(n,a){return Or(n,a,this.size)?this:(n=Xt(n,this.size),a=Dr(a,this.size),a<=n?new t(0,0):new t(this.get(n,this._end),this.get(a,this._end),this._step))},t.prototype.indexOf=function(n){var a=n-this._start;if(a%this._step==0){var i=a/this._step;if(i>=0&&i<this.size)return i}return-1},t.prototype.lastIndexOf=function(n){return this.indexOf(n)},t.prototype.__iterate=function(n,a){for(var i=this.size,o=this._step,s=a?this._start+(i-1)*o:this._start,u=0;u!==i&&n(s,a?i-++u:u++,this)!==!1;)s+=a?-o:o;return u},t.prototype.__iterator=function(n,a){var i=this.size,o=this._step,s=a?this._start+(i-1)*o:this._start,u=0;return new re(function(){if(u===i)return Fe();var c=s;return s+=a?-o:o,ge(n,a?i-++u:u++,c)})},t.prototype.equals=function(n){return n instanceof t?this._start===n._start&&this._end===n._end&&this._step===n._step:ni(this,n)},t}(tt),ii;function In(e,t,r){for(var n=Ss(t),a=0;a!==n.length;)if(e=En(e,n[a++],te),e===te)return r;return e}function Ks(e,t){return In(this,e,t)}function oi(e,t){return In(e,t,te)!==te}function pf(e){return oi(this,e)}function Js(){rt(this.size);var e={};return this.__iterate(function(t,r){e[r]=t}),e}_e.isIterable=ke;_e.isKeyed=le;_e.isIndexed=Pe;_e.isAssociative=Zt;_e.isOrdered=Be;_e.Iterator=re;zt(_e,{toArray:function(){rt(this.size);var t=new Array(this.size||0),r=le(this),n=0;return this.__iterate(function(a,i){t[n++]=r?[i,a]:a}),t},toIndexedSeq:function(){return new cs(this)},toJS:function(){return On(this)},toKeyedSeq:function(){return new _n(this,!0)},toMap:function(){return Rt(this.toKeyedSeq())},toObject:Js,toOrderedMap:function(){return it(this.toKeyedSeq())},toOrderedSet:function(){return $t(le(this)?this.valueSeq():this)},toSet:function(){return ur(le(this)?this.valueSeq():this)},toSetSeq:function(){return new ls(this)},toSeq:function(){return Pe(this)?this.toIndexedSeq():le(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return qr(le(this)?this.valueSeq():this)},toList:function(){return or(le(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(t,r){return this.size===0?t+r:t+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+r},concat:function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];return fe(this,Jl(this,t))},includes:function(t){return this.some(function(r){return Ie(r,t)})},entries:function(){return this.__iterator(et)},every:function(t,r){rt(this.size);var n=!0;return this.__iterate(function(a,i,o){if(!t.call(r,a,i,o))return n=!1,!1}),n},filter:function(t,r){return fe(this,ms(this,t,r,!0))},find:function(t,r,n){var a=this.findEntry(t,r);return a?a[1]:n},forEach:function(t,r){return rt(this.size),this.__iterate(r?t.bind(r):t)},join:function(t){rt(this.size),t=t!==void 0?""+t:",";var r="",n=!0;return this.__iterate(function(a){n?n=!1:r+=t,r+=a!=null?a.toString():""}),r},keys:function(){return this.__iterator(Cr)},map:function(t,r){return fe(this,ps(this,t,r))},reduce:function(t,r,n){return Xs(this,t,r,n,arguments.length<2,!1)},reduceRight:function(t,r,n){return Xs(this,t,r,n,arguments.length<2,!0)},reverse:function(){return fe(this,Ma(this,!0))},slice:function(t,r){return fe(this,La(this,t,r,!0))},some:function(t,r){return!this.every(Cn(t),r)},sort:function(t){return fe(this,nr(this,t))},values:function(){return this.__iterator(nt)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return this.size!==void 0?this.size===0:!this.some(function(){return!0})},count:function(t,r){return Jt(t?this.toSeq().filter(t,r):this)},countBy:function(t,r){return Wl(this,t,r)},equals:function(t){return ni(this,t)},entrySeq:function(){var t=this;if(t._cache)return new Ht(t._cache);var r=t.toSeq().map(hf).toIndexedSeq();return r.fromEntrySeq=function(){return t.toSeq()},r},filterNot:function(t,r){return this.filter(Cn(t),r)},findEntry:function(t,r,n){var a=n;return this.__iterate(function(i,o,s){if(t.call(r,i,o,s))return a=[o,i],!1}),a},findKey:function(t,r){var n=this.findEntry(t,r);return n&&n[0]},findLast:function(t,r,n){return this.toKeyedSeq().reverse().find(t,r,n)},findLastEntry:function(t,r,n){return this.toKeyedSeq().reverse().findEntry(t,r,n)},findLastKey:function(t,r){return this.toKeyedSeq().reverse().findKey(t,r)},first:function(t){return this.find(Bo,null,t)},flatMap:function(t,r){return fe(this,Xl(this,t,r))},flatten:function(t){return fe(this,_s(this,t,!0))},fromEntrySeq:function(){return new fs(this)},get:function(t,r){return this.find(function(n,a){return Ie(a,t)},void 0,r)},getIn:Ks,groupBy:function(t,r){return Yl(this,t,r)},has:function(t){return this.get(t,te)!==te},hasIn:pf,isSubset:function(t){return t=typeof t.includes=="function"?t:_e(t),this.every(function(r){return t.includes(r)})},isSuperset:function(t){return t=typeof t.isSubset=="function"?t:_e(t),t.isSubset(this)},keyOf:function(t){return this.findKey(function(r){return Ie(r,t)})},keySeq:function(){return this.toSeq().map(mf).toIndexedSeq()},last:function(t){return this.toSeq().reverse().first(t)},lastKeyOf:function(t){return this.toKeyedSeq().reverse().keyOf(t)},max:function(t){return gn(this,t)},maxBy:function(t,r){return gn(this,r,t)},min:function(t){return gn(this,t?Zs(t):eu)},minBy:function(t,r){return gn(this,r?Zs(r):eu,t)},rest:function(){return this.slice(1)},skip:function(t){return t===0?this:this.slice(Math.max(0,t))},skipLast:function(t){return t===0?this:this.slice(0,-Math.max(0,t))},skipWhile:function(t,r){return fe(this,hs(this,t,r,!0))},skipUntil:function(t,r){return this.skipWhile(Cn(t),r)},sortBy:function(t,r){return fe(this,nr(this,r,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return this.slice(-Math.max(0,t))},takeWhile:function(t,r){return fe(this,Kl(this,t,r))},takeUntil:function(t,r){return this.takeWhile(Cn(t),r)},update:function(t){return t(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=_f(this))}});var Le=_e.prototype;Le[Yo]=!0;Le[fn]=Le.values;Le.toJSON=Le.toArray;Le.__toStringMapper=xr;Le.inspect=Le.toSource=function(){return this.toString()};Le.chain=Le.flatMap;Le.contains=Le.includes;zt(Qe,{flip:function(){return fe(this,ds(this))},mapEntries:function(t,r){var n=this,a=0;return fe(this,this.toSeq().map(function(i,o){return t.call(r,[o,i],a++,n)}).fromEntrySeq())},mapKeys:function(t,r){var n=this;return fe(this,this.toSeq().flip().map(function(a,i){return t.call(r,a,i,n)}).flip())}});var Jr=Qe.prototype;Jr[Ko]=!0;Jr[fn]=Le.entries;Jr.toJSON=Js;Jr.__toStringMapper=function(e,t){return xr(t)+": "+xr(e)};zt(jt,{toKeyedSeq:function(){return new _n(this,!1)},filter:function(t,r){return fe(this,ms(this,t,r,!1))},findIndex:function(t,r){var n=this.findEntry(t,r);return n?n[0]:-1},indexOf:function(t){var r=this.keyOf(t);return r===void 0?-1:r},lastIndexOf:function(t){var r=this.lastKeyOf(t);return r===void 0?-1:r},reverse:function(){return fe(this,Ma(this,!1))},slice:function(t,r){return fe(this,La(this,t,r,!1))},splice:function(t,r){var n=arguments.length;if(r=Math.max(r||0,0),n===0||n===2&&!r)return this;t=Xt(t,t<0?this.count():this.size);var a=this.slice(0,t);return fe(this,n===1?a:a.concat(lt(arguments,2),this.slice(t+r)))},findLastIndex:function(t,r){var n=this.findLastEntry(t,r);return n?n[0]:-1},first:function(t){return this.get(0,t)},flatten:function(t){return fe(this,_s(this,t,!1))},get:function(t,r){return t=St(this,t),t<0||this.size===1/0||this.size!==void 0&&t>this.size?r:this.find(function(n,a){return a===t},void 0,r)},has:function(t){return t=St(this,t),t>=0&&(this.size!==void 0?this.size===1/0||t<this.size:this.indexOf(t)!==-1)},interpose:function(t){return fe(this,Zl(this,t))},interleave:function(){var t=[this].concat(lt(arguments)),r=vn(this.toSeq(),tt.of,t),n=r.flatten(!0);return r.size&&(n.size=r.size*t.length),fe(this,n)},keySeq:function(){return ai(0,this.size)},last:function(t){return this.get(-1,t)},skipWhile:function(t,r){return fe(this,hs(this,t,r,!1))},zip:function(){var t=[this].concat(lt(arguments));return fe(this,vn(this,Qs,t))},zipAll:function(){var t=[this].concat(lt(arguments));return fe(this,vn(this,Qs,t,!0))},zipWith:function(t){var r=lt(arguments);return r[0]=this,fe(this,vn(this,t,r))}});var cr=jt.prototype;cr[Jo]=!0;cr[er]=!0;zt(Qt,{get:function(t,r){return this.has(t)?t:r},includes:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}});var lr=Qt.prototype;lr.has=Le.includes;lr.contains=lr.includes;lr.keys=lr.values;zt(bt,Jr);zt(tt,cr);zt(rr,lr);function Xs(e,t,r,n,a,i){return rt(e.size),e.__iterate(function(o,s,u){a?(a=!1,r=o):r=t.call(n,r,o,s,u)},i),r}function mf(e,t){return t}function hf(e,t){return[t,e]}function Cn(e){return function(){return!e.apply(this,arguments)}}function Zs(e){return function(){return-e.apply(this,arguments)}}function Qs(){return lt(arguments)}function eu(e,t){return e<t?1:e>t?-1:0}function _f(e){if(e.size===1/0)return 0;var t=Be(e),r=le(e),n=t?1:0,a=e.__iterate(r?t?function(i,o){n=31*n+tu(je(i),je(o))|0}:function(i,o){n=n+tu(je(i),je(o))|0}:t?function(i){n=31*n+je(i)|0}:function(i){n=n+je(i)|0});return gf(a,n)}function gf(e,t){return t=Pr(t,3432918353),t=Pr(t<<15|t>>>-15,461845907),t=Pr(t<<13|t>>>-13,5),t=(t+3864292196|0)^e,t=Pr(t^t>>>16,2246822507),t=Pr(t^t>>>13,3266489909),t=hn(t^t>>>16),t}function tu(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}var $t=function(e){function t(r){return r==null?si():wn(r)?r:si().withMutations(function(n){var a=Qt(r);rt(a.size),a.forEach(function(i){return n.add(i)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(n){return this(Qe(n).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(ur);$t.isOrderedSet=wn;var Bt=$t.prototype;Bt[er]=!0;Bt.zip=cr.zip;Bt.zipWith=cr.zipWith;Bt.zipAll=cr.zipAll;Bt.__empty=si;Bt.__make=ru;function ru(e,t){var r=Object.create(Bt);return r.size=e?e.size:0,r._map=e,r.__ownerID=t,r}var nu;function si(){return nu||(nu=ru($r()))}function vf(e){if(Vt(e))throw new Error("Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.");if($e(e))throw new Error("Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.");if(e===null||typeof e!="object")throw new Error("Can not call `Record` with a non-object as default values. Use a plain javascript object instead.")}var De=function(t,r){var n;vf(t);var a=function(s){var u=this;if(s instanceof a)return s;if(!(this instanceof a))return new a(s);if(!n){n=!0;var c=Object.keys(t),l=i._indices={};i._name=r,i._keys=c,i._defaultValues=t;for(var f=0;f<c.length;f++){var d=c[f];l[d]=f,i[d]?typeof console=="object"&&console.warn&&console.warn("Cannot define "+ci(this)+' with property "'+d+'" since that property name is part of the Record API.'):yf(i,d)}}return this.__ownerID=void 0,this._values=or().withMutations(function(p){p.setSize(u._keys.length),Qe(s).forEach(function(m,_){p.set(u._indices[_],m===u._defaultValues[_]?void 0:m)})}),this},i=a.prototype=Object.create(de);return i.constructor=a,r&&(a.displayName=r),a};De.prototype.toString=function(){for(var t=ci(this)+" { ",r=this._keys,n,a=0,i=r.length;a!==i;a++)n=r[a],t+=(a?", ":"")+n+": "+xr(this.get(n));return t+" }"};De.prototype.equals=function(t){return this===t||t&&fr(this).equals(fr(t))};De.prototype.hashCode=function(){return fr(this).hashCode()};De.prototype.has=function(t){return this._indices.hasOwnProperty(t)};De.prototype.get=function(t,r){if(!this.has(t))return r;var n=this._indices[t],a=this._values.get(n);return a===void 0?this._defaultValues[t]:a};De.prototype.set=function(t,r){if(this.has(t)){var n=this._values.set(this._indices[t],r===this._defaultValues[t]?void 0:r);if(n!==this._values&&!this.__ownerID)return ui(this,n)}return this};De.prototype.remove=function(t){return this.set(t)};De.prototype.clear=function(){var t=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:ui(this,t)};De.prototype.wasAltered=function(){return this._values.wasAltered()};De.prototype.toSeq=function(){return fr(this)};De.prototype.toJS=function(){return On(this)};De.prototype.entries=function(){return this.__iterator(et)};De.prototype.__iterator=function(t,r){return fr(this).__iterator(t,r)};De.prototype.__iterate=function(t,r){return fr(this).__iterate(t,r)};De.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var r=this._values.__ensureOwner(t);return t?ui(this,r,t):(this.__ownerID=t,this._values=r,this)};De.isRecord=Vt;De.getDescriptiveName=ci;var de=De.prototype;de[Zo]=!0;de[wr]=de.remove;de.deleteIn=de.removeIn=Ba;de.getIn=Ks;de.hasIn=Le.hasIn;de.merge=Ts;de.mergeWith=As;de.mergeIn=Ya;de.mergeDeep=Cs;de.mergeDeepWith=Us;de.mergeDeepIn=Ka;de.setIn=za;de.update=qa;de.updateIn=Wa;de.withMutations=Lr;de.asMutable=Nr;de.asImmutable=Fr;de[fn]=de.entries;de.toJSON=de.toObject=Le.toObject;de.inspect=de.toSource=function(){return this.toString()};function ui(e,t,r){var n=Object.create(Object.getPrototypeOf(e));return n._values=t,n.__ownerID=r,n}function ci(e){return e.constructor.displayName||e.constructor.name||"Record"}function fr(e){return Oa(e._keys.map(function(t){return[t,e.get(t)]}))}function yf(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(r){Fa(this.__ownerID,"Cannot set on an immutable record."),this.set(t,r)}})}catch(r){}}var au=function(e){function t(r,n){if(!(this instanceof t))return new t(r,n);if(this._value=r,this.size=n===void 0?1/0:Math.max(0,n),this.size===0){if(li)return li;li=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return this.size===0?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},t.prototype.get=function(n,a){return this.has(n)?this._value:a},t.prototype.includes=function(n){return Ie(this._value,n)},t.prototype.slice=function(n,a){var i=this.size;return Or(n,a,i)?this:new t(this._value,Dr(a,i)-Xt(n,i))},t.prototype.reverse=function(){return this},t.prototype.indexOf=function(n){return Ie(this._value,n)?0:-1},t.prototype.lastIndexOf=function(n){return Ie(this._value,n)?this.size:-1},t.prototype.__iterate=function(n,a){for(var i=this.size,o=0;o!==i&&n(this._value,a?i-++o:o++,this)!==!1;);return o},t.prototype.__iterator=function(n,a){var i=this,o=this.size,s=0;return new re(function(){return s===o?Fe():ge(n,a?o-++s:s++,i._value)})},t.prototype.equals=function(n){return n instanceof t?Ie(this._value,n._value):ni(n)},t}(tt),li;function iu(e,t){return ou([],t||Ef,e,"",t&&t.length>2?[]:void 0,{"":e})}function ou(e,t,r,n,a,i){if(typeof r!="string"&&!$e(r)&&(Aa(r)||ba(r)||yn(r))){if(~e.indexOf(r))throw new TypeError("Cannot convert circular structure to Immutable");e.push(r),a&&n!==""&&a.push(n);var o=t.call(i,n,Me(r).map(function(s,u){return ou(e,t,s,u,a,r)}),a&&a.slice());return e.pop(),a&&a.pop(),o}return r}function Ef(e,t){return Pe(t)?t.toList():le(t)?t.toMap():t.toSet()}var su="4.0.0",Sf={version:su,Collection:_e,Iterable:_e,Seq:Me,Map:Rt,OrderedMap:it,List:or,Stack:qr,Set:ur,OrderedSet:$t,Record:De,Range:ai,Repeat:au,is:Ie,fromJS:iu,hash:je,isImmutable:$e,isCollection:ke,isKeyed:le,isIndexed:Pe,isAssociative:Zt,isOrdered:Be,isValueObject:mn,isPlainObject:yn,isSeq:Ir,isList:Tn,isMap:Ur,isOrderedMap:pn,isStack:Br,isSet:Yr,isOrderedSet:wn,isRecord:Vt,get:En,getIn:In,has:ja,hasIn:oi,merge:ws,mergeDeep:Ds,mergeWith:Os,mergeDeepWith:Is,remove:Va,removeIn:$a,set:Ha,setIn:Ga,update:bn,updateIn:At},bf=_e,uu=Sf,Tf=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:uu,Collection:_e,Iterable:bf,List:or,Map:Rt,OrderedMap:it,OrderedSet:$t,Range:ai,Record:De,Repeat:au,Seq:Me,Set:ur,Stack:qr,fromJS:iu,get:En,getIn:In,has:ja,hasIn:oi,hash:je,is:Ie,isAssociative:Zt,isCollection:ke,isImmutable:$e,isIndexed:Pe,isKeyed:le,isList:Tn,isMap:Ur,isOrdered:Be,isOrderedMap:pn,isOrderedSet:wn,isPlainObject:yn,isRecord:Vt,isSeq:Ir,isSet:Yr,isStack:Br,isValueObject:mn,merge:ws,mergeDeep:Ds,mergeDeepWith:Is,mergeWith:Os,remove:Va,removeIn:$a,set:Ha,setIn:Ga,update:bn,updateIn:At,version:su}),Af=ko(Ul);Af.compose;/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var fi=function(e,t){return fi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var a in n)n.hasOwnProperty(a)&&(r[a]=n[a])},fi(e,t)};function Rf(e,t){fi(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}var wf=Symbol("postpone"),we=Symbol("none");function X(e){var t=pu(e).toMethods(),r=X[cu];return r&&t.attach(r),t.self}function ht(e){return Of(e)}function Of(e){var t=typeof e=="object"&&e!==null?e[di]:void 0;if(t)if(t.isMounted){var r=g.useState({}),n=r[1];return _i(t.state,t.path,function(){return n({})},t).self}else{for(var a=g.useState({state:t.state}),i=a[0],o=a[1],s=_i(i.state,_t,function(){return o({state:i.state})},i.state).self,u=0;u<t.path.length;u+=1)s=s.nested(t.path[u]);return s}else{var c=g.useState(function(){return{state:pu(e)}}),l=c[0],f=c[1],d=_i(l.state,_t,function(){return f({state:l.state})},l.state);if(Df){var p=g.useRef(!1);p.current=!1,g.useEffect(function(){return p.current=!0,function(){p.current&&l.state.destroy()}})}else g.useEffect(function(){return function(){return l.state.destroy()}},[]);var m=ht[cu];return m&&d.attach(m),d.self}}function Z(){return{id:lu}}var cu=Symbol("DevTools"),Df=typeof process=="object"&&typeof{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}=="object"&&!1,di=Symbol("self"),pe;(function(e){e[e.InitStateToValueFromState=101]="InitStateToValueFromState",e[e.SetStateToValueFromState=102]="SetStateToValueFromState",e[e.GetStateWhenPromised=103]="GetStateWhenPromised",e[e.SetStateWhenPromised=104]="SetStateWhenPromised",e[e.SetStateNestedToPromised=105]="SetStateNestedToPromised",e[e.SetStateWhenDestroyed=106]="SetStateWhenDestroyed",e[e.ToJson_Value=108]="ToJson_Value",e[e.ToJson_State=109]="ToJson_State",e[e.GetUnknownPlugin=120]="GetUnknownPlugin",e[e.SetProperty_State=201]="SetProperty_State",e[e.SetProperty_Value=202]="SetProperty_Value",e[e.SetPrototypeOf_State=203]="SetPrototypeOf_State",e[e.SetPrototypeOf_Value=204]="SetPrototypeOf_Value",e[e.PreventExtensions_State=205]="PreventExtensions_State",e[e.PreventExtensions_Value=206]="PreventExtensions_Value",e[e.DefineProperty_State=207]="DefineProperty_State",e[e.DefineProperty_Value=208]="DefineProperty_Value",e[e.DeleteProperty_State=209]="DeleteProperty_State",e[e.DeleteProperty_Value=210]="DeleteProperty_Value",e[e.Construct_State=211]="Construct_State",e[e.Construct_Value=212]="Construct_Value",e[e.Apply_State=213]="Apply_State",e[e.Apply_Value=214]="Apply_Value"})(pe||(pe={}));var qe=function(e){Rf(t,e);function t(r,n,a){return e.call(this,"Error: HOOKSTATE-"+n+" [path: /"+r.join("/")+(a?", details: "+a:"")+"]. "+("See https://hookstate.js.org/docs/exceptions#hookstate-"+n))||this}return t}(Error);function If(){try{var e=new Proxy({},{});return!1}catch(t){return!0}}var pi=If(),lu=Symbol("Downgraded"),Un=Symbol("ProxyMarker"),_t=[],Xr=-1,Cf=function(){function e(t){this._value=t,this._edition=0,this._subscribers=new Set,this._setSubscribers=new Set,this._destroySubscribers=new Set,this._batchStartSubscribers=new Set,this._batchFinishSubscribers=new Set,this._plugins=new Map,this._batches=0,typeof t=="object"&&Promise.resolve(t)===t?(this._promised=this.createPromised(t),this._value=we):t===we&&(this._promised=this.createPromised(void 0))}return e.prototype.createPromised=function(t){var r=this,n=new Uf(t?Promise.resolve(t):void 0,function(a){r.promised===n&&r.edition!==Xr&&(r._promised=void 0,r.set(_t,a,void 0),r.update([_t]))},function(){r.promised===n&&r.edition!==Xr&&(r._edition+=1,r.update([_t]))},function(){if(r._batchesPendingActions&&r._value!==we&&r.edition!==Xr){var a=r._batchesPendingActions;r._batchesPendingActions=void 0,a.forEach(function(i){return i()})}});return n},Object.defineProperty(e.prototype,"edition",{get:function(){return this._edition},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"promised",{get:function(){return this._promised},enumerable:!1,configurable:!0}),e.prototype.get=function(t){var r=this._value;return r===we||t.forEach(function(n){r=r[n]}),r},e.prototype.set=function(t,r,n){if(this._edition<0)throw new qe(t,pe.SetStateWhenDestroyed);if(t.length===0){var a={path:t,state:r,value:r,previous:this._value,merged:n};if(r===we)this._promised=this.createPromised(void 0),delete a.value,delete a.state;else if(typeof r=="object"&&Promise.resolve(r)===r)this._promised=this.createPromised(r),r=we,delete a.value,delete a.state;else if(this._promised&&!this._promised.resolver&&!this._promised.fullfilled)throw new qe(t,pe.SetStateWhenPromised);var i=this._value;return i===we&&delete a.previous,this._value=r,this.afterSet(a),i===we&&this._value!==we&&this.promised&&this.promised.resolver&&this.promised.resolver(this._value),t}if(typeof r=="object"&&Promise.resolve(r)===r)throw new qe(t,pe.SetStateNestedToPromised);for(var o=this._value,s=0;s<t.length-1;s+=1)o=o[t[s]];var u=t[t.length-1];if(u in o)if(r!==we){var i=o[u];return o[u]=r,this.afterSet({path:t,state:this._value,value:r,previous:i,merged:n}),t}else{var i=o[u];return Array.isArray(o)&&typeof u=="number"?o.splice(u,1):delete o[u],this.afterSet({path:t,state:this._value,previous:i,merged:n}),t.slice(0,-1)}return r!==we?(o[u]=r,this.afterSet({path:t,state:this._value,value:r,merged:n}),t.slice(0,-1)):t},e.prototype.update=function(t){if(this._batches){this._batchesPendingPaths=this._batchesPendingPaths||[],this._batchesPendingPaths=this._batchesPendingPaths.concat(t);return}var r=[];this._subscribers.forEach(function(n){return n.onSet(t,r)}),r.forEach(function(n){return n()})},e.prototype.afterSet=function(t){this._edition!==Xr&&(this._edition+=1,this._setSubscribers.forEach(function(r){return r(t)}))},e.prototype.startBatch=function(t,r){this._batches+=1;var n={path:t};r&&"context"in r&&(n.context=r.context),this._value!==we&&(n.state=this._value),this._batchStartSubscribers.forEach(function(a){return a(n)})},e.prototype.finishBatch=function(t,r){var n={path:t};if(r&&"context"in r&&(n.context=r.context),this._value!==we&&(n.state=this._value),this._batchFinishSubscribers.forEach(function(i){return i(n)}),this._batches-=1,this._batches===0&&this._batchesPendingPaths){var a=this._batchesPendingPaths;this._batchesPendingPaths=void 0,this.update(a)}},e.prototype.postponeBatch=function(t){this._batchesPendingActions=this._batchesPendingActions||[],this._batchesPendingActions.push(t)},e.prototype.getPlugin=function(t){return this._plugins.get(t)},e.prototype.register=function(t){var r=this._plugins.get(t.id);if(!r){var n=t.init?t.init(this.toMethods().self):{};this._plugins.set(t.id,n),n.onSet&&this._setSubscribers.add(function(a){return n.onSet(a)}),n.onDestroy&&this._destroySubscribers.add(function(a){return n.onDestroy(a)}),n.onBatchStart&&this._batchStartSubscribers.add(function(a){return n.onBatchStart(a)}),n.onBatchFinish&&this._batchFinishSubscribers.add(function(a){return n.onBatchFinish(a)})}},e.prototype.toMethods=function(){return new du(this,_t,this.get(_t),this.edition,fu)},e.prototype.subscribe=function(t){this._subscribers.add(t)},e.prototype.unsubscribe=function(t){this._subscribers.delete(t)},e.prototype.destroy=function(){var t=this;this._destroySubscribers.forEach(function(r){return r(t._value!==we?{state:t._value}:{})}),this._edition=Xr},e.prototype.toJSON=function(){throw new qe(_t,pe.ToJson_Value)},e}(),Uf=function(){function e(t,r,n,a){var i=this;this.promise=t,t||(t=new Promise(function(o){i.resolver=o})),this.promise=t.then(function(o){i.fullfilled=!0,i.resolver||r(o)}).catch(function(o){i.fullfilled=!0,i.error=o,n()}).then(function(){return a()})}return e}(),Dt=Symbol("ValueUnusedMarker");function fu(){}var mi=Symbol("UnmountedMarker");fu[mi]=!0;var du=function(){function e(t,r,n,a,i){this.state=t,this.path=r,this.valueSource=n,this.valueEdition=a,this.onSetUsed=i,this.valueCache=Dt}return e.prototype.getUntracked=function(t){if(this.valueEdition!==this.state.edition&&(this.valueSource=this.state.get(this.path),this.valueEdition=this.state.edition,this.isMounted?this.valueCache!==Dt&&(this.valueCache=Dt,this.get(!0)):(this.valueCache=Dt,delete this.childrenCache,delete this.selfCache)),this.valueSource===we&&!t)throw this.state.promised&&this.state.promised.error?this.state.promised.error:new qe(this.path,pe.GetStateWhenPromised);return this.valueSource},e.prototype.get=function(t){var r=this.getUntracked(t);return this.valueCache===Dt&&(this.isDowngraded?this.valueCache=r:Array.isArray(r)?this.valueCache=this.valueArrayImpl(r):typeof r=="object"&&r!==null?this.valueCache=this.valueObjectImpl(r):this.valueCache=r),this.valueCache},Object.defineProperty(e.prototype,"value",{get:function(){return this.get()},enumerable:!1,configurable:!0}),e.prototype.setUntracked=function(t,r){if(typeof t=="function"&&(t=t(this.getUntracked())),typeof t=="object"&&t!==null&&t[Un])throw new qe(this.path,pe.SetStateToValueFromState);return[this.state.set(this.path,t,r)]},e.prototype.set=function(t){this.state.update(this.setUntracked(t))},e.prototype.mergeUntracked=function(t){var r=this.getUntracked();typeof t=="function"&&(t=t(r));var n,a=!1;if(Array.isArray(r)){if(Array.isArray(t))return this.setUntracked(r.concat(t),t);var i=[];Object.keys(t).sort().forEach(function(s){var u=Number(s),c=t[u];c===we?(a=!0,i.push(u)):(a=a||!(u in r),r[u]=c)}),i.reverse().forEach(function(s){r.splice(s,1)}),n=this.setUntracked(r,t)}else if(typeof r=="object"&&r!==null)Object.keys(t).forEach(function(s){var u=t[s];u===we?(a=!0,delete r[s]):(a=a||!(s in r),r[s]=u)}),n=this.setUntracked(r,t);else return typeof r=="string"?this.setUntracked(r+String(t),t):this.setUntracked(t);if(n.length!==1||n[0]!==this.path||a)return n;var o=n[0];return Object.keys(t).map(function(s){return o.slice().concat(s)})},e.prototype.merge=function(t){this.state.update(this.mergeUntracked(t))},e.prototype.nested=function(t){return this.child(t).self},e.prototype.rerender=function(t){this.state.update(t)},e.prototype.destroy=function(){this.state.destroy()},e.prototype.subscribe=function(t){this.subscribers===void 0&&(this.subscribers=new Set),this.subscribers.add(t)},e.prototype.unsubscribe=function(t){this.subscribers.delete(t)},Object.defineProperty(e.prototype,"isMounted",{get:function(){return!this.onSetUsed[mi]},enumerable:!1,configurable:!0}),e.prototype.onUnmount=function(){this.onSetUsed[mi]=!0},e.prototype.onSet=function(t,r){var n=this,a=function(){if(n.isDowngraded&&n.valueCache!==Dt)return r.push(n.onSetUsed),!0;for(var o=0,s=t;o<s.length;o++){var u=s[o],c=u[n.path.length];if(c===void 0){if(n.valueCache!==Dt)return r.push(n.onSetUsed),!0}else{var l=n.childrenCache&&n.childrenCache[c];if(l&&l.onSet(t,r))return!0}}return!1},i=a();return!i&&this.subscribers!==void 0&&this.subscribers.forEach(function(o){o.onSet(t,r)}),i},Object.defineProperty(e.prototype,"keys",{get:function(){var t=this.get();if(Array.isArray(t))return Object.keys(t).map(function(r){return Number(r)}).filter(function(r){return Number.isInteger(r)});if(typeof t=="object"&&t!==null)return Object.keys(t)},enumerable:!1,configurable:!0}),e.prototype.child=function(t){if(this.isMounted){this.childrenCache=this.childrenCache||{};var r=this.childrenCache[t];if(r)return r}var n=new e(this.state,this.path.slice().concat(t),this.valueSource[t],this.valueEdition,this.onSetUsed);return this.isDowngraded&&(n.isDowngraded=!0),this.childrenCache&&(this.childrenCache[t]=n),n},e.prototype.valueArrayImpl=function(t){var r=this;return pi?(this.isDowngraded=!0,t):hi(this.path,t,function(){return t},function(n,a){if(a==="length")return n.length;if(a in Array.prototype)return Array.prototype[a];if(a===Un)return r;if(typeof a=="symbol")return n[a];var i=Number(a);if(!!Number.isInteger(i))return r.child(i).get()},function(n,a,i){if(typeof a=="symbol")return n[a]=i,!0;throw new qe(r.path,pe.SetProperty_Value)},!0)},e.prototype.valueObjectImpl=function(t){var r=this;return pi?(this.isDowngraded=!0,t):hi(this.path,t,function(){return t},function(n,a){return a===Un?r:typeof a=="symbol"?n[a]:r.child(a).get()},function(n,a,i){if(typeof a=="symbol")return n[a]=i,!0;throw new qe(r.path,pe.SetProperty_Value)},!0)},Object.defineProperty(e.prototype,"self",{get:function(){var t=this;if(this.selfCache)return this.selfCache;var r=function(a,i){if(i===di)return t;if(typeof i!="symbol"){if(i==="toJSON")throw new qe(t.path,pe.ToJson_State);var o=function(s){var u=t.isDowngraded,c=t.get();if(t.isDowngraded=u,!((typeof c!="object"||c===null)&&c!==we)){if(Array.isArray(c)){if(s==="length")return c.length;if(s in Array.prototype)return Array.prototype[s];var l=Number(s);return Number.isInteger(l)?t.nested(l):void 0}return t.nested(s.toString())}};switch(i){case"path":return t.path;case"keys":return t.keys;case"value":return t.value;case"ornull":return t.ornull;case"promised":return t.promised;case"error":return t.error;case"get":return function(){return t.get()};case"set":return function(s){return t.set(s)};case"merge":return function(s){return t.merge(s)};case"nested":return function(s){return o(s)};case"batch":return function(s,u){return t.batch(s,u)};case"attach":return function(s){return t.attach(s)};case"destroy":return function(){return t.destroy()};default:return o(i)}}};if(pi){var n=Array.isArray(this.valueSource)?[]:{};return[di,"toJSON","path","keys","value","ornull","promised","error","get","set","merge","nested","batch","attach","destroy"].forEach(function(a){Object.defineProperty(n,a,{get:function(){return r(n,a)}})}),typeof this.valueSource=="object"&&this.valueSource!==null&&Object.keys(this.valueSource).forEach(function(a){Object.defineProperty(n,a,{enumerable:!0,get:function(){return r(n,a)}})}),this.selfCache=n,this.selfCache}return this.selfCache=hi(this.path,this.valueSource,function(){return t.get(),t.valueSource},r,function(a,i,o){throw new qe(t.path,pe.SetProperty_State)},!1),this.selfCache},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"promised",{get:function(){var t=this.get(!0);return!!(t===we&&this.state.promised&&!this.state.promised.fullfilled)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){var t=this.get(!0);if(t===we){if(this.state.promised&&this.state.promised.fullfilled)return this.state.promised.error;this.get()}},enumerable:!1,configurable:!0}),e.prototype.batch=function(t,r){var n=this,a={context:r};try{this.state.startBatch(this.path,a);var i=t(this.self);return i===wf&&this.state.postponeBatch(function(){return n.batch(t,r)}),i}finally{this.state.finishBatch(this.path,a)}},Object.defineProperty(e.prototype,"ornull",{get:function(){var t=this.get();return t==null?t:this.self},enumerable:!1,configurable:!0}),e.prototype.attach=function(t){if(typeof t=="function"){var r=t();if(r.id===lu){if(this.isDowngraded=!0,this.valueCache!==Dt){var n=this.getUntracked(!0);this.valueCache=n}return this.self}return this.state.register(r),this.self}else return[this.state.getPlugin(t)||new qe(this.path,pe.GetUnknownPlugin,t.toString()),this]},e}();function hi(e,t,r,n,a,i){var o=function(s){throw new qe(e,s)};return(typeof t!="object"||t===null)&&(t={}),new Proxy(t,{getPrototypeOf:function(s){var u=r();return u==null?null:Object.getPrototypeOf(u)},setPrototypeOf:function(s,u){return o(i?pe.SetPrototypeOf_State:pe.SetPrototypeOf_Value)},isExtensible:function(s){return!0},preventExtensions:function(s){return o(i?pe.PreventExtensions_State:pe.PreventExtensions_Value)},getOwnPropertyDescriptor:function(s,u){var c=r();if(c!=null){var l=Object.getOwnPropertyDescriptor(c,u);return l&&Array.isArray(c)&&u in Array.prototype?l:l&&{configurable:!0,enumerable:l.enumerable,get:function(){return n(c,u)},set:void 0}}},has:function(s,u){if(typeof u=="symbol")return!1;var c=r();return typeof c=="object"&&c!==null?u in c:!1},get:n,set:a,deleteProperty:function(s,u){return o(i?pe.DeleteProperty_State:pe.DeleteProperty_Value)},defineProperty:function(s,u,c){return o(i?pe.DefineProperty_State:pe.DefineProperty_Value)},ownKeys:function(s){var u=r();return Array.isArray(u)?Object.keys(u).concat("length"):u==null?[]:Object.keys(u)},apply:function(s,u,c){return o(i?pe.Apply_State:pe.Apply_Value)},construct:function(s,u,c){return o(i?pe.Construct_State:pe.Construct_Value)}})}function pu(e){var t=e;if(typeof e=="function"&&(t=e()),typeof t=="object"&&t!==null&&t[Un])throw new qe(_t,pe.InitStateToValueFromState);return new Cf(t)}var Pf=typeof window!="undefined"?g.useLayoutEffect:g.useEffect;function _i(e,t,r,n){var a=new du(e,t,e.get(t),e.edition,r);return Pf(function(){return n.subscribe(a),function(){a.onUnmount(),n.unsubscribe(a)}}),a}const ot={id:"",name:"",userRole:"",avatarId:"",identityProviders:[],locationAdmins:[]};function dg(e){let t=e;return e?.identity_providers&&(t={...t,identityProviders:e.identity_providers}),e?.location_admins&&e.location_admins.length>0&&(t={...t,locationAdmins:e.location_admins}),e?.location_bans&&e.location_bans.length>0&&(t={...t,locationBans:e.location_bans}),t}function pg(e){return{id:"",instanceId:e.user.id,name:e.user.displayName,userRole:"guest",avatarId:e.user.id,identityProviders:[],locationAdmins:[],avatarUrl:e.user.icon}}const ft={id:0,token:"",type:"",isVerified:!1,userId:""},dt={accessToken:"",authentication:{strategy:""},identityProvider:ft};function mg(e){return{accessToken:e.accessToken,authentication:e.authentication,identityProvider:e["identity-provider"]}}const It=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,avatarList:[]}),xf=(e,t)=>(Promise.resolve().then(()=>kf(t)),It.attach(Z).value),kf=e=>{It.batch(t=>{switch(e.type){case"ACTION_PROCESSING":return t.merge({isProcessing:e.processing,error:""});case"LOGIN_USER_SUCCESS":return t.merge({isLoggedIn:!0,authUser:e.authUser});case"LOGIN_USER_ERROR":return t.merge({error:e.message});case"LOGIN_USER_BY_GITHUB_SUCCESS":return It;case"LOGIN_USER_BY_GITHUB_ERROR":return t.merge({error:e.message});case"LOGIN_USER_BY_LINKEDIN_SUCCESS":return It;case"LOGIN_USER_BY_LINKEDIN_ERROR":return t.merge({error:e.message});case"REGISTER_USER_BY_EMAIL_SUCCESS":return t.merge({identityProvider:e.identityProvider});case"REGISTER_USER_BY_EMAIL_ERROR":return It;case"LOGOUT_USER":return t.merge({isLoggedIn:!1,user:ot,authUser:dt});case"DID_VERIFY_EMAIL":return t.identityProvider.merge({isVerified:e.result});case"LOADED_USER_DATA":return t.merge({user:e.user});case"RESTORE":{const r=Pl();return r?t.merge({isLoggedIn:r.isLoggedIn,authUser:r.authUser,identityProvider:r.identityProvider}):It}case"AVATAR_UPDATED":return t.user.merge({avatarUrl:e.url});case"USERNAME_UPDATED":return t.user.merge({name:e.name});case"USERAVATARID_UPDATED":return t.user.merge({avatarId:e.avatarId});case"USER_UPDATED":return t.merge({user:e.user});case"UPDATE_USER_SETTINGS":return t.user.merge({user_setting:e.data});case"AVATAR_FETCHED":{const r=e.avatarList,n={};for(let a of r){const i=n[a.name]||{};if(!i){console.warn("Avatar resource is empty, have you synced avatars to your static file storage?");return}i[a.staticResourceType]=a,n[a.name]=i}return t.merge({avatarList:Object.keys(n).map(a=>n[a])})}}},e.type)},Mf=()=>It,hg=()=>ht(It),Lf=uu.Map(),Nf=Go($o);function Ff(e){return Pn.store=va(e,Lf,Nf),window.store=Pn.store,Pn.store.subscribe(()=>{xl(Mf().value)}),Pn.store}class Pn{static store}var xn={exports:{}},se={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ce=typeof Symbol=="function"&&Symbol.for,gi=Ce?Symbol.for("react.element"):60103,vi=Ce?Symbol.for("react.portal"):60106,kn=Ce?Symbol.for("react.fragment"):60107,Mn=Ce?Symbol.for("react.strict_mode"):60108,Ln=Ce?Symbol.for("react.profiler"):60114,Nn=Ce?Symbol.for("react.provider"):60109,Fn=Ce?Symbol.for("react.context"):60110,yi=Ce?Symbol.for("react.async_mode"):60111,jn=Ce?Symbol.for("react.concurrent_mode"):60111,Vn=Ce?Symbol.for("react.forward_ref"):60112,Hn=Ce?Symbol.for("react.suspense"):60113,jf=Ce?Symbol.for("react.suspense_list"):60120,Gn=Ce?Symbol.for("react.memo"):60115,zn=Ce?Symbol.for("react.lazy"):60116,Vf=Ce?Symbol.for("react.block"):60121,Hf=Ce?Symbol.for("react.fundamental"):60117,Gf=Ce?Symbol.for("react.responder"):60118,zf=Ce?Symbol.for("react.scope"):60119;function We(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case gi:switch(e=e.type,e){case yi:case jn:case kn:case Ln:case Mn:case Hn:return e;default:switch(e=e&&e.$$typeof,e){case Fn:case Vn:case zn:case Gn:case Nn:return e;default:return t}}case vi:return t}}}function mu(e){return We(e)===jn}se.AsyncMode=yi;se.ConcurrentMode=jn;se.ContextConsumer=Fn;se.ContextProvider=Nn;se.Element=gi;se.ForwardRef=Vn;se.Fragment=kn;se.Lazy=zn;se.Memo=Gn;se.Portal=vi;se.Profiler=Ln;se.StrictMode=Mn;se.Suspense=Hn;se.isAsyncMode=function(e){return mu(e)||We(e)===yi};se.isConcurrentMode=mu;se.isContextConsumer=function(e){return We(e)===Fn};se.isContextProvider=function(e){return We(e)===Nn};se.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===gi};se.isForwardRef=function(e){return We(e)===Vn};se.isFragment=function(e){return We(e)===kn};se.isLazy=function(e){return We(e)===zn};se.isMemo=function(e){return We(e)===Gn};se.isPortal=function(e){return We(e)===vi};se.isProfiler=function(e){return We(e)===Ln};se.isStrictMode=function(e){return We(e)===Mn};se.isSuspense=function(e){return We(e)===Hn};se.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===kn||e===jn||e===Ln||e===Mn||e===Hn||e===jf||typeof e=="object"&&e!==null&&(e.$$typeof===zn||e.$$typeof===Gn||e.$$typeof===Nn||e.$$typeof===Fn||e.$$typeof===Vn||e.$$typeof===Hf||e.$$typeof===Gf||e.$$typeof===zf||e.$$typeof===Vf)};se.typeOf=We;xn.exports=se;var $f=function(t,r,n,a){var i=n?n.call(a,t,r):void 0;if(i!==void 0)return!!i;if(t===r)return!0;if(typeof t!="object"||!t||typeof r!="object"||!r)return!1;var o=Object.keys(t),s=Object.keys(r);if(o.length!==s.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(r),c=0;c<o.length;c++){var l=o[c];if(!u(l))return!1;var f=t[l],d=r[l];if(i=n?n.call(a,f,d,l):void 0,i===!1||i===void 0&&f!==d)return!1}return!0};function Bf(e){function t(S,E,R,w,h){for(var P=0,y=0,K=0,B=0,G,F,ee=0,ue=0,$,Ee=$=G=0,q=0,oe=0,Je=0,Se=0,Ft=R.length,yt=Ft-1,He,z="",Re="",pa="",ma="",Et;q<Ft;){if(F=R.charCodeAt(q),q===yt&&y+B+K+P!==0&&(y!==0&&(F=y===47?10:47),B=K=P=0,Ft++,yt++),y+B+K+P===0){if(q===yt&&(0<oe&&(z=z.replace(d,"")),0<z.trim().length)){switch(F){case 32:case 9:case 59:case 13:case 10:break;default:z+=R.charAt(q)}F=59}switch(F){case 123:for(z=z.trim(),G=z.charCodeAt(0),$=1,Se=++q;q<Ft;){switch(F=R.charCodeAt(q)){case 123:$++;break;case 125:$--;break;case 47:switch(F=R.charCodeAt(q+1)){case 42:case 47:e:{for(Ee=q+1;Ee<yt;++Ee)switch(R.charCodeAt(Ee)){case 47:if(F===42&&R.charCodeAt(Ee-1)===42&&q+2!==Ee){q=Ee+1;break e}break;case 10:if(F===47){q=Ee+1;break e}}q=Ee}}break;case 91:F++;case 40:F++;case 34:case 39:for(;q++<yt&&R.charCodeAt(q)!==F;);}if($===0)break;q++}switch($=R.substring(Se,q),G===0&&(G=(z=z.replace(f,"").trim()).charCodeAt(0)),G){case 64:switch(0<oe&&(z=z.replace(d,"")),F=z.charCodeAt(1),F){case 100:case 109:case 115:case 45:oe=E;break;default:oe=Y}if($=t(E,oe,$,F,h+1),Se=$.length,0<D&&(oe=r(Y,z,Je),Et=s(3,$,oe,E,Ae,ae,Se,F,h,w),z=oe.join(""),Et!==void 0&&(Se=($=Et.trim()).length)===0&&(F=0,$="")),0<Se)switch(F){case 115:z=z.replace(V,o);case 100:case 109:case 45:$=z+"{"+$+"}";break;case 107:z=z.replace(T,"$1 $2"),$=z+"{"+$+"}",$=I===1||I===2&&i("@"+$,3)?"@-webkit-"+$+"@"+$:"@"+$;break;default:$=z+$,w===112&&($=(Re+=$,""))}else $="";break;default:$=t(E,r(E,z,Je),$,w,h+1)}pa+=$,$=Je=oe=Ee=G=0,z="",F=R.charCodeAt(++q);break;case 125:case 59:if(z=(0<oe?z.replace(d,""):z).trim(),1<(Se=z.length))switch(Ee===0&&(G=z.charCodeAt(0),G===45||96<G&&123>G)&&(Se=(z=z.replace(" ",":")).length),0<D&&(Et=s(1,z,E,S,Ae,ae,Re.length,w,h,w))!==void 0&&(Se=(z=Et.trim()).length)===0&&(z="\0\0"),G=z.charCodeAt(0),F=z.charCodeAt(1),G){case 0:break;case 64:if(F===105||F===99){ma+=z+R.charAt(q);break}default:z.charCodeAt(Se-1)!==58&&(Re+=a(z,G,F,z.charCodeAt(2)))}Je=oe=Ee=G=0,z="",F=R.charCodeAt(++q)}}switch(F){case 13:case 10:y===47?y=0:1+G===0&&w!==107&&0<z.length&&(oe=1,z+="\0"),0<D*O&&s(0,z,E,S,Ae,ae,Re.length,w,h,w),ae=1,Ae++;break;case 59:case 125:if(y+B+K+P===0){ae++;break}default:switch(ae++,He=R.charAt(q),F){case 9:case 32:if(B+P+y===0)switch(ee){case 44:case 58:case 9:case 32:He="";break;default:F!==32&&(He=" ")}break;case 0:He="\\0";break;case 12:He="\\f";break;case 11:He="\\v";break;case 38:B+y+P===0&&(oe=Je=1,He="\f"+He);break;case 108:if(B+y+P+k===0&&0<Ee)switch(q-Ee){case 2:ee===112&&R.charCodeAt(q-3)===58&&(k=ee);case 8:ue===111&&(k=ue)}break;case 58:B+y+P===0&&(Ee=q);break;case 44:y+K+B+P===0&&(oe=1,He+="\r");break;case 34:case 39:y===0&&(B=B===F?0:B===0?F:B);break;case 91:B+y+K===0&&P++;break;case 93:B+y+K===0&&P--;break;case 41:B+y+P===0&&K--;break;case 40:if(B+y+P===0){if(G===0)switch(2*ee+3*ue){case 533:break;default:G=1}K++}break;case 64:y+K+B+P+Ee+$===0&&($=1);break;case 42:case 47:if(!(0<B+P+K))switch(y){case 0:switch(2*F+3*R.charCodeAt(q+1)){case 235:y=47;break;case 220:Se=q,y=42}break;case 42:F===47&&ee===42&&Se+2!==q&&(R.charCodeAt(Se+2)===33&&(Re+=R.substring(Se,q+1)),He="",y=0)}}y===0&&(z+=He)}ue=ee,ee=F,q++}if(Se=Re.length,0<Se){if(oe=E,0<D&&(Et=s(2,Re,oe,S,Ae,ae,Se,w,h,w),Et!==void 0&&(Re=Et).length===0))return ma+Re+pa;if(Re=oe.join(",")+"{"+Re+"}",I*k!=0){switch(I!==2||i(Re,2)||(k=0),k){case 111:Re=Re.replace(L,":-moz-$1")+Re;break;case 112:Re=Re.replace(j,"::-webkit-input-$1")+Re.replace(j,"::-moz-$1")+Re.replace(j,":-ms-input-$1")+Re}k=0}}return ma+Re+pa}function r(S,E,R){var w=E.trim().split(v);E=w;var h=w.length,P=S.length;switch(P){case 0:case 1:var y=0;for(S=P===0?"":S[0]+" ";y<h;++y)E[y]=n(S,E[y],R).trim();break;default:var K=y=0;for(E=[];y<h;++y)for(var B=0;B<P;++B)E[K++]=n(S[B]+" ",w[y],R).trim()}return E}function n(S,E,R){var w=E.charCodeAt(0);switch(33>w&&(w=(E=E.trim()).charCodeAt(0)),w){case 38:return E.replace(A,"$1"+S.trim());case 58:return S.trim()+E.replace(A,"$1"+S.trim());default:if(0<1*R&&0<E.indexOf("\f"))return E.replace(A,(S.charCodeAt(0)===58?"":"$1")+S.trim())}return S+E}function a(S,E,R,w){var h=S+";",P=2*E+3*R+4*w;if(P===944){S=h.indexOf(":",9)+1;var y=h.substring(S,h.length-1).trim();return y=h.substring(0,S).trim()+y+";",I===1||I===2&&i(y,1)?"-webkit-"+y+y:y}if(I===0||I===2&&!i(h,1))return h;switch(P){case 1015:return h.charCodeAt(10)===97?"-webkit-"+h+h:h;case 951:return h.charCodeAt(3)===116?"-webkit-"+h+h:h;case 963:return h.charCodeAt(5)===110?"-webkit-"+h+h:h;case 1009:if(h.charCodeAt(4)!==100)break;case 969:case 942:return"-webkit-"+h+h;case 978:return"-webkit-"+h+"-moz-"+h+h;case 1019:case 983:return"-webkit-"+h+"-moz-"+h+"-ms-"+h+h;case 883:if(h.charCodeAt(8)===45)return"-webkit-"+h+h;if(0<h.indexOf("image-set(",11))return h.replace(ne,"$1-webkit-$2")+h;break;case 932:if(h.charCodeAt(4)===45)switch(h.charCodeAt(5)){case 103:return"-webkit-box-"+h.replace("-grow","")+"-webkit-"+h+"-ms-"+h.replace("grow","positive")+h;case 115:return"-webkit-"+h+"-ms-"+h.replace("shrink","negative")+h;case 98:return"-webkit-"+h+"-ms-"+h.replace("basis","preferred-size")+h}return"-webkit-"+h+"-ms-"+h+h;case 964:return"-webkit-"+h+"-ms-flex-"+h+h;case 1023:if(h.charCodeAt(8)!==99)break;return y=h.substring(h.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),"-webkit-box-pack"+y+"-webkit-"+h+"-ms-flex-pack"+y+h;case 1005:return m.test(h)?h.replace(p,":-webkit-")+h.replace(p,":-moz-")+h:h;case 1e3:switch(y=h.substring(13).trim(),E=y.indexOf("-")+1,y.charCodeAt(0)+y.charCodeAt(E)){case 226:y=h.replace(N,"tb");break;case 232:y=h.replace(N,"tb-rl");break;case 220:y=h.replace(N,"lr");break;default:return h}return"-webkit-"+h+"-ms-"+y+h;case 1017:if(h.indexOf("sticky",9)===-1)break;case 975:switch(E=(h=S).length-10,y=(h.charCodeAt(E)===33?h.substring(0,E):h).substring(S.indexOf(":",7)+1).trim(),P=y.charCodeAt(0)+(y.charCodeAt(7)|0)){case 203:if(111>y.charCodeAt(8))break;case 115:h=h.replace(y,"-webkit-"+y)+";"+h;break;case 207:case 102:h=h.replace(y,"-webkit-"+(102<P?"inline-":"")+"box")+";"+h.replace(y,"-webkit-"+y)+";"+h.replace(y,"-ms-"+y+"box")+";"+h}return h+";";case 938:if(h.charCodeAt(5)===45)switch(h.charCodeAt(6)){case 105:return y=h.replace("-items",""),"-webkit-"+h+"-webkit-box-"+y+"-ms-flex-"+y+h;case 115:return"-webkit-"+h+"-ms-flex-item-"+h.replace(U,"")+h;default:return"-webkit-"+h+"-ms-flex-line-pack"+h.replace("align-content","").replace(U,"")+h}break;case 973:case 989:if(h.charCodeAt(3)!==45||h.charCodeAt(4)===122)break;case 931:case 953:if(J.test(S)===!0)return(y=S.substring(S.indexOf(":")+1)).charCodeAt(0)===115?a(S.replace("stretch","fill-available"),E,R,w).replace(":fill-available",":stretch"):h.replace(y,"-webkit-"+y)+h.replace(y,"-moz-"+y.replace("fill-",""))+h;break;case 962:if(h="-webkit-"+h+(h.charCodeAt(5)===102?"-ms-"+h:"")+h,R+w===211&&h.charCodeAt(13)===105&&0<h.indexOf("transform",10))return h.substring(0,h.indexOf(";",27)+1).replace(_,"$1-webkit-$2")+h}return h}function i(S,E){var R=S.indexOf(E===1?":":"{"),w=S.substring(0,E!==3?R:10);return R=S.substring(R+1,S.length-1),C(E!==2?w:w.replace(x,"$1"),R,E)}function o(S,E){var R=a(E,E.charCodeAt(0),E.charCodeAt(1),E.charCodeAt(2));return R!==E+";"?R.replace(H," or ($1)").substring(4):"("+E+")"}function s(S,E,R,w,h,P,y,K,B,G){for(var F=0,ee=E,ue;F<D;++F)switch(ue=b[F].call(l,S,ee,R,w,h,P,y,K,B,G)){case void 0:case!1:case!0:case null:break;default:ee=ue}if(ee!==E)return ee}function u(S){switch(S){case void 0:case null:D=b.length=0;break;default:if(typeof S=="function")b[D++]=S;else if(typeof S=="object")for(var E=0,R=S.length;E<R;++E)u(S[E]);else O=!!S|0}return u}function c(S){return S=S.prefix,S!==void 0&&(C=null,S?typeof S!="function"?I=1:(I=2,C=S):I=0),c}function l(S,E){var R=S;if(33>R.charCodeAt(0)&&(R=R.trim()),M=R,R=[M],0<D){var w=s(-1,E,R,R,Ae,ae,0,0,0,0);w!==void 0&&typeof w=="string"&&(E=w)}var h=t(Y,R,E,0,0);return 0<D&&(w=s(-2,h,R,R,Ae,ae,h.length,0,0,0),w!==void 0&&(h=w)),M="",k=0,ae=Ae=1,h}var f=/^\0+/g,d=/[\0\r\f]/g,p=/: */g,m=/zoo|gra/,_=/([,: ])(transform)/g,v=/,\r+?/g,A=/([\t\r\n ])*\f?&/g,T=/@(k\w+)\s*(\S*)\s*/,j=/::(place)/g,L=/:(read-only)/g,N=/[svh]\w+-[tblr]{2}/,V=/\(\s*(.*)\s*\)/g,H=/([\s\S]*?);/g,U=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,J=/stretch|:\s*\w+\-(?:conte|avail)/,ne=/([^-])(image-set\()/,ae=1,Ae=1,k=0,I=1,Y=[],b=[],D=0,C=null,O=0,M="";return l.use=u,l.set=c,e!==void 0&&c(e),l}var qf={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function Wf(e){var t={};return function(r){return t[r]===void 0&&(t[r]=e(r)),t[r]}}var Yf=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,hu=Wf(function(e){return Yf.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91}),Ei=xn.exports,Kf={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Jf={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Xf={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},_u={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Si={};Si[Ei.ForwardRef]=Xf;Si[Ei.Memo]=_u;function gu(e){return Ei.isMemo(e)?_u:Si[e.$$typeof]||Kf}var Zf=Object.defineProperty,Qf=Object.getOwnPropertyNames,vu=Object.getOwnPropertySymbols,ed=Object.getOwnPropertyDescriptor,td=Object.getPrototypeOf,yu=Object.prototype;function Eu(e,t,r){if(typeof t!="string"){if(yu){var n=td(t);n&&n!==yu&&Eu(e,n,r)}var a=Qf(t);vu&&(a=a.concat(vu(t)));for(var i=gu(e),o=gu(t),s=0;s<a.length;++s){var u=a[s];if(!Jf[u]&&!(r&&r[u])&&!(o&&o[u])&&!(i&&i[u])){var c=ed(t,u);try{Zf(e,u,c)}catch(l){}}}}return e}var bi=Eu;function Ye(){return(Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var Su=function(e,t){for(var r=[e[0]],n=0,a=t.length;n<a;n+=1)r.push(t[n],e[n+1]);return r},Ti=function(e){return e!==null&&typeof e=="object"&&(e.toString?e.toString():Object.prototype.toString.call(e))==="[object Object]"&&!xn.exports.typeOf(e)},$n=Object.freeze([]),Ct=Object.freeze({});function dr(e){return typeof e=="function"}function Ai(e){return e.displayName||e.name||"Component"}function Bn(e){return e&&typeof e.styledComponentId=="string"}var Ut=typeof process!="undefined"&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_ATTR||"data-styled",rd="5.3.1",Ri=typeof window!="undefined"&&"HTMLElement"in window,nd=Boolean(typeof SC_DISABLE_SPEEDY=="boolean"?SC_DISABLE_SPEEDY:typeof process!="undefined"&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY!==void 0&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY!==""?{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY:typeof process!="undefined"&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY!==void 0&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY!==""?{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY:!1),ad={};function st(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(r.length>0?" Args: "+r.join(", "):""))}var id=function(){function e(r){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=r}var t=e.prototype;return t.indexOfGroup=function(r){for(var n=0,a=0;a<r;a++)n+=this.groupSizes[a];return n},t.insertRules=function(r,n){if(r>=this.groupSizes.length){for(var a=this.groupSizes,i=a.length,o=i;r>=o;)(o<<=1)<0&&st(16,""+r);this.groupSizes=new Uint32Array(o),this.groupSizes.set(a),this.length=o;for(var s=i;s<o;s++)this.groupSizes[s]=0}for(var u=this.indexOfGroup(r+1),c=0,l=n.length;c<l;c++)this.tag.insertRule(u,n[c])&&(this.groupSizes[r]++,u++)},t.clearGroup=function(r){if(r<this.length){var n=this.groupSizes[r],a=this.indexOfGroup(r),i=a+n;this.groupSizes[r]=0;for(var o=a;o<i;o++)this.tag.deleteRule(a)}},t.getGroup=function(r){var n="";if(r>=this.length||this.groupSizes[r]===0)return n;for(var a=this.groupSizes[r],i=this.indexOfGroup(r),o=i+a,s=i;s<o;s++)n+=this.tag.getRule(s)+`/*!sc*/
`;return n},e}(),qn=new Map,Wn=new Map,Zr=1,Yn=function(e){if(qn.has(e))return qn.get(e);for(;Wn.has(Zr);)Zr++;var t=Zr++;return qn.set(e,t),Wn.set(t,e),t},od=function(e){return Wn.get(e)},sd=function(e,t){t>=Zr&&(Zr=t+1),qn.set(e,t),Wn.set(t,e)},ud="style["+Ut+'][data-styled-version="5.3.1"]',cd=new RegExp("^"+Ut+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),ld=function(e,t,r){for(var n,a=r.split(","),i=0,o=a.length;i<o;i++)(n=a[i])&&e.registerName(t,n)},fd=function(e,t){for(var r=(t.innerHTML||"").split(`/*!sc*/
`),n=[],a=0,i=r.length;a<i;a++){var o=r[a].trim();if(o){var s=o.match(cd);if(s){var u=0|parseInt(s[1],10),c=s[2];u!==0&&(sd(c,u),ld(e,c,s[3]),e.getTag().insertRules(u,n)),n.length=0}else n.push(o)}}},wi=function(){return typeof window!="undefined"&&window.__webpack_nonce__!==void 0?window.__webpack_nonce__:null},bu=function(e){var t=document.head,r=e||t,n=document.createElement("style"),a=function(s){for(var u=s.childNodes,c=u.length;c>=0;c--){var l=u[c];if(l&&l.nodeType===1&&l.hasAttribute(Ut))return l}}(r),i=a!==void 0?a.nextSibling:null;n.setAttribute(Ut,"active"),n.setAttribute("data-styled-version","5.3.1");var o=wi();return o&&n.setAttribute("nonce",o),r.insertBefore(n,i),n},dd=function(){function e(r){var n=this.element=bu(r);n.appendChild(document.createTextNode("")),this.sheet=function(a){if(a.sheet)return a.sheet;for(var i=document.styleSheets,o=0,s=i.length;o<s;o++){var u=i[o];if(u.ownerNode===a)return u}st(17)}(n),this.length=0}var t=e.prototype;return t.insertRule=function(r,n){try{return this.sheet.insertRule(n,r),this.length++,!0}catch(a){return!1}},t.deleteRule=function(r){this.sheet.deleteRule(r),this.length--},t.getRule=function(r){var n=this.sheet.cssRules[r];return n!==void 0&&typeof n.cssText=="string"?n.cssText:""},e}(),pd=function(){function e(r){var n=this.element=bu(r);this.nodes=n.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(r,n){if(r<=this.length&&r>=0){var a=document.createTextNode(n),i=this.nodes[r];return this.element.insertBefore(a,i||null),this.length++,!0}return!1},t.deleteRule=function(r){this.element.removeChild(this.nodes[r]),this.length--},t.getRule=function(r){return r<this.length?this.nodes[r].textContent:""},e}(),md=function(){function e(r){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(r,n){return r<=this.length&&(this.rules.splice(r,0,n),this.length++,!0)},t.deleteRule=function(r){this.rules.splice(r,1),this.length--},t.getRule=function(r){return r<this.length?this.rules[r]:""},e}(),Tu=Ri,hd={isServer:!Ri,useCSSOMInjection:!nd},pr=function(){function e(r,n,a){r===void 0&&(r=Ct),n===void 0&&(n={}),this.options=Ye({},hd,{},r),this.gs=n,this.names=new Map(a),this.server=!!r.isServer,!this.server&&Ri&&Tu&&(Tu=!1,function(i){for(var o=document.querySelectorAll(ud),s=0,u=o.length;s<u;s++){var c=o[s];c&&c.getAttribute(Ut)!=="active"&&(fd(i,c),c.parentNode&&c.parentNode.removeChild(c))}}(this))}e.registerId=function(r){return Yn(r)};var t=e.prototype;return t.reconstructWithOptions=function(r,n){return n===void 0&&(n=!0),new e(Ye({},this.options,{},r),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(r){return this.gs[r]=(this.gs[r]||0)+1},t.getTag=function(){return this.tag||(this.tag=(a=(n=this.options).isServer,i=n.useCSSOMInjection,o=n.target,r=a?new md(o):i?new dd(o):new pd(o),new id(r)));var r,n,a,i,o},t.hasNameForId=function(r,n){return this.names.has(r)&&this.names.get(r).has(n)},t.registerName=function(r,n){if(Yn(r),this.names.has(r))this.names.get(r).add(n);else{var a=new Set;a.add(n),this.names.set(r,a)}},t.insertRules=function(r,n,a){this.registerName(r,n),this.getTag().insertRules(Yn(r),a)},t.clearNames=function(r){this.names.has(r)&&this.names.get(r).clear()},t.clearRules=function(r){this.getTag().clearGroup(Yn(r)),this.clearNames(r)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(r){for(var n=r.getTag(),a=n.length,i="",o=0;o<a;o++){var s=od(o);if(s!==void 0){var u=r.names.get(s),c=n.getGroup(o);if(u&&c&&u.size){var l=Ut+".g"+o+'[id="'+s+'"]',f="";u!==void 0&&u.forEach(function(d){d.length>0&&(f+=d+",")}),i+=""+c+l+'{content:"'+f+`"}/*!sc*/
`}}}return i}(this)},e}(),_d=/(a)(d)/gi,Au=function(e){return String.fromCharCode(e+(e>25?39:97))};function Oi(e){var t,r="";for(t=Math.abs(e);t>52;t=t/52|0)r=Au(t%52)+r;return(Au(t%52)+r).replace(_d,"$1-$2")}var mr=function(e,t){for(var r=t.length;r;)e=33*e^t.charCodeAt(--r);return e},Ru=function(e){return mr(5381,e)};function wu(e){for(var t=0;t<e.length;t+=1){var r=e[t];if(dr(r)&&!Bn(r))return!1}return!0}var gd=Ru("5.3.1"),vd=function(){function e(t,r,n){this.rules=t,this.staticRulesId="",this.isStatic=(n===void 0||n.isStatic)&&wu(t),this.componentId=r,this.baseHash=mr(gd,r),this.baseStyle=n,pr.registerId(r)}return e.prototype.generateAndInjectStyles=function(t,r,n){var a=this.componentId,i=[];if(this.baseStyle&&i.push(this.baseStyle.generateAndInjectStyles(t,r,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&r.hasNameForId(a,this.staticRulesId))i.push(this.staticRulesId);else{var o=qt(this.rules,t,r,n).join(""),s=Oi(mr(this.baseHash,o)>>>0);if(!r.hasNameForId(a,s)){var u=n(o,"."+s,void 0,a);r.insertRules(a,s,u)}i.push(s),this.staticRulesId=s}else{for(var c=this.rules.length,l=mr(this.baseHash,n.hash),f="",d=0;d<c;d++){var p=this.rules[d];if(typeof p=="string")f+=p;else if(p){var m=qt(p,t,r,n),_=Array.isArray(m)?m.join(""):m;l=mr(l,_+d),f+=_}}if(f){var v=Oi(l>>>0);if(!r.hasNameForId(a,v)){var A=n(f,"."+v,void 0,a);r.insertRules(a,v,A)}i.push(v)}}return i.join(" ")},e}(),yd=/^\s*\/\/.*$/gm,Ed=[":","[",".","#"];function Ou(e){var t,r,n,a,i=e===void 0?Ct:e,o=i.options,s=o===void 0?Ct:o,u=i.plugins,c=u===void 0?$n:u,l=new Bf(s),f=[],d=function(_){function v(A){if(A)try{_(A+"}")}catch(T){}}return function(A,T,j,L,N,V,H,U,x,J){switch(A){case 1:if(x===0&&T.charCodeAt(0)===64)return _(T+";"),"";break;case 2:if(U===0)return T+"/*|*/";break;case 3:switch(U){case 102:case 112:return _(j[0]+T),"";default:return T+(J===0?"/*|*/":"")}case-2:T.split("/*|*/}").forEach(v)}}}(function(_){f.push(_)}),p=function(_,v,A){return v===0&&Ed.indexOf(A[r.length])!==-1||A.match(a)?_:"."+t};function m(_,v,A,T){T===void 0&&(T="&");var j=_.replace(yd,""),L=v&&A?A+" "+v+" { "+j+" }":j;return t=T,r=v,n=new RegExp("\\"+r+"\\b","g"),a=new RegExp("(\\"+r+"\\b){2,}"),l(A||!v?"":v,L)}return l.use([].concat(c,[function(_,v,A){_===2&&A.length&&A[0].lastIndexOf(r)>0&&(A[0]=A[0].replace(n,p))},d,function(_){if(_===-2){var v=f;return f=[],v}}])),m.hash=c.length?c.reduce(function(_,v){return v.name||st(15),mr(_,v.name)},5381).toString():"",m}var Kn=g.createContext(),Sd=Kn.Consumer,Di=g.createContext(),Du=(Di.Consumer,new pr),Ii=Ou();function Ci(){return ie.exports.useContext(Kn)||Du}function Iu(){return ie.exports.useContext(Di)||Ii}function Cu(e){var t=ie.exports.useState(e.stylisPlugins),r=t[0],n=t[1],a=Ci(),i=ie.exports.useMemo(function(){var s=a;return e.sheet?s=e.sheet:e.target&&(s=s.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(s=s.reconstructWithOptions({useCSSOMInjection:!1})),s},[e.disableCSSOMInjection,e.sheet,e.target]),o=ie.exports.useMemo(function(){return Ou({options:{prefix:!e.disableVendorPrefixes},plugins:r})},[e.disableVendorPrefixes,r]);return ie.exports.useEffect(function(){$f(r,e.stylisPlugins)||n(e.stylisPlugins)},[e.stylisPlugins]),g.createElement(Kn.Provider,{value:i},g.createElement(Di.Provider,{value:o},e.children))}var Uu=function(){function e(t,r){var n=this;this.inject=function(a,i){i===void 0&&(i=Ii);var o=n.name+i.hash;a.hasNameForId(n.id,o)||a.insertRules(n.id,o,i(n.rules,o,"@keyframes"))},this.toString=function(){return st(12,String(n.name))},this.name=t,this.id="sc-keyframes-"+t,this.rules=r}return e.prototype.getName=function(t){return t===void 0&&(t=Ii),this.name+t.hash},e}(),bd=/([A-Z])/,Td=/([A-Z])/g,Ad=/^ms-/,Rd=function(e){return"-"+e.toLowerCase()};function Pu(e){return bd.test(e)?e.replace(Td,Rd).replace(Ad,"-ms-"):e}var xu=function(e){return e==null||e===!1||e===""};function qt(e,t,r,n){if(Array.isArray(e)){for(var a,i=[],o=0,s=e.length;o<s;o+=1)(a=qt(e[o],t,r,n))!==""&&(Array.isArray(a)?i.push.apply(i,a):i.push(a));return i}if(xu(e))return"";if(Bn(e))return"."+e.styledComponentId;if(dr(e)){if(typeof(c=e)!="function"||c.prototype&&c.prototype.isReactComponent||!t)return e;var u=e(t);return qt(u,t,r,n)}var c;return e instanceof Uu?r?(e.inject(r,n),e.getName(n)):e:Ti(e)?function l(f,d){var p,m,_=[];for(var v in f)f.hasOwnProperty(v)&&!xu(f[v])&&(Array.isArray(f[v])&&f[v].isCss||dr(f[v])?_.push(Pu(v)+":",f[v],";"):Ti(f[v])?_.push.apply(_,l(f[v],v)):_.push(Pu(v)+": "+(p=v,(m=f[v])==null||typeof m=="boolean"||m===""?"":typeof m!="number"||m===0||p in qf?String(m).trim():m+"px")+";"));return d?[d+" {"].concat(_,["}"]):_}(e):e.toString()}var ku=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Jn(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return dr(e)||Ti(e)?ku(qt(Su($n,[e].concat(r)))):r.length===0&&e.length===1&&typeof e[0]=="string"?e:ku(qt(Su(e,r)))}var Ui=function(e,t,r){return r===void 0&&(r=Ct),e.theme!==r.theme&&e.theme||t||r.theme},wd=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Od=/(^-|-$)/g;function Pi(e){return e.replace(wd,"-").replace(Od,"")}var xi=function(e){return Oi(Ru(e)>>>0)};function Xn(e){return typeof e=="string"&&!0}var ki=function(e){return typeof e=="function"||typeof e=="object"&&e!==null&&!Array.isArray(e)},Dd=function(e){return e!=="__proto__"&&e!=="constructor"&&e!=="prototype"};function Id(e,t,r){var n=e[r];ki(t)&&ki(n)?Mu(n,t):e[r]=t}function Mu(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(var a=0,i=r;a<i.length;a++){var o=i[a];if(ki(o))for(var s in o)Dd(s)&&Id(e,o[s],s)}return e}var Pt=g.createContext(),Cd=Pt.Consumer;function Lu(e){var t=ie.exports.useContext(Pt),r=ie.exports.useMemo(function(){return function(n,a){if(!n)return st(14);if(dr(n)){var i=n(a);return i}return Array.isArray(n)||typeof n!="object"?st(8):a?Ye({},a,{},n):n}(e.theme,t)},[e.theme,t]);return e.children?g.createElement(Pt.Provider,{value:r},e.children):null}var Mi={};function Nu(e,t,r){var n=Bn(e),a=!Xn(e),i=t.attrs,o=i===void 0?$n:i,s=t.componentId,u=s===void 0?function(T,j){var L=typeof T!="string"?"sc":Pi(T);Mi[L]=(Mi[L]||0)+1;var N=L+"-"+xi("5.3.1"+L+Mi[L]);return j?j+"-"+N:N}(t.displayName,t.parentComponentId):s,c=t.displayName,l=c===void 0?function(T){return Xn(T)?"styled."+T:"Styled("+Ai(T)+")"}(e):c,f=t.displayName&&t.componentId?Pi(t.displayName)+"-"+t.componentId:t.componentId||u,d=n&&e.attrs?Array.prototype.concat(e.attrs,o).filter(Boolean):o,p=t.shouldForwardProp;n&&e.shouldForwardProp&&(p=t.shouldForwardProp?function(T,j,L){return e.shouldForwardProp(T,j,L)&&t.shouldForwardProp(T,j,L)}:e.shouldForwardProp);var m,_=new vd(r,f,n?e.componentStyle:void 0),v=_.isStatic&&o.length===0,A=function(T,j){return function(L,N,V,H){var U=L.attrs,x=L.componentStyle,J=L.defaultProps,ne=L.foldedComponentIds,ae=L.shouldForwardProp,Ae=L.styledComponentId,k=L.target,I=function(w,h,P){w===void 0&&(w=Ct);var y=Ye({},h,{theme:w}),K={};return P.forEach(function(B){var G,F,ee,ue=B;for(G in dr(ue)&&(ue=ue(y)),ue)y[G]=K[G]=G==="className"?(F=K[G],ee=ue[G],F&&ee?F+" "+ee:F||ee):ue[G]}),[y,K]}(Ui(N,ie.exports.useContext(Pt),J)||Ct,N,U),Y=I[0],b=I[1],D=function(w,h,P,y){var K=Ci(),B=Iu(),G=h?w.generateAndInjectStyles(Ct,K,B):w.generateAndInjectStyles(P,K,B);return G}(x,H,Y),C=V,O=b.$as||N.$as||b.as||N.as||k,M=Xn(O),S=b!==N?Ye({},N,{},b):N,E={};for(var R in S)R[0]!=="$"&&R!=="as"&&(R==="forwardedAs"?E.as=S[R]:(ae?ae(R,hu,O):!M||hu(R))&&(E[R]=S[R]));return N.style&&b.style!==N.style&&(E.style=Ye({},N.style,{},b.style)),E.className=Array.prototype.concat(ne,Ae,D!==Ae?D:null,N.className,b.className).filter(Boolean).join(" "),E.ref=C,ie.exports.createElement(O,E)}(m,T,j,v)};return A.displayName=l,(m=g.forwardRef(A)).attrs=d,m.componentStyle=_,m.displayName=l,m.shouldForwardProp=p,m.foldedComponentIds=n?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):$n,m.styledComponentId=f,m.target=n?e.target:e,m.withComponent=function(T){var j=t.componentId,L=function(V,H){if(V==null)return{};var U,x,J={},ne=Object.keys(V);for(x=0;x<ne.length;x++)U=ne[x],H.indexOf(U)>=0||(J[U]=V[U]);return J}(t,["componentId"]),N=j&&j+"-"+(Xn(T)?T:Pi(Ai(T)));return Nu(T,Ye({},L,{attrs:d,componentId:N}),r)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(T){this._foldedDefaultProps=n?Mu({},e.defaultProps,T):T}}),m.toString=function(){return"."+m.styledComponentId},a&&bi(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var Li=function(e){return function t(r,n,a){if(a===void 0&&(a=Ct),!xn.exports.isValidElementType(n))return st(1,String(n));var i=function(){return r(n,a,Jn.apply(void 0,arguments))};return i.withConfig=function(o){return t(r,n,Ye({},a,{},o))},i.attrs=function(o){return t(r,n,Ye({},a,{attrs:Array.prototype.concat(a.attrs,o).filter(Boolean)}))},i}(Nu,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach(function(e){Li[e]=Li(e)});var Ud=function(){function e(r,n){this.rules=r,this.componentId=n,this.isStatic=wu(r),pr.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(r,n,a,i){var o=i(qt(this.rules,n,a,i).join(""),""),s=this.componentId+r;a.insertRules(s,s,o)},t.removeStyles=function(r,n){n.clearRules(this.componentId+r)},t.renderStyles=function(r,n,a,i){r>2&&pr.registerId(this.componentId+r),this.removeStyles(r,a),this.createStyles(r,n,a,i)},e}();function Fu(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=Jn.apply(void 0,[e].concat(r)),i="sc-global-"+xi(JSON.stringify(a)),o=new Ud(a,i);function s(c){var l=Ci(),f=Iu(),d=ie.exports.useContext(Pt),p=ie.exports.useRef(l.allocateGSInstance(i)).current;return l.server&&u(p,c,l,d,f),ie.exports.useLayoutEffect(function(){if(!l.server)return u(p,c,l,d,f),function(){return o.removeStyles(p,l)}},[p,c,l,d,f]),null}function u(c,l,f,d,p){if(o.isStatic)o.renderStyles(c,ad,f,p);else{var m=Ye({},l,{theme:Ui(l,d,s.defaultProps)});o.renderStyles(c,m,f,p)}}return g.memo(s)}function Pd(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=Jn.apply(void 0,[e].concat(r)).join(""),i=xi(a);return new Uu(i,a)}var xd=function(){function e(){var r=this;this._emitSheetCSS=function(){var n=r.instance.toString();if(!n)return"";var a=wi();return"<style "+[a&&'nonce="'+a+'"',Ut+'="true"','data-styled-version="5.3.1"'].filter(Boolean).join(" ")+">"+n+"</style>"},this.getStyleTags=function(){return r.sealed?st(2):r._emitSheetCSS()},this.getStyleElement=function(){var n;if(r.sealed)return st(2);var a=((n={})[Ut]="",n["data-styled-version"]="5.3.1",n.dangerouslySetInnerHTML={__html:r.instance.toString()},n),i=wi();return i&&(a.nonce=i),[g.createElement("style",Ye({},a,{key:"sc-0-0"}))]},this.seal=function(){r.sealed=!0},this.instance=new pr({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(r){return this.sealed?st(2):g.createElement(Cu,{sheet:this.instance},r)},t.interleaveWithNodeStream=function(r){return st(3)},e}(),kd=function(e){var t=g.forwardRef(function(r,n){var a=ie.exports.useContext(Pt),i=e.defaultProps,o=Ui(r,a,i);return g.createElement(e,Ye({},r,{theme:o,ref:n}))});return bi(t,e),t.displayName="WithTheme("+Ai(e)+")",t},Md=function(){return ie.exports.useContext(Pt)},Ld={StyleSheet:pr,masterSheet:Du},_g=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:Li,ServerStyleSheet:xd,StyleSheetConsumer:Sd,StyleSheetContext:Kn,StyleSheetManager:Cu,ThemeConsumer:Cd,ThemeContext:Pt,ThemeProvider:Lu,__PRIVATE__:Ld,createGlobalStyle:Fu,css:Jn,isStyledComponent:Bn,keyframes:Pd,useTheme:Md,version:rd,withTheme:kd});const Nd=Fu`
  /*! minireset.css v0.0.4 | MIT License | github.com/jgthms/minireset.css */
  html,
  body,
  p,
  ol,
  ul,
  li,
  dl,
  dt,
  dd,
  blockquote,
  figure,
  fieldset,
  legend,
  textarea,
  pre,
  iframe,
  hr,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
    padding: 0;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: 100%;
    font-weight: normal;
  }

  ul {
    list-style: none;
  }

  button,
  input,
  select,
  textarea {
    margin: 0;
  }

  html {
    box-sizing: border-box;
  }

  *, *:before, *:after {
    box-sizing: inherit;
  }

  img,
  embed,
  iframe,
  object,
  video {
    height: auto;
    max-width: 100%;
  }

  audio {
    max-width: 100%;
  }

  iframe {
    border: 0;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  td,
  th {
    padding: 0;
    text-align: left;
  }

  /* scrollbar-width is not inherited so apply to all elements. */
  * {
    scrollbar-width: thin;
  }

  ::selection {
    color: ${e=>e.theme.text};
    background-color: ${e=>e.theme.selected};
  }

  a {
    color: ${e=>e.theme.text};

    &:hover {
      color: ${e=>e.theme.blueHover};
    }

    &:active {
      color: ${e=>e.theme.bluePressed};
    }
  }

  html, body {
    width: 100%;
    height: 100%;
  }

  #app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  main {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  body {
    font-family: ${e=>e.theme.lato};
    font-size: 12px;
    color: ${e=>e.theme.text};
    background-color: ${e=>e.theme.background};
    scrollbar-color: #282c31 #5d646c;
  }

  .Modal {
    position: absolute;
    display: flex;
    flex: 1;
    outline: none;
    max-height: 100%;
    box-shadow: ${e=>e.theme.shadow30};
    margin-bottom: 10vh;
  }

  .Overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .ReactModal__Overlay--after-open {
    z-index: 100;
  }

  .sentry-error-embed {
    .form-field {
      margin-top: 20px;
    }

    .form-field:not(:last-child) {
      display: none;
    }
  }
`;var Ni={exports:{}},Fd="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",jd=Fd,Vd=jd;function ju(){}function Vu(){}Vu.resetWarningCache=ju;var Hd=function(){function e(n,a,i,o,s,u){if(u!==Vd){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}e.isRequired=e;function t(){return e}var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:Vu,resetWarningCache:ju};return r.PropTypes=r,r};Ni.exports=Hd();var Q=Ni.exports;function Gd(e){return e&&typeof e=="object"&&"default"in e?e.default:e}var Hu=ie.exports,zd=Gd(Hu);function Gu(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function $d(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var Bd=!!(typeof window!="undefined"&&window.document&&window.document.createElement);function qd(e,t,r){if(typeof e!="function")throw new Error("Expected reducePropsToState to be a function.");if(typeof t!="function")throw new Error("Expected handleStateChangeOnClient to be a function.");if(typeof r!="undefined"&&typeof r!="function")throw new Error("Expected mapStateOnServer to either be undefined or a function.");function n(a){return a.displayName||a.name||"Component"}return function(i){if(typeof i!="function")throw new Error("Expected WrappedComponent to be a React component.");var o=[],s;function u(){s=e(o.map(function(l){return l.props})),c.canUseDOM?t(s):r&&(s=r(s))}var c=function(l){$d(f,l);function f(){return l.apply(this,arguments)||this}f.peek=function(){return s},f.rewind=function(){if(f.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var m=s;return s=void 0,o=[],m};var d=f.prototype;return d.UNSAFE_componentWillMount=function(){o.push(this),u()},d.componentDidUpdate=function(){u()},d.componentWillUnmount=function(){var m=o.indexOf(this);o.splice(m,1),u()},d.render=function(){return zd.createElement(i,this.props)},f}(Hu.PureComponent);return Gu(c,"displayName","SideEffect("+n(i)+")"),Gu(c,"canUseDOM",Bd),c}}var Wd=qd,Yd=typeof Element!="undefined",Kd=typeof Map=="function",Jd=typeof Set=="function",Xd=typeof ArrayBuffer=="function"&&!!ArrayBuffer.isView;function Zn(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var r,n,a;if(Array.isArray(e)){if(r=e.length,r!=t.length)return!1;for(n=r;n--!=0;)if(!Zn(e[n],t[n]))return!1;return!0}var i;if(Kd&&e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(i=e.entries();!(n=i.next()).done;)if(!t.has(n.value[0]))return!1;for(i=e.entries();!(n=i.next()).done;)if(!Zn(n.value[1],t.get(n.value[0])))return!1;return!0}if(Jd&&e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(i=e.entries();!(n=i.next()).done;)if(!t.has(n.value[0]))return!1;return!0}if(Xd&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(t)){if(r=e.length,r!=t.length)return!1;for(n=r;n--!=0;)if(e[n]!==t[n])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(a=Object.keys(e),r=a.length,r!==Object.keys(t).length)return!1;for(n=r;n--!=0;)if(!Object.prototype.hasOwnProperty.call(t,a[n]))return!1;if(Yd&&e instanceof Element)return!1;for(n=r;n--!=0;)if(!((a[n]==="_owner"||a[n]==="__v"||a[n]==="__o")&&e.$$typeof)&&!Zn(e[a[n]],t[a[n]]))return!1;return!0}return e!==e&&t!==t}var Zd=function(t,r){try{return Zn(t,r)}catch(n){if((n.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw n}},Wt={BODY:"bodyAttributes",HTML:"htmlAttributes",TITLE:"titleAttributes"},W={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"};Object.keys(W).map(function(e){return W[e]});var be={CHARSET:"charset",CSS_TEXT:"cssText",HREF:"href",HTTPEQUIV:"http-equiv",INNER_HTML:"innerHTML",ITEM_PROP:"itemprop",NAME:"name",PROPERTY:"property",REL:"rel",SRC:"src",TARGET:"target"},Qn={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},Qr={DEFAULT_TITLE:"defaultTitle",DEFER:"defer",ENCODE_SPECIAL_CHARACTERS:"encodeSpecialCharacters",ON_CHANGE_CLIENT_STATE:"onChangeClientState",TITLE_TEMPLATE:"titleTemplate"},Qd=Object.keys(Qn).reduce(function(e,t){return e[Qn[t]]=t,e},{}),ep=[W.NOSCRIPT,W.SCRIPT,W.STYLE],ut="data-react-helmet",tp=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rp=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},np=function(){function e(t,r){for(var n=0;n<r.length;n++){var a=r[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ap=function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},zu=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||!Object.prototype.hasOwnProperty.call(e,n)||(r[n]=e[n]);return r},ip=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e},Fi=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return r===!1?String(t):String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},op=function(t){var r=hr(t,W.TITLE),n=hr(t,Qr.TITLE_TEMPLATE);if(n&&r)return n.replace(/%s/g,function(){return Array.isArray(r)?r.join(""):r});var a=hr(t,Qr.DEFAULT_TITLE);return r||a||void 0},sp=function(t){return hr(t,Qr.ON_CHANGE_CLIENT_STATE)||function(){}},ji=function(t,r){return r.filter(function(n){return typeof n[t]!="undefined"}).map(function(n){return n[t]}).reduce(function(n,a){return Ge({},n,a)},{})},up=function(t,r){return r.filter(function(n){return typeof n[W.BASE]!="undefined"}).map(function(n){return n[W.BASE]}).reverse().reduce(function(n,a){if(!n.length)for(var i=Object.keys(a),o=0;o<i.length;o++){var s=i[o],u=s.toLowerCase();if(t.indexOf(u)!==-1&&a[u])return n.concat(a)}return n},[])},en=function(t,r,n){var a={};return n.filter(function(i){return Array.isArray(i[t])?!0:(typeof i[t]!="undefined"&&dp("Helmet: "+t+' should be of type "Array". Instead found type "'+tp(i[t])+'"'),!1)}).map(function(i){return i[t]}).reverse().reduce(function(i,o){var s={};o.filter(function(d){for(var p=void 0,m=Object.keys(d),_=0;_<m.length;_++){var v=m[_],A=v.toLowerCase();r.indexOf(A)!==-1&&!(p===be.REL&&d[p].toLowerCase()==="canonical")&&!(A===be.REL&&d[A].toLowerCase()==="stylesheet")&&(p=A),r.indexOf(v)!==-1&&(v===be.INNER_HTML||v===be.CSS_TEXT||v===be.ITEM_PROP)&&(p=v)}if(!p||!d[p])return!1;var T=d[p].toLowerCase();return a[p]||(a[p]={}),s[p]||(s[p]={}),a[p][T]?!1:(s[p][T]=!0,!0)}).reverse().forEach(function(d){return i.push(d)});for(var u=Object.keys(s),c=0;c<u.length;c++){var l=u[c],f=Tl({},a[l],s[l]);a[l]=f}return i},[]).reverse()},hr=function(t,r){for(var n=t.length-1;n>=0;n--){var a=t[n];if(a.hasOwnProperty(r))return a[r]}return null},cp=function(t){return{baseTag:up([be.HREF,be.TARGET],t),bodyAttributes:ji(Wt.BODY,t),defer:hr(t,Qr.DEFER),encode:hr(t,Qr.ENCODE_SPECIAL_CHARACTERS),htmlAttributes:ji(Wt.HTML,t),linkTags:en(W.LINK,[be.REL,be.HREF],t),metaTags:en(W.META,[be.NAME,be.CHARSET,be.HTTPEQUIV,be.PROPERTY,be.ITEM_PROP],t),noscriptTags:en(W.NOSCRIPT,[be.INNER_HTML],t),onChangeClientState:sp(t),scriptTags:en(W.SCRIPT,[be.SRC,be.INNER_HTML],t),styleTags:en(W.STYLE,[be.CSS_TEXT],t),title:op(t),titleAttributes:ji(Wt.TITLE,t)}},Vi=function(){var e=Date.now();return function(t){var r=Date.now();r-e>16?(e=r,t(r)):setTimeout(function(){Vi(t)},0)}}(),$u=function(t){return clearTimeout(t)},lp=typeof window!="undefined"?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||Vi:global.requestAnimationFrame||Vi,fp=typeof window!="undefined"?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||$u:global.cancelAnimationFrame||$u,dp=function(t){return console&&typeof console.warn=="function"&&console.warn(t)},tn=null,pp=function(t){tn&&fp(tn),t.defer?tn=lp(function(){Bu(t,function(){tn=null})}):(Bu(t),tn=null)},Bu=function(t,r){var n=t.baseTag,a=t.bodyAttributes,i=t.htmlAttributes,o=t.linkTags,s=t.metaTags,u=t.noscriptTags,c=t.onChangeClientState,l=t.scriptTags,f=t.styleTags,d=t.title,p=t.titleAttributes;Hi(W.BODY,a),Hi(W.HTML,i),mp(d,p);var m={baseTag:_r(W.BASE,n),linkTags:_r(W.LINK,o),metaTags:_r(W.META,s),noscriptTags:_r(W.NOSCRIPT,u),scriptTags:_r(W.SCRIPT,l),styleTags:_r(W.STYLE,f)},_={},v={};Object.keys(m).forEach(function(A){var T=m[A],j=T.newTags,L=T.oldTags;j.length&&(_[A]=j),L.length&&(v[A]=m[A].oldTags)}),r&&r(),c(t,_,v)},qu=function(t){return Array.isArray(t)?t.join(""):t},mp=function(t,r){typeof t!="undefined"&&document.title!==t&&(document.title=qu(t)),Hi(W.TITLE,r)},Hi=function(t,r){var n=document.getElementsByTagName(t)[0];if(!!n){for(var a=n.getAttribute(ut),i=a?a.split(","):[],o=[].concat(i),s=Object.keys(r),u=0;u<s.length;u++){var c=s[u],l=r[c]||"";n.getAttribute(c)!==l&&n.setAttribute(c,l),i.indexOf(c)===-1&&i.push(c);var f=o.indexOf(c);f!==-1&&o.splice(f,1)}for(var d=o.length-1;d>=0;d--)n.removeAttribute(o[d]);i.length===o.length?n.removeAttribute(ut):n.getAttribute(ut)!==s.join(",")&&n.setAttribute(ut,s.join(","))}},_r=function(t,r){var n=document.head||document.querySelector(W.HEAD),a=n.querySelectorAll(t+"["+ut+"]"),i=Array.prototype.slice.call(a),o=[],s=void 0;return r&&r.length&&r.forEach(function(u){var c=document.createElement(t);for(var l in u)if(u.hasOwnProperty(l))if(l===be.INNER_HTML)c.innerHTML=u.innerHTML;else if(l===be.CSS_TEXT)c.styleSheet?c.styleSheet.cssText=u.cssText:c.appendChild(document.createTextNode(u.cssText));else{var f=typeof u[l]=="undefined"?"":u[l];c.setAttribute(l,f)}c.setAttribute(ut,"true"),i.some(function(d,p){return s=p,c.isEqualNode(d)})?i.splice(s,1):o.push(c)}),i.forEach(function(u){return u.parentNode.removeChild(u)}),o.forEach(function(u){return n.appendChild(u)}),{oldTags:i,newTags:o}},Wu=function(t){return Object.keys(t).reduce(function(r,n){var a=typeof t[n]!="undefined"?n+'="'+t[n]+'"':""+n;return r?r+" "+a:a},"")},hp=function(t,r,n,a){var i=Wu(n),o=qu(r);return i?"<"+t+" "+ut+'="true" '+i+">"+Fi(o,a)+"</"+t+">":"<"+t+" "+ut+'="true">'+Fi(o,a)+"</"+t+">"},_p=function(t,r,n){return r.reduce(function(a,i){var o=Object.keys(i).filter(function(c){return!(c===be.INNER_HTML||c===be.CSS_TEXT)}).reduce(function(c,l){var f=typeof i[l]=="undefined"?l:l+'="'+Fi(i[l],n)+'"';return c?c+" "+f:f},""),s=i.innerHTML||i.cssText||"",u=ep.indexOf(t)===-1;return a+"<"+t+" "+ut+'="true" '+o+(u?"/>":">"+s+"</"+t+">")},"")},Yu=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return Object.keys(t).reduce(function(n,a){return n[Qn[a]||a]=t[a],n},r)},gp=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return Object.keys(t).reduce(function(n,a){return n[Qd[a]||a]=t[a],n},r)},vp=function(t,r,n){var a,i=(a={key:r},a[ut]=!0,a),o=Yu(n,i);return[g.createElement(W.TITLE,o,r)]},yp=function(t,r){return r.map(function(n,a){var i,o=(i={key:a},i[ut]=!0,i);return Object.keys(n).forEach(function(s){var u=Qn[s]||s;if(u===be.INNER_HTML||u===be.CSS_TEXT){var c=n.innerHTML||n.cssText;o.dangerouslySetInnerHTML={__html:c}}else o[u]=n[s]}),g.createElement(t,o)})},gt=function(t,r,n){switch(t){case W.TITLE:return{toComponent:function(){return vp(t,r.title,r.titleAttributes)},toString:function(){return hp(t,r.title,r.titleAttributes,n)}};case Wt.BODY:case Wt.HTML:return{toComponent:function(){return Yu(r)},toString:function(){return Wu(r)}};default:return{toComponent:function(){return yp(t,r)},toString:function(){return _p(t,r,n)}}}},Ku=function(t){var r=t.baseTag,n=t.bodyAttributes,a=t.encode,i=t.htmlAttributes,o=t.linkTags,s=t.metaTags,u=t.noscriptTags,c=t.scriptTags,l=t.styleTags,f=t.title,d=f===void 0?"":f,p=t.titleAttributes;return{base:gt(W.BASE,r,a),bodyAttributes:gt(Wt.BODY,n,a),htmlAttributes:gt(Wt.HTML,i,a),link:gt(W.LINK,o,a),meta:gt(W.META,s,a),noscript:gt(W.NOSCRIPT,u,a),script:gt(W.SCRIPT,c,a),style:gt(W.STYLE,l,a),title:gt(W.TITLE,{title:d,titleAttributes:p},a)}},Ep=function(t){var r,n;return n=r=function(a){ap(i,a);function i(){return rp(this,i),ip(this,a.apply(this,arguments))}return i.prototype.shouldComponentUpdate=function(s){return!Zd(this.props,s)},i.prototype.mapNestedChildrenToProps=function(s,u){if(!u)return null;switch(s.type){case W.SCRIPT:case W.NOSCRIPT:return{innerHTML:u};case W.STYLE:return{cssText:u}}throw new Error("<"+s.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},i.prototype.flattenArrayTypeChildren=function(s){var u,c=s.child,l=s.arrayTypeChildren,f=s.newChildProps,d=s.nestedChildren;return Ge({},l,(u={},u[c.type]=[].concat(l[c.type]||[],[Ge({},f,this.mapNestedChildrenToProps(c,d))]),u))},i.prototype.mapObjectTypeChildren=function(s){var u,c,l=s.child,f=s.newProps,d=s.newChildProps,p=s.nestedChildren;switch(l.type){case W.TITLE:return Ge({},f,(u={},u[l.type]=p,u.titleAttributes=Ge({},d),u));case W.BODY:return Ge({},f,{bodyAttributes:Ge({},d)});case W.HTML:return Ge({},f,{htmlAttributes:Ge({},d)})}return Ge({},f,(c={},c[l.type]=Ge({},d),c))},i.prototype.mapArrayTypeChildrenToProps=function(s,u){var c=Ge({},u);return Object.keys(s).forEach(function(l){var f;c=Ge({},c,(f={},f[l]=s[l],f))}),c},i.prototype.warnOnInvalidChildren=function(s,u){return!0},i.prototype.mapChildrenToProps=function(s,u){var c=this,l={};return g.Children.forEach(s,function(f){if(!(!f||!f.props)){var d=f.props,p=d.children,m=zu(d,["children"]),_=gp(m);switch(c.warnOnInvalidChildren(f,p),f.type){case W.LINK:case W.META:case W.NOSCRIPT:case W.SCRIPT:case W.STYLE:l=c.flattenArrayTypeChildren({child:f,arrayTypeChildren:l,newChildProps:_,nestedChildren:p});break;default:u=c.mapObjectTypeChildren({child:f,newProps:u,newChildProps:_,nestedChildren:p});break}}}),u=this.mapArrayTypeChildrenToProps(l,u),u},i.prototype.render=function(){var s=this.props,u=s.children,c=zu(s,["children"]),l=Ge({},c);return u&&(l=this.mapChildrenToProps(u,l)),g.createElement(t,l)},np(i,null,[{key:"canUseDOM",set:function(s){t.canUseDOM=s}}]),i}(g.Component),r.propTypes={base:Q.object,bodyAttributes:Q.object,children:Q.oneOfType([Q.arrayOf(Q.node),Q.node]),defaultTitle:Q.string,defer:Q.bool,encodeSpecialCharacters:Q.bool,htmlAttributes:Q.object,link:Q.arrayOf(Q.object),meta:Q.arrayOf(Q.object),noscript:Q.arrayOf(Q.object),onChangeClientState:Q.func,script:Q.arrayOf(Q.object),style:Q.arrayOf(Q.object),title:Q.string,titleAttributes:Q.object,titleTemplate:Q.string},r.defaultProps={defer:!0,encodeSpecialCharacters:!0},r.peek=t.peek,r.rewind=function(){var a=t.rewind();return a||(a=Ku({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),a},n},Sp=function(){return null},bp=Wd(cp,pp,Ku)(Sp),Gi=Ep(bp);Gi.renderStatic=Gi.rewind;var gr=g.createContext(null);function Tp(e){e()}var Ju=Tp,Ap=function(t){return Ju=t},Rp=function(){return Ju};function wp(){var e=Rp(),t=null,r=null;return{clear:function(){t=null,r=null},notify:function(){e(function(){for(var a=t;a;)a.callback(),a=a.next})},get:function(){for(var a=[],i=t;i;)a.push(i),i=i.next;return a},subscribe:function(a){var i=!0,o=r={callback:a,next:null,prev:r};return o.prev?o.prev.next=o:t=o,function(){!i||t===null||(i=!1,o.next?o.next.prev=o.prev:r=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var Xu={notify:function(){},get:function(){return[]}};function Op(e,t){var r,n=Xu;function a(f){return u(),n.subscribe(f)}function i(){n.notify()}function o(){l.onStateChange&&l.onStateChange()}function s(){return Boolean(r)}function u(){r||(r=t?t.addNestedSub(o):e.subscribe(o),n=wp())}function c(){r&&(r(),r=void 0,n.clear(),n=Xu)}var l={addNestedSub:a,notifyNestedSubs:i,handleChangeWrapper:o,isSubscribed:s,trySubscribe:u,tryUnsubscribe:c,getListeners:function(){return n}};return l}var Dp=typeof window!="undefined"&&typeof window.document!="undefined"&&typeof window.document.createElement!="undefined"?ie.exports.useLayoutEffect:ie.exports.useEffect;function Ip(e){var t=e.store,r=e.context,n=e.children,a=ie.exports.useMemo(function(){var s=Op(t);return s.onStateChange=s.notifyNestedSubs,{store:t,subscription:s}},[t]),i=ie.exports.useMemo(function(){return t.getState()},[t]);Dp(function(){var s=a.subscription;return s.trySubscribe(),i!==t.getState()&&s.notifyNestedSubs(),function(){s.tryUnsubscribe(),s.onStateChange=null}},[a,i]);var o=r||gr;return g.createElement(o.Provider,{value:a},n)}function ye(){return ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ye.apply(this,arguments)}function Cp(){var e=ie.exports.useContext(gr);return e}function Zu(e){e===void 0&&(e=gr);var t=e===gr?Cp:function(){return ie.exports.useContext(e)};return function(){var n=t(),a=n.store;return a}}var Up=Zu();function Pp(e){e===void 0&&(e=gr);var t=e===gr?Up:Zu(e);return function(){var n=t();return n.dispatch}}var xp=Pp();Ap(Al.exports.unstable_batchedUpdates);function pt(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Rl(e,t)}function ea(e){return e.charAt(0)==="/"}function zi(e,t){for(var r=t,n=r+1,a=e.length;n<a;r+=1,n+=1)e[r]=e[n];e.pop()}function kp(e,t){t===void 0&&(t="");var r=e&&e.split("/")||[],n=t&&t.split("/")||[],a=e&&ea(e),i=t&&ea(t),o=a||i;if(e&&ea(e)?n=r:r.length&&(n.pop(),n=n.concat(r)),!n.length)return"/";var s;if(n.length){var u=n[n.length-1];s=u==="."||u===".."||u===""}else s=!1;for(var c=0,l=n.length;l>=0;l--){var f=n[l];f==="."?zi(n,l):f===".."?(zi(n,l),c++):c&&(zi(n,l),c--)}if(!o)for(;c--;c)n.unshift("..");o&&n[0]!==""&&(!n[0]||!ea(n[0]))&&n.unshift("");var d=n.join("/");return s&&d.substr(-1)!=="/"&&(d+="/"),d}var Mp=!0,Qu="Invariant failed";function xt(e,t){if(!e)throw Mp?new Error(Qu):new Error(Qu+": "+(t||""))}function rn(e){return e.charAt(0)==="/"?e:"/"+e}function ec(e){return e.charAt(0)==="/"?e.substr(1):e}function Lp(e,t){return e.toLowerCase().indexOf(t.toLowerCase())===0&&"/?#".indexOf(e.charAt(t.length))!==-1}function tc(e,t){return Lp(e,t)?e.substr(t.length):e}function rc(e){return e.charAt(e.length-1)==="/"?e.slice(0,-1):e}function Np(e){var t=e||"/",r="",n="",a=t.indexOf("#");a!==-1&&(n=t.substr(a),t=t.substr(0,a));var i=t.indexOf("?");return i!==-1&&(r=t.substr(i),t=t.substr(0,i)),{pathname:t,search:r==="?"?"":r,hash:n==="#"?"":n}}function ze(e){var t=e.pathname,r=e.search,n=e.hash,a=t||"/";return r&&r!=="?"&&(a+=r.charAt(0)==="?"?r:"?"+r),n&&n!=="#"&&(a+=n.charAt(0)==="#"?n:"#"+n),a}function Ke(e,t,r,n){var a;typeof e=="string"?(a=Np(e),a.state=t):(a=ye({},e),a.pathname===void 0&&(a.pathname=""),a.search?a.search.charAt(0)!=="?"&&(a.search="?"+a.search):a.search="",a.hash?a.hash.charAt(0)!=="#"&&(a.hash="#"+a.hash):a.hash="",t!==void 0&&a.state===void 0&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(i){throw i instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):i}return r&&(a.key=r),n?a.pathname?a.pathname.charAt(0)!=="/"&&(a.pathname=kp(a.pathname,n.pathname)):a.pathname=n.pathname:a.pathname||(a.pathname="/"),a}function $i(){var e=null;function t(o){return e=o,function(){e===o&&(e=null)}}function r(o,s,u,c){if(e!=null){var l=typeof e=="function"?e(o,s):e;typeof l=="string"?typeof u=="function"?u(l,c):c(!0):c(l!==!1)}else c(!0)}var n=[];function a(o){var s=!0;function u(){s&&o.apply(void 0,arguments)}return n.push(u),function(){s=!1,n=n.filter(function(c){return c!==u})}}function i(){for(var o=arguments.length,s=new Array(o),u=0;u<o;u++)s[u]=arguments[u];n.forEach(function(c){return c.apply(void 0,s)})}return{setPrompt:t,confirmTransitionTo:r,appendListener:a,notifyListeners:i}}var nc=!!(typeof window!="undefined"&&window.document&&window.document.createElement);function ac(e,t){t(window.confirm(e))}function Fp(){var e=window.navigator.userAgent;return(e.indexOf("Android 2.")!==-1||e.indexOf("Android 4.0")!==-1)&&e.indexOf("Mobile Safari")!==-1&&e.indexOf("Chrome")===-1&&e.indexOf("Windows Phone")===-1?!1:window.history&&"pushState"in window.history}function jp(){return window.navigator.userAgent.indexOf("Trident")===-1}function Vp(){return window.navigator.userAgent.indexOf("Firefox")===-1}function Hp(e){return e.state===void 0&&navigator.userAgent.indexOf("CriOS")===-1}var ic="popstate",oc="hashchange";function sc(){try{return window.history.state||{}}catch(e){return{}}}function Gp(e){e===void 0&&(e={}),nc||xt(!1);var t=window.history,r=Fp(),n=!jp(),a=e,i=a.forceRefresh,o=i===void 0?!1:i,s=a.getUserConfirmation,u=s===void 0?ac:s,c=a.keyLength,l=c===void 0?6:c,f=e.basename?rc(rn(e.basename)):"";function d(C){var O=C||{},M=O.key,S=O.state,E=window.location,R=E.pathname,w=E.search,h=E.hash,P=R+w+h;return f&&(P=tc(P,f)),Ke(P,S,M)}function p(){return Math.random().toString(36).substr(2,l)}var m=$i();function _(C){ye(D,C),D.length=t.length,m.notifyListeners(D.location,D.action)}function v(C){Hp(C)||j(d(C.state))}function A(){j(d(sc()))}var T=!1;function j(C){if(T)T=!1,_();else{var O="POP";m.confirmTransitionTo(C,O,u,function(M){M?_({action:O,location:C}):L(C)})}}function L(C){var O=D.location,M=V.indexOf(O.key);M===-1&&(M=0);var S=V.indexOf(C.key);S===-1&&(S=0);var E=M-S;E&&(T=!0,J(E))}var N=d(sc()),V=[N.key];function H(C){return f+ze(C)}function U(C,O){var M="PUSH",S=Ke(C,O,p(),D.location);m.confirmTransitionTo(S,M,u,function(E){if(!!E){var R=H(S),w=S.key,h=S.state;if(r)if(t.pushState({key:w,state:h},null,R),o)window.location.href=R;else{var P=V.indexOf(D.location.key),y=V.slice(0,P+1);y.push(S.key),V=y,_({action:M,location:S})}else window.location.href=R}})}function x(C,O){var M="REPLACE",S=Ke(C,O,p(),D.location);m.confirmTransitionTo(S,M,u,function(E){if(!!E){var R=H(S),w=S.key,h=S.state;if(r)if(t.replaceState({key:w,state:h},null,R),o)window.location.replace(R);else{var P=V.indexOf(D.location.key);P!==-1&&(V[P]=S.key),_({action:M,location:S})}else window.location.replace(R)}})}function J(C){t.go(C)}function ne(){J(-1)}function ae(){J(1)}var Ae=0;function k(C){Ae+=C,Ae===1&&C===1?(window.addEventListener(ic,v),n&&window.addEventListener(oc,A)):Ae===0&&(window.removeEventListener(ic,v),n&&window.removeEventListener(oc,A))}var I=!1;function Y(C){C===void 0&&(C=!1);var O=m.setPrompt(C);return I||(k(1),I=!0),function(){return I&&(I=!1,k(-1)),O()}}function b(C){var O=m.appendListener(C);return k(1),function(){k(-1),O()}}var D={length:t.length,action:"POP",location:N,createHref:H,push:U,replace:x,go:J,goBack:ne,goForward:ae,block:Y,listen:b};return D}var uc="hashchange",zp={hashbang:{encodePath:function(t){return t.charAt(0)==="!"?t:"!/"+ec(t)},decodePath:function(t){return t.charAt(0)==="!"?t.substr(1):t}},noslash:{encodePath:ec,decodePath:rn},slash:{encodePath:rn,decodePath:rn}};function cc(e){var t=e.indexOf("#");return t===-1?e:e.slice(0,t)}function nn(){var e=window.location.href,t=e.indexOf("#");return t===-1?"":e.substring(t+1)}function $p(e){window.location.hash=e}function Bi(e){window.location.replace(cc(window.location.href)+"#"+e)}function Bp(e){e===void 0&&(e={}),nc||xt(!1);var t=window.history;Vp();var r=e,n=r.getUserConfirmation,a=n===void 0?ac:n,i=r.hashType,o=i===void 0?"slash":i,s=e.basename?rc(rn(e.basename)):"",u=zp[o],c=u.encodePath,l=u.decodePath;function f(){var O=l(nn());return s&&(O=tc(O,s)),Ke(O)}var d=$i();function p(O){ye(C,O),C.length=t.length,d.notifyListeners(C.location,C.action)}var m=!1,_=null;function v(O,M){return O.pathname===M.pathname&&O.search===M.search&&O.hash===M.hash}function A(){var O=nn(),M=c(O);if(O!==M)Bi(M);else{var S=f(),E=C.location;if(!m&&v(E,S)||_===ze(S))return;_=null,T(S)}}function T(O){if(m)m=!1,p();else{var M="POP";d.confirmTransitionTo(O,M,a,function(S){S?p({action:M,location:O}):j(O)})}}function j(O){var M=C.location,S=H.lastIndexOf(ze(M));S===-1&&(S=0);var E=H.lastIndexOf(ze(O));E===-1&&(E=0);var R=S-E;R&&(m=!0,ne(R))}var L=nn(),N=c(L);L!==N&&Bi(N);var V=f(),H=[ze(V)];function U(O){var M=document.querySelector("base"),S="";return M&&M.getAttribute("href")&&(S=cc(window.location.href)),S+"#"+c(s+ze(O))}function x(O,M){var S="PUSH",E=Ke(O,void 0,void 0,C.location);d.confirmTransitionTo(E,S,a,function(R){if(!!R){var w=ze(E),h=c(s+w),P=nn()!==h;if(P){_=w,$p(h);var y=H.lastIndexOf(ze(C.location)),K=H.slice(0,y+1);K.push(w),H=K,p({action:S,location:E})}else p()}})}function J(O,M){var S="REPLACE",E=Ke(O,void 0,void 0,C.location);d.confirmTransitionTo(E,S,a,function(R){if(!!R){var w=ze(E),h=c(s+w),P=nn()!==h;P&&(_=w,Bi(h));var y=H.indexOf(ze(C.location));y!==-1&&(H[y]=w),p({action:S,location:E})}})}function ne(O){t.go(O)}function ae(){ne(-1)}function Ae(){ne(1)}var k=0;function I(O){k+=O,k===1&&O===1?window.addEventListener(uc,A):k===0&&window.removeEventListener(uc,A)}var Y=!1;function b(O){O===void 0&&(O=!1);var M=d.setPrompt(O);return Y||(I(1),Y=!0),function(){return Y&&(Y=!1,I(-1)),M()}}function D(O){var M=d.appendListener(O);return I(1),function(){I(-1),M()}}var C={length:t.length,action:"POP",location:V,createHref:U,push:x,replace:J,go:ne,goBack:ae,goForward:Ae,block:b,listen:D};return C}function lc(e,t,r){return Math.min(Math.max(e,t),r)}function qp(e){e===void 0&&(e={});var t=e,r=t.getUserConfirmation,n=t.initialEntries,a=n===void 0?["/"]:n,i=t.initialIndex,o=i===void 0?0:i,s=t.keyLength,u=s===void 0?6:s,c=$i();function l(U){ye(H,U),H.length=H.entries.length,c.notifyListeners(H.location,H.action)}function f(){return Math.random().toString(36).substr(2,u)}var d=lc(o,0,a.length-1),p=a.map(function(U){return typeof U=="string"?Ke(U,void 0,f()):Ke(U,void 0,U.key||f())}),m=ze;function _(U,x){var J="PUSH",ne=Ke(U,x,f(),H.location);c.confirmTransitionTo(ne,J,r,function(ae){if(!!ae){var Ae=H.index,k=Ae+1,I=H.entries.slice(0);I.length>k?I.splice(k,I.length-k,ne):I.push(ne),l({action:J,location:ne,index:k,entries:I})}})}function v(U,x){var J="REPLACE",ne=Ke(U,x,f(),H.location);c.confirmTransitionTo(ne,J,r,function(ae){!ae||(H.entries[H.index]=ne,l({action:J,location:ne}))})}function A(U){var x=lc(H.index+U,0,H.entries.length-1),J="POP",ne=H.entries[x];c.confirmTransitionTo(ne,J,r,function(ae){ae?l({action:J,location:ne,index:x}):l()})}function T(){A(-1)}function j(){A(1)}function L(U){var x=H.index+U;return x>=0&&x<H.entries.length}function N(U){return U===void 0&&(U=!1),c.setPrompt(U)}function V(U){return c.appendListener(U)}var H={length:p.length,action:"POP",location:p[d],index:d,entries:p,createHref:m,push:_,replace:v,go:A,goBack:T,goForward:j,canGo:L,block:N,listen:V};return H}var qi=1073741823,fc=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:{};function Wp(){var e="__global_unique_id__";return fc[e]=(fc[e]||0)+1}function Yp(e,t){return e===t?e!==0||1/e==1/t:e!==e&&t!==t}function Kp(e){var t=[];return{on:function(n){t.push(n)},off:function(n){t=t.filter(function(a){return a!==n})},get:function(){return e},set:function(n,a){e=n,t.forEach(function(i){return i(e,a)})}}}function Jp(e){return Array.isArray(e)?e[0]:e}function Xp(e,t){var r,n,a="__create-react-context-"+Wp()+"__",i=function(s){pt(u,s);function u(){var l;return l=s.apply(this,arguments)||this,l.emitter=Kp(l.props.value),l}var c=u.prototype;return c.getChildContext=function(){var f;return f={},f[a]=this.emitter,f},c.componentWillReceiveProps=function(f){if(this.props.value!==f.value){var d=this.props.value,p=f.value,m;Yp(d,p)?m=0:(m=typeof t=="function"?t(d,p):qi,m|=0,m!==0&&this.emitter.set(f.value,m))}},c.render=function(){return this.props.children},u}(ie.exports.Component);i.childContextTypes=(r={},r[a]=Q.object.isRequired,r);var o=function(s){pt(u,s);function u(){var l;return l=s.apply(this,arguments)||this,l.state={value:l.getValue()},l.onUpdate=function(f,d){var p=l.observedBits|0;(p&d)!=0&&l.setState({value:l.getValue()})},l}var c=u.prototype;return c.componentWillReceiveProps=function(f){var d=f.observedBits;this.observedBits=d??qi},c.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var f=this.props.observedBits;this.observedBits=f??qi},c.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},c.getValue=function(){return this.context[a]?this.context[a].get():e},c.render=function(){return Jp(this.props.children)(this.state.value)},u}(ie.exports.Component);return o.contextTypes=(n={},n[a]=Q.object,n),{Provider:i,Consumer:o}}var Zp=g.createContext||Xp,vr={exports:{}},Qp=Array.isArray||function(e){return Object.prototype.toString.call(e)=="[object Array]"},ta=Qp;vr.exports=mc;vr.exports.parse=Wi;vr.exports.compile=tm;vr.exports.tokensToFunction=dc;vr.exports.tokensToRegExp=pc;var em=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Wi(e,t){for(var r=[],n=0,a=0,i="",o=t&&t.delimiter||"/",s;(s=em.exec(e))!=null;){var u=s[0],c=s[1],l=s.index;if(i+=e.slice(a,l),a=l+u.length,c){i+=c[1];continue}var f=e[a],d=s[2],p=s[3],m=s[4],_=s[5],v=s[6],A=s[7];i&&(r.push(i),i="");var T=d!=null&&f!=null&&f!==d,j=v==="+"||v==="*",L=v==="?"||v==="*",N=s[2]||o,V=m||_;r.push({name:p||n++,prefix:d||"",delimiter:N,optional:L,repeat:j,partial:T,asterisk:!!A,pattern:V?am(V):A?".*":"[^"+ra(N)+"]+?"})}return a<e.length&&(i+=e.substr(a)),i&&r.push(i),r}function tm(e,t){return dc(Wi(e,t),t)}function rm(e){return encodeURI(e).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function nm(e){return encodeURI(e).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function dc(e,t){for(var r=new Array(e.length),n=0;n<e.length;n++)typeof e[n]=="object"&&(r[n]=new RegExp("^(?:"+e[n].pattern+")$",Ki(t)));return function(a,i){for(var o="",s=a||{},u=i||{},c=u.pretty?rm:encodeURIComponent,l=0;l<e.length;l++){var f=e[l];if(typeof f=="string"){o+=f;continue}var d=s[f.name],p;if(d==null)if(f.optional){f.partial&&(o+=f.prefix);continue}else throw new TypeError('Expected "'+f.name+'" to be defined');if(ta(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(d.length===0){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var m=0;m<d.length;m++){if(p=c(d[m]),!r[l].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");o+=(m===0?f.prefix:f.delimiter)+p}continue}if(p=f.asterisk?nm(d):c(d),!r[l].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');o+=f.prefix+p}return o}}function ra(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function am(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Yi(e,t){return e.keys=t,e}function Ki(e){return e&&e.sensitive?"":"i"}function im(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Yi(e,t)}function om(e,t,r){for(var n=[],a=0;a<e.length;a++)n.push(mc(e[a],t,r).source);var i=new RegExp("(?:"+n.join("|")+")",Ki(r));return Yi(i,t)}function sm(e,t,r){return pc(Wi(e,r),t,r)}function pc(e,t,r){ta(t)||(r=t||r,t=[]),r=r||{};for(var n=r.strict,a=r.end!==!1,i="",o=0;o<e.length;o++){var s=e[o];if(typeof s=="string")i+=ra(s);else{var u=ra(s.prefix),c="(?:"+s.pattern+")";t.push(s),s.repeat&&(c+="(?:"+u+c+")*"),s.optional?s.partial?c=u+"("+c+")?":c="(?:"+u+"("+c+"))?":c=u+"("+c+")",i+=c}}var l=ra(r.delimiter||"/"),f=i.slice(-l.length)===l;return n||(i=(f?i.slice(0,-l.length):i)+"(?:"+l+"(?=$))?"),a?i+="$":i+=n&&f?"":"(?="+l+"|$)",Yi(new RegExp("^"+i,Ki(r)),t)}function mc(e,t,r){return ta(t)||(r=t||r,t=[]),r=r||{},e instanceof RegExp?im(e,t):ta(e)?om(e,t,r):sm(e,t,r)}var um=vr.exports,hc=function(t){var r=Zp();return r.displayName=t,r},_c=hc("Router-History"),kt=hc("Router"),na=function(e){pt(t,e),t.computeRootMatch=function(a){return{path:"/",url:"/",params:{},isExact:a==="/"}};function t(n){var a;return a=e.call(this,n)||this,a.state={location:n.history.location},a._isMounted=!1,a._pendingLocation=null,n.staticContext||(a.unlisten=n.history.listen(function(i){a._isMounted?a.setState({location:i}):a._pendingLocation=i})),a}var r=t.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return g.createElement(kt.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},g.createElement(_c.Provider,{children:this.props.children||null,value:this.props.history}))},t}(g.Component);g.Component;g.Component;var gc={},cm=1e4,vc=0;function lm(e,t){var r=""+t.end+t.strict+t.sensitive,n=gc[r]||(gc[r]={});if(n[e])return n[e];var a=[],i=um(e,a,t),o={regexp:i,keys:a};return vc<cm&&(n[e]=o,vc++),o}function aa(e,t){t===void 0&&(t={}),(typeof t=="string"||Array.isArray(t))&&(t={path:t});var r=t,n=r.path,a=r.exact,i=a===void 0?!1:a,o=r.strict,s=o===void 0?!1:o,u=r.sensitive,c=u===void 0?!1:u,l=[].concat(n);return l.reduce(function(f,d){if(!d&&d!=="")return null;if(f)return f;var p=lm(d,{end:i,strict:s,sensitive:c}),m=p.regexp,_=p.keys,v=m.exec(e);if(!v)return null;var A=v[0],T=v.slice(1),j=e===A;return i&&!j?null:{path:d,url:d==="/"&&A===""?"/":A,isExact:j,params:_.reduce(function(L,N,V){return L[N.name]=T[V],L},{})}},null)}function fm(e){return g.Children.count(e)===0}var me=function(e){pt(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.render=function(){var a=this;return g.createElement(kt.Consumer,null,function(i){i||xt(!1);var o=a.props.location||i.location,s=a.props.computedMatch?a.props.computedMatch:a.props.path?aa(o.pathname,a.props):i.match,u=ye({},i,{location:o,match:s}),c=a.props,l=c.children,f=c.component,d=c.render;return Array.isArray(l)&&fm(l)&&(l=null),g.createElement(kt.Provider,{value:u},u.match?l?typeof l=="function"?l(u):l:f?g.createElement(f,u):d?d(u):null:typeof l=="function"?l(u):null)})},t}(g.Component);function Ji(e){return e.charAt(0)==="/"?e:"/"+e}function dm(e,t){return e?ye({},t,{pathname:Ji(e)+t.pathname}):t}function pm(e,t){if(!e)return t;var r=Ji(e);return t.pathname.indexOf(r)!==0?t:ye({},t,{pathname:t.pathname.substr(r.length)})}function yc(e){return typeof e=="string"?e:ze(e)}function Xi(e){return function(){xt(!1)}}function Ec(){}g.Component;var Sc=function(e){pt(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.render=function(){var a=this;return g.createElement(kt.Consumer,null,function(i){i||xt(!1);var o=a.props.location||i.location,s,u;return g.Children.forEach(a.props.children,function(c){if(u==null&&g.isValidElement(c)){s=c;var l=c.props.path||c.props.from;u=l?aa(o.pathname,ye({},c.props,{path:l})):i.match}}),u?g.cloneElement(s,{location:o,computedMatch:u}):null})},t}(g.Component);function gg(e){var t="withRouter("+(e.displayName||e.name)+")",r=function(a){var i=a.wrappedComponentRef,o=Tr(a,["wrappedComponentRef"]);return g.createElement(kt.Consumer,null,function(s){return s||xt(!1),g.createElement(e,ye({},o,s,{ref:i}))})};return r.displayName=t,r.WrappedComponent=e,bi(r,e)}var bc=g.useContext;function vg(){return bc(_c)}function mm(){return bc(kt).location}var hm=function(e){pt(t,e);function t(){for(var n,a=arguments.length,i=new Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=e.call.apply(e,[this].concat(i))||this,n.history=Gp(n.props),n}var r=t.prototype;return r.render=function(){return g.createElement(na,{history:this.history,children:this.props.children})},t}(g.Component);g.Component;var Zi=function(t,r){return typeof t=="function"?t(r):t},Qi=function(t,r){return typeof t=="string"?Ke(t,null,null,r):t},eo=function(t){return t},yr=g.forwardRef;typeof yr=="undefined"&&(yr=eo);function _m(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var gm=yr(function(e,t){var r=e.innerRef,n=e.navigate,a=e.onClick,i=Tr(e,["innerRef","navigate","onClick"]),o=i.target,s=ye({},i,{onClick:function(c){try{a&&a(c)}catch(l){throw c.preventDefault(),l}!c.defaultPrevented&&c.button===0&&(!o||o==="_self")&&!_m(c)&&(c.preventDefault(),n())}});return eo!==yr?s.ref=t||r:s.ref=r,g.createElement("a",s)}),vm=yr(function(e,t){var r=e.component,n=r===void 0?gm:r,a=e.replace,i=e.to,o=e.innerRef,s=Tr(e,["component","replace","to","innerRef"]);return g.createElement(kt.Consumer,null,function(u){u||xt(!1);var c=u.history,l=Qi(Zi(i,u.location),u.location),f=l?c.createHref(l):"",d=ye({},s,{href:f,navigate:function(){var m=Zi(i,u.location),_=ze(u.location)===ze(Qi(m)),v=a||_?c.replace:c.push;v(m)}});return eo!==yr?d.ref=t||o:d.innerRef=o,g.createElement(n,d)})}),Tc=function(t){return t},ia=g.forwardRef;typeof ia=="undefined"&&(ia=Tc);function ym(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter(function(n){return n}).join(" ")}ia(function(e,t){var r=e["aria-current"],n=r===void 0?"page":r,a=e.activeClassName,i=a===void 0?"active":a,o=e.activeStyle,s=e.className,u=e.exact,c=e.isActive,l=e.location,f=e.sensitive,d=e.strict,p=e.style,m=e.to,_=e.innerRef,v=Tr(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return g.createElement(kt.Consumer,null,function(A){A||xt(!1);var T=l||A.location,j=Qi(Zi(m,T),T),L=j.pathname,N=L&&L.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),V=N?aa(T.pathname,{path:N,exact:u,sensitive:f,strict:d}):null,H=!!(c?c(V,T):V),U=typeof s=="function"?s(H):s,x=typeof p=="function"?p(H):p;H&&(U=ym(U,i),x=ye({},x,o));var J=ye({"aria-current":H&&n||null,className:U,style:x,to:j},v);return Tc!==ia?J.ref=t||_:J.innerRef=_,g.createElement(vm,J)})});function to(e){return e&&Mo(e)==="object"&&e.constructor===Object}function Er(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{clone:!0},n=r.clone?ye({},e):e;return to(e)&&to(t)&&Object.keys(t).forEach(function(a){a!=="__proto__"&&(to(t[a])&&a in e?n[a]=Er(e[a],t[a],r):n[a]=t[a])}),n}function ro(e){for(var t="https://material-ui.com/production-error/?code="+e,r=1;r<arguments.length;r+=1)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function no(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;return Math.min(Math.max(t,e),r)}function Em(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),r=e.match(t);return r&&r[0].length===1&&(r=r.map(function(n){return n+n})),r?"rgb".concat(r.length===4?"a":"","(").concat(r.map(function(n,a){return a<3?parseInt(n,16):Math.round(parseInt(n,16)/255*1e3)/1e3}).join(", "),")"):""}function Sm(e){e=Yt(e);var t=e,r=t.values,n=r[0],a=r[1]/100,i=r[2]/100,o=a*Math.min(i,1-i),s=function(f){var d=arguments.length>1&&arguments[1]!==void 0?arguments[1]:(f+n/30)%12;return i-o*Math.max(Math.min(d-3,9-d,1),-1)},u="rgb",c=[Math.round(s(0)*255),Math.round(s(8)*255),Math.round(s(4)*255)];return e.type==="hsla"&&(u+="a",c.push(r[3])),oa({type:u,values:c})}function Yt(e){if(e.type)return e;if(e.charAt(0)==="#")return Yt(Em(e));var t=e.indexOf("("),r=e.substring(0,t);if(["rgb","rgba","hsl","hsla"].indexOf(r)===-1)throw new Error(ro(3,e));var n=e.substring(t+1,e.length-1).split(",");return n=n.map(function(a){return parseFloat(a)}),{type:r,values:n}}function oa(e){var t=e.type,r=e.values;return t.indexOf("rgb")!==-1?r=r.map(function(n,a){return a<3?parseInt(n,10):n}):t.indexOf("hsl")!==-1&&(r[1]="".concat(r[1],"%"),r[2]="".concat(r[2],"%")),"".concat(t,"(").concat(r.join(", "),")")}function bm(e,t){var r=Ac(e),n=Ac(t);return(Math.max(r,n)+.05)/(Math.min(r,n)+.05)}function Ac(e){e=Yt(e);var t=e.type==="hsl"?Yt(Sm(e)).values:e.values;return t=t.map(function(r){return r/=255,r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function yg(e,t){return e=Yt(e),t=no(t),(e.type==="rgb"||e.type==="hsl")&&(e.type+="a"),e.values[3]=t,oa(e)}function Tm(e,t){if(e=Yt(e),t=no(t),e.type.indexOf("hsl")!==-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")!==-1)for(var r=0;r<3;r+=1)e.values[r]*=1-t;return oa(e)}function Am(e,t){if(e=Yt(e),t=no(t),e.type.indexOf("hsl")!==-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")!==-1)for(var r=0;r<3;r+=1)e.values[r]+=(255-e.values[r])*t;return oa(e)}var Mt=["xs","sm","md","lg","xl"];function Rm(e){var t=e.values,r=t===void 0?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,n=e.unit,a=n===void 0?"px":n,i=e.step,o=i===void 0?5:i,s=Ar(e,["values","unit","step"]);function u(p){var m=typeof r[p]=="number"?r[p]:p;return"@media (min-width:".concat(m).concat(a,")")}function c(p){var m=Mt.indexOf(p)+1,_=r[Mt[m]];if(m===Mt.length)return u("xs");var v=typeof _=="number"&&m>0?_:p;return"@media (max-width:".concat(v-o/100).concat(a,")")}function l(p,m){var _=Mt.indexOf(m);return _===Mt.length-1?u(p):"@media (min-width:".concat(typeof r[p]=="number"?r[p]:p).concat(a,") and ")+"(max-width:".concat((_!==-1&&typeof r[Mt[_+1]]=="number"?r[Mt[_+1]]:m)-o/100).concat(a,")")}function f(p){return l(p,p)}function d(p){return r[p]}return ye({keys:Mt,values:r,up:u,down:c,between:l,only:f,width:d},s)}function wm(e,t,r){var n;return ye({gutters:function(){var i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return console.warn(["Material-UI: theme.mixins.gutters() is deprecated.","You can use the source of the mixin directly:",`
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      [theme.breakpoints.up('sm')]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3),
      },
      `].join(`
`)),ye({paddingLeft:t(2),paddingRight:t(2)},i,ln({},e.up("sm"),ye({paddingLeft:t(3),paddingRight:t(3)},i[e.up("sm")])))},toolbar:(n={minHeight:56},ln(n,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),ln(n,e.up("sm"),{minHeight:64}),n)},r)}var Om={black:"#000",white:"#fff"},sa=Om,Dm={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},ao=Dm,Im={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},io=Im,Cm={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},oo=Cm,Um={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},ua=Um,Pm={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},so=Pm,xm={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},uo=xm,km={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},co=km,Rc={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:sa.white,default:ao[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},lo={text:{primary:sa.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:ao[800],default:"#303030"},action:{active:sa.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function wc(e,t,r,n){var a=n.light||n,i=n.dark||n*1.5;e[t]||(e.hasOwnProperty(r)?e[t]=e[r]:t==="light"?e.light=Am(e.main,a):t==="dark"&&(e.dark=Tm(e.main,i)))}function Mm(e){var t=e.primary,r=t===void 0?{light:io[300],main:io[500],dark:io[700]}:t,n=e.secondary,a=n===void 0?{light:oo.A200,main:oo.A400,dark:oo.A700}:n,i=e.error,o=i===void 0?{light:ua[300],main:ua[500],dark:ua[700]}:i,s=e.warning,u=s===void 0?{light:so[300],main:so[500],dark:so[700]}:s,c=e.info,l=c===void 0?{light:uo[300],main:uo[500],dark:uo[700]}:c,f=e.success,d=f===void 0?{light:co[300],main:co[500],dark:co[700]}:f,p=e.type,m=p===void 0?"light":p,_=e.contrastThreshold,v=_===void 0?3:_,A=e.tonalOffset,T=A===void 0?.2:A,j=Ar(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function L(U){var x=bm(U,lo.text.primary)>=v?lo.text.primary:Rc.text.primary;return x}var N=function(x){var J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:500,ne=arguments.length>2&&arguments[2]!==void 0?arguments[2]:300,ae=arguments.length>3&&arguments[3]!==void 0?arguments[3]:700;if(x=ye({},x),!x.main&&x[J]&&(x.main=x[J]),!x.main)throw new Error(ro(4,J));if(typeof x.main!="string")throw new Error(ro(5,JSON.stringify(x.main)));return wc(x,"light",ne,T),wc(x,"dark",ae,T),x.contrastText||(x.contrastText=L(x.main)),x},V={dark:lo,light:Rc},H=Er(ye({common:sa,type:m,primary:N(r),secondary:N(a,"A400","A200","A700"),error:N(o),warning:N(u),info:N(l),success:N(d),grey:ao,contrastThreshold:v,getContrastText:L,augmentColor:N,tonalOffset:T},V[m]),j);return H}function Oc(e){return Math.round(e*1e5)/1e5}function Lm(e){return Oc(e)}var Dc={textTransform:"uppercase"},Ic='"Roboto", "Helvetica", "Arial", sans-serif';function Nm(e,t){var r=typeof t=="function"?t(e):t,n=r.fontFamily,a=n===void 0?Ic:n,i=r.fontSize,o=i===void 0?14:i,s=r.fontWeightLight,u=s===void 0?300:s,c=r.fontWeightRegular,l=c===void 0?400:c,f=r.fontWeightMedium,d=f===void 0?500:f,p=r.fontWeightBold,m=p===void 0?700:p,_=r.htmlFontSize,v=_===void 0?16:_,A=r.allVariants,T=r.pxToRem,j=Ar(r,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),L=o/14,N=T||function(U){return"".concat(U/v*L,"rem")},V=function(x,J,ne,ae,Ae){return ye({fontFamily:a,fontWeight:x,fontSize:N(J),lineHeight:ne},a===Ic?{letterSpacing:"".concat(Oc(ae/J),"em")}:{},Ae,A)},H={h1:V(u,96,1.167,-1.5),h2:V(u,60,1.2,-.5),h3:V(l,48,1.167,0),h4:V(l,34,1.235,.25),h5:V(l,24,1.334,0),h6:V(d,20,1.6,.15),subtitle1:V(l,16,1.75,.15),subtitle2:V(d,14,1.57,.1),body1:V(l,16,1.5,.15),body2:V(l,14,1.43,.15),button:V(d,14,1.75,.4,Dc),caption:V(l,12,1.66,.4),overline:V(l,12,2.66,1,Dc)};return Er(ye({htmlFontSize:v,pxToRem:N,round:Lm,fontFamily:a,fontSize:o,fontWeightLight:u,fontWeightRegular:l,fontWeightMedium:d,fontWeightBold:m},H),j,{clone:!1})}var Fm=.2,jm=.14,Vm=.12;function Te(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(Fm,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(jm,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(Vm,")")].join(",")}var Hm=["none",Te(0,2,1,-1,0,1,1,0,0,1,3,0),Te(0,3,1,-2,0,2,2,0,0,1,5,0),Te(0,3,3,-2,0,3,4,0,0,1,8,0),Te(0,2,4,-1,0,4,5,0,0,1,10,0),Te(0,3,5,-1,0,5,8,0,0,1,14,0),Te(0,3,5,-1,0,6,10,0,0,1,18,0),Te(0,4,5,-2,0,7,10,1,0,2,16,1),Te(0,5,5,-3,0,8,10,1,0,3,14,2),Te(0,5,6,-3,0,9,12,1,0,3,16,2),Te(0,6,6,-3,0,10,14,1,0,4,18,3),Te(0,6,7,-4,0,11,15,1,0,4,20,3),Te(0,7,8,-4,0,12,17,2,0,5,22,4),Te(0,7,8,-4,0,13,19,2,0,5,24,4),Te(0,7,9,-4,0,14,21,2,0,5,26,4),Te(0,8,9,-5,0,15,22,2,0,6,28,5),Te(0,8,10,-5,0,16,24,2,0,6,30,5),Te(0,8,11,-5,0,17,26,2,0,6,32,5),Te(0,9,11,-5,0,18,28,2,0,7,34,6),Te(0,9,12,-6,0,19,29,2,0,7,36,6),Te(0,10,13,-6,0,20,31,3,0,8,38,7),Te(0,10,13,-6,0,21,33,3,0,8,40,7),Te(0,10,14,-6,0,22,35,3,0,8,42,7),Te(0,11,14,-7,0,23,36,3,0,9,44,8),Te(0,11,15,-7,0,24,38,3,0,9,46,8)],Gm=Hm,zm={borderRadius:4},$m=zm;function Bm(e,t){return t?Er(e,t,{clone:!1}):e}var qm={xs:0,sm:600,md:960,lg:1280,xl:1920},Cc={keys:["xs","sm","md","lg","xl"],up:function(t){return"@media (min-width:".concat(qm[t],"px)")}};function Wm(e,t,r){if(Array.isArray(t)){var n=e.theme.breakpoints||Cc;return t.reduce(function(o,s,u){return o[n.up(n.keys[u])]=r(t[u]),o},{})}if(Mo(t)==="object"){var a=e.theme.breakpoints||Cc;return Object.keys(t).reduce(function(o,s){return o[a.up(s)]=r(t[s]),o},{})}var i=r(t);return i}function Ym(e){var t={};return function(r){return t[r]===void 0&&(t[r]=e(r)),t[r]}}var Km={m:"margin",p:"padding"},Jm={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Uc={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Xm=Ym(function(e){if(e.length>2)if(Uc[e])e=Uc[e];else return[e];var t=e.split(""),r=wl(t,2),n=r[0],a=r[1],i=Km[n],o=Jm[a]||"";return Array.isArray(o)?o.map(function(s){return i+s}):[i+o]}),Pc=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function xc(e){var t=e.spacing||8;return typeof t=="number"?function(r){return t*r}:Array.isArray(t)?function(r){return t[r]}:typeof t=="function"?t:function(){}}function Zm(e,t){if(typeof t=="string"||t==null)return t;var r=Math.abs(t),n=e(r);return t>=0?n:typeof n=="number"?-n:"-".concat(n)}function Qm(e,t){return function(r){return e.reduce(function(n,a){return n[a]=Zm(t,r),n},{})}}function kc(e){var t=e.theme,r=xc(t);return Object.keys(e).map(function(n){if(Pc.indexOf(n)===-1)return null;var a=Xm(n),i=Qm(a,r),o=e[n];return Wm(e,o,i)}).reduce(Bm,{})}kc.propTypes={};kc.filterProps=Pc;function eh(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:8;if(e.mui)return e;var t=xc({spacing:e}),r=function(){for(var a=arguments.length,i=new Array(a),o=0;o<a;o++)i[o]=arguments[o];return i.length===0?t(1):i.length===1?t(i[0]):i.map(function(s){if(typeof s=="string")return s;var u=t(s);return typeof u=="number"?"".concat(u,"px"):u}).join(" ")};return Object.defineProperty(r,"unit",{get:function(){return e}}),r.mui=!0,r}var Mc={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Lc={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Nc(e){return"".concat(Math.round(e),"ms")}var th={easing:Mc,duration:Lc,create:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:["all"],r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=r.duration,a=n===void 0?Lc.standard:n,i=r.easing,o=i===void 0?Mc.easeInOut:i,s=r.delay,u=s===void 0?0:s;return Ar(r,["duration","easing","delay"]),(Array.isArray(t)?t:[t]).map(function(c){return"".concat(c," ").concat(typeof a=="string"?a:Nc(a)," ").concat(o," ").concat(typeof u=="string"?u:Nc(u))}).join(",")},getAutoHeightDuration:function(t){if(!t)return 0;var r=t/36;return Math.round((4+15*Math.pow(r,.25)+r/5)*10)}},rh={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},nh=rh;function ah(){for(var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=e.breakpoints,r=t===void 0?{}:t,n=e.mixins,a=n===void 0?{}:n,i=e.palette,o=i===void 0?{}:i,s=e.spacing,u=e.typography,c=u===void 0?{}:u,l=Ar(e,["breakpoints","mixins","palette","spacing","typography"]),f=Mm(o),d=Rm(r),p=eh(s),m=Er({breakpoints:d,direction:"ltr",mixins:wm(d,p,a),overrides:{},palette:f,props:{},shadows:Gm,typography:Nm(f,c),spacing:p,shape:$m,transitions:th,zIndex:nh},l),_=arguments.length,v=new Array(_>1?_-1:0),A=1;A<_;A++)v[A-1]=arguments[A];return m=v.reduce(function(T,j){return Er(T,j)},m),m}const ih=ah({palette:{primary:{main:"#5151FF"},secondary:{main:"#FFFFFF"},error:{main:ua.A400},background:{default:"#000000"},text:{primary:"#FFFFFF"}},typography:{fontFamily:["SFProText-Regular","Roboto","Helvetica","Arial","sans-serif"].join(","),fontSize:14,button:{color:"#FFFFFF"}},overrides:{MuiTypography:{body1:{fontFamily:["SFProText-Regular","Roboto","Helvetica","Arial","sans-serif"].join(",")},h1:{fontSize:28,fontWeight:"bold",margin:"15px 0px",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h2:{fontSize:16,margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h3:{fontSize:14,margin:"5px 0px",fontWeight:"bold",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h4:{fontSize:14,margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center","&.MuiTypography-colorSecondary":{color:"#8A8A8E"}},h5:{fontSize:18,fontWeight:"bold",margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h6:{fontSize:14,fontFamily:"SFProText-Regular"},alignRight:{textAlign:"right",justifyContent:"flex-end",alignItems:"right"},alignLeft:{textAlign:"left",justifyContent:"flex-start",alignItems:"left"},alignCenter:{textAlign:"center",justifyContent:"center",alignItems:"center"}},MuiContainer:{root:{flex:"none"}},MuiDialog:{paperWidthSm:{maxWidth:"40%",width:"40%",margin:"0 auto",fontSize:16,textAlign:"center",backgroundColor:"#FFFFFF","@media (max-width: 768px)":{maxWidth:"90%",width:"90%"}}},MuiDialogTitle:{root:{display:"flex",flexDirection:"row-reverse",alignItems:"center"}},MuiDialogContent:{root:{textAlign:"justify",padding:" 0 24px 24px 24px"}},MuiButtonBase:{root:{backgroundColor:"rgba(0, 0, 0, ,0.9)",color:"#000000",fontSize:16,textAlign:"center",margin:"0 10px"}},MuiIconButton:{root:{color:"#000000","&:hover":{backgroundColor:"transparent"}},colorPrimary:{backgroundColor:"#5151FF",color:"#FFFFFF","&:hover":{backgroundColor:"#5151FF"}},colorSecondary:{backgroundColor:"transparent",color:"#8E8E93"}},MuiSlider:{root:{color:"#484848"},thumb:{height:"24px",width:"24px",marginTop:"-10px",boxSizing:"border-box"},thumbColorPrimary:{background:"rgba(0, 0, 0, 0.8)",border:"2px solid #A8A8FF"}},MuiLinearProgress:{root:{height:"34px",backgroundColor:"#FFFFFF",borderRadius:"8px","@media (max-width: 768px)":{height:"16px",borderRadius:"10px"}},bar:{borderRadius:"inherit"}},MuiMenuItem:{root:{padding:"5px",borderRadius:"8px"}},MuiSnackbar:{root:{maxWidth:"80%",minWidth:"40%",width:"auto",left:"30%",right:"30%",userSelect:"none",borderRadius:"8px",fontSize:16,backgroundColor:"rgba(0,0,0,0.9)",boxShadow:"0px 1px 3px rgba(0, 0, 0, 0.2)",padding:"20px",boxSizing:"border-box","@media (max-width: 768px)":{maxWidth:"90%",width:"90%",left:"5%",right:"5%"},MuiSvgIcon:{root:{height:"7em",width:"auto",color:"#000000"}}},anchorOriginTopCenter:{top:"10%"},anchorOriginBottomCenter:{bottom:"60px",left:"50%",transform:"translate(-50%, 20px)"},anchorOriginTopLeft:{left:"0px",top:"24px",width:"52%",maxWidth:"80%","@media (max-width: 768px)":{width:"90%"},"@media (min-width: 600px)":{left:"0px"}}},MuiSnackbarContent:{root:{color:"#FFFFFF",backgroundColor:"rgba(0, 0, 0, 0.9)",minWidth:"0px","@media (min-width: 600px)":{minWidth:"0px"}}},MuiDrawer:{paper:{padding:"20px",backgroundColor:"rgba(0,0,0,0.85)"},paperAnchorRight:{width:"25%","@media (max-width: 1280px)":{width:"33%"},"@media (max-width: 1024px)":{width:"40%"},"@media (orientation: portrait)":{width:"100vw"}}},MuiCard:{root:{overflow:"visible"}},MuiCardMedia:{media:{"&:hover":{backgroundColor:"#A8A8FF"}}},MuiList:{root:{background:"rgba(206,206,206,0.1)",color:"#FFFFFF"}},MuiListItem:{root:{padding:"0px",paddingTop:"0px",margin:"2px 0"}},MuiListItemText:{root:{background:"rgba(0, 0, 0, .5)",borderRadius:"5px",padding:"5px 10px",width:"fit-content",flex:"inherit",wordBreak:"break-all"}},MuiCardContent:{root:{margin:"5px 0",padding:"5px 20px","&:last-child":{paddingBottom:"0px"}}},MuiCardHeader:{root:{padding:"0 15px 5px 15px"},avatar:{borderRadius:"50%",overflow:"hidden",height:"40px",width:"40px"}},MuiPaper:{root:{backgroundColor:"transparent",color:"#000000"}},MuiInputBase:{input:{color:"#000000"}},MuiFormLabel:{root:{color:"#000000"}},MuiButton:{root:{width:"220px",margin:"10px auto",cursor:"pointer",fontSize:16,borderRadius:"10px",textTransform:"none"},outlined:{background:"transparent"},outlinedPrimary:{"&:hover":{boxShadow:"0 0 10px #5151FF"}},outlinedSecondary:{"&:hover":{boxShadow:"0 0 10px #FFFFFF"}},containedSecondary:{backgroundColor:"#FFFFFF","&:hover":{backgroundColor:"#FFFFFF"}},containedPrimary:{backgroundColor:"#000000"},text:{background:"transparent",color:"#000000"}},MuiSvgIcon:{colorPrimary:{color:"#A8A8FF"}},MuiFab:{root:{height:"3em",width:"fit-content",padding:"10px",margin:"0px 5px",display:"flex",alignItems:"center",textTransform:"capitalize",backgroundColor:"#F4F4F5",color:"#8E8E93"},primary:{backgroundColor:"rgba(0,0,0,0.8)",borderRadius:"8px"}},MuiFormGroup:{root:{display:"flex",flexWrap:"wrap",flexDirection:"row"}},MuiOutlinedInput:{root:{color:"#000000",margin:"10px 0"},adornedEnd:{paddingRight:"0px"}},MuiBadge:{anchorOriginTopLeftRectangle:{left:"6px"},dot:{height:"12px",width:"12px",borderRadius:"50%"},colorPrimary:{backgroundColor:"#7AFF64"}}}});var fo={},po={exports:{}},Fc=ko(Tf),Lt={},ca={exports:{}};(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(r){return r&&r.type==="@@redux/INIT"?"initialState argument passed to createStore":"previous state received by the reducer"},e.exports=t.default})(ca,ca.exports);var mo={exports:{}};(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=Fc,n=o(r),a=ca.exports,i=o(a);function o(s){return s&&s.__esModule?s:{default:s}}t.default=function(s,u,c){var l=Object.keys(u);if(!l.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";var f=(0,i.default)(c);if(n.default.isImmutable?!n.default.isImmutable(s):!n.default.Iterable.isIterable(s))return"The "+f+' is of unexpected type. Expected argument to be an instance of Immutable.Collection or Immutable.Record with the following properties: "'+l.join('", "')+'".';var d=s.toSeq().keySeq().toArray().filter(function(p){return!u.hasOwnProperty(p)});return d.length>0?"Unexpected "+(d.length===1?"property":"properties")+' "'+d.join('", "')+'" found in '+f+'. Expected to find one of the known reducer property names instead: "'+l.join('", "')+'". Unexpected properties will be ignored.':null},e.exports=t.default})(mo,mo.exports);var ho={exports:{}};(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(r,n,a){if(r===void 0)throw new Error('Reducer "'+n+'" returned undefined when handling "'+a.type+'" action. To ignore an action, you must explicitly return the previous state.')},e.exports=t.default})(ho,ho.exports);Object.defineProperty(Lt,"__esModule",{value:!0});Lt.validateNextState=Lt.getUnexpectedInvocationParameterMessage=Lt.getStateName=void 0;var oh=ca.exports,sh=_o(oh),uh=mo.exports,ch=_o(uh),lh=ho.exports,fh=_o(lh);function _o(e){return e&&e.__esModule?e:{default:e}}Lt.getStateName=sh.default;Lt.getUnexpectedInvocationParameterMessage=ch.default;Lt.validateNextState=fh.default;(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=Fc,n=i(r),a=Lt;function i(o){return o&&o.__esModule?o:{default:o}}t.default=function(o){var s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:n.default.Map,u=Object.keys(o);return function(){var c=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),l=arguments[1];return c.withMutations(function(f){u.forEach(function(d){var p=o[d],m=f.get(d),_=p(m,l);(0,a.validateNextState)(_,d,l),f.set(d,_)})})}},e.exports=t.default})(po,po.exports);Object.defineProperty(fo,"__esModule",{value:!0});var jc=fo.combineReducers=void 0,dh=po.exports,ph=mh(dh);function mh(e){return e&&e.__esModule?e:{default:e}}jc=fo.combineReducers=ph.default;const Eg=100,Vc=X({data:{}}),hh=(e,t)=>(Promise.resolve().then(()=>_h(t)),Vc.attach(Z).value),_h=e=>{Vc.batch(t=>{switch(e.type){case"VIDEO_CREATED":return t.merge({data:e.data})}},e.type)},Hc=100,Gc=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,users:{users:[],skip:0,limit:Hc,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},userRole:{userRole:[],skip:0,limit:Hc,total:0,retrieving:!1,fetched:!1,updateNeeded:!0},singleUser:{singleUser:ot,retrieving:!1,fetched:!1,updateNeeded:!0},staticResource:{staticResource:[],retrieving:!1,fetched:!1,updateNeeded:!0}}),gh=(e,t)=>(Promise.resolve().then(()=>vh(t)),Gc.attach(Z).value),vh=e=>{let t;Gc.batch(r=>{switch(e.type){case"ADMIN_LOADED_USERS":return t=e.userResult,r.users.merge({users:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"USER_ROLE_RETRIEVED":return t=e.types,r.userRole.merge({userRole:t.data,updateNeeded:!1});case"USER_ROLE_CREATED":return r.userRole.merge({updateNeeded:!0});case"USER_ADMIN_REMOVED":t=e.data;let n=[...r.users.users.value];return n=n.filter(a=>a.id!==t.id),r.users.merge({users:n,updateNeeded:!0});case"USER_ADMIN_CREATED":return t=e.user,r.users.merge({updateNeeded:!0});case"USER_ADMIN_PATCHED":return t=e.user,r.users.merge({updateNeeded:!0});case"USER_ROLE_UPDATED":return r.users.merge({updateNeeded:!0});case"USER_SEARCH_ADMIN":return t=e.userResult,r.users.merge({users:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"SINGLE_USER_ADMIN_LOADED":return t=e.data,r.singleUser.merge({singleUser:t,retrieving:!1,fetched:!0,updateNeeded:!1});case"STATIC_RESOURCE_RETRIEVED":return t=e.staticResource,r.staticResource.merge({staticResource:t.data,retrieving:!1,updateNeeded:!1,fetched:!0});case"SINGLE_USER_ADMIN_REFETCH":return r.singleUser.merge({updateNeeded:!0})}},e.type)},zc=X({contentPacks:[],updateNeeded:!0}),yh=(e,t)=>(Promise.resolve().then(()=>Eh(t)),zc.attach(Z).value),Eh=e=>{zc.batch(t=>{switch(e.type){case"LOADED_CONTENT_PACKS":return t.merge({updateNeeded:!1,contentPacks:e.contentPacks});case"CONTENT_PACK_CREATED":return t.merge({updateNeeded:!0});case"CONTENT_PACK_PATCHED":return t.merge({updateNeeded:!0})}},e.type)},Sh=100,$c=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,avatars:{avatars:[],skip:0,limit:Sh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),bh=(e,t)=>(Promise.resolve().then(()=>Th(t)),$c.attach(Z).value),Th=e=>{let t;$c.batch(r=>{switch(e.type){case"AVATARS_RETRIEVED":t=e.avatars,r.avatars.merge({avatars:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date})}},e.type)},Ah=100,go=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,instances:{instances:[],skip:0,limit:Ah,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),Rh=(e,t)=>(Promise.resolve().then(()=>wh(t)),go.attach(Z).value),wh=e=>{let t;go.batch(r=>{switch(e.type){case"INSTANCES_RETRIEVED":return t=e.instanceResult,r.instances.merge({instances:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"INSTANCE_REMOVED_ROW":t=e.instance;let n=go.instances.value,a=n.instances;a=a.filter(i=>i.id!==t.id),n.instances=a,r.merge({instances:n})}},e.type)},Oh=100,vo=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,locations:{locations:[],skip:0,limit:Oh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,created:!1,lastFetched:new Date},locationTypes:{locationTypes:[],updateNeeded:!0}}),Dh=(e,t)=>(Promise.resolve().then(()=>Ih(t)),vo.attach(Z).value),Ih=e=>{let t;vo.batch(r=>{switch(e.type){case"ADMIN_LOCATIONS_RETRIEVED":return t=e.locations,r.locations.merge({locations:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"ADMIN_LOCATION_CREATED":return r.locations.merge({updateNeeded:!0,created:!0});case"ADMIN_LOCATION_PATCHED":const n=vo.locations.locations.value;for(let a=0;a<n.length;a++)n[a].id===e.location.id?n[a]=e.location:e.location.isLobby&&n[a].isLobby&&(n[a].isLobby=!1);return r.locations.merge({locations:n});case"ADMIN_LOCATION_REMOVED":return r.locations.merge({updateNeeded:!0});case"ADMIN_LOCATION_TYPES_RETRIEVED":return t=e.locationTypesResult,r.locationTypes.set({locationTypes:t.data,updateNeeded:!1})}},e.type)},Ch=100,Bc=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,parties:{parties:[],skip:0,limit:Ch,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),Uh=(e,t)=>(Promise.resolve().then(()=>Ph(t)),Bc.attach(Z).value),Ph=e=>{let t;Bc.batch(r=>{switch(e.type){case"PARTY_ADMIN_DISPLAYED":return t=e.data,r.parties.merge({parties:t.data,updateNeeded:!1});case"PARTY_ADMIN_CREATED":return r.parties.merge({updateNeeded:!0})}},e.type)},xh=100,qc=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,scenes:{scenes:[],skip:0,limit:xh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),kh=(e,t)=>(Promise.resolve().then(()=>Mh(t)),qc.attach(Z).value),Mh=e=>{let t;qc.batch(r=>{switch(e.type){case"ADMIN_SCENES_RETRIEVED":return t=e.sceneDataResult,r.scenes.merge({scenes:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date})}},e.type)},Wc=100,Yc=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,bots:{bots:[],skip:0,limit:Wc,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},botCommand:{botCommand:[],skip:0,limit:Wc,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),Lh=(e,t)=>(Promise.resolve().then(()=>Nh(t)),Yc.attach(Z).value),Nh=e=>{let t;Yc.batch(r=>{switch(e.type){case"BOT_ADMIN_DISPLAY":return t=e.bots,r.merge({error:""}),r.bots.merge({bots:t.data,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"BOT_ADMIN_CREATE":return r.bots.merge({updateNeeded:!0});case"BOT_COMMAND_ADMIN_CREATE":return r.bots.merge({updateNeeded:!0});case"BOT_ADMIN_REMOVE":return r.bots.merge({updateNeeded:!0});case"BOT_COMMAND_ADMIN_REMOVE":return r.bots.merge({updateNeeded:!0});case"BOT_ADMIN_UPDATE":return r.bots.merge({updateNeeded:!0})}},e.type)},Kc=X({activeInstances:[],activeParties:[],instanceUsers:[],channelUsers:[],activeLocations:[],activeScenes:[],dailyUsers:[],dailyNewUsers:[]}),Fh=(e,t)=>(Promise.resolve().then(()=>jh(t)),Kc.attach(Z).value),jh=e=>{let t;Kc.batch(r=>{switch(e.type){case"ACTIVE_INSTANCES_FETCHED":return t=e.analytics,r.merge({activeInstances:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"ACTIVE_PARTIES_FETCHED":return t=e.analytics,r.merge({activeParties:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"ACTIVE_LOCATIONS_FETCHED":return t=e.analytics,r.merge({activeLocations:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"ACTIVE_SCENES_FETCHED":return t=e.analytics,r.merge({activeScenes:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"CHANNEL_USERS_FETCHED":return t=e.analytics,r.merge({channelUsers:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"INSTANCE_USERS_FETCHED":return t=e.analytics,r.merge({instanceUsers:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"DAILY_NEW_USERS_FETCHED":return t=e.analytics,r.merge({dailyNewUsers:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()});case"DAILY_USERS_FETCHED":return t=e.analytics,r.merge({dailyUsers:t.data.map(n=>[new Date(n.createdAt).getTime(),n.count]).reverse()})}},e.type)},Vh=100,Jc=X({isLoggedIn:!1,isProcessing:!1,error:"",authUser:dt,user:ot,identityProvider:ft,realityPacks:{realityPacks:[],skip:0,limit:Vh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}}),Hh=(e,t)=>(Promise.resolve().then(()=>Gh(t)),Jc.attach(Z).value),Gh=e=>{let t;Jc.batch(r=>{switch(e.type){case"REALITY_PACKS_RETRIEVED":return t=e.adminRealityPackResult,r.realityPacks.merge({realityPacks:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date})}},e.type)},zh=100,Xc=X({arMedia:{arMedia:[],skip:0,limit:zh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},adminList:[],list:[],fetching:!1,item:{},fetchingItem:!1}),Zc=(e,t)=>(Promise.resolve().then(()=>$h(t)),Xc.attach(Z).value),$h=e=>{Xc.batch(t=>{let r;switch(e.type){case"ARMEDIA_FETCHING":return t.fetching.set(!0);case"ARMEDIA_ADMIN_RETRIEVED":return r=e.list,t.arMedia.merge({arMedia:r.data,skip:r.skip,total:r.total,limit:r.limit,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"ARMEDIA_RETRIEVED":return t.merge({list:e.list,fetching:!1});case"ADD_ARMEDIA":return t.arMedia.updateNeeded.set(!0);case"REMOVE_ARMEDIA":return t.arMedia.updateNeeded.set(!0);case"ARMEDIA_FETCHING_ITEM":return t.fetchingItem.set(!0);case"ARMEDIA_RETRIEVED_ITEM":return t.merge({item:e.item,fetchingItem:!1});case"UPDATE_AR_MEDIA":return t.arMedia.updateNeeded.set(!0)}},e.type)},la=X({feeds:{feeds:[],feedsFetching:!1,feedsFeatured:[],feedsFeaturedFetching:!1,feedsCreator:[],feedsCreatorFetching:!1,feedsBookmark:[],feedsBookmarkFetching:!1,feedsFired:[],feedsFiredFetching:!1,myFeatured:[],myFeaturedFetching:!1,feed:{},fetching:!1,feedsAdmin:{feeds:[],updateNeeded:!0,lastFetched:new Date},feedsAdminFetching:!1,lastFeedVideoUrl:null}}),Qc=(e,t)=>(Promise.resolve().then(()=>Bh(t)),la.attach(Z).value),Bh=e=>{la.batch(t=>{let r;switch(e.type){case"FEEDS_FETCH":return t.feeds.feedsFetching.set(!0),t.feeds.fetching.set(!0);case"FEATURED_FEEDS_FETCH":return t.feeds.feedsFeaturedFetching.set(!0);case"CREATOR_FEEDS_FETCH":return t.feeds.feedsCreatorFetching.set(!0);case"BOOKMARK_FEEDS_FETCH":return t.feeds.feedsBookmarkFetching.set(!0);case"MY_FEATURED_FEEDS_FETCH":return t.feeds.myFeaturedFetching.set(!0);case"ADMIN_FEEDS_FETCH":return t.feeds.feedsAdminFetching.set(!0);case"FIRED_FEEDS_FETCH":return t.feeds.feedsFiredFetching.set(!0);case"FEEDS_RETRIEVED":return t.feeds.merge({feeds:e.feeds,feedsFetching:!1});case"FEEDS_FEATURED_RETRIEVED":return t.feeds.merge({feedsFeatured:e.feeds,feedsFeaturedFetching:!1});case"FEEDS_CREATOR_RETRIEVED":return t.feeds.merge({feedsCreator:e.feeds,feedsCreatorFetching:!1});case"CLEAR_CREATOR_FEATURED":return t.feeds.merge({feedsCreator:[],feedsCreatorFetching:!1});case"FEEDS_MY_FEATURED_RETRIEVED":return t.feeds.merge({myFeatured:e.feeds,myFeaturedFetching:!1});case"FEEDS_BOOKMARK_RETRIEVED":return t.feeds.merge({feedsBookmark:e.feeds,feedsBookmarkFetching:!1});case"FEEDS_FIRED_RETRIEVED":return t.feeds.merge({feedsFired:e.feeds,feedsFiredFetching:!1});case"FEED_RETRIEVED":return t.feeds.merge({feed:e.feed,fetching:!1});case"ADD_FEED_FIRES":return r=t.feeds.feed?.value,t.feeds.feeds.set(t.feeds.feeds.value.map(i=>i.id===e.feedId?{...i,fires:++i.fires,isFired:!0}:{...i})),t.feeds.feed.set(r?{...r,fires:++r.fires,isFired:!0}:{});case"REMOVE_FEED_FIRES":return r=t.feeds.feed?.value,t.feeds.feeds.set(t.feeds.feeds.value.map(i=>i.id===e.feedId?{...i,fires:i.fires-1,isFired:!1}:{...i})),t.feeds.feed.set(r?{...r,fires:--r.fires,isFired:!1}:{});case"ADD_FEED_BOOKMARK":return r=t.feeds.feed?.value,t.feeds.feeds.set(t.feeds.feeds.value.map(i=>i.id===e.feedId?{...i,isBookmarked:!0}:{...i})),t.feeds.feed.set(r?{...r,isBookmarked:!0}:{});case"REMOVE_FEED_BOOKMARK":return r=t.feeds.feed?.value,t.feeds.feeds.set(t.feeds.feeds.value.map(i=>i.id===e.feedId?{...i,isBookmarked:!1}:{...i})),t.feeds.feed.set(r?{...r,isBookmarked:!1}:{});case"ADD_FEED_VIEW":return t.feeds.feedsFeatured.set(t.feeds.feedsFeatured?.value?.map(i=>i.id===e.feedId?{...i,viewsCount:++i.viewsCount}:{...i})),t.feeds.feed.set(r?{...r,viewsCount:++r.viewsCount}:{});case"ADD_FEED":return t.feeds.feeds.set([...t.feeds.feeds.value,e.feed]),t.feeds.feedsFetching.set(!1);case"ADD_FEED_FEATURED":return t.feeds.feedsCreator.set(t.feeds.feedsCreator.value.map(i=>i.id===e.feedId?{...i,featured:!0}:{...i}));case"REMOVE_FEED_FEATURED":const n=la.feeds.myFeatured.value;return t.feeds.feedsCreator.set(t.feeds.feedsCreator.value.map(i=>i.id===e.feedId?{...i,featured:!1}:{...i})),t.feeds.myFeatured.set(n?[...n.splice(n.findIndex(i=>i.id===e.feedId),1)]:[]);case"FEEDS_AS_ADMIN_RETRIEVED":const a=e.feeds;return t.feeds.feedsAdmin.merge({feeds:a.data,updateNeeded:!1,lastFetched:new Date}),t.feeds.fetching.set(!1);case"UPDATE_FEED":return t.feeds.feedsAdmin.feeds.set(t.feeds.feedsAdmin.feeds.value.map(i=>i.id===e.feed.id?{...i,...e.feed}:{...i})),t.feeds.feedsAdminFetching.set(!1);case"DELETE_FEED":return t.feeds.feedsFeatured.set([...t.feeds.feedsFeatured.value.filter(i=>i.id!==e.feedId)]);case"LAST_FEED_VIDEO_URL":return t.feeds.lastFeedVideoUrl.set(e.filePath)}},e.type)},Sg=()=>ht(la),yo=X({creators:{creators:[],fetchingCreators:!1,creator:{},fetchingCreator:!1,currentCreator:{},fetchingCurrentCreator:!1,currentCreatorNotifications:[],followers:[],following:[],fetching:!1,blocked:[],splashTimeout:!0,updateNeeded:!1}}),el=(e,t)=>(Promise.resolve().then(()=>qh(t)),yo.attach(Z).value),qh=e=>{yo.batch(t=>{switch(e.type){case"SET_STATE_CREATORS":return t.creators.splashTimeout.set(e.splashTimeout);case"CURRENT_CREATOR_FETCH":return t.creators.fetchingCurrentCreator.set(!0);case"CURRENT_CREATOR_RETRIEVED":return t.creators.merge({currentCreator:e.creator,creators:t.creators.creators?.value.map(o=>o.id===e.creator.id?{...e.creator}:{...o}),fetchingCurrentCreator:!1});case"CREATOR_FETCH":return t.creators.merge({fetchingCreator:!0,creator:{id:"",name:"",username:""}});case"CREATOR_RETRIEVED":return t.creators.merge({creator:e.creator,fetchingCreator:!1});case"CREATORS_FETCH":return t.creators.merge({fetchingCreators:!0,creators:[]});case"CREATORS_RETRIEVED":return t.creators.merge({creators:e.creators,fetchingCreators:!1});case"CREATOR_NOTIFICATION_LIST_RETRIEVED":return t.creators.merge({currentCreatorNotifications:e.notifications,fetching:!1});case"SET_CREATOR_AS_FOLLOWED":return t.creators.creator.followed.set(!0);case"SET_CREATOR_NOT_FOLLOWED":return t.creators.creator.followed.set(!1);case"SET_CREATOR_AS_BLOCKED":const r=[...t.creators.creators.value],n=r.findIndex(o=>o.id===e.creatorId);return r.splice(n,1),t.creators.creator.blocked.set(!0),t.creators.creators.set(r);case"SET_CREATOR_AS_UN_BLOCKED":const a=[...t.creators.blocked.value],i=a.findIndex(o=>o.userId===e.blokedCreatorId);return a.splice(i,1),t.creators.blocked.set(a);case"CREATOR_BLOCKED_RETRIEVED":return t.creators.blocked.set(e.creators);case"CREATOR_FOLLOWERS_RETRIEVED":return t.creators.followers.set(e.creators);case"CREATOR_FOLLOWING_RETRIEVED":return t.creators.following.set(e.creators)}},e.type)},bg=()=>ht(yo),Wh=10,tl=X({group:{group:[],skip:0,limit:Wh,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},fetching:!1}),Yh=(e,t)=>(Promise.resolve().then(()=>Kh(t)),tl.attach(Z).value),Kh=e=>{let t;tl.batch(r=>{switch(e.type){case"GROUP_FETCHING":return r.merge({fetching:!0});case"GROUP_ADMIN_RETRIEVED":return t=e.list,r.group.merge({group:t.data,skip:t.skip,limit:t.limit,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"ADD_GROUP":return r.group.merge({updateNeeded:!0});case"GROUP_ADMIN_UPDATE":return r.group.merge({updateNeeded:!0});case"GROUP_ADMIN_DELETE":return r.group.merge({updateNeeded:!0})}},e.type)},rl=100,nl=X({scope:{scope:[],skip:0,limit:rl,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},scopeType:{scopeType:[],skip:0,limit:rl,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},fetching:!1}),Jh=(e,t)=>(Promise.resolve().then(()=>Xh(t)),nl.attach(Z).value),Xh=e=>{let t;nl.batch(r=>{switch(e.type){case"SCOPE_FETCHING":return r.merge({fetching:!0});case"SCOPE_ADMIN_RETRIEVED":return t=e.adminScopeResult,r.scope.merge({scope:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date});case"ADD_SCOPE":return r.scope.merge({updateNeeded:!0});case"UPDATE_SCOPE":return r.scope.merge({updateNeeded:!0});case"REMOVE_SCOPE":return r.scope.merge({updateNeeded:!0});case"SCOPE_TYPE_RETRIEVED":return t=e.adminScopTypeResult,r.scopeType.merge({scopeType:t.data,skip:t.skip,limit:t.limit,total:t.total,retrieving:!1,fetched:!0,updateNeeded:!1,lastFetched:new Date})}},e.type)},al=X({Analytics:{analytics:[],updateNeeded:!0}}),Zh=(e,t)=>(Promise.resolve().then(()=>Qh(t)),al.attach(Z).value),Qh=e=>{let t;al.batch(r=>{switch(e.type){case"SETTING_ANALYIS_DISPLAY":return t=e.settingAnalyticsResult,r.Analytics.merge({analytics:t.data,updateNeeded:!1})}},e.type)},il=X({Server:{server:[],updateNeeded:!0}}),e_=(e,t)=>(Promise.resolve().then(()=>t_(t)),il.attach(Z).value),t_=e=>{let t;il.batch(r=>{switch(e.type){case"SETTING_SERVER_DISPLAY":return t=e.serverSettingResult,r.Server.merge({server:t.data,updateNeeded:!1})}},e.type)},ol=X({Client:{client:[],updateNeeded:!0}}),r_=(e,t)=>(Promise.resolve().then(()=>n_(t)),ol.attach(Z).value),n_=e=>{let t;ol.batch(r=>{switch(e.type){case"CLIENT_SETTING_DISPLAY":return t=e.clientSettingResult,r.Client.merge({client:t.data,updateNeeded:!1})}},e.type)},sl=X({gameServer:{gameserver:[],updateNeeded:!0}}),a_=(e,t)=>(Promise.resolve().then(()=>i_(t)),sl.attach(Z).value),i_=e=>{let t;sl.batch(r=>{switch(e.type){case"GAME_SERVER_SETTING_DISPLAY":return t=e.gameServerSettingResult,r.gameServer.merge({gameserver:t.data,updateNeeded:!1})}},e.type)},ul=X({Email:{email:[],updateNeeded:!0}}),o_=(e,t)=>(Promise.resolve().then(()=>s_(t)),ul.attach(Z).value),s_=e=>{let t;ul.batch(r=>{switch(e.type){case"EMAIL_SETTING_DISPLAY":return t=e.emailSettingResult,r.Email.merge({email:t.data,updateNeeded:!1})}},e.type)},cl=X({Chargebee:{chargebee:[],updateNeeded:!0}}),u_=(e,t)=>(Promise.resolve().then(()=>c_(t)),cl.attach(Z).value),c_=e=>{let t;cl.batch(r=>{switch(e.type){case"CHARGEBEE_SETTING_DISPLAY":return t=e.chargebeeSettingResult,r.Chargebee.merge({chargebee:t.data,updateNeeded:!1})}},e.type)},ll=X({authSettings:{authSettings:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0}}),l_=(e,t)=>(Promise.resolve().then(()=>f_(t)),ll.attach(Z).value),f_=e=>{let t;ll.batch(r=>{switch(e.type){case"ADMIN_AUTH_SETTING_FETCHED":return t=e.adminRedisSettingResult,r.authSettings.merge({authSettings:t.data,skip:t.skip,limit:t.limit,total:t.total,updateNeeded:!1});case"ADMIN_AUTH_SETTING_PATCHED":return r.authSettings.updateNeeded.set(!0)}},e.type)},fl=X({awsSettings:{awsSettings:[],skip:0,limit:100,total:0,updateNeeded:!0}}),d_=(e,t)=>(Promise.resolve().then(()=>p_(t)),fl.attach(Z).value),p_=e=>{let t;fl.batch(r=>{switch(e.type){case"ADMIN_AWS_SETTING_FETCHED":return t=e.adminRedisSettingResult,r.awsSettings.merge({awsSettings:t.data,updateNeeded:!1})}},e.type)},dl=X({redisSettings:{redisSettings:[],skip:0,limit:100,total:0,updateNeeded:!0}}),m_=(e,t)=>(Promise.resolve().then(()=>h_(t)),dl.attach(Z).value),h_=e=>{let t;dl.batch(r=>{switch(e.type){case"ADMIN_REDIS_SETTING_FETCHED":return t=e.adminRedisSettingResult,r.redisSettings.merge({redisSettings:t.data,updateNeeded:!1})}},e.type)};var __={adminUser:gh,admin:hh,contentPack:yh,adminAvatar:bh,adminInstance:Rh,adminLocation:Dh,adminParty:Uh,adminRealityPack:Hh,adminScene:kh,adminBots:Lh,adminAnalytics:Fh,arMedia:Zc,feedsAdmin:Qc,adminCreator:el,group:Yh,scope:Jh,settingAnalytics:Zh,serverSettings:e_,clientSettings:r_,gameServer:a_,email:o_,adminAuthSetting:l_,adminAwsSetting:d_,adminChargeBeeSetting:u_,adminRedisSetting:m_};const Eo=X({type:"none",message:""}),g_=(e,t)=>(Promise.resolve().then(()=>v_(t)),Eo.attach(Z).value),v_=e=>{Eo.batch(t=>{switch(e.type){case"SHOW_NOTIFICATION":return t.merge({type:e.alertType,message:e.message});case"HIDE_NOTIFICATION":return t.merge({type:e.alertType,message:e.message})}},e.alertType)},Tg=()=>ht(Eo);var an;(function(e){e[e.START_STATE=0]="START_STATE",e[e.AWAITING_INPUT=1]="AWAITING_INPUT",e[e.SCENE_LOADING=2]="SCENE_LOADING",e[e.SCENE_LOADED=3]="SCENE_LOADED",e[e.SUCCESS=4]="SUCCESS",e[e.FAILED=5]="FAILED",e[e.ALL_DONE=6]="ALL_DONE"})(an||(an={}));const Nt=X({loaded:!1,inVrMode:!1,viewport:{width:1400,height:900},onBoardingStep:an.START_STATE,isTutorial:!1,userHasInteracted:!1,loadPercent:0}),y_=(e,t)=>(Promise.resolve().then(()=>E_(t)),Nt.attach(Z).value),E_=e=>{Nt.batch(t=>{switch(e.type){case"SET_APP_LOADED":return t.merge({loaded:e.loaded});case"SET_APP_LOADING_PERCENT":return t.merge({loadPercent:e.loadPercent});case"SET_VIEWPORT_SIZE":return t.merge({viewport:{width:e.width,height:e.height}});case"SET_IN_VR_MODE":return t.merge({inVrMode:e.inVrMode});case"SET_USER_HAS_INTERACTED":return t.merge({userHasInteracted:!0});case"SET_APP_ONBOARDING_STEP":return e.onBoardingStep===an.ALL_DONE?t.merge({onBoardingStep:e.onBoardingStep>=Nt.onBoardingStep.value?e.onBoardingStep:Nt.onBoardingStep.value}):e.onBoardingStep===an.SCENE_LOADED?t.merge({onBoardingStep:e.onBoardingStep>=Nt.onBoardingStep.value?e.onBoardingStep:Nt.onBoardingStep.value,isTutorial:!0}):t.merge({onBoardingStep:e.onBoardingStep>=Nt.onBoardingStep.value?e.onBoardingStep:Nt.onBoardingStep.value,isTutorial:!1});case"SET_APP_SPECIFIC_ONBOARDING_STEP":return t.merge({onBoardingStep:e.onBoardingStep,isTutorial:e.isTutorial})}},e.type)},pl={title:void 0,children:void 0},So=X({isOpened:!1,content:pl}),S_=(e,t)=>(Promise.resolve().then(()=>b_(t)),So.attach(Z).value),b_=e=>{So.batch(t=>{switch(e.type){case"SHOW_DIALOG":return t.merge({isOpened:!0,content:e.content});case"CLOSE_DIALOG":return t.merge({isOpened:!1,content:pl})}},e.type)},Ag=()=>ht(So),ml=X({readError:{scopeErrorMessage:"",statusCode:0},writeError:{scopeErrorMessage:"",statusCode:0}}),T_=(e,t)=>(Promise.resolve().then(()=>A_(t)),ml.attach(Z).value),A_=e=>{ml.batch(t=>{switch(e.type){case"SET_SCOPE_READ_ERROR":return t.merge({readError:{scopeErrorMessage:e.message,statusCode:e.statusCode}});case"SET_SCOPE_WRITE_ERROR":return t.merge({writeError:{scopeErrorMessage:e.message,statusCode:e.statusCode}})}},e.type)};var R_={app:y_,alert:g_,dialog:S_,scopeError:T_};const hl=X({feeds:{feedComments:[],commentFires:[],fetching:!1}}),w_=(e,t)=>(Promise.resolve().then(()=>O_(t)),hl.attach(Z).value),O_=e=>{hl.batch(t=>{switch(e.type){case"FEED_COMMENTS_FETCH":return t.feeds.fetching.set(!0);case"FEED_COMMENTS_RETRIEVED":return t.feeds.merge({feedComments:e.comments||[],fetching:!1});case"ADD_FEED_COMMENT_FIRES":return t.feeds.feedComments.set(t.feeds.feedComments.value.map(r=>r.id===e.commentId?{...r,fires:r.fires+1,isFired:!0}:{...r}));case"REMOVE_FEED_COMMENT_FIRES":return t.feeds.feedComments.set(t.feeds.feedComments.value.map(r=>r.id===e.commentId?{...r,fires:--r.fires,isFired:!1}:{...r}));case"ADD_FEED_COMMENT":return t.feeds.feedComments.set([e.comment,...t.feeds.feedComments.value||[]]);case"COMMENT_FIRES":return t.feeds.commentFires.set(e.creators)}},e.type)},_l=X({feedFires:{feedFires:[],fetching:!1}}),D_=(e,t)=>(Promise.resolve().then(()=>I_(t)),_l.attach(Z).value),I_=e=>{_l.batch(t=>{switch(e.type){case"FEED_FIRES_FETCH":return t.feedFires.fetching.set(!0);case"FEED_FIRES_RETRIEVED":return t.feedFires.merge({feedFires:e.feedFires,fetching:!1})}},e.type)},bo=X({popups:{creatorPage:!1,creatorForm:!1,creatorId:null,feedPage:!1,feedId:null,shareFeedPage:!1,arMedia:!1,shareForm:!1,videoUrl:null,webxr:!1,videoPath:null,imgSrc:null,fPath:null,nameId:null,itemId:null}}),C_=(e,t)=>(Promise.resolve().then(()=>U_(t)),bo.attach(Z).value),U_=e=>{bo.batch(t=>{switch(e.type){case"CHANGE_CREATOR_PAGE_STATE":return t.popups.merge({creatorPage:e.state,creatorId:e.id});case"CHANGE_CREATOR_FORM_STATE":return t.popups.creatorForm.set(e.state);case"CHANGE_FEED_PAGE_STATE":return t.popups.merge({feedPage:e.state,feedId:e.id});case"CHANGE_ARMEDIA_CHOOSE_STATE":return t.popups.arMedia.set(e.state);case"CHANGE_NEW_FEED_PAGE_STATE":return t.popups.merge({shareFeedPage:e.state,videoPath:e.id,fPath:e.fPath,nameId:e.nameId});case"CHANGE_SHARE_FORM_STATE":return t.popups.merge({shareForm:e.state,videoUrl:e.id,imgSrc:e.imgSrc});case"CHANGE_WEB_XR_STATE":return t.popups.merge({webxr:e.state,itemId:e.itemId})}},e.type)},Rg=()=>ht(bo),To=X({thefeeds:[],fetching:!1}),P_=(e,t)=>(Promise.resolve().then(()=>x_(t)),To.attach(Z).value),x_=e=>{To.batch(t=>{switch(e.type){case"THEFEEDS_FETCH":return t.fetching.set(!0);case"THEFEEDS_RETRIEVED":return t.merge({thefeeds:e.thefeeds,fetching:!1});case"ADD_THEFEEDS":return t.thefeeds.set([...t.thefeeds.value,e.thefeeds]);case"UPDATE_THEFEEDS":return t.thefeeds.set(t.thefeeds.value.map(r=>r.id===e.thefeeds.id?{...r,...e.thefeeds}:{...r}));case"REMOVE_THEFEEDS":return t.thefeeds.set([...t.thefeeds.value.filter(r=>r.id!==e.thefeeds)])}},e.type)},wg=()=>ht(To),gl=X({thefeedsFires:{thefeedsFires:[],fetching:!1}}),k_=(e,t)=>(Promise.resolve().then(()=>M_(t)),gl.attach(Z).value),M_=e=>{gl.batch(t=>{switch(e.type){case"THEFEEDS_FIRES_FETCH":return t.thefeedsFires.fetching.set(!0);case"THEFEEDS_FIRES_RETRIEVED":return t.thefeedsFires.thefeedsFires.set(e.thefeedsFires);case"ADD_THEFEEDS_FIRES":return t.thefeedsFires.thefeedsFires.set([...t.thefeedsFires.thefeedsFires,e.thefeedsFire]);case"REMOVE_THEFEEDS_FIRES":return t.thefeedsFires.thefeedsFires.set(t.thefeedsFires.thefeedsFires.value.filter(r=>r.id!==e.thefeedsFireId))}},e.type)},Ao=X({webxrnative:null}),L_=(e,t)=>(Promise.resolve().then(()=>N_(t)),Ao.attach(Z).value),N_=e=>{Ao.batch(t=>{switch(e.type){case"SET_WEBXRNATIVE":return t.webxrnative.set(!1);case"TOGGLE_WEBXRNATIVE":return t.webxrnative.set(!t.webxrnative.value)}},e.type)},Og=()=>ht(Ao),F_=X({registration:{}}),j_=(e,t)=>(Promise.resolve().then(()=>V_()),F_.attach(Z).value),V_=e=>{};var H_={creators:el,feeds:Qc,feedFires:D_,feedComments:w_,arMedia:Zc,popups:C_,thefeeds:P_,thefeedsFires:k_,webxrnative:L_,registrationReducer:j_};const G_={userId:"",friend:[],requested:[],blocking:[],blocked:[]},vl=X({relationship:G_,users:[],updateNeeded:!0,layerUsers:[],layerUsersUpdateNeeded:!0,channelLayerUsers:[],channelLayerUsersUpdateNeeded:!0,toastMessages:[]}),z_=(e,t)=>(Promise.resolve().then(()=>$_(t)),vl.attach(Z).value),$_=e=>{vl.batch(t=>{switch(e.type){case"LOADED_RELATIONSHIP":return t.merge({relationship:e.relationship,updateNeeded:!1});case"ADMIN_LOADED_USERS":return t.merge({users:e.users,updateNeeded:!1});case"CHANGED_RELATION":return t.updateNeeded.set(!0);case"CLEAR_LAYER_USERS":return t.merge({layerUsers:[],layerUsersUpdateNeeded:!0});case"LOADED_LAYER_USERS":return t.merge({layerUsers:e.users,layerUsersUpdateNeeded:!1});case"ADDED_LAYER_USER":{const a=e.user,i=t.layerUsers.findIndex(o=>o!=null&&o.id.value===a.id);return i===-1?t.layerUsers.merge([a]):t.layerUsers[i].set(a),t.layerUsersUpdateNeeded.set(!0)}case"REMOVED_LAYER_USER":{const i=t.layerUsers.findIndex(o=>o!=null&&o.value.id===e.user.id);return t.layerUsers[i].set(we)}case"CLEAR_CHANNEL_LAYER_USERS":return t.merge({channelLayerUsers:[],channelLayerUsersUpdateNeeded:!0});case"LOADED_CHANNEL_LAYER_USERS":return t.merge({channelLayerUsers:e.users,channelLayerUsersUpdateNeeded:!1});case"ADDED_CHANNEL_LAYER_USER":{const a=e.user,i=t.channelLayerUsers.findIndex(o=>o!=null&&o.value.id===a.id);return i===-1?t.channelLayerUsers.merge([a]):t.channelLayerUsers[i].set(a),t.channelLayerUsersUpdateNeeded.set(!0)}case"REMOVED_CHANNEL_LAYER_USER":const r=e.user,n=t.channelLayerUsers.findIndex(a=>a!=null&&a.value.id===r.id);return t.channelLayerUsers[n].set(we);case"USER_TOAST":return t.toastMessages.merge([e.message])}},e.type)};var B_={auth:xf,user:z_};const q_={...__,...R_,...H_,...B_};var W_=jc(q_);const Y_={actionProcessing:e=>({type:"ACTION_PROCESSING",processing:e}),loginUserSuccess:e=>({type:"LOGIN_USER_SUCCESS",authUser:e,message:""}),loginUserError:e=>({type:"LOGIN_USER_ERROR",message:e}),loginUserByGithubSuccess:e=>({type:"LOGIN_USER_BY_GITHUB_SUCCESS",message:e}),loginUserByGithubError:e=>({type:"LOGIN_USER_BY_GITHUB_ERROR",message:e}),loginUserByLinkedinSuccess:e=>({type:"LOGIN_USER_BY_LINKEDIN_SUCCESS",message:e}),loginUserByLinkedinError:e=>({type:"LOGIN_USER_BY_LINKEDIN_ERROR",message:e}),didLogout:()=>({type:"LOGOUT_USER",message:""}),registerUserByEmailSuccess:e=>({type:"REGISTER_USER_BY_EMAIL_SUCCESS",identityProvider:e,message:""}),registerUserByEmailError:e=>({type:"REGISTER_USER_BY_EMAIL_ERROR",message:e}),didVerifyEmail:e=>({type:"DID_VERIFY_EMAIL",result:e}),didResendVerificationEmail:e=>({type:"DID_RESEND_VERIFICATION_EMAIL",result:e}),didForgotPassword:e=>({type:"DID_FORGOT_PASSWORD",result:e}),didResetPassword:e=>({type:"DID_RESET_PASSWORD",result:e}),didCreateMagicLink:e=>({type:"DID_CREATE_MAGICLINK",result:e}),loadedUserData:e=>({type:"LOADED_USER_DATA",user:e}),updatedUserSettingsAction:e=>({type:"UPDATE_USER_SETTINGS",data:e}),avatarUpdated:e=>{const t=e.url;return{type:"AVATAR_UPDATED",url:t}},usernameUpdated:e=>{const t=e.name;return{type:"USERNAME_UPDATED",name:t}},userAvatarIdUpdated:e=>{const t=e.avatarId;return{type:"USERAVATARID_UPDATED",avatarId:t}},userUpdated:e=>({type:"USER_UPDATED",user:e}),updateAvatarList:e=>({type:"AVATAR_FETCHED",avatarList:e}),restoreAuth:()=>({type:"RESTORE"})};var Ro={exports:{}},wo={exports:{}};(function(e,t){t.__esModule=!0,t.default=r;function r(n){var a={};for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(a[i]=0);return a}e.exports=t.default})(wo,wo.exports);var Oo={exports:{}};(function(e,t){t.__esModule=!0,t.default=r;function r(n){var a={};for(var i in n)!Object.prototype.hasOwnProperty.call(n,i)||(a[i]=typeof n[i]=="number"?n[i]:n[i].val);return a}e.exports=t.default})(Oo,Oo.exports);var Do={exports:{}};(function(e,t){t.__esModule=!0,t.default=n;var r=[0,0];function n(a,i,o,s,u,c,l){var f=-u*(i-s),d=-c*o,p=f+d,m=o+p*a,_=i+m*a;return Math.abs(m)<l&&Math.abs(_-s)<l?(r[0]=s,r[1]=0,r):(r[0]=_,r[1]=m,r)}e.exports=t.default})(Do,Do.exports);var Io={exports:{}};(function(e,t){t.__esModule=!0,t.default=r;function r(n,a,i){for(var o={},s=0;s<n.length;s++)o[n[s].key]=s;for(var u={},s=0;s<a.length;s++)u[a[s].key]=s;for(var c=[],s=0;s<a.length;s++)c[s]=a[s];for(var s=0;s<n.length;s++)if(!Object.prototype.hasOwnProperty.call(u,n[s].key)){var l=i(s,n[s]);l!=null&&c.push(l)}return c.sort(function(f,d){var p=u[f.key],m=u[d.key],_=o[f.key],v=o[d.key];if(p!=null&&m!=null)return u[f.key]-u[d.key];if(_!=null&&v!=null)return o[f.key]-o[d.key];if(p!=null){for(var A=0;A<a.length;A++){var T=a[A].key;if(!!Object.prototype.hasOwnProperty.call(o,T)){if(p<u[T]&&v>o[T])return-1;if(p>u[T]&&v<o[T])return 1}}return 1}for(var A=0;A<a.length;A++){var T=a[A].key;if(!!Object.prototype.hasOwnProperty.call(o,T)){if(m<u[T]&&_>o[T])return 1;if(m>u[T]&&_<o[T])return-1}}return-1})}e.exports=t.default})(Io,Io.exports);var on={exports:{}};(function(){var e,t,r;typeof performance!="undefined"&&performance!==null&&performance.now?on.exports=function(){return performance.now()}:typeof process!="undefined"&&process!==null&&process.hrtime?(on.exports=function(){return(e()-r)/1e6},t=process.hrtime,e=function(){var n;return n=t(),n[0]*1e9+n[1]},r=e()):Date.now?(on.exports=function(){return Date.now()-r},r=Date.now()):(on.exports=function(){return new Date().getTime()-r},r=new Date().getTime())}).call(ha);var fa={exports:{}},sn={exports:{}};(function(){var e,t,r,n,a,i;typeof performance!="undefined"&&performance!==null&&performance.now?sn.exports=function(){return performance.now()}:typeof process!="undefined"&&process!==null&&process.hrtime?(sn.exports=function(){return(e()-a)/1e6},t=process.hrtime,e=function(){var o;return o=t(),o[0]*1e9+o[1]},n=e(),i=process.uptime()*1e9,a=n-i):Date.now?(sn.exports=function(){return Date.now()-r},r=Date.now()):(sn.exports=function(){return new Date().getTime()-r},r=new Date().getTime())}).call(ha);var K_=sn.exports,vt=typeof window=="undefined"?ha:window,da=["moz","webkit"],Sr="AnimationFrame",br=vt["request"+Sr],un=vt["cancel"+Sr]||vt["cancelRequest"+Sr];for(var cn=0;!br&&cn<da.length;cn++)br=vt[da[cn]+"Request"+Sr],un=vt[da[cn]+"Cancel"+Sr]||vt[da[cn]+"CancelRequest"+Sr];if(!br||!un){var Co=0,yl=0,Kt=[],J_=1e3/60;br=function(e){if(Kt.length===0){var t=K_(),r=Math.max(0,J_-(t-Co));Co=r+t,setTimeout(function(){var n=Kt.slice(0);Kt.length=0;for(var a=0;a<n.length;a++)if(!n[a].cancelled)try{n[a].callback(Co)}catch(i){setTimeout(function(){throw i},0)}},Math.round(r))}return Kt.push({handle:++yl,callback:e,cancelled:!1}),yl},un=function(e){for(var t=0;t<Kt.length;t++)Kt[t].handle===e&&(Kt[t].cancelled=!0)}}fa.exports=function(e){return br.call(vt,e)};fa.exports.cancel=function(){un.apply(vt,arguments)};fa.exports.polyfill=function(e){e||(e=vt),e.requestAnimationFrame=br,e.cancelAnimationFrame=un};var Uo={exports:{}};(function(e,t){t.__esModule=!0,t.default=r;function r(n,a,i){for(var o in a)if(!!Object.prototype.hasOwnProperty.call(a,o)){if(i[o]!==0)return!1;var s=typeof a[o]=="number"?a[o]:a[o].val;if(n[o]!==s)return!1}return!0}e.exports=t.default})(Uo,Uo.exports);(function(e,t){t.__esModule=!0;var r=Object.assign||function(k){for(var I=1;I<arguments.length;I++){var Y=arguments[I];for(var b in Y)Object.prototype.hasOwnProperty.call(Y,b)&&(k[b]=Y[b])}return k},n=function(){function k(I,Y){for(var b=0;b<Y.length;b++){var D=Y[b];D.enumerable=D.enumerable||!1,D.configurable=!0,"value"in D&&(D.writable=!0),Object.defineProperty(I,D.key,D)}}return function(I,Y,b){return Y&&k(I.prototype,Y),b&&k(I,b),I}}();function a(k){return k&&k.__esModule?k:{default:k}}function i(k,I){if(!(k instanceof I))throw new TypeError("Cannot call a class as a function")}function o(k,I){if(typeof I!="function"&&I!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof I);k.prototype=Object.create(I&&I.prototype,{constructor:{value:k,enumerable:!1,writable:!0,configurable:!0}}),I&&(Object.setPrototypeOf?Object.setPrototypeOf(k,I):k.__proto__=I)}var s=wo.exports,u=a(s),c=Oo.exports,l=a(c),f=Do.exports,d=a(f),p=Io.exports,m=a(p),_=on.exports,v=a(_),A=fa.exports,T=a(A),j=Uo.exports,L=a(j),N=ie.exports,V=a(N),H=Ni.exports,U=a(H),x=1e3/60;function J(k,I,Y){var b=I;return b==null?k.map(function(D,C){return{key:D.key,data:D.data,style:Y[C]}}):k.map(function(D,C){for(var O=0;O<b.length;O++)if(b[O].key===D.key)return{key:b[O].key,data:b[O].data,style:Y[C]};return{key:D.key,data:D.data,style:Y[C]}})}function ne(k,I,Y,b){if(b.length!==I.length)return!1;for(var D=0;D<b.length;D++)if(b[D].key!==I[D].key)return!1;for(var D=0;D<b.length;D++)if(!L.default(k[D],I[D].style,Y[D]))return!1;return!0}function ae(k,I,Y,b,D,C,O,M,S){for(var E=m.default(b,D,function(ue,$){var Ee=I($);return Ee==null?(Y({key:$.key,data:$.data}),null):L.default(C[ue],Ee,O[ue])?(Y({key:$.key,data:$.data}),null):{key:$.key,data:$.data,style:Ee}}),R=[],w=[],h=[],P=[],y=0;y<E.length;y++){for(var K=E[y],B=null,G=0;G<b.length;G++)if(b[G].key===K.key){B=G;break}if(B==null){var F=k(K);R[y]=F,h[y]=F;var ee=u.default(K.style);w[y]=ee,P[y]=ee}else R[y]=C[B],h[y]=M[B],w[y]=O[B],P[y]=S[B]}return[E,R,w,h,P]}var Ae=function(k){o(I,k),n(I,null,[{key:"propTypes",value:{defaultStyles:U.default.arrayOf(U.default.shape({key:U.default.string.isRequired,data:U.default.any,style:U.default.objectOf(U.default.number).isRequired})),styles:U.default.oneOfType([U.default.func,U.default.arrayOf(U.default.shape({key:U.default.string.isRequired,data:U.default.any,style:U.default.objectOf(U.default.oneOfType([U.default.number,U.default.object])).isRequired}))]).isRequired,children:U.default.func.isRequired,willEnter:U.default.func,willLeave:U.default.func,didLeave:U.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function(b){return l.default(b.style)},willLeave:function(){return null},didLeave:function(){}},enumerable:!0}]);function I(Y){var b=this;i(this,I),k.call(this,Y),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(D){for(var C=ae(b.props.willEnter,b.props.willLeave,b.props.didLeave,b.state.mergedPropsStyles,D,b.state.currentStyles,b.state.currentVelocities,b.state.lastIdealStyles,b.state.lastIdealVelocities),O=C[0],M=C[1],S=C[2],E=C[3],R=C[4],w=0;w<D.length;w++){var h=D[w].style,P=!1;for(var y in h)if(!!Object.prototype.hasOwnProperty.call(h,y)){var K=h[y];typeof K=="number"&&(P||(P=!0,M[w]=r({},M[w]),S[w]=r({},S[w]),E[w]=r({},E[w]),R[w]=r({},R[w]),O[w]={key:O[w].key,data:O[w].data,style:r({},O[w].style)}),M[w][y]=K,S[w][y]=0,E[w][y]=K,R[w][y]=0,O[w].style[y]=K)}}b.setState({currentStyles:M,currentVelocities:S,mergedPropsStyles:O,lastIdealStyles:E,lastIdealVelocities:R})},this.startAnimationIfNecessary=function(){b.unmounting||(b.animationID=T.default(function(D){if(!b.unmounting){var C=b.props.styles,O=typeof C=="function"?C(J(b.state.mergedPropsStyles,b.unreadPropStyles,b.state.lastIdealStyles)):C;if(ne(b.state.currentStyles,O,b.state.currentVelocities,b.state.mergedPropsStyles)){b.animationID=null,b.accumulatedTime=0;return}var M=D||v.default(),S=M-b.prevTime;if(b.prevTime=M,b.accumulatedTime=b.accumulatedTime+S,b.accumulatedTime>x*10&&(b.accumulatedTime=0),b.accumulatedTime===0){b.animationID=null,b.startAnimationIfNecessary();return}for(var E=(b.accumulatedTime-Math.floor(b.accumulatedTime/x)*x)/x,R=Math.floor(b.accumulatedTime/x),w=ae(b.props.willEnter,b.props.willLeave,b.props.didLeave,b.state.mergedPropsStyles,O,b.state.currentStyles,b.state.currentVelocities,b.state.lastIdealStyles,b.state.lastIdealVelocities),h=w[0],P=w[1],y=w[2],K=w[3],B=w[4],G=0;G<h.length;G++){var F=h[G].style,ee={},ue={},$={},Ee={};for(var q in F)if(!!Object.prototype.hasOwnProperty.call(F,q)){var oe=F[q];if(typeof oe=="number")ee[q]=oe,ue[q]=0,$[q]=oe,Ee[q]=0;else{for(var Je=K[G][q],Se=B[G][q],Ft=0;Ft<R;Ft++){var yt=d.default(x/1e3,Je,Se,oe.val,oe.stiffness,oe.damping,oe.precision);Je=yt[0],Se=yt[1]}var He=d.default(x/1e3,Je,Se,oe.val,oe.stiffness,oe.damping,oe.precision),z=He[0],Re=He[1];ee[q]=Je+(z-Je)*E,ue[q]=Se+(Re-Se)*E,$[q]=Je,Ee[q]=Se}}K[G]=$,B[G]=Ee,P[G]=ee,y[G]=ue}b.animationID=null,b.accumulatedTime-=R*x,b.setState({currentStyles:P,currentVelocities:y,lastIdealStyles:K,lastIdealVelocities:B,mergedPropsStyles:h}),b.unreadPropStyles=null,b.startAnimationIfNecessary()}}))},this.state=this.defaultState()}return I.prototype.defaultState=function(){var b=this.props,D=b.defaultStyles,C=b.styles,O=b.willEnter,M=b.willLeave,S=b.didLeave,E=typeof C=="function"?C(D):C,R=void 0;D==null?R=E:R=D.map(function(ee){for(var ue=0;ue<E.length;ue++)if(E[ue].key===ee.key)return E[ue];return ee});var w=D==null?E.map(function(ee){return l.default(ee.style)}):D.map(function(ee){return l.default(ee.style)}),h=D==null?E.map(function(ee){return u.default(ee.style)}):D.map(function(ee){return u.default(ee.style)}),P=ae(O,M,S,R,E,w,h,w,h),y=P[0],K=P[1],B=P[2],G=P[3],F=P[4];return{currentStyles:K,currentVelocities:B,lastIdealStyles:G,lastIdealVelocities:F,mergedPropsStyles:y}},I.prototype.componentDidMount=function(){this.prevTime=v.default(),this.startAnimationIfNecessary()},I.prototype.componentWillReceiveProps=function(b){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var D=b.styles;typeof D=="function"?this.unreadPropStyles=D(J(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):this.unreadPropStyles=D,this.animationID==null&&(this.prevTime=v.default(),this.startAnimationIfNecessary())},I.prototype.componentWillUnmount=function(){this.unmounting=!0,this.animationID!=null&&(T.default.cancel(this.animationID),this.animationID=null)},I.prototype.render=function(){var b=J(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),D=this.props.children(b);return D&&V.default.Children.only(D)},I}(V.default.Component);t.default=Ae,e.exports=t.default})(Ro,Ro.exports);var X_=Lo(Ro.exports),Po={exports:{}},xo={exports:{}};(function(e,t){t.__esModule=!0,t.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},e.exports=t.default})(xo,xo.exports);(function(e,t){t.__esModule=!0;var r=Object.assign||function(u){for(var c=1;c<arguments.length;c++){var l=arguments[c];for(var f in l)Object.prototype.hasOwnProperty.call(l,f)&&(u[f]=l[f])}return u};t.default=s;function n(u){return u&&u.__esModule?u:{default:u}}var a=xo.exports,i=n(a),o=r({},i.default.noWobble,{precision:.01});function s(u,c){return r({},o,c,{val:u})}e.exports=t.default})(Po,Po.exports);var Z_=Lo(Po.exports);function Q_(e,t){if(e==null)return{};var r=eg(e,t),n,a;if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],!(t.indexOf(n)>=0)&&(!Object.prototype.propertyIsEnumerable.call(e,n)||(r[n]=e[n]))}return r}function eg(e,t){if(e==null)return{};var r={},n=Object.keys(e),a,i;for(i=0;i<n.length;i++)a=n[i],!(t.indexOf(a)>=0)&&(r[a]=e[a]);return r}function El(e){var t={};for(var r in e){var n=e[r];typeof n=="number"?t[r]=Z_(n):t[r]=n}return t}function tg(e){return e}function rg(){}function Sl(e){var t=e.children,r=e.className,n=e.atEnter,a=e.atActive,i=e.atLeave,o=e.wrapperComponent,s=o===void 0?"div":o,u=e.didLeave,c=u===void 0?rg:u,l=e.mapStyles,f=l===void 0?tg:l,d=e.runOnMount,p=d===void 0?!1:d,m=p===!1?null:t==null?[]:[{key:t.key,data:t,style:n}],_=t==null?[]:[{key:t.key,data:t,style:El(a)}];return g.createElement(X_,{defaultStyles:m,styles:_,willEnter:function(){return n},willLeave:function(){return El(i)},didLeave:c},function(v){return g.createElement("div",{className:r},v.map(function(A){var T={style:f(A.style),key:A.key};return s!==!1?ie.exports.createElement(s,T,A.data):ie.exports.cloneElement(A.data,T)}))})}Sl.propTypes={className:Q.string,wrapperComponent:Q.oneOfType([Q.bool,Q.element,Q.string,Q.func]),atEnter:Q.object.isRequired,atActive:Q.object.isRequired,atLeave:Q.object.isRequired,didLeave:Q.func,mapStyles:Q.func,runOnMount:Q.bool};var ng={key:"no-match"};function bl(e){return typeof e.key=="string"?e.key:""}function ag(e,t){for(var r=t.pathname,n=g.Children.toArray(e),a=0;a<n.length;a++){var i=n[a],o=aa(r,{exact:i.props.exact,path:i.props.path});if(o)return i}return ng}var ig=0;function og(e){var t=e.children,r=Q_(e,["children"]),n=mm(),a=ie.exports.useRef(null),i=ie.exports.useRef(null),o=ag(t,n);return a.current===null?(a.current=o,i.current=bl(n)):a.current.key!==o.key&&(a.current=o,i.current=bl(n)+ ++ig),g.createElement(Sl,r,g.createElement(Sc,{key:i.current,location:n},t))}class sg extends g.Component{static getDerivedStateFromError(){return{hasError:!0}}constructor(t){super(t);this.state={hasError:!1}}componentDidCatch(){setTimeout(()=>{this.setState({hasError:!1})},2e3)}render(){return this.state.hasError?g.createElement("div",null,"Working..."):g.createElement(Sc,null,g.createElement(og,{atEnter:{opacity:0},atLeave:{opacity:0},atActive:{opacity:1},className:"switch-wrapper"},g.createElement(me,{path:"/",component:g.lazy(()=>ce(()=>import("./index.c15030a1.js"),["assets/index.c15030a1.js","assets/index.506955d9.css","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/vendor.2a83d1c9.js","assets/index.b1c16674.js","assets/createSvgIcon.50054fae.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/index.5d0f9e48.js","assets/index.24221c18.css","assets/FeedService.c397da2d.js","assets/upload.d8a16837.js","assets/CardContent.e5a5f754.js","assets/CardMedia.147ece6d.js","assets/makeStyles.39fa1a38.js","assets/Grid.d12fda45.js","assets/Button.11e5af54.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css","assets/Close.a6b828d0.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/Modal.22c32aef.js","assets/List.0dd6030d.js"])),exact:!0}),g.createElement(me,{path:"/login",component:g.lazy(()=>ce(()=>import("./login.5efd0512.js"),["assets/login.5efd0512.js","assets/login.98ba6403.css","assets/EmptyLayout.17226d71.js","assets/EmptyLayout.e6b4d145.css","assets/vendor.2a83d1c9.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Paper.678a179e.js","assets/IconButton.5bf8eb2a.js","assets/Typography.a1510182.js","assets/Close.a6b828d0.js","assets/createSvgIcon.50054fae.js","assets/useControlled.91b72ab4.js","assets/Dialog.4b91e65c.js","assets/Modal.22c32aef.js","assets/Backdrop.311b8a3e.js","assets/DialogTitle.d9bbb4af.js","assets/AuthService.10b9bc61.js","assets/Grid.d12fda45.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/List.0dd6030d.js","assets/Button.11e5af54.js"]))}),g.createElement(me,{path:"/admin/thefeeds",component:g.lazy(()=>ce(()=>import("./thefeeds.c1aa4c68.js"),["assets/thefeeds.c1aa4c68.js","assets/vendor.2a83d1c9.js","assets/index.ec931bf1.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/createSvgIcon.50054fae.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/makeStyles.39fa1a38.js","assets/Modal.22c32aef.js","assets/IconButton.5bf8eb2a.js","assets/Backdrop.311b8a3e.js","assets/Slide.79bdeba3.js","assets/List.0dd6030d.js","assets/upload.d8a16837.js","assets/AuthService.10b9bc61.js","assets/Button.11e5af54.js","assets/TableRow.da8a69a4.js","assets/InputLabel.ed2935ea.js"]))}),g.createElement(me,{path:"/admin/feeds",component:g.lazy(()=>ce(()=>import("./feeds.495d3992.js"),["assets/feeds.495d3992.js","assets/vendor.2a83d1c9.js","assets/index.ec931bf1.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/createSvgIcon.50054fae.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/makeStyles.39fa1a38.js","assets/Modal.22c32aef.js","assets/IconButton.5bf8eb2a.js","assets/Backdrop.311b8a3e.js","assets/Slide.79bdeba3.js","assets/List.0dd6030d.js","assets/FeedService.c397da2d.js","assets/upload.d8a16837.js"]))}),g.createElement(me,{path:"/admin/users",component:g.lazy(()=>ce(()=>import("./users.24179e25.js"),["assets/users.24179e25.js","assets/users.abbde69b.css","assets/vendor.2a83d1c9.js","assets/index.33810693.js","assets/index.4e34e7f2.css","assets/ArrowBackIos.5ae03564.js","assets/createSvgIcon.50054fae.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/PopupsStateService.ba82c5f8.js","assets/upload.d8a16837.js","assets/FeedService.c397da2d.js","assets/Avatar.a262805b.js","assets/IconButton.5bf8eb2a.js","assets/Modal.22c32aef.js","assets/CardContent.e5a5f754.js","assets/CardMedia.147ece6d.js","assets/Button.11e5af54.js","assets/Dialog.4b91e65c.js","assets/Backdrop.311b8a3e.js","assets/DialogTitle.d9bbb4af.js","assets/TableRow.da8a69a4.js","assets/index.578b896a.js","assets/index.18508d4e.css","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/List.0dd6030d.js","assets/makeStyles.39fa1a38.js","assets/index.ec931bf1.js","assets/Slide.79bdeba3.js"]))}),g.createElement(me,{path:"/admin",component:g.lazy(()=>ce(()=>import("./index.a3068dac.js"),["assets/index.a3068dac.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/vendor.2a83d1c9.js","assets/index.b1c16674.js","assets/index.ec931bf1.js","assets/createSvgIcon.50054fae.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/makeStyles.39fa1a38.js","assets/Modal.22c32aef.js","assets/IconButton.5bf8eb2a.js","assets/Backdrop.311b8a3e.js","assets/Slide.79bdeba3.js","assets/List.0dd6030d.js"]))}),g.createElement(me,{path:"/auth/oauth/facebook",component:g.lazy(()=>ce(()=>import("./facebook.1d0126b2.js"),["assets/facebook.1d0126b2.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Container.12944623.js"]))}),g.createElement(me,{path:"/auth/oauth/github",component:g.lazy(()=>ce(()=>import("./github.3a01aed7.js"),["assets/github.3a01aed7.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Container.12944623.js"]))}),g.createElement(me,{path:"/auth/oauth/google",component:g.lazy(()=>ce(()=>import("./google.c61ce476.js"),["assets/google.c61ce476.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Container.12944623.js"]))}),g.createElement(me,{path:"/auth/oauth/linkedin",component:g.lazy(()=>ce(()=>import("./linkedin.1e046e3b.js"),["assets/linkedin.1e046e3b.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Container.12944623.js"]))}),g.createElement(me,{path:"/auth/confirm",component:g.lazy(()=>ce(()=>import("./confirm.a1af2b80.js"),["assets/confirm.a1af2b80.js","assets/confirm.6366265d.css","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/CardMedia.147ece6d.js","assets/Typography.a1510182.js","assets/Button.11e5af54.js"]))}),g.createElement(me,{path:"/auth/forgotpassword",component:g.lazy(()=>ce(()=>import("./forgotpassword.14c641b1.js"),["assets/forgotpassword.14c641b1.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Auth.module.3666b23e.js","assets/Auth.module.2123c3d3.css","assets/Container.12944623.js","assets/Typography.a1510182.js","assets/Grid.d12fda45.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/useControlled.91b72ab4.js","assets/Paper.678a179e.js","assets/Modal.22c32aef.js","assets/List.0dd6030d.js","assets/Button.11e5af54.js"]))}),g.createElement(me,{path:"/auth/magiclink",component:g.lazy(()=>ce(()=>import("./magiclink.5e375b17.js"),["assets/magiclink.5e375b17.js","assets/vendor.2a83d1c9.js","assets/AuthService.10b9bc61.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Auth.module.3666b23e.js","assets/Auth.module.2123c3d3.css","assets/EmptyLayout.17226d71.js","assets/EmptyLayout.e6b4d145.css","assets/Paper.678a179e.js","assets/IconButton.5bf8eb2a.js","assets/Typography.a1510182.js","assets/Close.a6b828d0.js","assets/createSvgIcon.50054fae.js","assets/useControlled.91b72ab4.js","assets/Dialog.4b91e65c.js","assets/Modal.22c32aef.js","assets/Backdrop.311b8a3e.js","assets/DialogTitle.d9bbb4af.js","assets/Container.12944623.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/List.0dd6030d.js","assets/Button.11e5af54.js"]))}),g.createElement(me,{path:"/:id",component:g.lazy(()=>ce(()=>import("./feed.1fbf9f59.js"),["assets/feed.1fbf9f59.js","assets/index.5d0f9e48.js","assets/index.24221c18.css","assets/vendor.2a83d1c9.js","assets/FeedService.c397da2d.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/upload.d8a16837.js","assets/CardContent.e5a5f754.js","assets/Paper.678a179e.js","assets/CardMedia.147ece6d.js","assets/Typography.a1510182.js","assets/createSvgIcon.50054fae.js","assets/useControlled.91b72ab4.js","assets/makeStyles.39fa1a38.js","assets/Grid.d12fda45.js","assets/Button.11e5af54.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/post/:pid",component:g.lazy(()=>ce(()=>import("./[pid].b85c4c98.js"),["assets/[pid].b85c4c98.js","assets/vendor.2a83d1c9.js","assets/index.b1c16674.js"]))}),g.createElement(me,{path:"/activity",component:g.lazy(()=>ce(()=>import("./activity.3577f6c9.js"),["assets/activity.3577f6c9.js","assets/vendor.2a83d1c9.js"]))}),g.createElement(me,{path:"/creator",component:g.lazy(()=>ce(()=>import("./creator.cf1b6326.js"),["assets/creator.cf1b6326.js","assets/creator.abddc44f.css","assets/vendor.2a83d1c9.js","assets/PopupsStateService.ba82c5f8.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/upload.d8a16837.js","assets/index.33810693.js","assets/index.4e34e7f2.css","assets/ArrowBackIos.5ae03564.js","assets/createSvgIcon.50054fae.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/FeedService.c397da2d.js","assets/Avatar.a262805b.js","assets/IconButton.5bf8eb2a.js","assets/Modal.22c32aef.js","assets/CardContent.e5a5f754.js","assets/CardMedia.147ece6d.js","assets/Button.11e5af54.js","assets/Dialog.4b91e65c.js","assets/Backdrop.311b8a3e.js","assets/DialogTitle.d9bbb4af.js"]))}),g.createElement(me,{path:"/creatorEdit",component:g.lazy(()=>ce(()=>import("./creatorEdit.4969383c.js"),["assets/creatorEdit.4969383c.js","assets/index.578b896a.js","assets/index.18508d4e.css","assets/vendor.2a83d1c9.js","assets/ArrowBackIos.5ae03564.js","assets/createSvgIcon.50054fae.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/PopupsStateService.ba82c5f8.js","assets/upload.d8a16837.js","assets/Button.11e5af54.js","assets/CardMedia.147ece6d.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/Modal.22c32aef.js","assets/List.0dd6030d.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/explore",component:g.lazy(()=>ce(()=>import("./creatorEdit.4969383c.js"),["assets/creatorEdit.4969383c.js","assets/index.578b896a.js","assets/index.18508d4e.css","assets/vendor.2a83d1c9.js","assets/ArrowBackIos.5ae03564.js","assets/createSvgIcon.50054fae.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Paper.678a179e.js","assets/useControlled.91b72ab4.js","assets/Typography.a1510182.js","assets/PopupsStateService.ba82c5f8.js","assets/upload.d8a16837.js","assets/Button.11e5af54.js","assets/CardMedia.147ece6d.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/Modal.22c32aef.js","assets/List.0dd6030d.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/feed",component:g.lazy(()=>ce(()=>import("./feed.1fbf9f59.js"),["assets/feed.1fbf9f59.js","assets/index.5d0f9e48.js","assets/index.24221c18.css","assets/vendor.2a83d1c9.js","assets/FeedService.c397da2d.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/upload.d8a16837.js","assets/CardContent.e5a5f754.js","assets/Paper.678a179e.js","assets/CardMedia.147ece6d.js","assets/Typography.a1510182.js","assets/createSvgIcon.50054fae.js","assets/useControlled.91b72ab4.js","assets/makeStyles.39fa1a38.js","assets/Grid.d12fda45.js","assets/Button.11e5af54.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/login",component:g.lazy(()=>ce(()=>import("./login.5efd0512.js"),["assets/login.5efd0512.js","assets/login.98ba6403.css","assets/EmptyLayout.17226d71.js","assets/EmptyLayout.e6b4d145.css","assets/vendor.2a83d1c9.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/Paper.678a179e.js","assets/IconButton.5bf8eb2a.js","assets/Typography.a1510182.js","assets/Close.a6b828d0.js","assets/createSvgIcon.50054fae.js","assets/useControlled.91b72ab4.js","assets/Dialog.4b91e65c.js","assets/Modal.22c32aef.js","assets/Backdrop.311b8a3e.js","assets/DialogTitle.d9bbb4af.js","assets/AuthService.10b9bc61.js","assets/Grid.d12fda45.js","assets/TextField.bc1d9226.js","assets/InputLabel.ed2935ea.js","assets/List.0dd6030d.js","assets/Button.11e5af54.js"]))}),g.createElement(me,{path:"/messages",component:g.lazy(()=>ce(()=>import("./messages.3872a9f0.js"),["assets/messages.3872a9f0.js","assets/vendor.2a83d1c9.js"]))}),g.createElement(me,{path:"/newfeed",component:g.lazy(()=>ce(()=>import("./newfeed.9dc81f6c.js"),["assets/newfeed.9dc81f6c.js","assets/newfeed.40304bec.css","assets/vendor.2a83d1c9.js","assets/index.8264432f.js","assets/index.6ac56a98.css","assets/PopupsStateService.ba82c5f8.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/upload.d8a16837.js","assets/Slide.79bdeba3.js","assets/Paper.678a179e.js","assets/Typography.a1510182.js","assets/Modal.22c32aef.js","assets/Dialog.4b91e65c.js","assets/Backdrop.311b8a3e.js","assets/Button.11e5af54.js","assets/makeStyles.39fa1a38.js","assets/Avatar.a262805b.js","assets/FeedService.c397da2d.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/notifications",component:g.lazy(()=>ce(()=>import("./notifications.212f0699.js"),["assets/notifications.212f0699.js","assets/notifications.84e8497c.css","assets/vendor.2a83d1c9.js","assets/index.8264432f.js","assets/index.6ac56a98.css","assets/PopupsStateService.ba82c5f8.js","assets/capitalize.75c82fb0.js","assets/index.b1c16674.js","assets/upload.d8a16837.js","assets/Slide.79bdeba3.js","assets/Paper.678a179e.js","assets/Typography.a1510182.js","assets/Modal.22c32aef.js","assets/Dialog.4b91e65c.js","assets/Backdrop.311b8a3e.js","assets/Button.11e5af54.js","assets/makeStyles.39fa1a38.js","assets/Avatar.a262805b.js","assets/CardContent.e5a5f754.js","assets/index.module.d63a8143.js","assets/index.module.c45c8d16.css"]))}),g.createElement(me,{path:"/:pid",component:g.lazy(()=>ce(()=>import("./[pid].7e01ac77.js"),["assets/[pid].7e01ac77.js","assets/vendor.2a83d1c9.js","assets/index.b1c16674.js"]))}),g.createElement(me,{path:"*",component:g.lazy(()=>ce(()=>import("./404.ee4d0b3d.js"),["assets/404.ee4d0b3d.js","assets/vendor.2a83d1c9.js"]))})))}}const ug=()=>{const e=xp(),t=ie.exports.useCallback(()=>{({npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}&&{npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.NODE_CONFIG)?window.env={npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.NODE_CONFIG:window.env="",e(Y_.restoreAuth())},[]);return ie.exports.useEffect(t,[]),g.createElement(g.Fragment,null,g.createElement(Gi,null,g.createElement("title",null,_a.publicRuntimeConfig.title),g.createElement("meta",{name:"viewport",content:"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no"})),g.createElement(Lu,{theme:ih},g.createElement(Nd,null),g.createElement(sg,null)))},cg=()=>g.createElement(Ip,{store:Ff(W_)},g.createElement(hm,null,g.createElement(ug,null)));var Dg=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:cg});export{Y_ as A,Ag as B,Lc as C,wg as D,Eg as E,Cl as F,Rg as G,gg as H,mm as I,_g as J,Ni as K,vm as L,Og as M,Dg as N,Q as P,Pn as S,ye as _,hg as a,xp as b,Sg as c,bg as d,X as e,Mf as f,Pl as g,mg as h,pg as i,pt as j,Er as k,bi as l,ah as m,ro as n,Wf as o,qf as p,yg as q,dg as r,Wm as s,Bm as t,vg as u,kc as v,Tm as w,Am as x,Tg as y,nh as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
