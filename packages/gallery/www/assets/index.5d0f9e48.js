import{r as react,g as getAugmentedNamespace,k as commonjsGlobal,s as commonjsRequire,R as React$1,p as _createClass,t as _classCallCheck,j as _slicedToArray,f as _typeof,_ as _defineProperty,v as _inherits,w as _getPrototypeOf,x as _possibleConstructorReturn,q as _assertThisInitialized,h as _objectWithoutProperties,e as _objectWithoutPropertiesLoose,u as useTranslation}from"./vendor.2a83d1c9.js";import{P as PropTypes,_ as _extends,o as memoize$1,p as unitlessKeys,b as useDispatch,c as useFeedState,a as useAuthState}from"./_app.41131035.js";import{a as FeedService}from"./FeedService.c397da2d.js";import{_ as _toConsumableArray,a as clsx}from"./capitalize.75c82fb0.js";import{C as Card,a as CardContent}from"./CardContent.e5a5f754.js";import{C as CardMedia}from"./CardMedia.147ece6d.js";import{T as TransitionGroup,a as Typography}from"./Typography.a1510182.js";import{c as createSvgIcon$1,i as interopRequireDefault,a as interopRequireWildcard}from"./createSvgIcon.50054fae.js";import{m as makeStyles}from"./makeStyles.39fa1a38.js";import{G as Grid}from"./Grid.d12fda45.js";import{B as Button}from"./Button.11e5af54.js";var AddCircleOutlined={},_interopRequireDefault=interopRequireDefault.exports,_interopRequireWildcard=interopRequireWildcard.exports;Object.defineProperty(AddCircleOutlined,"__esModule",{value:!0});var default_1=AddCircleOutlined.default=void 0,React=_interopRequireWildcard(react.exports),_createSvgIcon=_interopRequireDefault(createSvgIcon$1),_default=(0,_createSvgIcon.default)(React.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"}),"AddCircleOutlined");default_1=AddCircleOutlined.default=_default;var pdf={exports:{}},__viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:__viteBrowserExternal}),require$$0=getAugmentedNamespace(__viteBrowserExternal$1);(function(module,exports){(function(a,t){module.exports=t()})(commonjsGlobal,function(){return(()=>{var __webpack_modules__=[,(r,a,t)=>{function e(le){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(N){return typeof N}:e=function(N){return N&&typeof Symbol=="function"&&N.constructor===Symbol&&N!==Symbol.prototype?"symbol":typeof N},e(le)}Object.defineProperty(a,"__esModule",{value:!0}),a.addLinkAttributes=ae,a.deprecated=se,a.getFilenameFromUrl=X,a.getPdfFilenameFromUrl=L,a.isDataScheme=ce,a.isFetchSupported=R,a.isPdfFile=J,a.isValidFetchUrl=D,a.loadScript=Z,a.StatTimer=a.RenderingCancelledException=a.PDFDateString=a.PageViewport=a.LinkTarget=a.DOMSVGFactory=a.DOMCMapReaderFactory=a.DOMCanvasFactory=a.DEFAULT_LINK_REL=a.BaseCMapReaderFactory=a.BaseCanvasFactory=void 0;var o=l(t(2)),s=t(4);function l(le){return le&&le.__esModule?le:{default:le}}function c(le,fe){var N=typeof Symbol!="undefined"&&le[Symbol.iterator]||le["@@iterator"];if(!N){if(Array.isArray(le)||(N=d(le))||fe&&le&&typeof le.length=="number"){N&&(le=N);var E=0,T=function(){};return{s:T,n:function(){return E>=le.length?{done:!0}:{done:!1,value:le[E++]}},e:function(Ae){throw Ae},f:T}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var te=!0,ne=!1,de;return{s:function(){N=N.call(le)},n:function(){var Ae=N.next();return te=Ae.done,Ae},e:function(Ae){ne=!0,de=Ae},f:function(){try{!te&&N.return!=null&&N.return()}finally{if(ne)throw de}}}}function d(le,fe){if(!!le){if(typeof le=="string")return P(le,fe);var N=Object.prototype.toString.call(le).slice(8,-1);if(N==="Object"&&le.constructor&&(N=le.constructor.name),N==="Map"||N==="Set")return Array.from(le);if(N==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(N))return P(le,fe)}}function P(le,fe){(fe==null||fe>le.length)&&(fe=le.length);for(var N=0,E=new Array(fe);N<fe;N++)E[N]=le[N];return E}function x(le,fe,N,E,T,te,ne){try{var de=le[te](ne),he=de.value}catch(Ae){N(Ae);return}de.done?fe(he):Promise.resolve(he).then(E,T)}function $(le){return function(){var fe=this,N=arguments;return new Promise(function(E,T){var te=le.apply(fe,N);function ne(he){x(te,E,T,ne,de,"next",he)}function de(he){x(te,E,T,ne,de,"throw",he)}ne(void 0)})}}function j(le,fe){if(typeof fe!="function"&&fe!==null)throw new TypeError("Super expression must either be null or a function");le.prototype=Object.create(fe&&fe.prototype,{constructor:{value:le,writable:!0,configurable:!0}}),fe&&O(le,fe)}function O(le,fe){return O=Object.setPrototypeOf||function(E,T){return E.__proto__=T,E},O(le,fe)}function A(le){var fe=ue();return function(){var E=K(le),T;if(fe){var te=K(this).constructor;T=Reflect.construct(E,arguments,te)}else T=E.apply(this,arguments);return y(this,T)}}function y(le,fe){return fe&&(e(fe)==="object"||typeof fe=="function")?fe:G(le)}function G(le){if(le===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return le}function ue(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(le){return!1}}function K(le){return K=Object.setPrototypeOf?Object.getPrototypeOf:function(N){return N.__proto__||Object.getPrototypeOf(N)},K(le)}function U(le,fe){if(!(le instanceof fe))throw new TypeError("Cannot call a class as a function")}function I(le,fe){for(var N=0;N<fe.length;N++){var E=fe[N];E.enumerable=E.enumerable||!1,E.configurable=!0,"value"in E&&(E.writable=!0),Object.defineProperty(le,E.key,E)}}function B(le,fe,N){return fe&&I(le.prototype,fe),N&&I(le,N),le}var C="noopener noreferrer nofollow";a.DEFAULT_LINK_REL=C;var W="http://www.w3.org/2000/svg",b=function(){function le(){U(this,le),this.constructor===le&&(0,s.unreachable)("Cannot initialize BaseCanvasFactory.")}return B(le,[{key:"create",value:function(N,E){(0,s.unreachable)("Abstract method `create` called.")}},{key:"reset",value:function(N,E,T){if(!N.canvas)throw new Error("Canvas is not specified");if(E<=0||T<=0)throw new Error("Invalid canvas size");N.canvas.width=E,N.canvas.height=T}},{key:"destroy",value:function(N){if(!N.canvas)throw new Error("Canvas is not specified");N.canvas.width=0,N.canvas.height=0,N.canvas=null,N.context=null}}]),le}();a.BaseCanvasFactory=b;var S=function(le){j(N,le);var fe=A(N);function N(){var E,T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},te=T.ownerDocument,ne=te===void 0?globalThis.document:te;return U(this,N),E=fe.call(this),E._document=ne,E}return B(N,[{key:"create",value:function(T,te){if(T<=0||te<=0)throw new Error("Invalid canvas size");var ne=this._document.createElement("canvas"),de=ne.getContext("2d");return ne.width=T,ne.height=te,{canvas:ne,context:de}}}]),N}(b);a.DOMCanvasFactory=S;var w=function(){function le(fe){var N=fe.baseUrl,E=N===void 0?null:N,T=fe.isCompressed,te=T===void 0?!1:T;U(this,le),this.constructor===le&&(0,s.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=E,this.isCompressed=te}return B(le,[{key:"fetch",value:function(){var fe=$(o.default.mark(function E(T){var te=this,ne,de,he;return o.default.wrap(function(ee){for(;;)switch(ee.prev=ee.next){case 0:if(ne=T.name,this.baseUrl){ee.next=3;break}throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');case 3:if(ne){ee.next=5;break}throw new Error("CMap name must be specified.");case 5:return de=this.baseUrl+ne+(this.isCompressed?".bcmap":""),he=this.isCompressed?s.CMapCompressionType.BINARY:s.CMapCompressionType.NONE,ee.abrupt("return",this._fetchData(de,he).catch(function(oe){throw new Error("Unable to load ".concat(te.isCompressed?"binary ":"","CMap at: ").concat(de))}));case 8:case"end":return ee.stop()}},E,this)}));function N(E){return fe.apply(this,arguments)}return N}()},{key:"_fetchData",value:function(N,E){(0,s.unreachable)("Abstract method `_fetchData` called.")}}]),le}();a.BaseCMapReaderFactory=w;var k=function(le){j(N,le);var fe=A(N);function N(){return U(this,N),fe.apply(this,arguments)}return B(N,[{key:"_fetchData",value:function(T,te){var ne=this;return R()&&D(T,document.baseURI)?fetch(T).then(function(){var de=$(o.default.mark(function he(Ae){var ee;return o.default.wrap(function(M){for(;;)switch(M.prev=M.next){case 0:if(Ae.ok){M.next=2;break}throw new Error(Ae.statusText);case 2:if(!ne.isCompressed){M.next=10;break}return M.t0=Uint8Array,M.next=6,Ae.arrayBuffer();case 6:M.t1=M.sent,ee=new M.t0(M.t1),M.next=15;break;case 10:return M.t2=s.stringToBytes,M.next=13,Ae.text();case 13:M.t3=M.sent,ee=(0,M.t2)(M.t3);case 15:return M.abrupt("return",{cMapData:ee,compressionType:te});case 16:case"end":return M.stop()}},he)}));return function(he){return de.apply(this,arguments)}}()):new Promise(function(de,he){var Ae=new XMLHttpRequest;Ae.open("GET",T,!0),ne.isCompressed&&(Ae.responseType="arraybuffer"),Ae.onreadystatechange=function(){if(Ae.readyState===XMLHttpRequest.DONE){if(Ae.status===200||Ae.status===0){var ee;if(ne.isCompressed&&Ae.response?ee=new Uint8Array(Ae.response):!ne.isCompressed&&Ae.responseText&&(ee=(0,s.stringToBytes)(Ae.responseText)),ee){de({cMapData:ee,compressionType:te});return}}he(new Error(Ae.statusText))}},Ae.send(null)})}}]),N}(w);a.DOMCMapReaderFactory=k;var z=function(){function le(){U(this,le)}return B(le,[{key:"create",value:function(N,E){(0,s.assert)(N>0&&E>0,"Invalid SVG dimensions");var T=document.createElementNS(W,"svg:svg");return T.setAttribute("version","1.1"),T.setAttribute("width",N+"px"),T.setAttribute("height",E+"px"),T.setAttribute("preserveAspectRatio","none"),T.setAttribute("viewBox","0 0 "+N+" "+E),T}},{key:"createElement",value:function(N){return(0,s.assert)(typeof N=="string","Invalid SVG element type"),document.createElementNS(W,N)}}]),le}();a.DOMSVGFactory=z;var Q=function(){function le(fe){var N=fe.viewBox,E=fe.scale,T=fe.rotation,te=fe.offsetX,ne=te===void 0?0:te,de=fe.offsetY,he=de===void 0?0:de,Ae=fe.dontFlip,ee=Ae===void 0?!1:Ae;U(this,le),this.viewBox=N,this.scale=E,this.rotation=T,this.offsetX=ne,this.offsetY=he;var oe=(N[2]+N[0])/2,M=(N[3]+N[1])/2,H,V,ge,ye;switch(T%=360,T<0&&(T+=360),T){case 180:H=-1,V=0,ge=0,ye=1;break;case 90:H=0,V=1,ge=1,ye=0;break;case 270:H=0,V=-1,ge=-1,ye=0;break;case 0:H=1,V=0,ge=0,ye=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}ee&&(ge=-ge,ye=-ye);var pe,Se,ke,Ce;H===0?(pe=Math.abs(M-N[1])*E+ne,Se=Math.abs(oe-N[0])*E+he,ke=Math.abs(N[3]-N[1])*E,Ce=Math.abs(N[2]-N[0])*E):(pe=Math.abs(oe-N[0])*E+ne,Se=Math.abs(M-N[1])*E+he,ke=Math.abs(N[2]-N[0])*E,Ce=Math.abs(N[3]-N[1])*E),this.transform=[H*E,V*E,ge*E,ye*E,pe-H*E*oe-ge*E*M,Se-V*E*oe-ye*E*M],this.width=ke,this.height=Ce}return B(le,[{key:"clone",value:function(){var N=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},E=N.scale,T=E===void 0?this.scale:E,te=N.rotation,ne=te===void 0?this.rotation:te,de=N.offsetX,he=de===void 0?this.offsetX:de,Ae=N.offsetY,ee=Ae===void 0?this.offsetY:Ae,oe=N.dontFlip,M=oe===void 0?!1:oe;return new le({viewBox:this.viewBox.slice(),scale:T,rotation:ne,offsetX:he,offsetY:ee,dontFlip:M})}},{key:"convertToViewportPoint",value:function(N,E){return s.Util.applyTransform([N,E],this.transform)}},{key:"convertToViewportRectangle",value:function(N){var E=s.Util.applyTransform([N[0],N[1]],this.transform),T=s.Util.applyTransform([N[2],N[3]],this.transform);return[E[0],E[1],T[0],T[1]]}},{key:"convertToPdfPoint",value:function(N,E){return s.Util.applyInverseTransform([N,E],this.transform)}}]),le}();a.PageViewport=Q;var Y=function(le){j(N,le);var fe=A(N);function N(E,T){var te;return U(this,N),te=fe.call(this,E),te.type=T,te}return N}(s.BaseException);a.RenderingCancelledException=Y;var re={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};a.LinkTarget=re;function ae(le){var fe=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},N=fe.url,E=fe.target,T=fe.rel,te=fe.enabled,ne=te===void 0?!0:te;(0,s.assert)(N&&typeof N=="string",'addLinkAttributes: A valid "url" parameter must provided.');var de=(0,s.removeNullCharacters)(N);ne?le.href=le.title=de:(le.href="",le.title="Disabled: ".concat(de),le.onclick=function(){return!1});var he="";switch(E){case re.NONE:break;case re.SELF:he="_self";break;case re.BLANK:he="_blank";break;case re.PARENT:he="_parent";break;case re.TOP:he="_top";break}le.target=he,le.rel=typeof T=="string"?T:C}function ce(le){for(var fe=le.length,N=0;N<fe&&le[N].trim()==="";)N++;return le.substring(N,N+5).toLowerCase()==="data:"}function J(le){return typeof le=="string"&&/\.pdf$/i.test(le)}function X(le){var fe=le.indexOf("#"),N=le.indexOf("?"),E=Math.min(fe>0?fe:le.length,N>0?N:le.length);return le.substring(le.lastIndexOf("/",E)+1,E)}function L(le){var fe=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"document.pdf";if(typeof le!="string")return fe;if(ce(le))return(0,s.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),fe;var N=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,E=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,T=N.exec(le),te=E.exec(T[1])||E.exec(T[2])||E.exec(T[3]);if(te&&(te=te[0],te.includes("%")))try{te=E.exec(decodeURIComponent(te))[0]}catch(ne){}return te||fe}var v=function(){function le(){U(this,le),this.started=Object.create(null),this.times=[]}return B(le,[{key:"time",value:function(N){N in this.started&&(0,s.warn)("Timer is already running for ".concat(N)),this.started[N]=Date.now()}},{key:"timeEnd",value:function(N){N in this.started||(0,s.warn)("Timer has not been started for ".concat(N)),this.times.push({name:N,start:this.started[N],end:Date.now()}),delete this.started[N]}},{key:"toString",value:function(){var N=[],E=0,T=c(this.times),te;try{for(T.s();!(te=T.n()).done;){var ne=te.value,de=ne.name;de.length>E&&(E=de.length)}}catch(M){T.e(M)}finally{T.f()}var he=c(this.times),Ae;try{for(he.s();!(Ae=he.n()).done;){var ee=Ae.value,oe=ee.end-ee.start;N.push("".concat(ee.name.padEnd(E)," ").concat(oe,`ms
`))}}catch(M){he.e(M)}finally{he.f()}return N.join("")}}]),le}();a.StatTimer=v;function R(){return typeof fetch!="undefined"&&typeof Response!="undefined"&&"body"in Response.prototype&&typeof ReadableStream!="undefined"}function D(le,fe){try{var N=fe?new URL(le,fe):new URL(le),E=N.protocol;return E==="http:"||E==="https:"}catch(T){return!1}}function Z(le){var fe=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;return new Promise(function(N,E){var T=document.createElement("script");T.src=le,T.onload=function(te){fe&&T.remove(),N(te)},T.onerror=function(){E(new Error("Cannot load script at: ".concat(T.src)))},(document.head||document.documentElement).appendChild(T)})}function se(le){console.log("Deprecated API usage: "+le)}var ie,Pe=function(){function le(){U(this,le)}return B(le,null,[{key:"toDateObject",value:function(N){if(!N||!(0,s.isString)(N))return null;ie||(ie=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));var E=ie.exec(N);if(!E)return null;var T=parseInt(E[1],10),te=parseInt(E[2],10);te=te>=1&&te<=12?te-1:0;var ne=parseInt(E[3],10);ne=ne>=1&&ne<=31?ne:1;var de=parseInt(E[4],10);de=de>=0&&de<=23?de:0;var he=parseInt(E[5],10);he=he>=0&&he<=59?he:0;var Ae=parseInt(E[6],10);Ae=Ae>=0&&Ae<=59?Ae:0;var ee=E[7]||"Z",oe=parseInt(E[8],10);oe=oe>=0&&oe<=23?oe:0;var M=parseInt(E[9],10)||0;return M=M>=0&&M<=59?M:0,ee==="-"?(de+=oe,he+=M):ee==="+"&&(de-=oe,he-=M),new Date(Date.UTC(T,te,ne,de,he,Ae))}}]),le}();a.PDFDateString=Pe},(r,a,t)=>{r.exports=t(3)},(r,a,t)=>{r=t.nmd(r);function e(s){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(c){return typeof c}:e=function(c){return c&&typeof Symbol=="function"&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":typeof c},e(s)}var o=function(s){var l=Object.prototype,c=l.hasOwnProperty,d,P=typeof Symbol=="function"?Symbol:{},x=P.iterator||"@@iterator",$=P.asyncIterator||"@@asyncIterator",j=P.toStringTag||"@@toStringTag";function O(v,R,D){return Object.defineProperty(v,R,{value:D,enumerable:!0,configurable:!0,writable:!0}),v[R]}try{O({},"")}catch(v){O=function(D,Z,se){return D[Z]=se}}function A(v,R,D,Z){var se=R&&R.prototype instanceof B?R:B,ie=Object.create(se.prototype),Pe=new J(Z||[]);return ie._invoke=Y(v,D,Pe),ie}s.wrap=A;function y(v,R,D){try{return{type:"normal",arg:v.call(R,D)}}catch(Z){return{type:"throw",arg:Z}}}var G="suspendedStart",ue="suspendedYield",K="executing",U="completed",I={};function B(){}function C(){}function W(){}var b={};b[x]=function(){return this};var S=Object.getPrototypeOf,w=S&&S(S(X([])));w&&w!==l&&c.call(w,x)&&(b=w);var k=W.prototype=B.prototype=Object.create(b);C.prototype=k.constructor=W,W.constructor=C,C.displayName=O(W,j,"GeneratorFunction");function z(v){["next","throw","return"].forEach(function(R){O(v,R,function(D){return this._invoke(R,D)})})}s.isGeneratorFunction=function(v){var R=typeof v=="function"&&v.constructor;return R?R===C||(R.displayName||R.name)==="GeneratorFunction":!1},s.mark=function(v){return Object.setPrototypeOf?Object.setPrototypeOf(v,W):(v.__proto__=W,O(v,j,"GeneratorFunction")),v.prototype=Object.create(k),v},s.awrap=function(v){return{__await:v}};function Q(v,R){function D(ie,Pe,le,fe){var N=y(v[ie],v,Pe);if(N.type==="throw")fe(N.arg);else{var E=N.arg,T=E.value;return T&&e(T)==="object"&&c.call(T,"__await")?R.resolve(T.__await).then(function(te){D("next",te,le,fe)},function(te){D("throw",te,le,fe)}):R.resolve(T).then(function(te){E.value=te,le(E)},function(te){return D("throw",te,le,fe)})}}var Z;function se(ie,Pe){function le(){return new R(function(fe,N){D(ie,Pe,fe,N)})}return Z=Z?Z.then(le,le):le()}this._invoke=se}z(Q.prototype),Q.prototype[$]=function(){return this},s.AsyncIterator=Q,s.async=function(v,R,D,Z,se){se===void 0&&(se=Promise);var ie=new Q(A(v,R,D,Z),se);return s.isGeneratorFunction(R)?ie:ie.next().then(function(Pe){return Pe.done?Pe.value:ie.next()})};function Y(v,R,D){var Z=G;return function(ie,Pe){if(Z===K)throw new Error("Generator is already running");if(Z===U){if(ie==="throw")throw Pe;return L()}for(D.method=ie,D.arg=Pe;;){var le=D.delegate;if(le){var fe=re(le,D);if(fe){if(fe===I)continue;return fe}}if(D.method==="next")D.sent=D._sent=D.arg;else if(D.method==="throw"){if(Z===G)throw Z=U,D.arg;D.dispatchException(D.arg)}else D.method==="return"&&D.abrupt("return",D.arg);Z=K;var N=y(v,R,D);if(N.type==="normal"){if(Z=D.done?U:ue,N.arg===I)continue;return{value:N.arg,done:D.done}}else N.type==="throw"&&(Z=U,D.method="throw",D.arg=N.arg)}}}function re(v,R){var D=v.iterator[R.method];if(D===d){if(R.delegate=null,R.method==="throw"){if(v.iterator.return&&(R.method="return",R.arg=d,re(v,R),R.method==="throw"))return I;R.method="throw",R.arg=new TypeError("The iterator does not provide a 'throw' method")}return I}var Z=y(D,v.iterator,R.arg);if(Z.type==="throw")return R.method="throw",R.arg=Z.arg,R.delegate=null,I;var se=Z.arg;if(!se)return R.method="throw",R.arg=new TypeError("iterator result is not an object"),R.delegate=null,I;if(se.done)R[v.resultName]=se.value,R.next=v.nextLoc,R.method!=="return"&&(R.method="next",R.arg=d);else return se;return R.delegate=null,I}z(k),O(k,j,"Generator"),k[x]=function(){return this},k.toString=function(){return"[object Generator]"};function ae(v){var R={tryLoc:v[0]};1 in v&&(R.catchLoc=v[1]),2 in v&&(R.finallyLoc=v[2],R.afterLoc=v[3]),this.tryEntries.push(R)}function ce(v){var R=v.completion||{};R.type="normal",delete R.arg,v.completion=R}function J(v){this.tryEntries=[{tryLoc:"root"}],v.forEach(ae,this),this.reset(!0)}s.keys=function(v){var R=[];for(var D in v)R.push(D);return R.reverse(),function Z(){for(;R.length;){var se=R.pop();if(se in v)return Z.value=se,Z.done=!1,Z}return Z.done=!0,Z}};function X(v){if(v){var R=v[x];if(R)return R.call(v);if(typeof v.next=="function")return v;if(!isNaN(v.length)){var D=-1,Z=function se(){for(;++D<v.length;)if(c.call(v,D))return se.value=v[D],se.done=!1,se;return se.value=d,se.done=!0,se};return Z.next=Z}}return{next:L}}s.values=X;function L(){return{value:d,done:!0}}return J.prototype={constructor:J,reset:function(R){if(this.prev=0,this.next=0,this.sent=this._sent=d,this.done=!1,this.delegate=null,this.method="next",this.arg=d,this.tryEntries.forEach(ce),!R)for(var D in this)D.charAt(0)==="t"&&c.call(this,D)&&!isNaN(+D.slice(1))&&(this[D]=d)},stop:function(){this.done=!0;var R=this.tryEntries[0],D=R.completion;if(D.type==="throw")throw D.arg;return this.rval},dispatchException:function(R){if(this.done)throw R;var D=this;function Z(N,E){return Pe.type="throw",Pe.arg=R,D.next=N,E&&(D.method="next",D.arg=d),!!E}for(var se=this.tryEntries.length-1;se>=0;--se){var ie=this.tryEntries[se],Pe=ie.completion;if(ie.tryLoc==="root")return Z("end");if(ie.tryLoc<=this.prev){var le=c.call(ie,"catchLoc"),fe=c.call(ie,"finallyLoc");if(le&&fe){if(this.prev<ie.catchLoc)return Z(ie.catchLoc,!0);if(this.prev<ie.finallyLoc)return Z(ie.finallyLoc)}else if(le){if(this.prev<ie.catchLoc)return Z(ie.catchLoc,!0)}else if(fe){if(this.prev<ie.finallyLoc)return Z(ie.finallyLoc)}else throw new Error("try statement without catch or finally")}}},abrupt:function(R,D){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var se=this.tryEntries[Z];if(se.tryLoc<=this.prev&&c.call(se,"finallyLoc")&&this.prev<se.finallyLoc){var ie=se;break}}ie&&(R==="break"||R==="continue")&&ie.tryLoc<=D&&D<=ie.finallyLoc&&(ie=null);var Pe=ie?ie.completion:{};return Pe.type=R,Pe.arg=D,ie?(this.method="next",this.next=ie.finallyLoc,I):this.complete(Pe)},complete:function(R,D){if(R.type==="throw")throw R.arg;return R.type==="break"||R.type==="continue"?this.next=R.arg:R.type==="return"?(this.rval=this.arg=R.arg,this.method="return",this.next="end"):R.type==="normal"&&D&&(this.next=D),I},finish:function(R){for(var D=this.tryEntries.length-1;D>=0;--D){var Z=this.tryEntries[D];if(Z.finallyLoc===R)return this.complete(Z.completion,Z.afterLoc),ce(Z),I}},catch:function(R){for(var D=this.tryEntries.length-1;D>=0;--D){var Z=this.tryEntries[D];if(Z.tryLoc===R){var se=Z.completion;if(se.type==="throw"){var ie=se.arg;ce(Z)}return ie}}throw new Error("illegal catch attempt")},delegateYield:function(R,D,Z){return this.delegate={iterator:X(R),resultName:D,nextLoc:Z},this.method==="next"&&(this.arg=d),I}},s}(e(r)==="object"?r.exports:{});try{regeneratorRuntime=o}catch(s){Function("r","regeneratorRuntime = r")(o)}},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.arrayByteLength=we,a.arraysToBytes=Fe,a.assert=ee,a.bytesToString=Be,a.createObjectURL=Cr,a.createPromiseCapability=Xt,a.createValidAbsoluteUrl=H,a.escapeString=lt,a.getModificationDate=Ft,a.getVerbosityLevel=ne,a.info=de,a.isArrayBuffer=Kt,a.isArrayEqual=Yt,a.isAscii=mt,a.isBool=Ht,a.isNum=Pt,a.isSameOrigin=oe,a.isString=qt,a.objectFromMap=Ge,a.objectSize=$e,a.removeNullCharacters=Ee,a.setVerbosityLevel=te,a.shadow=V,a.string32=Le,a.stringToBytes=_e,a.stringToPDFString=Ze,a.stringToUTF16BEString=dt,a.stringToUTF8String=kr,a.unreachable=Ae,a.utf8StringToString=It,a.warn=he,a.VerbosityLevel=a.Util=a.UNSUPPORTED_FEATURES=a.UnknownErrorException=a.UnexpectedResponseException=a.TextRenderingMode=a.StreamType=a.PermissionFlag=a.PasswordResponses=a.PasswordException=a.PageActionEventType=a.OPS=a.MissingPDFException=a.IsLittleEndianCached=a.IsEvalSupportedCached=a.InvalidPDFException=a.ImageKind=a.IDENTITY_MATRIX=a.FormatError=a.FontType=a.FONT_IDENTITY_MATRIX=a.DocumentActionEventType=a.CMapCompressionType=a.BaseException=a.AnnotationType=a.AnnotationStateModelType=a.AnnotationReviewState=a.AnnotationReplyType=a.AnnotationMarkedState=a.AnnotationFlag=a.AnnotationFieldFlag=a.AnnotationBorderStyleType=a.AnnotationActionEventType=a.AbortException=void 0,t(5);function e(be,xe){for(var me=0;me<xe.length;me++){var Te=xe[me];Te.enumerable=Te.enumerable||!1,Te.configurable=!0,"value"in Te&&(Te.writable=!0),Object.defineProperty(be,Te.key,Te)}}function o(be,xe,me){return xe&&e(be.prototype,xe),me&&e(be,me),be}function s(be){return d(be)||c(be)||A(be)||l()}function l(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function c(be){if(typeof Symbol!="undefined"&&be[Symbol.iterator]!=null||be["@@iterator"]!=null)return Array.from(be)}function d(be){if(Array.isArray(be))return y(be)}function P(be,xe){return j(be)||$(be,xe)||A(be,xe)||x()}function x(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function $(be,xe){var me=be&&(typeof Symbol!="undefined"&&be[Symbol.iterator]||be["@@iterator"]);if(me!=null){var Te=[],We=!0,je=!1,Ve,qe;try{for(me=me.call(be);!(We=(Ve=me.next()).done)&&(Te.push(Ve.value),!(xe&&Te.length===xe));We=!0);}catch(et){je=!0,qe=et}finally{try{!We&&me.return!=null&&me.return()}finally{if(je)throw qe}}return Te}}function j(be){if(Array.isArray(be))return be}function O(be,xe){var me=typeof Symbol!="undefined"&&be[Symbol.iterator]||be["@@iterator"];if(!me){if(Array.isArray(be)||(me=A(be))||xe&&be&&typeof be.length=="number"){me&&(be=me);var Te=0,We=function(){};return{s:We,n:function(){return Te>=be.length?{done:!0}:{done:!1,value:be[Te++]}},e:function(st){throw st},f:We}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var je=!0,Ve=!1,qe;return{s:function(){me=me.call(be)},n:function(){var st=me.next();return je=st.done,st},e:function(st){Ve=!0,qe=st},f:function(){try{!je&&me.return!=null&&me.return()}finally{if(Ve)throw qe}}}}function A(be,xe){if(!!be){if(typeof be=="string")return y(be,xe);var me=Object.prototype.toString.call(be).slice(8,-1);if(me==="Object"&&be.constructor&&(me=be.constructor.name),me==="Map"||me==="Set")return Array.from(be);if(me==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(me))return y(be,xe)}}function y(be,xe){(xe==null||xe>be.length)&&(xe=be.length);for(var me=0,Te=new Array(xe);me<xe;me++)Te[me]=be[me];return Te}function G(be){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?G=function(me){return typeof me}:G=function(me){return me&&typeof Symbol=="function"&&me.constructor===Symbol&&me!==Symbol.prototype?"symbol":typeof me},G(be)}function ue(be,xe){if(!(be instanceof xe))throw new TypeError("Cannot call a class as a function")}function K(be,xe){if(typeof xe!="function"&&xe!==null)throw new TypeError("Super expression must either be null or a function");be.prototype=Object.create(xe&&xe.prototype,{constructor:{value:be,writable:!0,configurable:!0}}),xe&&U(be,xe)}function U(be,xe){return U=Object.setPrototypeOf||function(Te,We){return Te.__proto__=We,Te},U(be,xe)}function I(be){var xe=W();return function(){var Te=b(be),We;if(xe){var je=b(this).constructor;We=Reflect.construct(Te,arguments,je)}else We=Te.apply(this,arguments);return B(this,We)}}function B(be,xe){return xe&&(G(xe)==="object"||typeof xe=="function")?xe:C(be)}function C(be){if(be===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return be}function W(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(be){return!1}}function b(be){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(me){return me.__proto__||Object.getPrototypeOf(me)},b(be)}var S=[1,0,0,1,0,0];a.IDENTITY_MATRIX=S;var w=[.001,0,0,.001,0,0];a.FONT_IDENTITY_MATRIX=w;var k={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};a.PermissionFlag=k;var z={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};a.TextRenderingMode=z;var Q={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};a.ImageKind=Q;var Y={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};a.AnnotationType=Y;var re={MARKED:"Marked",REVIEW:"Review"};a.AnnotationStateModelType=re;var ae={MARKED:"Marked",UNMARKED:"Unmarked"};a.AnnotationMarkedState=ae;var ce={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"};a.AnnotationReviewState=ce;var J={GROUP:"Group",REPLY:"R"};a.AnnotationReplyType=J;var X={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};a.AnnotationFlag=X;var L={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};a.AnnotationFieldFlag=L;var v={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};a.AnnotationBorderStyleType=v;var R={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};a.AnnotationActionEventType=R;var D={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};a.DocumentActionEventType=D;var Z={O:"PageOpen",C:"PageClose"};a.PageActionEventType=Z;var se={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"};a.StreamType=se;var ie={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};a.FontType=ie;var Pe={ERRORS:0,WARNINGS:1,INFOS:5};a.VerbosityLevel=Pe;var le={NONE:0,BINARY:1,STREAM:2};a.CMapCompressionType=le;var fe={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};a.OPS=fe;var N={unknown:"unknown",forms:"forms",javaScript:"javaScript",signatures:"signatures",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontBuildPath:"errorFontBuildPath",errorFontGetPath:"errorFontGetPath",errorMarkedContent:"errorMarkedContent"};a.UNSUPPORTED_FEATURES=N;var E={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};a.PasswordResponses=E;var T=Pe.WARNINGS;function te(be){Number.isInteger(be)&&(T=be)}function ne(){return T}function de(be){T>=Pe.INFOS&&console.log("Info: ".concat(be))}function he(be){T>=Pe.WARNINGS&&console.log("Warning: ".concat(be))}function Ae(be){throw new Error(be)}function ee(be,xe){be||Ae(xe)}function oe(be,xe){var me;try{if(me=new URL(be),!me.origin||me.origin==="null")return!1}catch(We){return!1}var Te=new URL(xe,me);return me.origin===Te.origin}function M(be){if(!be)return!1;switch(be.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function H(be,xe){if(!be)return null;try{var me=xe?new URL(be,xe):new URL(be);if(M(me))return me}catch(Te){}return null}function V(be,xe,me){return Object.defineProperty(be,xe,{value:me,enumerable:!0,configurable:!0,writable:!1}),me}var ge=function(){function xe(me){this.constructor===xe&&Ae("Cannot initialize BaseException."),this.message=me,this.name=this.constructor.name}return xe.prototype=new Error,xe.constructor=xe,xe}();a.BaseException=ge;var ye=function(be){K(me,be);var xe=I(me);function me(Te,We){var je;return ue(this,me),je=xe.call(this,Te),je.code=We,je}return me}(ge);a.PasswordException=ye;var pe=function(be){K(me,be);var xe=I(me);function me(Te,We){var je;return ue(this,me),je=xe.call(this,Te),je.details=We,je}return me}(ge);a.UnknownErrorException=pe;var Se=function(be){K(me,be);var xe=I(me);function me(){return ue(this,me),xe.apply(this,arguments)}return me}(ge);a.InvalidPDFException=Se;var ke=function(be){K(me,be);var xe=I(me);function me(){return ue(this,me),xe.apply(this,arguments)}return me}(ge);a.MissingPDFException=ke;var Ce=function(be){K(me,be);var xe=I(me);function me(Te,We){var je;return ue(this,me),je=xe.call(this,Te),je.status=We,je}return me}(ge);a.UnexpectedResponseException=Ce;var Ie=function(be){K(me,be);var xe=I(me);function me(){return ue(this,me),xe.apply(this,arguments)}return me}(ge);a.FormatError=Ie;var Ne=function(be){K(me,be);var xe=I(me);function me(){return ue(this,me),xe.apply(this,arguments)}return me}(ge);a.AbortException=Ne;var Me=/\x00/g;function Ee(be){return typeof be!="string"?(he("The argument for removeNullCharacters must be a string."),be):be.replace(Me,"")}function Be(be){ee(be!==null&&G(be)==="object"&&be.length!==void 0,"Invalid argument for bytesToString");var xe=be.length,me=8192;if(xe<me)return String.fromCharCode.apply(null,be);for(var Te=[],We=0;We<xe;We+=me){var je=Math.min(We+me,xe),Ve=be.subarray(We,je);Te.push(String.fromCharCode.apply(null,Ve))}return Te.join("")}function _e(be){ee(typeof be=="string","Invalid argument for stringToBytes");for(var xe=be.length,me=new Uint8Array(xe),Te=0;Te<xe;++Te)me[Te]=be.charCodeAt(Te)&255;return me}function we(be){return be.length!==void 0?be.length:(ee(be.byteLength!==void 0,"arrayByteLength - invalid argument."),be.byteLength)}function Fe(be){var xe=be.length;if(xe===1&&be[0]instanceof Uint8Array)return be[0];for(var me=0,Te=0;Te<xe;Te++)me+=we(be[Te]);for(var We=0,je=new Uint8Array(me),Ve=0;Ve<xe;Ve++){var qe=be[Ve];qe instanceof Uint8Array||(typeof qe=="string"?qe=_e(qe):qe=new Uint8Array(qe));var et=qe.byteLength;je.set(qe,We),We+=et}return je}function Le(be){return String.fromCharCode(be>>24&255,be>>16&255,be>>8&255,be&255)}function $e(be){return Object.keys(be).length}function Ge(be){var xe=Object.create(null),me=O(be),Te;try{for(me.s();!(Te=me.n()).done;){var We=P(Te.value,2),je=We[0],Ve=We[1];xe[je]=Ve}}catch(qe){me.e(qe)}finally{me.f()}return xe}function Ke(){var be=new Uint8Array(4);be[0]=1;var xe=new Uint32Array(be.buffer,0,1);return xe[0]===1}var Ye={get value(){return V(this,"value",Ke())}};a.IsLittleEndianCached=Ye;function ze(){try{return new Function(""),!0}catch(be){return!1}}var nt={get value(){return V(this,"value",ze())}};a.IsEvalSupportedCached=nt;var Xe=s(Array(256).keys()).map(function(be){return be.toString(16).padStart(2,"0")}),tt=function(){function be(){ue(this,be)}return o(be,null,[{key:"makeHexColor",value:function(me,Te,We){return"#".concat(Xe[me]).concat(Xe[Te]).concat(Xe[We])}},{key:"transform",value:function(me,Te){return[me[0]*Te[0]+me[2]*Te[1],me[1]*Te[0]+me[3]*Te[1],me[0]*Te[2]+me[2]*Te[3],me[1]*Te[2]+me[3]*Te[3],me[0]*Te[4]+me[2]*Te[5]+me[4],me[1]*Te[4]+me[3]*Te[5]+me[5]]}},{key:"applyTransform",value:function(me,Te){var We=me[0]*Te[0]+me[1]*Te[2]+Te[4],je=me[0]*Te[1]+me[1]*Te[3]+Te[5];return[We,je]}},{key:"applyInverseTransform",value:function(me,Te){var We=Te[0]*Te[3]-Te[1]*Te[2],je=(me[0]*Te[3]-me[1]*Te[2]+Te[2]*Te[5]-Te[4]*Te[3])/We,Ve=(-me[0]*Te[1]+me[1]*Te[0]+Te[4]*Te[1]-Te[5]*Te[0])/We;return[je,Ve]}},{key:"getAxialAlignedBoundingBox",value:function(me,Te){var We=be.applyTransform(me,Te),je=be.applyTransform(me.slice(2,4),Te),Ve=be.applyTransform([me[0],me[3]],Te),qe=be.applyTransform([me[2],me[1]],Te);return[Math.min(We[0],je[0],Ve[0],qe[0]),Math.min(We[1],je[1],Ve[1],qe[1]),Math.max(We[0],je[0],Ve[0],qe[0]),Math.max(We[1],je[1],Ve[1],qe[1])]}},{key:"inverseTransform",value:function(me){var Te=me[0]*me[3]-me[1]*me[2];return[me[3]/Te,-me[1]/Te,-me[2]/Te,me[0]/Te,(me[2]*me[5]-me[4]*me[3])/Te,(me[4]*me[1]-me[5]*me[0])/Te]}},{key:"apply3dTransform",value:function(me,Te){return[me[0]*Te[0]+me[1]*Te[1]+me[2]*Te[2],me[3]*Te[0]+me[4]*Te[1]+me[5]*Te[2],me[6]*Te[0]+me[7]*Te[1]+me[8]*Te[2]]}},{key:"singularValueDecompose2dScale",value:function(me){var Te=[me[0],me[2],me[1],me[3]],We=me[0]*Te[0]+me[1]*Te[2],je=me[0]*Te[1]+me[1]*Te[3],Ve=me[2]*Te[0]+me[3]*Te[2],qe=me[2]*Te[1]+me[3]*Te[3],et=(We+qe)/2,st=Math.sqrt(Math.pow(We+qe,2)-4*(We*qe-Ve*je))/2,Mt=et+st||1,Lt=et-st||1;return[Math.sqrt(Mt),Math.sqrt(Lt)]}},{key:"normalizeRect",value:function(me){var Te=me.slice(0);return me[0]>me[2]&&(Te[0]=me[2],Te[2]=me[0]),me[1]>me[3]&&(Te[1]=me[3],Te[3]=me[1]),Te}},{key:"intersect",value:function(me,Te){function We(et,st){return et-st}var je=[me[0],me[2],Te[0],Te[2]].sort(We),Ve=[me[1],me[3],Te[1],Te[3]].sort(We),qe=[];if(me=be.normalizeRect(me),Te=be.normalizeRect(Te),je[0]===me[0]&&je[1]===Te[0]||je[0]===Te[0]&&je[1]===me[0])qe[0]=je[1],qe[2]=je[2];else return null;if(Ve[0]===me[1]&&Ve[1]===Te[1]||Ve[0]===Te[1]&&Ve[1]===me[1])qe[1]=Ve[1],qe[3]=Ve[2];else return null;return qe}}]),be}();a.Util=tt;var it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function Ze(be){var xe=be.length,me=[];if(be[0]==="\xFE"&&be[1]==="\xFF")for(var Te=2;Te<xe;Te+=2)me.push(String.fromCharCode(be.charCodeAt(Te)<<8|be.charCodeAt(Te+1)));else if(be[0]==="\xFF"&&be[1]==="\xFE")for(var We=2;We<xe;We+=2)me.push(String.fromCharCode(be.charCodeAt(We+1)<<8|be.charCodeAt(We)));else for(var je=0;je<xe;++je){var Ve=it[be.charCodeAt(je)];me.push(Ve?String.fromCharCode(Ve):be.charAt(je))}return me.join("")}function lt(be){return be.replace(/([()\\\n\r])/g,function(xe){return xe===`
`?"\\n":xe==="\r"?"\\r":"\\".concat(xe)})}function mt(be){return/^[\x00-\x7F]*$/.test(be)}function dt(be){for(var xe=["\xFE\xFF"],me=0,Te=be.length;me<Te;me++){var We=be.charCodeAt(me);xe.push(String.fromCharCode(We>>8&255),String.fromCharCode(We&255))}return xe.join("")}function kr(be){return decodeURIComponent(escape(be))}function It(be){return unescape(encodeURIComponent(be))}function Ht(be){return typeof be=="boolean"}function Pt(be){return typeof be=="number"}function qt(be){return typeof be=="string"}function Kt(be){return G(be)==="object"&&be!==null&&be.byteLength!==void 0}function Yt(be,xe){if(be.length!==xe.length)return!1;for(var me=0,Te=be.length;me<Te;me++)if(be[me]!==xe[me])return!1;return!0}function Ft(){var be=arguments.length>0&&arguments[0]!==void 0?arguments[0]:new Date,xe=[be.getUTCFullYear().toString(),(be.getUTCMonth()+1).toString().padStart(2,"0"),be.getUTCDate().toString().padStart(2,"0"),be.getUTCHours().toString().padStart(2,"0"),be.getUTCMinutes().toString().padStart(2,"0"),be.getUTCSeconds().toString().padStart(2,"0")];return xe.join("")}function Xt(){var be=Object.create(null),xe=!1;return Object.defineProperty(be,"settled",{get:function(){return xe}}),be.promise=new Promise(function(me,Te){be.resolve=function(We){xe=!0,me(We)},be.reject=function(We){xe=!0,Te(We)}}),be}function Cr(be){var xe=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",me=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;if(URL.createObjectURL&&!me)return URL.createObjectURL(new Blob([be],{type:xe}));for(var Te="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",We="data:".concat(xe,";base64,"),je=0,Ve=be.length;je<Ve;je+=3){var qe=be[je]&255,et=be[je+1]&255,st=be[je+2]&255,Mt=qe>>2,Lt=(qe&3)<<4|et>>4,Rr=je+1<Ve?(et&15)<<2|st>>6:64,Pr=je+2<Ve?st&63:64;We+=Te[Mt]+Te[Lt]+Te[Rr]+Te[Pr]}return We}},(r,a,t)=>{var e=t(6);(typeof globalThis=="undefined"||!globalThis._pdfjsCompatibilityChecked)&&((typeof globalThis=="undefined"||globalThis.Math!==Math)&&(globalThis=t(7)),globalThis._pdfjsCompatibilityChecked=!0,function(){globalThis.btoa||!e.isNodeJS||(globalThis.btoa=function(s){return Buffer.from(s,"binary").toString("base64")})}(),function(){globalThis.atob||!e.isNodeJS||(globalThis.atob=function(s){return Buffer.from(s,"base64").toString("binary")})}(),function(){Object.fromEntries||t(53)}(),function(){globalThis.Promise.allSettled||(globalThis.Promise=t(84))}(),function(){var s=!1;if(typeof ReadableStream!="undefined")try{new ReadableStream({start:function(c){c.close()}}),s=!0}catch(l){}s||(globalThis.ReadableStream=t(112).ReadableStream)}())},(r,a)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.isNodeJS=void 0;function t(o){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?t=function(l){return typeof l}:t=function(l){return l&&typeof Symbol=="function"&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},t(o)}var e=(typeof process=="undefined"?"undefined":t(process))==="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");a.isNodeJS=e},(r,a,t)=>{t(8),r.exports=t(10)},(r,a,t)=>{var e=t(9),o=t(10);e({global:!0},{globalThis:o})},(r,a,t)=>{var e=t(10),o=t(11).f,s=t(26),l=t(29),c=t(30),d=t(40),P=t(52);r.exports=function(x,$){var j=x.target,O=x.global,A=x.stat,y,G,ue,K,U,I;if(O?G=e:A?G=e[j]||c(j,{}):G=(e[j]||{}).prototype,G)for(ue in $){if(U=$[ue],x.noTargetGet?(I=o(G,ue),K=I&&I.value):K=G[ue],y=P(O?ue:j+(A?".":"#")+ue,x.forced),!y&&K!==void 0){if(typeof U==typeof K)continue;d(U,K)}(x.sham||K&&K.sham)&&s(U,"sham",!0),l(G,ue,U,x)}}},r=>{var a=function(t){return t&&t.Math==Math&&t};r.exports=a(typeof globalThis=="object"&&globalThis)||a(typeof window=="object"&&window)||a(typeof self=="object"&&self)||a(typeof commonjsGlobal=="object"&&commonjsGlobal)||function(){return this}()||Function("return this")()},(r,a,t)=>{var e=t(12),o=t(14),s=t(15),l=t(16),c=t(20),d=t(22),P=t(24),x=Object.getOwnPropertyDescriptor;a.f=e?x:function(j,O){if(j=l(j),O=c(O,!0),P)try{return x(j,O)}catch(A){}if(d(j,O))return s(!o.f.call(j,O),j[O])}},(r,a,t)=>{var e=t(13);r.exports=!e(function(){return Object.defineProperty({},1,{get:function(){return 7}})[1]!=7})},r=>{r.exports=function(a){try{return!!a()}catch(t){return!0}}},(r,a)=>{var t={}.propertyIsEnumerable,e=Object.getOwnPropertyDescriptor,o=e&&!t.call({1:2},1);a.f=o?function(l){var c=e(this,l);return!!c&&c.enumerable}:t},r=>{r.exports=function(a,t){return{enumerable:!(a&1),configurable:!(a&2),writable:!(a&4),value:t}}},(r,a,t)=>{var e=t(17),o=t(19);r.exports=function(s){return e(o(s))}},(r,a,t)=>{var e=t(13),o=t(18),s="".split;r.exports=e(function(){return!Object("z").propertyIsEnumerable(0)})?function(l){return o(l)=="String"?s.call(l,""):Object(l)}:Object},r=>{var a={}.toString;r.exports=function(t){return a.call(t).slice(8,-1)}},r=>{r.exports=function(a){if(a==null)throw TypeError("Can't call method on "+a);return a}},(r,a,t)=>{var e=t(21);r.exports=function(o,s){if(!e(o))return o;var l,c;if(s&&typeof(l=o.toString)=="function"&&!e(c=l.call(o))||typeof(l=o.valueOf)=="function"&&!e(c=l.call(o))||!s&&typeof(l=o.toString)=="function"&&!e(c=l.call(o)))return c;throw TypeError("Can't convert object to primitive value")}},r=>{r.exports=function(a){return typeof a=="object"?a!==null:typeof a=="function"}},(r,a,t)=>{var e=t(23),o={}.hasOwnProperty;r.exports=Object.hasOwn||function(l,c){return o.call(e(l),c)}},(r,a,t)=>{var e=t(19);r.exports=function(o){return Object(e(o))}},(r,a,t)=>{var e=t(12),o=t(13),s=t(25);r.exports=!e&&!o(function(){return Object.defineProperty(s("div"),"a",{get:function(){return 7}}).a!=7})},(r,a,t)=>{var e=t(10),o=t(21),s=e.document,l=o(s)&&o(s.createElement);r.exports=function(c){return l?s.createElement(c):{}}},(r,a,t)=>{var e=t(12),o=t(27),s=t(15);r.exports=e?function(l,c,d){return o.f(l,c,s(1,d))}:function(l,c,d){return l[c]=d,l}},(r,a,t)=>{var e=t(12),o=t(24),s=t(28),l=t(20),c=Object.defineProperty;a.f=e?c:function(P,x,$){if(s(P),x=l(x,!0),s($),o)try{return c(P,x,$)}catch(j){}if("get"in $||"set"in $)throw TypeError("Accessors not supported");return"value"in $&&(P[x]=$.value),P}},(r,a,t)=>{var e=t(21);r.exports=function(o){if(!e(o))throw TypeError(String(o)+" is not an object");return o}},(r,a,t)=>{var e=t(10),o=t(26),s=t(22),l=t(30),c=t(31),d=t(33),P=d.get,x=d.enforce,$=String(String).split("String");(r.exports=function(j,O,A,y){var G=y?!!y.unsafe:!1,ue=y?!!y.enumerable:!1,K=y?!!y.noTargetGet:!1,U;if(typeof A=="function"&&(typeof O=="string"&&!s(A,"name")&&o(A,"name",O),U=x(A),U.source||(U.source=$.join(typeof O=="string"?O:""))),j===e){ue?j[O]=A:l(O,A);return}else G?!K&&j[O]&&(ue=!0):delete j[O];ue?j[O]=A:o(j,O,A)})(Function.prototype,"toString",function(){return typeof this=="function"&&P(this).source||c(this)})},(r,a,t)=>{var e=t(10),o=t(26);r.exports=function(s,l){try{o(e,s,l)}catch(c){e[s]=l}return l}},(r,a,t)=>{var e=t(32),o=Function.toString;typeof e.inspectSource!="function"&&(e.inspectSource=function(s){return o.call(s)}),r.exports=e.inspectSource},(r,a,t)=>{var e=t(10),o=t(30),s="__core-js_shared__",l=e[s]||o(s,{});r.exports=l},(r,a,t)=>{var e=t(34),o=t(10),s=t(21),l=t(26),c=t(22),d=t(32),P=t(35),x=t(39),$="Object already initialized",j=o.WeakMap,O,A,y,G=function(W){return y(W)?A(W):O(W,{})},ue=function(W){return function(b){var S;if(!s(b)||(S=A(b)).type!==W)throw TypeError("Incompatible receiver, "+W+" required");return S}};if(e||d.state){var K=d.state||(d.state=new j),U=K.get,I=K.has,B=K.set;O=function(W,b){if(I.call(K,W))throw new TypeError($);return b.facade=W,B.call(K,W,b),b},A=function(W){return U.call(K,W)||{}},y=function(W){return I.call(K,W)}}else{var C=P("state");x[C]=!0,O=function(W,b){if(c(W,C))throw new TypeError($);return b.facade=W,l(W,C,b),b},A=function(W){return c(W,C)?W[C]:{}},y=function(W){return c(W,C)}}r.exports={set:O,get:A,has:y,enforce:G,getterFor:ue}},(r,a,t)=>{var e=t(10),o=t(31),s=e.WeakMap;r.exports=typeof s=="function"&&/native code/.test(o(s))},(r,a,t)=>{var e=t(36),o=t(38),s=e("keys");r.exports=function(l){return s[l]||(s[l]=o(l))}},(r,a,t)=>{var e=t(37),o=t(32);(r.exports=function(s,l){return o[s]||(o[s]=l!==void 0?l:{})})("versions",[]).push({version:"3.13.1",mode:e?"pure":"global",copyright:"\xA9 2021 Denis Pushkarev (zloirock.ru)"})},r=>{r.exports=!1},r=>{var a=0,t=Math.random();r.exports=function(e){return"Symbol("+String(e===void 0?"":e)+")_"+(++a+t).toString(36)}},r=>{r.exports={}},(r,a,t)=>{var e=t(22),o=t(41),s=t(11),l=t(27);r.exports=function(c,d){for(var P=o(d),x=l.f,$=s.f,j=0;j<P.length;j++){var O=P[j];e(c,O)||x(c,O,$(d,O))}}},(r,a,t)=>{var e=t(42),o=t(44),s=t(51),l=t(28);r.exports=e("Reflect","ownKeys")||function(d){var P=o.f(l(d)),x=s.f;return x?P.concat(x(d)):P}},(r,a,t)=>{var e=t(43),o=t(10),s=function(l){return typeof l=="function"?l:void 0};r.exports=function(l,c){return arguments.length<2?s(e[l])||s(o[l]):e[l]&&e[l][c]||o[l]&&o[l][c]}},(r,a,t)=>{var e=t(10);r.exports=e},(r,a,t)=>{var e=t(45),o=t(50),s=o.concat("length","prototype");a.f=Object.getOwnPropertyNames||function(c){return e(c,s)}},(r,a,t)=>{var e=t(22),o=t(16),s=t(46).indexOf,l=t(39);r.exports=function(c,d){var P=o(c),x=0,$=[],j;for(j in P)!e(l,j)&&e(P,j)&&$.push(j);for(;d.length>x;)e(P,j=d[x++])&&(~s($,j)||$.push(j));return $}},(r,a,t)=>{var e=t(16),o=t(47),s=t(49),l=function(c){return function(d,P,x){var $=e(d),j=o($.length),O=s(x,j),A;if(c&&P!=P){for(;j>O;)if(A=$[O++],A!=A)return!0}else for(;j>O;O++)if((c||O in $)&&$[O]===P)return c||O||0;return!c&&-1}};r.exports={includes:l(!0),indexOf:l(!1)}},(r,a,t)=>{var e=t(48),o=Math.min;r.exports=function(s){return s>0?o(e(s),9007199254740991):0}},r=>{var a=Math.ceil,t=Math.floor;r.exports=function(e){return isNaN(e=+e)?0:(e>0?t:a)(e)}},(r,a,t)=>{var e=t(48),o=Math.max,s=Math.min;r.exports=function(l,c){var d=e(l);return d<0?o(d+c,0):s(d,c)}},r=>{r.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},(r,a)=>{a.f=Object.getOwnPropertySymbols},(r,a,t)=>{var e=t(13),o=/#|\.prototype\./,s=function(x,$){var j=c[l(x)];return j==P?!0:j==d?!1:typeof $=="function"?e($):!!$},l=s.normalize=function(x){return String(x).replace(o,".").toLowerCase()},c=s.data={},d=s.NATIVE="N",P=s.POLYFILL="P";r.exports=s},(r,a,t)=>{t(54),t(74);var e=t(43);r.exports=e.Object.fromEntries},(r,a,t)=>{var e=t(16),o=t(55),s=t(65),l=t(33),c=t(66),d="Array Iterator",P=l.set,x=l.getterFor(d);r.exports=c(Array,"Array",function($,j){P(this,{type:d,target:e($),index:0,kind:j})},function(){var $=x(this),j=$.target,O=$.kind,A=$.index++;return!j||A>=j.length?($.target=void 0,{value:void 0,done:!0}):O=="keys"?{value:A,done:!1}:O=="values"?{value:j[A],done:!1}:{value:[A,j[A]],done:!1}},"values"),s.Arguments=s.Array,o("keys"),o("values"),o("entries")},(r,a,t)=>{var e=t(56),o=t(61),s=t(27),l=e("unscopables"),c=Array.prototype;c[l]==null&&s.f(c,l,{configurable:!0,value:o(null)}),r.exports=function(d){c[l][d]=!0}},(r,a,t)=>{var e=t(10),o=t(36),s=t(22),l=t(38),c=t(57),d=t(60),P=o("wks"),x=e.Symbol,$=d?x:x&&x.withoutSetter||l;r.exports=function(j){return(!s(P,j)||!(c||typeof P[j]=="string"))&&(c&&s(x,j)?P[j]=x[j]:P[j]=$("Symbol."+j)),P[j]}},(r,a,t)=>{var e=t(58),o=t(13);r.exports=!!Object.getOwnPropertySymbols&&!o(function(){var s=Symbol();return!String(s)||!(Object(s)instanceof Symbol)||!Symbol.sham&&e&&e<41})},(r,a,t)=>{var e=t(10),o=t(59),s=e.process,l=s&&s.versions,c=l&&l.v8,d,P;c?(d=c.split("."),P=d[0]<4?1:d[0]+d[1]):o&&(d=o.match(/Edge\/(\d+)/),(!d||d[1]>=74)&&(d=o.match(/Chrome\/(\d+)/),d&&(P=d[1]))),r.exports=P&&+P},(r,a,t)=>{var e=t(42);r.exports=e("navigator","userAgent")||""},(r,a,t)=>{var e=t(57);r.exports=e&&!Symbol.sham&&typeof Symbol.iterator=="symbol"},(r,a,t)=>{var e=t(28),o=t(62),s=t(50),l=t(39),c=t(64),d=t(25),P=t(35),x=">",$="<",j="prototype",O="script",A=P("IE_PROTO"),y=function(){},G=function(B){return $+O+x+B+$+"/"+O+x},ue=function(B){B.write(G("")),B.close();var C=B.parentWindow.Object;return B=null,C},K=function(){var B=d("iframe"),C="java"+O+":",W;return B.style.display="none",c.appendChild(B),B.src=String(C),W=B.contentWindow.document,W.open(),W.write(G("document.F=Object")),W.close(),W.F},U,I=function(){try{U=document.domain&&new ActiveXObject("htmlfile")}catch(C){}I=U?ue(U):K();for(var B=s.length;B--;)delete I[j][s[B]];return I()};l[A]=!0,r.exports=Object.create||function(C,W){var b;return C!==null?(y[j]=e(C),b=new y,y[j]=null,b[A]=C):b=I(),W===void 0?b:o(b,W)}},(r,a,t)=>{var e=t(12),o=t(27),s=t(28),l=t(63);r.exports=e?Object.defineProperties:function(d,P){s(d);for(var x=l(P),$=x.length,j=0,O;$>j;)o.f(d,O=x[j++],P[O]);return d}},(r,a,t)=>{var e=t(45),o=t(50);r.exports=Object.keys||function(l){return e(l,o)}},(r,a,t)=>{var e=t(42);r.exports=e("document","documentElement")},r=>{r.exports={}},(r,a,t)=>{var e=t(9),o=t(67),s=t(69),l=t(72),c=t(71),d=t(26),P=t(29),x=t(56),$=t(37),j=t(65),O=t(68),A=O.IteratorPrototype,y=O.BUGGY_SAFARI_ITERATORS,G=x("iterator"),ue="keys",K="values",U="entries",I=function(){return this};r.exports=function(B,C,W,b,S,w,k){o(W,C,b);var z=function(R){if(R===S&&ce)return ce;if(!y&&R in re)return re[R];switch(R){case ue:return function(){return new W(this,R)};case K:return function(){return new W(this,R)};case U:return function(){return new W(this,R)}}return function(){return new W(this)}},Q=C+" Iterator",Y=!1,re=B.prototype,ae=re[G]||re["@@iterator"]||S&&re[S],ce=!y&&ae||z(S),J=C=="Array"&&re.entries||ae,X,L,v;if(J&&(X=s(J.call(new B)),A!==Object.prototype&&X.next&&(!$&&s(X)!==A&&(l?l(X,A):typeof X[G]!="function"&&d(X,G,I)),c(X,Q,!0,!0),$&&(j[Q]=I))),S==K&&ae&&ae.name!==K&&(Y=!0,ce=function(){return ae.call(this)}),(!$||k)&&re[G]!==ce&&d(re,G,ce),j[C]=ce,S)if(L={values:z(K),keys:w?ce:z(ue),entries:z(U)},k)for(v in L)(y||Y||!(v in re))&&P(re,v,L[v]);else e({target:C,proto:!0,forced:y||Y},L);return L}},(r,a,t)=>{var e=t(68).IteratorPrototype,o=t(61),s=t(15),l=t(71),c=t(65),d=function(){return this};r.exports=function(P,x,$){var j=x+" Iterator";return P.prototype=o(e,{next:s(1,$)}),l(P,j,!1,!0),c[j]=d,P}},(r,a,t)=>{var e=t(13),o=t(69),s=t(26),l=t(22),c=t(56),d=t(37),P=c("iterator"),x=!1,$=function(){return this},j,O,A;[].keys&&(A=[].keys(),"next"in A?(O=o(o(A)),O!==Object.prototype&&(j=O)):x=!0);var y=j==null||e(function(){var G={};return j[P].call(G)!==G});y&&(j={}),(!d||y)&&!l(j,P)&&s(j,P,$),r.exports={IteratorPrototype:j,BUGGY_SAFARI_ITERATORS:x}},(r,a,t)=>{var e=t(22),o=t(23),s=t(35),l=t(70),c=s("IE_PROTO"),d=Object.prototype;r.exports=l?Object.getPrototypeOf:function(P){return P=o(P),e(P,c)?P[c]:typeof P.constructor=="function"&&P instanceof P.constructor?P.constructor.prototype:P instanceof Object?d:null}},(r,a,t)=>{var e=t(13);r.exports=!e(function(){function o(){}return o.prototype.constructor=null,Object.getPrototypeOf(new o)!==o.prototype})},(r,a,t)=>{var e=t(27).f,o=t(22),s=t(56),l=s("toStringTag");r.exports=function(c,d,P){c&&!o(c=P?c:c.prototype,l)&&e(c,l,{configurable:!0,value:d})}},(r,a,t)=>{var e=t(28),o=t(73);r.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var s=!1,l={},c;try{c=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set,c.call(l,[]),s=l instanceof Array}catch(d){}return function(P,x){return e(P),o(x),s?c.call(P,x):P.__proto__=x,P}}():void 0)},(r,a,t)=>{var e=t(21);r.exports=function(o){if(!e(o)&&o!==null)throw TypeError("Can't set "+String(o)+" as a prototype");return o}},(r,a,t)=>{var e=t(9),o=t(75),s=t(83);e({target:"Object",stat:!0},{fromEntries:function(c){var d={};return o(c,function(P,x){s(d,P,x)},{AS_ENTRIES:!0}),d}})},(r,a,t)=>{var e=t(28),o=t(76),s=t(47),l=t(77),c=t(79),d=t(82),P=function(x,$){this.stopped=x,this.result=$};r.exports=function(x,$,j){var O=j&&j.that,A=!!(j&&j.AS_ENTRIES),y=!!(j&&j.IS_ITERATOR),G=!!(j&&j.INTERRUPTED),ue=l($,O,1+A+G),K,U,I,B,C,W,b,S=function(k){return K&&d(K),new P(!0,k)},w=function(k){return A?(e(k),G?ue(k[0],k[1],S):ue(k[0],k[1])):G?ue(k,S):ue(k)};if(y)K=x;else{if(U=c(x),typeof U!="function")throw TypeError("Target is not iterable");if(o(U)){for(I=0,B=s(x.length);B>I;I++)if(C=w(x[I]),C&&C instanceof P)return C;return new P(!1)}K=U.call(x)}for(W=K.next;!(b=W.call(K)).done;){try{C=w(b.value)}catch(k){throw d(K),k}if(typeof C=="object"&&C&&C instanceof P)return C}return new P(!1)}},(r,a,t)=>{var e=t(56),o=t(65),s=e("iterator"),l=Array.prototype;r.exports=function(c){return c!==void 0&&(o.Array===c||l[s]===c)}},(r,a,t)=>{var e=t(78);r.exports=function(o,s,l){if(e(o),s===void 0)return o;switch(l){case 0:return function(){return o.call(s)};case 1:return function(c){return o.call(s,c)};case 2:return function(c,d){return o.call(s,c,d)};case 3:return function(c,d,P){return o.call(s,c,d,P)}}return function(){return o.apply(s,arguments)}}},r=>{r.exports=function(a){if(typeof a!="function")throw TypeError(String(a)+" is not a function");return a}},(r,a,t)=>{var e=t(80),o=t(65),s=t(56),l=s("iterator");r.exports=function(c){if(c!=null)return c[l]||c["@@iterator"]||o[e(c)]}},(r,a,t)=>{var e=t(81),o=t(18),s=t(56),l=s("toStringTag"),c=o(function(){return arguments}())=="Arguments",d=function(P,x){try{return P[x]}catch($){}};r.exports=e?o:function(P){var x,$,j;return P===void 0?"Undefined":P===null?"Null":typeof($=d(x=Object(P),l))=="string"?$:c?o(x):(j=o(x))=="Object"&&typeof x.callee=="function"?"Arguments":j}},(r,a,t)=>{var e=t(56),o=e("toStringTag"),s={};s[o]="z",r.exports=String(s)==="[object z]"},(r,a,t)=>{var e=t(28);r.exports=function(o){var s=o.return;if(s!==void 0)return e(s.call(o)).value}},(r,a,t)=>{var e=t(20),o=t(27),s=t(15);r.exports=function(l,c,d){var P=e(c);P in l?o.f(l,P,s(0,d)):l[P]=d}},(r,a,t)=>{t(85),t(86),t(88),t(105),t(106),t(107),t(108),t(110);var e=t(43);r.exports=e.Promise},(r,a,t)=>{var e=t(9),o=t(69),s=t(72),l=t(61),c=t(26),d=t(15),P=t(75),x=function(j,O){var A=this;if(!(A instanceof x))return new x(j,O);s&&(A=s(new Error(void 0),o(A))),O!==void 0&&c(A,"message",String(O));var y=[];return P(j,y.push,{that:y}),c(A,"errors",y),A};x.prototype=l(Error.prototype,{constructor:d(5,x),message:d(5,""),name:d(5,"AggregateError")}),e({global:!0},{AggregateError:x})},(r,a,t)=>{var e=t(81),o=t(29),s=t(87);e||o(Object.prototype,"toString",s,{unsafe:!0})},(r,a,t)=>{var e=t(81),o=t(80);r.exports=e?{}.toString:function(){return"[object "+o(this)+"]"}},(r,a,t)=>{var e=t(9),o=t(37),s=t(10),l=t(42),c=t(89),d=t(29),P=t(90),x=t(72),$=t(71),j=t(91),O=t(21),A=t(78),y=t(92),G=t(31),ue=t(75),K=t(93),U=t(94),I=t(95).set,B=t(98),C=t(100),W=t(102),b=t(101),S=t(103),w=t(33),k=t(52),z=t(56),Q=t(104),Y=t(97),re=t(58),ae=z("species"),ce="Promise",J=w.get,X=w.set,L=w.getterFor(ce),v=c&&c.prototype,R=c,D=v,Z=s.TypeError,se=s.document,ie=s.process,Pe=b.f,le=Pe,fe=!!(se&&se.createEvent&&s.dispatchEvent),N=typeof PromiseRejectionEvent=="function",E="unhandledrejection",T="rejectionhandled",te=0,ne=1,de=2,he=1,Ae=2,ee=!1,oe,M,H,V,ge=k(ce,function(){var _e=G(R)!==String(R);if(!_e&&re===66||o&&!D.finally)return!0;if(re>=51&&/native code/.test(R))return!1;var we=new R(function($e){$e(1)}),Fe=function($e){$e(function(){},function(){})},Le=we.constructor={};return Le[ae]=Fe,ee=we.then(function(){})instanceof Fe,ee?!_e&&Q&&!N:!0}),ye=ge||!K(function(_e){R.all(_e).catch(function(){})}),pe=function(_e){var we;return O(_e)&&typeof(we=_e.then)=="function"?we:!1},Se=function(_e,we){if(!_e.notified){_e.notified=!0;var Fe=_e.reactions;B(function(){for(var Le=_e.value,$e=_e.state==ne,Ge=0;Fe.length>Ge;){var Ke=Fe[Ge++],Ye=$e?Ke.ok:Ke.fail,ze=Ke.resolve,nt=Ke.reject,Xe=Ke.domain,tt,it,Ze;try{Ye?($e||(_e.rejection===Ae&&Ne(_e),_e.rejection=he),Ye===!0?tt=Le:(Xe&&Xe.enter(),tt=Ye(Le),Xe&&(Xe.exit(),Ze=!0)),tt===Ke.promise?nt(Z("Promise-chain cycle")):(it=pe(tt))?it.call(tt,ze,nt):ze(tt)):nt(Le)}catch(lt){Xe&&!Ze&&Xe.exit(),nt(lt)}}_e.reactions=[],_e.notified=!1,we&&!_e.rejection&&Ce(_e)})}},ke=function(_e,we,Fe){var Le,$e;fe?(Le=se.createEvent("Event"),Le.promise=we,Le.reason=Fe,Le.initEvent(_e,!1,!0),s.dispatchEvent(Le)):Le={promise:we,reason:Fe},!N&&($e=s["on"+_e])?$e(Le):_e===E&&W("Unhandled promise rejection",Fe)},Ce=function(_e){I.call(s,function(){var we=_e.facade,Fe=_e.value,Le=Ie(_e),$e;if(Le&&($e=S(function(){Y?ie.emit("unhandledRejection",Fe,we):ke(E,we,Fe)}),_e.rejection=Y||Ie(_e)?Ae:he,$e.error))throw $e.value})},Ie=function(_e){return _e.rejection!==he&&!_e.parent},Ne=function(_e){I.call(s,function(){var we=_e.facade;Y?ie.emit("rejectionHandled",we):ke(T,we,_e.value)})},Me=function(_e,we,Fe){return function(Le){_e(we,Le,Fe)}},Ee=function(_e,we,Fe){_e.done||(_e.done=!0,Fe&&(_e=Fe),_e.value=we,_e.state=de,Se(_e,!0))},Be=function(_e,we,Fe){if(!_e.done){_e.done=!0,Fe&&(_e=Fe);try{if(_e.facade===we)throw Z("Promise can't be resolved itself");var Le=pe(we);Le?B(function(){var $e={done:!1};try{Le.call(we,Me(Be,$e,_e),Me(Ee,$e,_e))}catch(Ge){Ee($e,Ge,_e)}}):(_e.value=we,_e.state=ne,Se(_e,!1))}catch($e){Ee({done:!1},$e,_e)}}};if(ge&&(R=function(we){y(this,R,ce),A(we),oe.call(this);var Fe=J(this);try{we(Me(Be,Fe),Me(Ee,Fe))}catch(Le){Ee(Fe,Le)}},D=R.prototype,oe=function(we){X(this,{type:ce,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:te,value:void 0})},oe.prototype=P(D,{then:function(we,Fe){var Le=L(this),$e=Pe(U(this,R));return $e.ok=typeof we=="function"?we:!0,$e.fail=typeof Fe=="function"&&Fe,$e.domain=Y?ie.domain:void 0,Le.parent=!0,Le.reactions.push($e),Le.state!=te&&Se(Le,!1),$e.promise},catch:function(_e){return this.then(void 0,_e)}}),M=function(){var _e=new oe,we=J(_e);this.promise=_e,this.resolve=Me(Be,we),this.reject=Me(Ee,we)},b.f=Pe=function(_e){return _e===R||_e===H?new M(_e):le(_e)},!o&&typeof c=="function"&&v!==Object.prototype)){V=v.then,ee||(d(v,"then",function(we,Fe){var Le=this;return new R(function($e,Ge){V.call(Le,$e,Ge)}).then(we,Fe)},{unsafe:!0}),d(v,"catch",D.catch,{unsafe:!0}));try{delete v.constructor}catch(_e){}x&&x(v,D)}e({global:!0,wrap:!0,forced:ge},{Promise:R}),$(R,ce,!1,!0),j(ce),H=l(ce),e({target:ce,stat:!0,forced:ge},{reject:function(we){var Fe=Pe(this);return Fe.reject.call(void 0,we),Fe.promise}}),e({target:ce,stat:!0,forced:o||ge},{resolve:function(we){return C(o&&this===H?R:this,we)}}),e({target:ce,stat:!0,forced:ye},{all:function(we){var Fe=this,Le=Pe(Fe),$e=Le.resolve,Ge=Le.reject,Ke=S(function(){var Ye=A(Fe.resolve),ze=[],nt=0,Xe=1;ue(we,function(tt){var it=nt++,Ze=!1;ze.push(void 0),Xe++,Ye.call(Fe,tt).then(function(lt){Ze||(Ze=!0,ze[it]=lt,--Xe||$e(ze))},Ge)}),--Xe||$e(ze)});return Ke.error&&Ge(Ke.value),Le.promise},race:function(we){var Fe=this,Le=Pe(Fe),$e=Le.reject,Ge=S(function(){var Ke=A(Fe.resolve);ue(we,function(Ye){Ke.call(Fe,Ye).then(Le.resolve,$e)})});return Ge.error&&$e(Ge.value),Le.promise}})},(r,a,t)=>{var e=t(10);r.exports=e.Promise},(r,a,t)=>{var e=t(29);r.exports=function(o,s,l){for(var c in s)e(o,c,s[c],l);return o}},(r,a,t)=>{var e=t(42),o=t(27),s=t(56),l=t(12),c=s("species");r.exports=function(d){var P=e(d),x=o.f;l&&P&&!P[c]&&x(P,c,{configurable:!0,get:function(){return this}})}},r=>{r.exports=function(a,t,e){if(!(a instanceof t))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return a}},(r,a,t)=>{var e=t(56),o=e("iterator"),s=!1;try{var l=0,c={next:function(){return{done:!!l++}},return:function(){s=!0}};c[o]=function(){return this},Array.from(c,function(){throw 2})}catch(d){}r.exports=function(d,P){if(!P&&!s)return!1;var x=!1;try{var $={};$[o]=function(){return{next:function(){return{done:x=!0}}}},d($)}catch(j){}return x}},(r,a,t)=>{var e=t(28),o=t(78),s=t(56),l=s("species");r.exports=function(c,d){var P=e(c).constructor,x;return P===void 0||(x=e(P)[l])==null?d:o(x)}},(r,a,t)=>{var e=t(10),o=t(13),s=t(77),l=t(64),c=t(25),d=t(96),P=t(97),x=e.location,$=e.setImmediate,j=e.clearImmediate,O=e.process,A=e.MessageChannel,y=e.Dispatch,G=0,ue={},K="onreadystatechange",U,I,B,C=function(w){if(ue.hasOwnProperty(w)){var k=ue[w];delete ue[w],k()}},W=function(w){return function(){C(w)}},b=function(w){C(w.data)},S=function(w){e.postMessage(w+"",x.protocol+"//"+x.host)};(!$||!j)&&($=function(k){for(var z=[],Q=1;arguments.length>Q;)z.push(arguments[Q++]);return ue[++G]=function(){(typeof k=="function"?k:Function(k)).apply(void 0,z)},U(G),G},j=function(k){delete ue[k]},P?U=function(w){O.nextTick(W(w))}:y&&y.now?U=function(w){y.now(W(w))}:A&&!d?(I=new A,B=I.port2,I.port1.onmessage=b,U=s(B.postMessage,B,1)):e.addEventListener&&typeof postMessage=="function"&&!e.importScripts&&x&&x.protocol!=="file:"&&!o(S)?(U=S,e.addEventListener("message",b,!1)):K in c("script")?U=function(w){l.appendChild(c("script"))[K]=function(){l.removeChild(this),C(w)}}:U=function(w){setTimeout(W(w),0)}),r.exports={set:$,clear:j}},(r,a,t)=>{var e=t(59);r.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(e)},(r,a,t)=>{var e=t(18),o=t(10);r.exports=e(o.process)=="process"},(r,a,t)=>{var e=t(10),o=t(11).f,s=t(95).set,l=t(96),c=t(99),d=t(97),P=e.MutationObserver||e.WebKitMutationObserver,x=e.document,$=e.process,j=e.Promise,O=o(e,"queueMicrotask"),A=O&&O.value,y,G,ue,K,U,I,B,C;A||(y=function(){var W,b;for(d&&(W=$.domain)&&W.exit();G;){b=G.fn,G=G.next;try{b()}catch(S){throw G?K():ue=void 0,S}}ue=void 0,W&&W.enter()},!l&&!d&&!c&&P&&x?(U=!0,I=x.createTextNode(""),new P(y).observe(I,{characterData:!0}),K=function(){I.data=U=!U}):j&&j.resolve?(B=j.resolve(void 0),B.constructor=j,C=B.then,K=function(){C.call(B,y)}):d?K=function(){$.nextTick(y)}:K=function(){s.call(e,y)}),r.exports=A||function(W){var b={fn:W,next:void 0};ue&&(ue.next=b),G||(G=b,K()),ue=b}},(r,a,t)=>{var e=t(59);r.exports=/web0s(?!.*chrome)/i.test(e)},(r,a,t)=>{var e=t(28),o=t(21),s=t(101);r.exports=function(l,c){if(e(l),o(c)&&c.constructor===l)return c;var d=s.f(l),P=d.resolve;return P(c),d.promise}},(r,a,t)=>{var e=t(78),o=function(s){var l,c;this.promise=new s(function(d,P){if(l!==void 0||c!==void 0)throw TypeError("Bad Promise constructor");l=d,c=P}),this.resolve=e(l),this.reject=e(c)};r.exports.f=function(s){return new o(s)}},(r,a,t)=>{var e=t(10);r.exports=function(o,s){var l=e.console;l&&l.error&&(arguments.length===1?l.error(o):l.error(o,s))}},r=>{r.exports=function(a){try{return{error:!1,value:a()}}catch(t){return{error:!0,value:t}}}},r=>{r.exports=typeof window=="object"},(r,a,t)=>{var e=t(9),o=t(78),s=t(101),l=t(103),c=t(75);e({target:"Promise",stat:!0},{allSettled:function(P){var x=this,$=s.f(x),j=$.resolve,O=$.reject,A=l(function(){var y=o(x.resolve),G=[],ue=0,K=1;c(P,function(U){var I=ue++,B=!1;G.push(void 0),K++,y.call(x,U).then(function(C){B||(B=!0,G[I]={status:"fulfilled",value:C},--K||j(G))},function(C){B||(B=!0,G[I]={status:"rejected",reason:C},--K||j(G))})}),--K||j(G)});return A.error&&O(A.value),$.promise}})},(r,a,t)=>{var e=t(9),o=t(78),s=t(42),l=t(101),c=t(103),d=t(75),P="No one promise resolved";e({target:"Promise",stat:!0},{any:function($){var j=this,O=l.f(j),A=O.resolve,y=O.reject,G=c(function(){var ue=o(j.resolve),K=[],U=0,I=1,B=!1;d($,function(C){var W=U++,b=!1;K.push(void 0),I++,ue.call(j,C).then(function(S){b||B||(B=!0,A(S))},function(S){b||B||(b=!0,K[W]=S,--I||y(new(s("AggregateError"))(K,P)))})}),--I||y(new(s("AggregateError"))(K,P))});return G.error&&y(G.value),O.promise}})},(r,a,t)=>{var e=t(9),o=t(37),s=t(89),l=t(13),c=t(42),d=t(94),P=t(100),x=t(29),$=!!s&&l(function(){s.prototype.finally.call({then:function(){}},function(){})});if(e({target:"Promise",proto:!0,real:!0,forced:$},{finally:function(O){var A=d(this,c("Promise")),y=typeof O=="function";return this.then(y?function(G){return P(A,O()).then(function(){return G})}:O,y?function(G){return P(A,O()).then(function(){throw G})}:O)}}),!o&&typeof s=="function"){var j=c("Promise").prototype.finally;s.prototype.finally!==j&&x(s.prototype,"finally",j,{unsafe:!0})}},(r,a,t)=>{var e=t(109).charAt,o=t(33),s=t(66),l="String Iterator",c=o.set,d=o.getterFor(l);s(String,"String",function(P){c(this,{type:l,string:String(P),index:0})},function(){var x=d(this),$=x.string,j=x.index,O;return j>=$.length?{value:void 0,done:!0}:(O=e($,j),x.index+=O.length,{value:O,done:!1})})},(r,a,t)=>{var e=t(48),o=t(19),s=function(l){return function(c,d){var P=String(o(c)),x=e(d),$=P.length,j,O;return x<0||x>=$?l?"":void 0:(j=P.charCodeAt(x),j<55296||j>56319||x+1===$||(O=P.charCodeAt(x+1))<56320||O>57343?l?P.charAt(x):j:l?P.slice(x,x+2):(j-55296<<10)+(O-56320)+65536)}};r.exports={codeAt:s(!1),charAt:s(!0)}},(r,a,t)=>{var e=t(10),o=t(111),s=t(54),l=t(26),c=t(56),d=c("iterator"),P=c("toStringTag"),x=s.values;for(var $ in o){var j=e[$],O=j&&j.prototype;if(O){if(O[d]!==x)try{l(O,d,x)}catch(y){O[d]=x}if(O[P]||l(O,P,$),o[$]){for(var A in s)if(O[A]!==s[A])try{l(O,A,s[A])}catch(y){O[A]=s[A]}}}}},r=>{r.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(r,a){(function(t,e){e(a)})(this,function(t){var e=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol:function(i){return"Symbol("+i+")"};function o(){}function s(){if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof commonjsGlobal!="undefined")return commonjsGlobal}var l=s();function c(i){return typeof i=="object"&&i!==null||typeof i=="function"}var d=o,P=Promise,x=Promise.prototype.then,$=Promise.resolve.bind(P),j=Promise.reject.bind(P);function O(i){return new P(i)}function A(i){return $(i)}function y(i){return j(i)}function G(i,u,F){return x.call(i,u,F)}function ue(i,u,F){G(G(i,u,F),void 0,d)}function K(i,u){ue(i,u)}function U(i,u){ue(i,void 0,u)}function I(i,u,F){return G(i,u,F)}function B(i){G(i,void 0,d)}var C=function(){var i=l&&l.queueMicrotask;if(typeof i=="function")return i;var u=A(void 0);return function(F){return G(u,F)}}();function W(i,u,F){if(typeof i!="function")throw new TypeError("Argument is not a function");return Function.prototype.apply.call(i,u,F)}function b(i,u,F){try{return A(W(i,u,F))}catch(ve){return y(ve)}}var S=16384,w=function(){function i(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}return Object.defineProperty(i.prototype,"length",{get:function(){return this._size},enumerable:!1,configurable:!0}),i.prototype.push=function(u){var F=this._back,ve=F;F._elements.length===S-1&&(ve={_elements:[],_next:void 0}),F._elements.push(u),ve!==F&&(this._back=ve,F._next=ve),++this._size},i.prototype.shift=function(){var u=this._front,F=u,ve=this._cursor,Re=ve+1,Oe=u._elements,De=Oe[ve];return Re===S&&(F=u._next,Re=0),--this._size,this._cursor=Re,u!==F&&(this._front=F),Oe[ve]=void 0,De},i.prototype.forEach=function(u){for(var F=this._cursor,ve=this._front,Re=ve._elements;(F!==Re.length||ve._next!==void 0)&&!(F===Re.length&&(ve=ve._next,Re=ve._elements,F=0,Re.length===0));)u(Re[F]),++F},i.prototype.peek=function(){var u=this._front,F=this._cursor;return u._elements[F]},i}();function k(i,u){i._ownerReadableStream=u,u._reader=i,u._state==="readable"?re(i):u._state==="closed"?ce(i):ae(i,u._storedError)}function z(i,u){var F=i._ownerReadableStream;return At(F,u)}function Q(i){i._ownerReadableStream._state==="readable"?J(i,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):X(i,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),i._ownerReadableStream._reader=void 0,i._ownerReadableStream=void 0}function Y(i){return new TypeError("Cannot "+i+" a stream using a released reader")}function re(i){i._closedPromise=O(function(u,F){i._closedPromise_resolve=u,i._closedPromise_reject=F})}function ae(i,u){re(i),J(i,u)}function ce(i){re(i),L(i)}function J(i,u){i._closedPromise_reject!==void 0&&(B(i._closedPromise),i._closedPromise_reject(u),i._closedPromise_resolve=void 0,i._closedPromise_reject=void 0)}function X(i,u){ae(i,u)}function L(i){i._closedPromise_resolve!==void 0&&(i._closedPromise_resolve(void 0),i._closedPromise_resolve=void 0,i._closedPromise_reject=void 0)}var v=e("[[AbortSteps]]"),R=e("[[ErrorSteps]]"),D=e("[[CancelSteps]]"),Z=e("[[PullSteps]]"),se=Number.isFinite||function(i){return typeof i=="number"&&isFinite(i)},ie=Math.trunc||function(i){return i<0?Math.ceil(i):Math.floor(i)};function Pe(i){return typeof i=="object"||typeof i=="function"}function le(i,u){if(i!==void 0&&!Pe(i))throw new TypeError(u+" is not an object.")}function fe(i,u){if(typeof i!="function")throw new TypeError(u+" is not a function.")}function N(i){return typeof i=="object"&&i!==null||typeof i=="function"}function E(i,u){if(!N(i))throw new TypeError(u+" is not an object.")}function T(i,u,F){if(i===void 0)throw new TypeError("Parameter "+u+" is required in '"+F+"'.")}function te(i,u,F){if(i===void 0)throw new TypeError(u+" is required in '"+F+"'.")}function ne(i){return Number(i)}function de(i){return i===0?0:i}function he(i){return de(ie(i))}function Ae(i,u){var F=0,ve=Number.MAX_SAFE_INTEGER,Re=Number(i);if(Re=de(Re),!se(Re))throw new TypeError(u+" is not a finite number");if(Re=he(Re),Re<F||Re>ve)throw new TypeError(u+" is outside the accepted range of "+F+" to "+ve+", inclusive");return!se(Re)||Re===0?0:Re}function ee(i,u){if(!gt(i))throw new TypeError(u+" is not a ReadableStream.")}function oe(i){return new ye(i)}function M(i,u){i._reader._readRequests.push(u)}function H(i,u,F){var ve=i._reader,Re=ve._readRequests.shift();F?Re._closeSteps():Re._chunkSteps(u)}function V(i){return i._reader._readRequests.length}function ge(i){var u=i._reader;return!(u===void 0||!pe(u))}var ye=function(){function i(u){if(T(u,1,"ReadableStreamDefaultReader"),ee(u,"First parameter"),yt(u))throw new TypeError("This stream has already been locked for exclusive reading by another reader");k(this,u),this._readRequests=new w}return Object.defineProperty(i.prototype,"closed",{get:function(){return pe(this)?this._closedPromise:y(ke("closed"))},enumerable:!1,configurable:!0}),i.prototype.cancel=function(u){return u===void 0&&(u=void 0),pe(this)?this._ownerReadableStream===void 0?y(Y("cancel")):z(this,u):y(ke("cancel"))},i.prototype.read=function(){if(!pe(this))return y(ke("read"));if(this._ownerReadableStream===void 0)return y(Y("read from"));var u,F,ve=O(function(Oe,De){u=Oe,F=De}),Re={_chunkSteps:function(Oe){return u({value:Oe,done:!1})},_closeSteps:function(){return u({value:void 0,done:!0})},_errorSteps:function(Oe){return F(Oe)}};return Se(this,Re),ve},i.prototype.releaseLock=function(){if(!pe(this))throw ke("releaseLock");if(this._ownerReadableStream!==void 0){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");Q(this)}},i}();Object.defineProperties(ye.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(ye.prototype,e.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});function pe(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_readRequests"))}function Se(i,u){var F=i._ownerReadableStream;F._disturbed=!0,F._state==="closed"?u._closeSteps():F._state==="errored"?u._errorSteps(F._storedError):F._readableStreamController[Z](u)}function ke(i){return new TypeError("ReadableStreamDefaultReader.prototype."+i+" can only be used on a ReadableStreamDefaultReader")}var Ce,Ie;typeof e.asyncIterator=="symbol"&&(Ie=(Ce={},Ce[e.asyncIterator]=function(){return this},Ce),Object.defineProperty(Ie,e.asyncIterator,{enumerable:!1}));var Ne=function(){function i(u,F){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=u,this._preventCancel=F}return i.prototype.next=function(){var u=this,F=function(){return u._nextSteps()};return this._ongoingPromise=this._ongoingPromise?I(this._ongoingPromise,F,F):F(),this._ongoingPromise},i.prototype.return=function(u){var F=this,ve=function(){return F._returnSteps(u)};return this._ongoingPromise?I(this._ongoingPromise,ve,ve):ve()},i.prototype._nextSteps=function(){var u=this;if(this._isFinished)return Promise.resolve({value:void 0,done:!0});var F=this._reader;if(F._ownerReadableStream===void 0)return y(Y("iterate"));var ve,Re,Oe=O(function(Ue,He){ve=Ue,Re=He}),De={_chunkSteps:function(Ue){u._ongoingPromise=void 0,C(function(){return ve({value:Ue,done:!1})})},_closeSteps:function(){u._ongoingPromise=void 0,u._isFinished=!0,Q(F),ve({value:void 0,done:!0})},_errorSteps:function(Ue){u._ongoingPromise=void 0,u._isFinished=!0,Q(F),Re(Ue)}};return Se(F,De),Oe},i.prototype._returnSteps=function(u){if(this._isFinished)return Promise.resolve({value:u,done:!0});this._isFinished=!0;var F=this._reader;if(F._ownerReadableStream===void 0)return y(Y("finish iterating"));if(!this._preventCancel){var ve=z(F,u);return Q(F),I(ve,function(){return{value:u,done:!0}})}return Q(F),A({value:u,done:!0})},i}(),Me={next:function(){return Be(this)?this._asyncIteratorImpl.next():y(_e("next"))},return:function(i){return Be(this)?this._asyncIteratorImpl.return(i):y(_e("return"))}};Ie!==void 0&&Object.setPrototypeOf(Me,Ie);function Ee(i,u){var F=oe(i),ve=new Ne(F,u),Re=Object.create(Me);return Re._asyncIteratorImpl=ve,Re}function Be(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_asyncIteratorImpl"))}function _e(i){return new TypeError("ReadableStreamAsyncIterator."+i+" can only be used on a ReadableSteamAsyncIterator")}var we=Number.isNaN||function(i){return i!==i};function Fe(i){return!(!Le(i)||i===1/0)}function Le(i){return!(typeof i!="number"||we(i)||i<0)}function $e(i){var u=i._queue.shift();return i._queueTotalSize-=u.size,i._queueTotalSize<0&&(i._queueTotalSize=0),u.value}function Ge(i,u,F){if(F=Number(F),!Fe(F))throw new RangeError("Size must be a finite, non-NaN, non-negative number.");i._queue.push({value:u,size:F}),i._queueTotalSize+=F}function Ke(i){var u=i._queue.peek();return u.value}function Ye(i){i._queue=new w,i._queueTotalSize=0}function ze(i){return i.slice()}function nt(i,u,F,ve,Re){new Uint8Array(i).set(new Uint8Array(F,ve,Re),u)}function Xe(i){return i}function tt(i){return!1}var it=function(){function i(){throw new TypeError("Illegal constructor")}return Object.defineProperty(i.prototype,"view",{get:function(){if(!mt(this))throw Tr("view");return this._view},enumerable:!1,configurable:!0}),i.prototype.respond=function(u){if(!mt(this))throw Tr("respond");if(T(u,1,"respond"),u=Ae(u,"First parameter"),this._associatedReadableByteStreamController===void 0)throw new TypeError("This BYOB request has been invalidated");tt(this._view.buffer),Mt(this._associatedReadableByteStreamController,u)},i.prototype.respondWithNewView=function(u){if(!mt(this))throw Tr("respondWithNewView");if(T(u,1,"respondWithNewView"),!ArrayBuffer.isView(u))throw new TypeError("You can only respond with array buffer views");if(u.byteLength===0)throw new TypeError("chunk must have non-zero byteLength");if(u.buffer.byteLength===0)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._associatedReadableByteStreamController===void 0)throw new TypeError("This BYOB request has been invalidated");Lt(this._associatedReadableByteStreamController,u)},i}();Object.defineProperties(it.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(it.prototype,e.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});var Ze=function(){function i(){throw new TypeError("Illegal constructor")}return Object.defineProperty(i.prototype,"byobRequest",{get:function(){if(!lt(this))throw Dt("byobRequest");if(this._byobRequest===null&&this._pendingPullIntos.length>0){var u=this._pendingPullIntos.peek(),F=new Uint8Array(u.buffer,u.byteOffset+u.bytesFilled,u.byteLength-u.bytesFilled),ve=Object.create(it.prototype);Pn(ve,this,F),this._byobRequest=ve}return this._byobRequest},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"desiredSize",{get:function(){if(!lt(this))throw Dt("desiredSize");return st(this)},enumerable:!1,configurable:!0}),i.prototype.close=function(){if(!lt(this))throw Dt("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var u=this._controlledReadableByteStream._state;if(u!=="readable")throw new TypeError("The stream (in "+u+" state) is not in the readable state and cannot be closed");Ve(this)},i.prototype.enqueue=function(u){if(!lt(this))throw Dt("enqueue");if(T(u,1,"enqueue"),!ArrayBuffer.isView(u))throw new TypeError("chunk must be an array buffer view");if(u.byteLength===0)throw new TypeError("chunk must have non-zero byteLength");if(u.buffer.byteLength===0)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");var F=this._controlledReadableByteStream._state;if(F!=="readable")throw new TypeError("The stream (in "+F+" state) is not in the readable state and cannot be enqueued to");qe(this,u)},i.prototype.error=function(u){if(u===void 0&&(u=void 0),!lt(this))throw Dt("error");et(this,u)},i.prototype[D]=function(u){if(this._pendingPullIntos.length>0){var F=this._pendingPullIntos.peek();F.bytesFilled=0}Ye(this);var ve=this._cancelAlgorithm(u);return je(this),ve},i.prototype[Z]=function(u){var F=this._controlledReadableByteStream;if(this._queueTotalSize>0){var ve=this._queue.shift();this._queueTotalSize-=ve.byteLength,Yt(this);var Re=new Uint8Array(ve.buffer,ve.byteOffset,ve.byteLength);u._chunkSteps(Re);return}var Oe=this._autoAllocateChunkSize;if(Oe!==void 0){var De=void 0;try{De=new ArrayBuffer(Oe)}catch(He){u._errorSteps(He);return}var Ue={buffer:De,byteOffset:0,byteLength:Oe,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(Ue)}M(F,u),dt(this)},i}();Object.defineProperties(Ze.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Ze.prototype,e.toStringTag,{value:"ReadableByteStreamController",configurable:!0});function lt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_controlledReadableByteStream"))}function mt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_associatedReadableByteStreamController"))}function dt(i){var u=We(i);if(!!u){if(i._pulling){i._pullAgain=!0;return}i._pulling=!0;var F=i._pullAlgorithm();ue(F,function(){i._pulling=!1,i._pullAgain&&(i._pullAgain=!1,dt(i))},function(ve){et(i,ve)})}}function kr(i){Ft(i),i._pendingPullIntos=new w}function It(i,u){var F=!1;i._state==="closed"&&(F=!0);var ve=Ht(u);u.readerType==="default"?H(i,ve,F):wn(i,ve,F)}function Ht(i){var u=i.bytesFilled,F=i.elementSize;return new i.viewConstructor(i.buffer,i.byteOffset,u/F)}function Pt(i,u,F,ve){i._queue.push({buffer:u,byteOffset:F,byteLength:ve}),i._queueTotalSize+=ve}function qt(i,u){var F=u.elementSize,ve=u.bytesFilled-u.bytesFilled%F,Re=Math.min(i._queueTotalSize,u.byteLength-u.bytesFilled),Oe=u.bytesFilled+Re,De=Oe-Oe%F,Ue=Re,He=!1;De>ve&&(Ue=De-u.bytesFilled,He=!0);for(var Je=i._queue;Ue>0;){var rt=Je.peek(),at=Math.min(Ue,rt.byteLength),ut=u.byteOffset+u.bytesFilled;nt(u.buffer,ut,rt.buffer,rt.byteOffset,at),rt.byteLength===at?Je.shift():(rt.byteOffset+=at,rt.byteLength-=at),i._queueTotalSize-=at,Kt(i,at,u),Ue-=at}return He}function Kt(i,u,F){Ft(i),F.bytesFilled+=u}function Yt(i){i._queueTotalSize===0&&i._closeRequested?(je(i),zt(i._controlledReadableByteStream)):dt(i)}function Ft(i){i._byobRequest!==null&&(i._byobRequest._associatedReadableByteStreamController=void 0,i._byobRequest._view=null,i._byobRequest=null)}function Xt(i){for(;i._pendingPullIntos.length>0;){if(i._queueTotalSize===0)return;var u=i._pendingPullIntos.peek();qt(i,u)&&(Te(i),It(i._controlledReadableByteStream,u))}}function Cr(i,u,F){var ve=i._controlledReadableByteStream,Re=1;u.constructor!==DataView&&(Re=u.constructor.BYTES_PER_ELEMENT);var Oe=u.constructor,De=Xe(u.buffer),Ue={buffer:De,byteOffset:u.byteOffset,byteLength:u.byteLength,bytesFilled:0,elementSize:Re,viewConstructor:Oe,readerType:"byob"};if(i._pendingPullIntos.length>0){i._pendingPullIntos.push(Ue),zr(ve,F);return}if(ve._state==="closed"){var He=new Oe(Ue.buffer,Ue.byteOffset,0);F._closeSteps(He);return}if(i._queueTotalSize>0){if(qt(i,Ue)){var Je=Ht(Ue);Yt(i),F._chunkSteps(Je);return}if(i._closeRequested){var rt=new TypeError("Insufficient bytes to fill elements in the given buffer");et(i,rt),F._errorSteps(rt);return}}i._pendingPullIntos.push(Ue),zr(ve,F),dt(i)}function be(i,u){u.buffer=Xe(u.buffer);var F=i._controlledReadableByteStream;if(wr(F))for(;Vr(F)>0;){var ve=Te(i);It(F,ve)}}function xe(i,u,F){if(F.bytesFilled+u>F.byteLength)throw new RangeError("bytesWritten out of range");if(Kt(i,u,F),!(F.bytesFilled<F.elementSize)){Te(i);var ve=F.bytesFilled%F.elementSize;if(ve>0){var Re=F.byteOffset+F.bytesFilled,Oe=F.buffer.slice(Re-ve,Re);Pt(i,Oe,0,Oe.byteLength)}F.buffer=Xe(F.buffer),F.bytesFilled-=ve,It(i._controlledReadableByteStream,F),Xt(i)}}function me(i,u){var F=i._pendingPullIntos.peek(),ve=i._controlledReadableByteStream._state;if(ve==="closed"){if(u!==0)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");be(i,F)}else xe(i,u,F);dt(i)}function Te(i){var u=i._pendingPullIntos.shift();return Ft(i),u}function We(i){var u=i._controlledReadableByteStream;if(u._state!=="readable"||i._closeRequested||!i._started)return!1;if(ge(u)&&V(u)>0||wr(u)&&Vr(u)>0)return!0;var F=st(i);return F>0}function je(i){i._pullAlgorithm=void 0,i._cancelAlgorithm=void 0}function Ve(i){var u=i._controlledReadableByteStream;if(!(i._closeRequested||u._state!=="readable")){if(i._queueTotalSize>0){i._closeRequested=!0;return}if(i._pendingPullIntos.length>0){var F=i._pendingPullIntos.peek();if(F.bytesFilled>0){var ve=new TypeError("Insufficient bytes to fill elements in the given buffer");throw et(i,ve),ve}}je(i),zt(u)}}function qe(i,u){var F=i._controlledReadableByteStream;if(!(i._closeRequested||F._state!=="readable")){var ve=u.buffer,Re=u.byteOffset,Oe=u.byteLength,De=Xe(ve);if(ge(F))if(V(F)===0)Pt(i,De,Re,Oe);else{var Ue=new Uint8Array(De,Re,Oe);H(F,Ue,!1)}else wr(F)?(Pt(i,De,Re,Oe),Xt(i)):Pt(i,De,Re,Oe);dt(i)}}function et(i,u){var F=i._controlledReadableByteStream;F._state==="readable"&&(kr(i),Ye(i),je(i),vn(F,u))}function st(i){var u=i._controlledReadableByteStream._state;return u==="errored"?null:u==="closed"?0:i._strategyHWM-i._queueTotalSize}function Mt(i,u){if(u=Number(u),!Fe(u))throw new RangeError("bytesWritten must be a finite");me(i,u)}function Lt(i,u){var F=i._pendingPullIntos.peek();if(F.byteOffset+F.bytesFilled!==u.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(F.byteLength!==u.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");F.buffer=u.buffer,me(i,u.byteLength)}function Rr(i,u,F,ve,Re,Oe,De){u._controlledReadableByteStream=i,u._pullAgain=!1,u._pulling=!1,u._byobRequest=null,u._queue=u._queueTotalSize=void 0,Ye(u),u._closeRequested=!1,u._started=!1,u._strategyHWM=Oe,u._pullAlgorithm=ve,u._cancelAlgorithm=Re,u._autoAllocateChunkSize=De,u._pendingPullIntos=new w,i._readableStreamController=u;var Ue=F();ue(A(Ue),function(){u._started=!0,dt(u)},function(He){et(u,He)})}function Pr(i,u,F){var ve=Object.create(Ze.prototype),Re=function(){},Oe=function(){return A(void 0)},De=function(){return A(void 0)};u.start!==void 0&&(Re=function(){return u.start(ve)}),u.pull!==void 0&&(Oe=function(){return u.pull(ve)}),u.cancel!==void 0&&(De=function(He){return u.cancel(He)});var Ue=u.autoAllocateChunkSize;if(Ue===0)throw new TypeError("autoAllocateChunkSize must be greater than 0");Rr(i,ve,Re,Oe,De,F,Ue)}function Pn(i,u,F){i._associatedReadableByteStreamController=u,i._view=F}function Tr(i){return new TypeError("ReadableStreamBYOBRequest.prototype."+i+" can only be used on a ReadableStreamBYOBRequest")}function Dt(i){return new TypeError("ReadableByteStreamController.prototype."+i+" can only be used on a ReadableByteStreamController")}function Tn(i){return new Qt(i)}function zr(i,u){i._reader._readIntoRequests.push(u)}function wn(i,u,F){var ve=i._reader,Re=ve._readIntoRequests.shift();F?Re._closeSteps(u):Re._chunkSteps(u)}function Vr(i){return i._reader._readIntoRequests.length}function wr(i){var u=i._reader;return!(u===void 0||!Nt(u))}var Qt=function(){function i(u){if(T(u,1,"ReadableStreamBYOBReader"),ee(u,"First parameter"),yt(u))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!lt(u._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");k(this,u),this._readIntoRequests=new w}return Object.defineProperty(i.prototype,"closed",{get:function(){return Nt(this)?this._closedPromise:y(Jt("closed"))},enumerable:!1,configurable:!0}),i.prototype.cancel=function(u){return u===void 0&&(u=void 0),Nt(this)?this._ownerReadableStream===void 0?y(Y("cancel")):z(this,u):y(Jt("cancel"))},i.prototype.read=function(u){if(!Nt(this))return y(Jt("read"));if(!ArrayBuffer.isView(u))return y(new TypeError("view must be an array buffer view"));if(u.byteLength===0)return y(new TypeError("view must have non-zero byteLength"));if(u.buffer.byteLength===0)return y(new TypeError("view's buffer must have non-zero byteLength"));if(this._ownerReadableStream===void 0)return y(Y("read from"));var F,ve,Re=O(function(De,Ue){F=De,ve=Ue}),Oe={_chunkSteps:function(De){return F({value:De,done:!1})},_closeSteps:function(De){return F({value:De,done:!0})},_errorSteps:function(De){return ve(De)}};return xn(this,u,Oe),Re},i.prototype.releaseLock=function(){if(!Nt(this))throw Jt("releaseLock");if(this._ownerReadableStream!==void 0){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");Q(this)}},i}();Object.defineProperties(Qt.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Qt.prototype,e.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});function Nt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_readIntoRequests"))}function xn(i,u,F){var ve=i._ownerReadableStream;ve._disturbed=!0,ve._state==="errored"?F._errorSteps(ve._storedError):Cr(ve._readableStreamController,u,F)}function Jt(i){return new TypeError("ReadableStreamBYOBReader.prototype."+i+" can only be used on a ReadableStreamBYOBReader")}function $t(i,u){var F=i.highWaterMark;if(F===void 0)return u;if(we(F)||F<0)throw new RangeError("Invalid highWaterMark");return F}function Zt(i){var u=i.size;return u||function(){return 1}}function er(i,u){le(i,u);var F=i==null?void 0:i.highWaterMark,ve=i==null?void 0:i.size;return{highWaterMark:F===void 0?void 0:ne(F),size:ve===void 0?void 0:En(ve,u+" has member 'size' that")}}function En(i,u){return fe(i,u),function(F){return ne(i(F))}}function On(i,u){le(i,u);var F=i==null?void 0:i.abort,ve=i==null?void 0:i.close,Re=i==null?void 0:i.start,Oe=i==null?void 0:i.type,De=i==null?void 0:i.write;return{abort:F===void 0?void 0:In(F,i,u+" has member 'abort' that"),close:ve===void 0?void 0:Fn(ve,i,u+" has member 'close' that"),start:Re===void 0?void 0:Mn(Re,i,u+" has member 'start' that"),write:De===void 0?void 0:Ln(De,i,u+" has member 'write' that"),type:Oe}}function In(i,u,F){return fe(i,F),function(ve){return b(i,u,[ve])}}function Fn(i,u,F){return fe(i,F),function(){return b(i,u,[])}}function Mn(i,u,F){return fe(i,F),function(ve){return W(i,u,[ve])}}function Ln(i,u,F){return fe(i,F),function(ve,Re){return b(i,u,[ve,Re])}}function Hr(i,u){if(!Tt(i))throw new TypeError(u+" is not a WritableStream.")}var tr=function(){function i(u,F){u===void 0&&(u={}),F===void 0&&(F={}),u===void 0?u=null:E(u,"First parameter");var ve=er(F,"Second parameter"),Re=On(u,"First parameter");Kr(this);var Oe=Re.type;if(Oe!==void 0)throw new RangeError("Invalid type is specified");var De=Zt(ve),Ue=$t(ve,1);Xn(this,Re,Ue,De)}return Object.defineProperty(i.prototype,"locked",{get:function(){if(!Tt(this))throw sr("locked");return wt(this)},enumerable:!1,configurable:!0}),i.prototype.abort=function(u){return u===void 0&&(u=void 0),Tt(this)?wt(this)?y(new TypeError("Cannot abort a stream that already has a writer")):rr(this,u):y(sr("abort"))},i.prototype.close=function(){return Tt(this)?wt(this)?y(new TypeError("Cannot close a stream that already has a writer")):ht(this)?y(new TypeError("Cannot close an already-closing stream")):Yr(this):y(sr("close"))},i.prototype.getWriter=function(){if(!Tt(this))throw sr("getWriter");return qr(this)},i}();Object.defineProperties(tr.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(tr.prototype,e.toStringTag,{value:"WritableStream",configurable:!0});function qr(i){return new ar(i)}function Dn(i,u,F,ve,Re,Oe){Re===void 0&&(Re=1),Oe===void 0&&(Oe=function(){return 1});var De=Object.create(tr.prototype);Kr(De);var Ue=Object.create(Bt.prototype);return tn(De,Ue,i,u,F,ve,Re,Oe),De}function Kr(i){i._state="writable",i._storedError=void 0,i._writer=void 0,i._writableStreamController=void 0,i._writeRequests=new w,i._inFlightWriteRequest=void 0,i._closeRequest=void 0,i._inFlightCloseRequest=void 0,i._pendingAbortRequest=void 0,i._backpressure=!1}function Tt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_writableStreamController"))}function wt(i){return i._writer!==void 0}function rr(i,u){var F=i._state;if(F==="closed"||F==="errored")return A(void 0);if(i._pendingAbortRequest!==void 0)return i._pendingAbortRequest._promise;var ve=!1;F==="erroring"&&(ve=!0,u=void 0);var Re=O(function(Oe,De){i._pendingAbortRequest={_promise:void 0,_resolve:Oe,_reject:De,_reason:u,_wasAlreadyErroring:ve}});return i._pendingAbortRequest._promise=Re,ve||Er(i,u),Re}function Yr(i){var u=i._state;if(u==="closed"||u==="errored")return y(new TypeError("The stream (in "+u+" state) is not in the writable state and cannot be closed"));var F=O(function(Re,Oe){var De={_resolve:Re,_reject:Oe};i._closeRequest=De}),ve=i._writer;return ve!==void 0&&i._backpressure&&u==="writable"&&Nr(ve),Qn(i._writableStreamController),F}function Nn(i){var u=O(function(F,ve){var Re={_resolve:F,_reject:ve};i._writeRequests.push(Re)});return u}function xr(i,u){var F=i._state;if(F==="writable"){Er(i,u);return}Or(i)}function Er(i,u){var F=i._writableStreamController;i._state="erroring",i._storedError=u;var ve=i._writer;ve!==void 0&&Qr(ve,u),!Un(i)&&F._started&&Or(i)}function Or(i){i._state="errored",i._writableStreamController[R]();var u=i._storedError;if(i._writeRequests.forEach(function(Re){Re._reject(u)}),i._writeRequests=new w,i._pendingAbortRequest===void 0){nr(i);return}var F=i._pendingAbortRequest;if(i._pendingAbortRequest=void 0,F._wasAlreadyErroring){F._reject(u),nr(i);return}var ve=i._writableStreamController[v](F._reason);ue(ve,function(){F._resolve(),nr(i)},function(Re){F._reject(Re),nr(i)})}function $n(i){i._inFlightWriteRequest._resolve(void 0),i._inFlightWriteRequest=void 0}function Bn(i,u){i._inFlightWriteRequest._reject(u),i._inFlightWriteRequest=void 0,xr(i,u)}function Wn(i){i._inFlightCloseRequest._resolve(void 0),i._inFlightCloseRequest=void 0;var u=i._state;u==="erroring"&&(i._storedError=void 0,i._pendingAbortRequest!==void 0&&(i._pendingAbortRequest._resolve(),i._pendingAbortRequest=void 0)),i._state="closed";var F=i._writer;F!==void 0&&on(F)}function jn(i,u){i._inFlightCloseRequest._reject(u),i._inFlightCloseRequest=void 0,i._pendingAbortRequest!==void 0&&(i._pendingAbortRequest._reject(u),i._pendingAbortRequest=void 0),xr(i,u)}function ht(i){return!(i._closeRequest===void 0&&i._inFlightCloseRequest===void 0)}function Un(i){return!(i._inFlightWriteRequest===void 0&&i._inFlightCloseRequest===void 0)}function Gn(i){i._inFlightCloseRequest=i._closeRequest,i._closeRequest=void 0}function zn(i){i._inFlightWriteRequest=i._writeRequests.shift()}function nr(i){i._closeRequest!==void 0&&(i._closeRequest._reject(i._storedError),i._closeRequest=void 0);var u=i._writer;u!==void 0&&Lr(u,i._storedError)}function Ir(i,u){var F=i._writer;F!==void 0&&u!==i._backpressure&&(u?aa(F):Nr(F)),i._backpressure=u}var ar=function(){function i(u){if(T(u,1,"WritableStreamDefaultWriter"),Hr(u,"First parameter"),wt(u))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=u,u._writer=this;var F=u._state;if(F==="writable")!ht(u)&&u._backpressure?lr(this):sn(this),ur(this);else if(F==="erroring")Dr(this,u._storedError),ur(this);else if(F==="closed")sn(this),ra(this);else{var ve=u._storedError;Dr(this,ve),an(this,ve)}}return Object.defineProperty(i.prototype,"closed",{get:function(){return bt(this)?this._closedPromise:y(St("closed"))},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"desiredSize",{get:function(){if(!bt(this))throw St("desiredSize");if(this._ownerWritableStream===void 0)throw Wt("desiredSize");return Kn(this)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"ready",{get:function(){return bt(this)?this._readyPromise:y(St("ready"))},enumerable:!1,configurable:!0}),i.prototype.abort=function(u){return u===void 0&&(u=void 0),bt(this)?this._ownerWritableStream===void 0?y(Wt("abort")):Vn(this,u):y(St("abort"))},i.prototype.close=function(){if(!bt(this))return y(St("close"));var u=this._ownerWritableStream;return u===void 0?y(Wt("close")):ht(u)?y(new TypeError("Cannot close an already-closing stream")):Xr(this)},i.prototype.releaseLock=function(){if(!bt(this))throw St("releaseLock");var u=this._ownerWritableStream;u!==void 0&&Jr(this)},i.prototype.write=function(u){return u===void 0&&(u=void 0),bt(this)?this._ownerWritableStream===void 0?y(Wt("write to")):Zr(this,u):y(St("write"))},i}();Object.defineProperties(ar.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(ar.prototype,e.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});function bt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_ownerWritableStream"))}function Vn(i,u){var F=i._ownerWritableStream;return rr(F,u)}function Xr(i){var u=i._ownerWritableStream;return Yr(u)}function Hn(i){var u=i._ownerWritableStream,F=u._state;return ht(u)||F==="closed"?A(void 0):F==="errored"?y(u._storedError):Xr(i)}function qn(i,u){i._closedPromiseState==="pending"?Lr(i,u):na(i,u)}function Qr(i,u){i._readyPromiseState==="pending"?un(i,u):ia(i,u)}function Kn(i){var u=i._ownerWritableStream,F=u._state;return F==="errored"||F==="erroring"?null:F==="closed"?0:rn(u._writableStreamController)}function Jr(i){var u=i._ownerWritableStream,F=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");Qr(i,F),qn(i,F),u._writer=void 0,i._ownerWritableStream=void 0}function Zr(i,u){var F=i._ownerWritableStream,ve=F._writableStreamController,Re=Jn(ve,u);if(F!==i._ownerWritableStream)return y(Wt("write to"));var Oe=F._state;if(Oe==="errored")return y(F._storedError);if(ht(F)||Oe==="closed")return y(new TypeError("The stream is closing or closed and cannot be written to"));if(Oe==="erroring")return y(F._storedError);var De=Nn(F);return Zn(ve,u,Re),De}var en={},Bt=function(){function i(){throw new TypeError("Illegal constructor")}return i.prototype.error=function(u){if(u===void 0&&(u=void 0),!Yn(this))throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");var F=this._controlledWritableStream._state;F==="writable"&&nn(this,u)},i.prototype[v]=function(u){var F=this._abortAlgorithm(u);return ir(this),F},i.prototype[R]=function(){Ye(this)},i}();Object.defineProperties(Bt.prototype,{error:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Bt.prototype,e.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});function Yn(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_controlledWritableStream"))}function tn(i,u,F,ve,Re,Oe,De,Ue){u._controlledWritableStream=i,i._writableStreamController=u,u._queue=void 0,u._queueTotalSize=void 0,Ye(u),u._started=!1,u._strategySizeAlgorithm=Ue,u._strategyHWM=De,u._writeAlgorithm=ve,u._closeAlgorithm=Re,u._abortAlgorithm=Oe;var He=Mr(u);Ir(i,He);var Je=F(),rt=A(Je);ue(rt,function(){u._started=!0,or(u)},function(at){u._started=!0,xr(i,at)})}function Xn(i,u,F,ve){var Re=Object.create(Bt.prototype),Oe=function(){},De=function(){return A(void 0)},Ue=function(){return A(void 0)},He=function(){return A(void 0)};u.start!==void 0&&(Oe=function(){return u.start(Re)}),u.write!==void 0&&(De=function(Je){return u.write(Je,Re)}),u.close!==void 0&&(Ue=function(){return u.close()}),u.abort!==void 0&&(He=function(Je){return u.abort(Je)}),tn(i,Re,Oe,De,Ue,He,F,ve)}function ir(i){i._writeAlgorithm=void 0,i._closeAlgorithm=void 0,i._abortAlgorithm=void 0,i._strategySizeAlgorithm=void 0}function Qn(i){Ge(i,en,0),or(i)}function Jn(i,u){try{return i._strategySizeAlgorithm(u)}catch(F){return Fr(i,F),1}}function rn(i){return i._strategyHWM-i._queueTotalSize}function Zn(i,u,F){try{Ge(i,u,F)}catch(Oe){Fr(i,Oe);return}var ve=i._controlledWritableStream;if(!ht(ve)&&ve._state==="writable"){var Re=Mr(i);Ir(ve,Re)}or(i)}function or(i){var u=i._controlledWritableStream;if(!!i._started&&u._inFlightWriteRequest===void 0){var F=u._state;if(F==="erroring"){Or(u);return}if(i._queue.length!==0){var ve=Ke(i);ve===en?ea(i):ta(i,ve)}}}function Fr(i,u){i._controlledWritableStream._state==="writable"&&nn(i,u)}function ea(i){var u=i._controlledWritableStream;Gn(u),$e(i);var F=i._closeAlgorithm();ir(i),ue(F,function(){Wn(u)},function(ve){jn(u,ve)})}function ta(i,u){var F=i._controlledWritableStream;zn(F);var ve=i._writeAlgorithm(u);ue(ve,function(){$n(F);var Re=F._state;if($e(i),!ht(F)&&Re==="writable"){var Oe=Mr(i);Ir(F,Oe)}or(i)},function(Re){F._state==="writable"&&ir(i),Bn(F,Re)})}function Mr(i){var u=rn(i);return u<=0}function nn(i,u){var F=i._controlledWritableStream;ir(i),Er(F,u)}function sr(i){return new TypeError("WritableStream.prototype."+i+" can only be used on a WritableStream")}function St(i){return new TypeError("WritableStreamDefaultWriter.prototype."+i+" can only be used on a WritableStreamDefaultWriter")}function Wt(i){return new TypeError("Cannot "+i+" a stream using a released writer")}function ur(i){i._closedPromise=O(function(u,F){i._closedPromise_resolve=u,i._closedPromise_reject=F,i._closedPromiseState="pending"})}function an(i,u){ur(i),Lr(i,u)}function ra(i){ur(i),on(i)}function Lr(i,u){i._closedPromise_reject!==void 0&&(B(i._closedPromise),i._closedPromise_reject(u),i._closedPromise_resolve=void 0,i._closedPromise_reject=void 0,i._closedPromiseState="rejected")}function na(i,u){an(i,u)}function on(i){i._closedPromise_resolve!==void 0&&(i._closedPromise_resolve(void 0),i._closedPromise_resolve=void 0,i._closedPromise_reject=void 0,i._closedPromiseState="resolved")}function lr(i){i._readyPromise=O(function(u,F){i._readyPromise_resolve=u,i._readyPromise_reject=F}),i._readyPromiseState="pending"}function Dr(i,u){lr(i),un(i,u)}function sn(i){lr(i),Nr(i)}function un(i,u){i._readyPromise_reject!==void 0&&(B(i._readyPromise),i._readyPromise_reject(u),i._readyPromise_resolve=void 0,i._readyPromise_reject=void 0,i._readyPromiseState="rejected")}function aa(i){lr(i)}function ia(i,u){Dr(i,u)}function Nr(i){i._readyPromise_resolve!==void 0&&(i._readyPromise_resolve(void 0),i._readyPromise_resolve=void 0,i._readyPromise_reject=void 0,i._readyPromiseState="fulfilled")}function oa(i){if(typeof i!="object"||i===null)return!1;try{return typeof i.aborted=="boolean"}catch(u){return!1}}var ln=typeof DOMException!="undefined"?DOMException:void 0;function sa(i){if(!(typeof i=="function"||typeof i=="object"))return!1;try{return new i,!0}catch(u){return!1}}function ua(){var i=function(F,ve){this.message=F||"",this.name=ve||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return i.prototype=Object.create(Error.prototype),Object.defineProperty(i.prototype,"constructor",{value:i,writable:!0,configurable:!0}),i}var la=sa(ln)?ln:ua();function cn(i,u,F,ve,Re,Oe){var De=oe(i),Ue=qr(u);i._disturbed=!0;var He=!1,Je=A(void 0);return O(function(rt,at){var ut;if(Oe!==void 0){if(ut=function(){var Qe=new la("Aborted","AbortError"),ot=[];ve||ot.push(function(){return u._state==="writable"?rr(u,Qe):A(void 0)}),Re||ot.push(function(){return i._state==="readable"?At(i,Qe):A(void 0)}),Rt(function(){return Promise.all(ot.map(function(ft){return ft()}))},!0,Qe)},Oe.aborted){ut();return}Oe.addEventListener("abort",ut)}function Vt(){return O(function(Qe,ot){function ft(Ar){Ar?Qe():G(Gr(),ft,ot)}ft(!1)})}function Gr(){return He?A(!0):G(Ue._readyPromise,function(){return O(function(Qe,ot){Se(De,{_chunkSteps:function(ft){Je=G(Zr(Ue,ft),void 0,o),Qe(!1)},_closeSteps:function(){return Qe(!0)},_errorSteps:ot})})})}if(pt(i,De._closedPromise,function(Qe){ve?Sr(!0,Qe):Rt(function(){return rr(u,Qe)},!0,Qe)}),pt(u,Ue._closedPromise,function(Qe){Re?Sr(!0,Qe):Rt(function(){return At(i,Qe)},!0,Qe)}),Ct(i,De._closedPromise,function(){F?Sr():Rt(function(){return Hn(Ue)})}),ht(u)||u._state==="closed"){var Ot=new TypeError("the destination writable stream closed before all data could be piped to it");Re?Sr(!0,Ot):Rt(function(){return At(i,Ot)},!0,Ot)}B(Vt());function ct(){var Qe=Je;return G(Je,function(){return Qe!==Je?ct():void 0})}function pt(Qe,ot,ft){Qe._state==="errored"?ft(Qe._storedError):U(ot,ft)}function Ct(Qe,ot,ft){Qe._state==="closed"?ft():K(ot,ft)}function Rt(Qe,ot,ft){if(He)return;He=!0,u._state==="writable"&&!ht(u)?K(ct(),Ar):Ar();function Ar(){ue(Qe(),function(){return _r(ot,ft)},function($a){return _r(!0,$a)})}}function Sr(Qe,ot){He||(He=!0,u._state==="writable"&&!ht(u)?K(ct(),function(){return _r(Qe,ot)}):_r(Qe,ot))}function _r(Qe,ot){Jr(Ue),Q(De),Oe!==void 0&&Oe.removeEventListener("abort",ut),Qe?at(ot):rt(void 0)}})}var jt=function(){function i(){throw new TypeError("Illegal constructor")}return Object.defineProperty(i.prototype,"desiredSize",{get:function(){if(!cr(this))throw hr("desiredSize");return $r(this)},enumerable:!1,configurable:!0}),i.prototype.close=function(){if(!cr(this))throw hr("close");if(!xt(this))throw new TypeError("The stream is not in a state that permits close");Gt(this)},i.prototype.enqueue=function(u){if(u===void 0&&(u=void 0),!cr(this))throw hr("enqueue");if(!xt(this))throw new TypeError("The stream is not in a state that permits enqueue");return dr(this,u)},i.prototype.error=function(u){if(u===void 0&&(u=void 0),!cr(this))throw hr("error");vt(this,u)},i.prototype[D]=function(u){Ye(this);var F=this._cancelAlgorithm(u);return fr(this),F},i.prototype[Z]=function(u){var F=this._controlledReadableStream;if(this._queue.length>0){var ve=$e(this);this._closeRequested&&this._queue.length===0?(fr(this),zt(F)):Ut(this),u._chunkSteps(ve)}else M(F,u),Ut(this)},i}();Object.defineProperties(jt.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(jt.prototype,e.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});function cr(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_controlledReadableStream"))}function Ut(i){var u=fn(i);if(!!u){if(i._pulling){i._pullAgain=!0;return}i._pulling=!0;var F=i._pullAlgorithm();ue(F,function(){i._pulling=!1,i._pullAgain&&(i._pullAgain=!1,Ut(i))},function(ve){vt(i,ve)})}}function fn(i){var u=i._controlledReadableStream;if(!xt(i)||!i._started)return!1;if(yt(u)&&V(u)>0)return!0;var F=$r(i);return F>0}function fr(i){i._pullAlgorithm=void 0,i._cancelAlgorithm=void 0,i._strategySizeAlgorithm=void 0}function Gt(i){if(!!xt(i)){var u=i._controlledReadableStream;i._closeRequested=!0,i._queue.length===0&&(fr(i),zt(u))}}function dr(i,u){if(!!xt(i)){var F=i._controlledReadableStream;if(yt(F)&&V(F)>0)H(F,u,!1);else{var ve=void 0;try{ve=i._strategySizeAlgorithm(u)}catch(Re){throw vt(i,Re),Re}try{Ge(i,u,ve)}catch(Re){throw vt(i,Re),Re}}Ut(i)}}function vt(i,u){var F=i._controlledReadableStream;F._state==="readable"&&(Ye(i),fr(i),vn(F,u))}function $r(i){var u=i._controlledReadableStream._state;return u==="errored"?null:u==="closed"?0:i._strategyHWM-i._queueTotalSize}function ca(i){return!fn(i)}function xt(i){var u=i._controlledReadableStream._state;return!i._closeRequested&&u==="readable"}function dn(i,u,F,ve,Re,Oe,De){u._controlledReadableStream=i,u._queue=void 0,u._queueTotalSize=void 0,Ye(u),u._started=!1,u._closeRequested=!1,u._pullAgain=!1,u._pulling=!1,u._strategySizeAlgorithm=De,u._strategyHWM=Oe,u._pullAlgorithm=ve,u._cancelAlgorithm=Re,i._readableStreamController=u;var Ue=F();ue(A(Ue),function(){u._started=!0,Ut(u)},function(He){vt(u,He)})}function fa(i,u,F,ve){var Re=Object.create(jt.prototype),Oe=function(){},De=function(){return A(void 0)},Ue=function(){return A(void 0)};u.start!==void 0&&(Oe=function(){return u.start(Re)}),u.pull!==void 0&&(De=function(){return u.pull(Re)}),u.cancel!==void 0&&(Ue=function(He){return u.cancel(He)}),dn(i,Re,Oe,De,Ue,F,ve)}function hr(i){return new TypeError("ReadableStreamDefaultController.prototype."+i+" can only be used on a ReadableStreamDefaultController")}function da(i,u){var F=oe(i),ve=!1,Re=!1,Oe=!1,De,Ue,He,Je,rt,at=O(function(ct){rt=ct});function ut(){if(ve)return A(void 0);ve=!0;var ct={_chunkSteps:function(pt){C(function(){ve=!1;var Ct=pt,Rt=pt;Re||dr(He._readableStreamController,Ct),Oe||dr(Je._readableStreamController,Rt)})},_closeSteps:function(){ve=!1,Re||Gt(He._readableStreamController),Oe||Gt(Je._readableStreamController),(!Re||!Oe)&&rt(void 0)},_errorSteps:function(){ve=!1}};return Se(F,ct),A(void 0)}function Vt(ct){if(Re=!0,De=ct,Oe){var pt=ze([De,Ue]),Ct=At(i,pt);rt(Ct)}return at}function Gr(ct){if(Oe=!0,Ue=ct,Re){var pt=ze([De,Ue]),Ct=At(i,pt);rt(Ct)}return at}function Ot(){}return He=Br(Ot,ut,Vt),Je=Br(Ot,ut,Gr),U(F._closedPromise,function(ct){vt(He._readableStreamController,ct),vt(Je._readableStreamController,ct),(!Re||!Oe)&&rt(void 0)}),[He,Je]}function ha(i,u){le(i,u);var F=i,ve=F==null?void 0:F.autoAllocateChunkSize,Re=F==null?void 0:F.cancel,Oe=F==null?void 0:F.pull,De=F==null?void 0:F.start,Ue=F==null?void 0:F.type;return{autoAllocateChunkSize:ve===void 0?void 0:Ae(ve,u+" has member 'autoAllocateChunkSize' that"),cancel:Re===void 0?void 0:pa(Re,F,u+" has member 'cancel' that"),pull:Oe===void 0?void 0:va(Oe,F,u+" has member 'pull' that"),start:De===void 0?void 0:ga(De,F,u+" has member 'start' that"),type:Ue===void 0?void 0:ya(Ue,u+" has member 'type' that")}}function pa(i,u,F){return fe(i,F),function(ve){return b(i,u,[ve])}}function va(i,u,F){return fe(i,F),function(ve){return b(i,u,[ve])}}function ga(i,u,F){return fe(i,F),function(ve){return W(i,u,[ve])}}function ya(i,u){if(i=""+i,i!=="bytes")throw new TypeError(u+" '"+i+"' is not a valid enumeration value for ReadableStreamType");return i}function ma(i,u){le(i,u);var F=i==null?void 0:i.mode;return{mode:F===void 0?void 0:ba(F,u+" has member 'mode' that")}}function ba(i,u){if(i=""+i,i!=="byob")throw new TypeError(u+" '"+i+"' is not a valid enumeration value for ReadableStreamReaderMode");return i}function Sa(i,u){le(i,u);var F=i==null?void 0:i.preventCancel;return{preventCancel:Boolean(F)}}function hn(i,u){le(i,u);var F=i==null?void 0:i.preventAbort,ve=i==null?void 0:i.preventCancel,Re=i==null?void 0:i.preventClose,Oe=i==null?void 0:i.signal;return Oe!==void 0&&_a(Oe,u+" has member 'signal' that"),{preventAbort:Boolean(F),preventCancel:Boolean(ve),preventClose:Boolean(Re),signal:Oe}}function _a(i,u){if(!oa(i))throw new TypeError(u+" is not an AbortSignal.")}function Aa(i,u){le(i,u);var F=i==null?void 0:i.readable;te(F,"readable","ReadableWritablePair"),ee(F,u+" has member 'readable' that");var ve=i==null?void 0:i.writable;return te(ve,"writable","ReadableWritablePair"),Hr(ve,u+" has member 'writable' that"),{readable:F,writable:ve}}var Et=function(){function i(u,F){u===void 0&&(u={}),F===void 0&&(F={}),u===void 0?u=null:E(u,"First parameter");var ve=er(F,"Second parameter"),Re=ha(u,"First parameter");if(pn(this),Re.type==="bytes"){if(ve.size!==void 0)throw new RangeError("The strategy for a byte stream cannot have a size function");var Oe=$t(ve,0);Pr(this,Re,Oe)}else{var De=Zt(ve),Oe=$t(ve,1);fa(this,Re,Oe,De)}}return Object.defineProperty(i.prototype,"locked",{get:function(){if(!gt(this))throw kt("locked");return yt(this)},enumerable:!1,configurable:!0}),i.prototype.cancel=function(u){return u===void 0&&(u=void 0),gt(this)?yt(this)?y(new TypeError("Cannot cancel a stream that already has a reader")):At(this,u):y(kt("cancel"))},i.prototype.getReader=function(u){if(u===void 0&&(u=void 0),!gt(this))throw kt("getReader");var F=ma(u,"First parameter");return F.mode===void 0?oe(this):Tn(this)},i.prototype.pipeThrough=function(u,F){if(F===void 0&&(F={}),!gt(this))throw kt("pipeThrough");T(u,1,"pipeThrough");var ve=Aa(u,"First parameter"),Re=hn(F,"Second parameter");if(yt(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(wt(ve.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");var Oe=cn(this,ve.writable,Re.preventClose,Re.preventAbort,Re.preventCancel,Re.signal);return B(Oe),ve.readable},i.prototype.pipeTo=function(u,F){if(F===void 0&&(F={}),!gt(this))return y(kt("pipeTo"));if(u===void 0)return y("Parameter 1 is required in 'pipeTo'.");if(!Tt(u))return y(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));var ve;try{ve=hn(F,"Second parameter")}catch(Re){return y(Re)}return yt(this)?y(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):wt(u)?y(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):cn(this,u,ve.preventClose,ve.preventAbort,ve.preventCancel,ve.signal)},i.prototype.tee=function(){if(!gt(this))throw kt("tee");var u=da(this);return ze(u)},i.prototype.values=function(u){if(u===void 0&&(u=void 0),!gt(this))throw kt("values");var F=Sa(u,"First parameter");return Ee(this,F.preventCancel)},i}();Object.defineProperties(Et.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Et.prototype,e.toStringTag,{value:"ReadableStream",configurable:!0}),typeof e.asyncIterator=="symbol"&&Object.defineProperty(Et.prototype,e.asyncIterator,{value:Et.prototype.values,writable:!0,configurable:!0});function Br(i,u,F,ve,Re){ve===void 0&&(ve=1),Re===void 0&&(Re=function(){return 1});var Oe=Object.create(Et.prototype);pn(Oe);var De=Object.create(jt.prototype);return dn(Oe,De,i,u,F,ve,Re),Oe}function pn(i){i._state="readable",i._reader=void 0,i._storedError=void 0,i._disturbed=!1}function gt(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_readableStreamController"))}function yt(i){return i._reader!==void 0}function At(i,u){if(i._disturbed=!0,i._state==="closed")return A(void 0);if(i._state==="errored")return y(i._storedError);zt(i);var F=i._readableStreamController[D](u);return I(F,o)}function zt(i){i._state="closed";var u=i._reader;u!==void 0&&(L(u),pe(u)&&(u._readRequests.forEach(function(F){F._closeSteps()}),u._readRequests=new w))}function vn(i,u){i._state="errored",i._storedError=u;var F=i._reader;F!==void 0&&(J(F,u),pe(F)?(F._readRequests.forEach(function(ve){ve._errorSteps(u)}),F._readRequests=new w):(F._readIntoRequests.forEach(function(ve){ve._errorSteps(u)}),F._readIntoRequests=new w))}function kt(i){return new TypeError("ReadableStream.prototype."+i+" can only be used on a ReadableStream")}function gn(i,u){le(i,u);var F=i==null?void 0:i.highWaterMark;return te(F,"highWaterMark","QueuingStrategyInit"),{highWaterMark:ne(F)}}var ka=function(u){return u.byteLength},Wr=function(){function i(u){T(u,1,"ByteLengthQueuingStrategy"),u=gn(u,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=u.highWaterMark}return Object.defineProperty(i.prototype,"highWaterMark",{get:function(){if(!mn(this))throw yn("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"size",{get:function(){if(!mn(this))throw yn("size");return ka},enumerable:!1,configurable:!0}),i}();Object.defineProperties(Wr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Wr.prototype,e.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});function yn(i){return new TypeError("ByteLengthQueuingStrategy.prototype."+i+" can only be used on a ByteLengthQueuingStrategy")}function mn(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_byteLengthQueuingStrategyHighWaterMark"))}var Ca=function(){return 1},jr=function(){function i(u){T(u,1,"CountQueuingStrategy"),u=gn(u,"First parameter"),this._countQueuingStrategyHighWaterMark=u.highWaterMark}return Object.defineProperty(i.prototype,"highWaterMark",{get:function(){if(!Sn(this))throw bn("highWaterMark");return this._countQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"size",{get:function(){if(!Sn(this))throw bn("size");return Ca},enumerable:!1,configurable:!0}),i}();Object.defineProperties(jr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(jr.prototype,e.toStringTag,{value:"CountQueuingStrategy",configurable:!0});function bn(i){return new TypeError("CountQueuingStrategy.prototype."+i+" can only be used on a CountQueuingStrategy")}function Sn(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_countQueuingStrategyHighWaterMark"))}function Ra(i,u){le(i,u);var F=i==null?void 0:i.flush,ve=i==null?void 0:i.readableType,Re=i==null?void 0:i.start,Oe=i==null?void 0:i.transform,De=i==null?void 0:i.writableType;return{flush:F===void 0?void 0:Pa(F,i,u+" has member 'flush' that"),readableType:ve,start:Re===void 0?void 0:Ta(Re,i,u+" has member 'start' that"),transform:Oe===void 0?void 0:wa(Oe,i,u+" has member 'transform' that"),writableType:De}}function Pa(i,u,F){return fe(i,F),function(ve){return b(i,u,[ve])}}function Ta(i,u,F){return fe(i,F),function(ve){return W(i,u,[ve])}}function wa(i,u,F){return fe(i,F),function(ve,Re){return b(i,u,[ve,Re])}}var Ur=function(){function i(u,F,ve){u===void 0&&(u={}),F===void 0&&(F={}),ve===void 0&&(ve={}),u===void 0&&(u=null);var Re=er(F,"Second parameter"),Oe=er(ve,"Third parameter"),De=Ra(u,"First parameter");if(De.readableType!==void 0)throw new RangeError("Invalid readableType specified");if(De.writableType!==void 0)throw new RangeError("Invalid writableType specified");var Ue=$t(Oe,0),He=Zt(Oe),Je=$t(Re,1),rt=Zt(Re),at,ut=O(function(Vt){at=Vt});xa(this,ut,Je,rt,Ue,He),Oa(this,De),De.start!==void 0?at(De.start(this._transformStreamController)):at(void 0)}return Object.defineProperty(i.prototype,"readable",{get:function(){if(!_n(this))throw Rn("readable");return this._readable},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"writable",{get:function(){if(!_n(this))throw Rn("writable");return this._writable},enumerable:!1,configurable:!0}),i}();Object.defineProperties(Ur.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(Ur.prototype,e.toStringTag,{value:"TransformStream",configurable:!0});function xa(i,u,F,ve,Re,Oe){function De(){return u}function Ue(ut){return Ma(i,ut)}function He(ut){return La(i,ut)}function Je(){return Da(i)}i._writable=Dn(De,Ue,Je,He,F,ve);function rt(){return Na(i)}function at(ut){return vr(i,ut),A(void 0)}i._readable=Br(De,rt,at,Re,Oe),i._backpressure=void 0,i._backpressureChangePromise=void 0,i._backpressureChangePromise_resolve=void 0,gr(i,!0),i._transformStreamController=void 0}function _n(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_transformStreamController"))}function pr(i,u){vt(i._readable._readableStreamController,u),vr(i,u)}function vr(i,u){An(i._transformStreamController),Fr(i._writable._writableStreamController,u),i._backpressure&&gr(i,!1)}function gr(i,u){i._backpressureChangePromise!==void 0&&i._backpressureChangePromise_resolve(),i._backpressureChangePromise=O(function(F){i._backpressureChangePromise_resolve=F}),i._backpressure=u}var yr=function(){function i(){throw new TypeError("Illegal constructor")}return Object.defineProperty(i.prototype,"desiredSize",{get:function(){if(!mr(this))throw br("desiredSize");var u=this._controlledTransformStream._readable._readableStreamController;return $r(u)},enumerable:!1,configurable:!0}),i.prototype.enqueue=function(u){if(u===void 0&&(u=void 0),!mr(this))throw br("enqueue");kn(this,u)},i.prototype.error=function(u){if(u===void 0&&(u=void 0),!mr(this))throw br("error");Ia(this,u)},i.prototype.terminate=function(){if(!mr(this))throw br("terminate");Fa(this)},i}();Object.defineProperties(yr.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),typeof e.toStringTag=="symbol"&&Object.defineProperty(yr.prototype,e.toStringTag,{value:"TransformStreamDefaultController",configurable:!0});function mr(i){return!(!c(i)||!Object.prototype.hasOwnProperty.call(i,"_controlledTransformStream"))}function Ea(i,u,F,ve){u._controlledTransformStream=i,i._transformStreamController=u,u._transformAlgorithm=F,u._flushAlgorithm=ve}function Oa(i,u){var F=Object.create(yr.prototype),ve=function(Oe){try{return kn(F,Oe),A(void 0)}catch(De){return y(De)}},Re=function(){return A(void 0)};u.transform!==void 0&&(ve=function(Oe){return u.transform(Oe,F)}),u.flush!==void 0&&(Re=function(){return u.flush(F)}),Ea(i,F,ve,Re)}function An(i){i._transformAlgorithm=void 0,i._flushAlgorithm=void 0}function kn(i,u){var F=i._controlledTransformStream,ve=F._readable._readableStreamController;if(!xt(ve))throw new TypeError("Readable side is not in a state that permits enqueue");try{dr(ve,u)}catch(Oe){throw vr(F,Oe),F._readable._storedError}var Re=ca(ve);Re!==F._backpressure&&gr(F,!0)}function Ia(i,u){pr(i._controlledTransformStream,u)}function Cn(i,u){var F=i._transformAlgorithm(u);return I(F,void 0,function(ve){throw pr(i._controlledTransformStream,ve),ve})}function Fa(i){var u=i._controlledTransformStream,F=u._readable._readableStreamController;Gt(F);var ve=new TypeError("TransformStream terminated");vr(u,ve)}function Ma(i,u){var F=i._transformStreamController;if(i._backpressure){var ve=i._backpressureChangePromise;return I(ve,function(){var Re=i._writable,Oe=Re._state;if(Oe==="erroring")throw Re._storedError;return Cn(F,u)})}return Cn(F,u)}function La(i,u){return pr(i,u),A(void 0)}function Da(i){var u=i._readable,F=i._transformStreamController,ve=F._flushAlgorithm();return An(F),I(ve,function(){if(u._state==="errored")throw u._storedError;Gt(u._readableStreamController)},function(Re){throw pr(i,Re),u._storedError})}function Na(i){return gr(i,!1),i._backpressureChangePromise}function br(i){return new TypeError("TransformStreamDefaultController.prototype."+i+" can only be used on a TransformStreamDefaultController")}function Rn(i){return new TypeError("TransformStream.prototype."+i+" can only be used on a TransformStream")}t.ByteLengthQueuingStrategy=Wr,t.CountQueuingStrategy=jr,t.ReadableByteStreamController=Ze,t.ReadableStream=Et,t.ReadableStreamBYOBReader=Qt,t.ReadableStreamBYOBRequest=it,t.ReadableStreamDefaultController=jt,t.ReadableStreamDefaultReader=ye,t.TransformStream=Ur,t.TransformStreamDefaultController=yr,t.WritableStream=tr,t.WritableStreamDefaultController=Bt,t.WritableStreamDefaultWriter=ar,Object.defineProperty(t,"__esModule",{value:!0})})},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.version=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultCMapReaderFactory=exports.DefaultCanvasFactory=exports.build=void 0;var _regenerator=_interopRequireDefault(__w_pdfjs_require__(2)),_util=__w_pdfjs_require__(4),_display_utils=__w_pdfjs_require__(1),_font_loader=__w_pdfjs_require__(114),_node_utils=__w_pdfjs_require__(115),_annotation_storage=__w_pdfjs_require__(116),_api_compatibility=__w_pdfjs_require__(117),_canvas=__w_pdfjs_require__(118),_worker_options=__w_pdfjs_require__(120),_is_node=__w_pdfjs_require__(6),_message_handler=__w_pdfjs_require__(121),_metadata=__w_pdfjs_require__(122),_optional_content_config=__w_pdfjs_require__(123),_transport_stream=__w_pdfjs_require__(124);function _interopRequireDefault(r){return r&&r.__esModule?r:{default:r}}function asyncGeneratorStep(r,a,t,e,o,s,l){try{var c=r[s](l),d=c.value}catch(P){t(P);return}c.done?a(d):Promise.resolve(d).then(e,o)}function _asyncToGenerator(r){return function(){var a=this,t=arguments;return new Promise(function(e,o){var s=r.apply(a,t);function l(d){asyncGeneratorStep(s,e,o,l,c,"next",d)}function c(d){asyncGeneratorStep(s,e,o,l,c,"throw",d)}l(void 0)})}}function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _iterableToArray(r){if(typeof Symbol!="undefined"&&r[Symbol.iterator]!=null||r["@@iterator"]!=null)return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _createForOfIteratorHelper(r,a){var t=typeof Symbol!="undefined"&&r[Symbol.iterator]||r["@@iterator"];if(!t){if(Array.isArray(r)||(t=_unsupportedIterableToArray(r))||a&&r&&typeof r.length=="number"){t&&(r=t);var e=0,o=function(){};return{s:o,n:function(){return e>=r.length?{done:!0}:{done:!1,value:r[e++]}},e:function(P){throw P},f:o}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,l=!1,c;return{s:function(){t=t.call(r)},n:function(){var P=t.next();return s=P.done,P},e:function(P){l=!0,c=P},f:function(){try{!s&&t.return!=null&&t.return()}finally{if(l)throw c}}}}function _classCallCheck(r,a){if(!(r instanceof a))throw new TypeError("Cannot call a class as a function")}function _defineProperties(r,a){for(var t=0;t<a.length;t++){var e=a[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(r,e.key,e)}}function _createClass(r,a,t){return a&&_defineProperties(r.prototype,a),t&&_defineProperties(r,t),r}function _slicedToArray(r,a){return _arrayWithHoles(r)||_iterableToArrayLimit(r,a)||_unsupportedIterableToArray(r,a)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _unsupportedIterableToArray(r,a){if(!!r){if(typeof r=="string")return _arrayLikeToArray(r,a);var t=Object.prototype.toString.call(r).slice(8,-1);if(t==="Object"&&r.constructor&&(t=r.constructor.name),t==="Map"||t==="Set")return Array.from(r);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(r,a)}}function _arrayLikeToArray(r,a){(a==null||a>r.length)&&(a=r.length);for(var t=0,e=new Array(a);t<a;t++)e[t]=r[t];return e}function _iterableToArrayLimit(r,a){var t=r&&(typeof Symbol!="undefined"&&r[Symbol.iterator]||r["@@iterator"]);if(t!=null){var e=[],o=!0,s=!1,l,c;try{for(t=t.call(r);!(o=(l=t.next()).done)&&(e.push(l.value),!(a&&e.length===a));o=!0);}catch(d){s=!0,c=d}finally{try{!o&&t.return!=null&&t.return()}finally{if(s)throw c}}return e}}function _arrayWithHoles(r){if(Array.isArray(r))return r}function _typeof(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(t){return typeof t}:_typeof=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(r)}var DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DefaultCanvasFactory=_is_node.isNodeJS?_node_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;var DefaultCMapReaderFactory=_is_node.isNodeJS?_node_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;var createPDFNetworkStream;function setPDFNetworkStreamFactory(r){createPDFNetworkStream=r}function getDocument(r){var a=new PDFDocumentLoadingTask,t;if(typeof r=="string"||r instanceof URL)t={url:r};else if((0,_util.isArrayBuffer)(r))t={data:r};else if(r instanceof PDFDataRangeTransport)t={range:r};else{if(_typeof(r)!=="object")throw new Error("Invalid parameter in getDocument, need either string, URL, Uint8Array, or parameter object.");if(!r.url&&!r.data&&!r.range)throw new Error("Invalid parameter object: need either .data, .range or .url");t=r}var e=Object.create(null),o=null,s=null;for(var l in t){var c=t[l];switch(l){case"url":if(typeof window!="undefined")try{e[l]=new URL(c,window.location).href;continue}catch(x){(0,_util.warn)('Cannot create valid URL: "'.concat(x,'".'))}else if(typeof c=="string"||c instanceof URL){e[l]=c.toString();continue}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");case"range":o=c;continue;case"worker":s=c;continue;case"data":if(_is_node.isNodeJS&&typeof Buffer!="undefined"&&c instanceof Buffer)e[l]=new Uint8Array(c);else{if(c instanceof Uint8Array)break;if(typeof c=="string")e[l]=(0,_util.stringToBytes)(c);else if(_typeof(c)==="object"&&c!==null&&!isNaN(c.length))e[l]=new Uint8Array(c);else if((0,_util.isArrayBuffer)(c))e[l]=new Uint8Array(c);else throw new Error("Invalid PDF binary data: either typed array, string, or array-like object is expected in the data property.")}continue}e[l]=c}if(e.rangeChunkSize=e.rangeChunkSize||DEFAULT_RANGE_CHUNK_SIZE,e.CMapReaderFactory=e.CMapReaderFactory||DefaultCMapReaderFactory,e.ignoreErrors=e.stopAtErrors!==!0,e.fontExtraProperties=e.fontExtraProperties===!0,e.pdfBug=e.pdfBug===!0,e.enableXfa=e.enableXfa===!0,(typeof e.docBaseUrl!="string"||(0,_display_utils.isDataScheme)(e.docBaseUrl))&&(e.docBaseUrl=null),Number.isInteger(e.maxImageSize)||(e.maxImageSize=-1),typeof e.isEvalSupported!="boolean"&&(e.isEvalSupported=!0),typeof e.disableFontFace!="boolean"&&(e.disableFontFace=_api_compatibility.apiCompatibilityParams.disableFontFace||!1),typeof e.ownerDocument=="undefined"&&(e.ownerDocument=globalThis.document),typeof e.disableRange!="boolean"&&(e.disableRange=!1),typeof e.disableStream!="boolean"&&(e.disableStream=!1),typeof e.disableAutoFetch!="boolean"&&(e.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(e.verbosity),!s){var d={verbosity:e.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};s=d.port?PDFWorker.fromPort(d):new PDFWorker(d),a._worker=s}var P=a.docId;return s.promise.then(function(){if(a.destroyed)throw new Error("Loading aborted");var x=_fetchDocument(s,e,o,P),$=new Promise(function(j){var O;o?O=new _transport_stream.PDFDataTransportStream({length:e.length,initialData:e.initialData,progressiveDone:e.progressiveDone,contentDispositionFilename:e.contentDispositionFilename,disableRange:e.disableRange,disableStream:e.disableStream},o):e.data||(O=createPDFNetworkStream({url:e.url,length:e.length,httpHeaders:e.httpHeaders,withCredentials:e.withCredentials,rangeChunkSize:e.rangeChunkSize,disableRange:e.disableRange,disableStream:e.disableStream})),j(O)});return Promise.all([x,$]).then(function(j){var O=_slicedToArray(j,2),A=O[0],y=O[1];if(a.destroyed)throw new Error("Loading aborted");var G=new _message_handler.MessageHandler(P,A,s.port);G.postMessageTransfers=s.postMessageTransfers;var ue=new WorkerTransport(G,a,y,e);a._transport=ue,G.send("Ready",null)})}).catch(a._capability.reject),a}function _fetchDocument(r,a,t,e){return r.destroyed?Promise.reject(new Error("Worker was destroyed")):(t&&(a.length=t.length,a.initialData=t.initialData,a.progressiveDone=t.progressiveDone,a.contentDispositionFilename=t.contentDispositionFilename),r.messageHandler.sendWithPromise("GetDocRequest",{docId:e,apiVersion:"2.9.359",source:{data:a.data,url:a.url,password:a.password,disableAutoFetch:a.disableAutoFetch,rangeChunkSize:a.rangeChunkSize,length:a.length},maxImageSize:a.maxImageSize,disableFontFace:a.disableFontFace,postMessageTransfers:r.postMessageTransfers,docBaseUrl:a.docBaseUrl,ignoreErrors:a.ignoreErrors,isEvalSupported:a.isEvalSupported,fontExtraProperties:a.fontExtraProperties,enableXfa:a.enableXfa}).then(function(o){if(r.destroyed)throw new Error("Worker was destroyed");return o}))}var PDFDocumentLoadingTask=function(){var a=0,t=function(){function e(){_classCallCheck(this,e),this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d"+a++,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}return _createClass(e,[{key:"promise",get:function(){return this._capability.promise}},{key:"destroy",value:function(){var s=this;this.destroyed=!0;var l=this._transport?this._transport.destroy():Promise.resolve();return l.then(function(){s._transport=null,s._worker&&(s._worker.destroy(),s._worker=null)})}}]),e}();return t}(),PDFDataRangeTransport=function(){function r(a,t){var e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null;_classCallCheck(this,r),this.length=a,this.initialData=t,this.progressiveDone=e,this.contentDispositionFilename=o,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}return _createClass(r,[{key:"addRangeListener",value:function(t){this._rangeListeners.push(t)}},{key:"addProgressListener",value:function(t){this._progressListeners.push(t)}},{key:"addProgressiveReadListener",value:function(t){this._progressiveReadListeners.push(t)}},{key:"addProgressiveDoneListener",value:function(t){this._progressiveDoneListeners.push(t)}},{key:"onDataRange",value:function(t,e){var o=_createForOfIteratorHelper(this._rangeListeners),s;try{for(o.s();!(s=o.n()).done;){var l=s.value;l(t,e)}}catch(c){o.e(c)}finally{o.f()}}},{key:"onDataProgress",value:function(t,e){var o=this;this._readyCapability.promise.then(function(){var s=_createForOfIteratorHelper(o._progressListeners),l;try{for(s.s();!(l=s.n()).done;){var c=l.value;c(t,e)}}catch(d){s.e(d)}finally{s.f()}})}},{key:"onDataProgressiveRead",value:function(t){var e=this;this._readyCapability.promise.then(function(){var o=_createForOfIteratorHelper(e._progressiveReadListeners),s;try{for(o.s();!(s=o.n()).done;){var l=s.value;l(t)}}catch(c){o.e(c)}finally{o.f()}})}},{key:"onDataProgressiveDone",value:function(){var t=this;this._readyCapability.promise.then(function(){var e=_createForOfIteratorHelper(t._progressiveDoneListeners),o;try{for(e.s();!(o=e.n()).done;){var s=o.value;s()}}catch(l){e.e(l)}finally{e.f()}})}},{key:"transportReady",value:function(){this._readyCapability.resolve()}},{key:"requestDataRange",value:function(t,e){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}},{key:"abort",value:function(){}}]),r}();exports.PDFDataRangeTransport=PDFDataRangeTransport;var PDFDocumentProxy=function(){function r(a,t){_classCallCheck(this,r),this._pdfInfo=a,this._transport=t}return _createClass(r,[{key:"annotationStorage",get:function(){return this._transport.annotationStorage}},{key:"numPages",get:function(){return this._pdfInfo.numPages}},{key:"fingerprint",get:function(){return this._pdfInfo.fingerprint}},{key:"isPureXfa",get:function(){return this._pdfInfo.isPureXfa}},{key:"getPage",value:function(t){return this._transport.getPage(t)}},{key:"getPageIndex",value:function(t){return this._transport.getPageIndex(t)}},{key:"getDestinations",value:function(){return this._transport.getDestinations()}},{key:"getDestination",value:function(t){return this._transport.getDestination(t)}},{key:"getPageLabels",value:function(){return this._transport.getPageLabels()}},{key:"getPageLayout",value:function(){return this._transport.getPageLayout()}},{key:"getPageMode",value:function(){return this._transport.getPageMode()}},{key:"getViewerPreferences",value:function(){return this._transport.getViewerPreferences()}},{key:"getOpenAction",value:function(){return this._transport.getOpenAction()}},{key:"getAttachments",value:function(){return this._transport.getAttachments()}},{key:"getJavaScript",value:function(){return this._transport.getJavaScript()}},{key:"getJSActions",value:function(){return this._transport.getDocJSActions()}},{key:"getOutline",value:function(){return this._transport.getOutline()}},{key:"getOptionalContentConfig",value:function(){return this._transport.getOptionalContentConfig()}},{key:"getPermissions",value:function(){return this._transport.getPermissions()}},{key:"getMetadata",value:function(){return this._transport.getMetadata()}},{key:"getMarkInfo",value:function(){return this._transport.getMarkInfo()}},{key:"getData",value:function(){return this._transport.getData()}},{key:"getDownloadInfo",value:function(){return this._transport.downloadInfoCapability.promise}},{key:"getStats",value:function(){return this._transport.getStats()}},{key:"cleanup",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;return this._transport.startCleanup(t||this.isPureXfa)}},{key:"destroy",value:function(){return this.loadingTask.destroy()}},{key:"loadingParams",get:function(){return this._transport.loadingParams}},{key:"loadingTask",get:function(){return this._transport.loadingTask}},{key:"saveDocument",value:function(){return arguments.length>0&&(0,_display_utils.deprecated)("saveDocument no longer accepts any options."),this._transport.annotationStorage.size<=0&&(0,_display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this._transport.saveDocument()}},{key:"getFieldObjects",value:function(){return this._transport.getFieldObjects()}},{key:"hasJSActions",value:function(){return this._transport.hasJSActions()}},{key:"getCalculationOrderIds",value:function(){return this._transport.getCalculationOrderIds()}}]),r}();exports.PDFDocumentProxy=PDFDocumentProxy;var PDFPageProxy=function(){function r(a,t,e,o){var s=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!1;_classCallCheck(this,r),this._pageIndex=a,this._pageInfo=t,this._ownerDocument=o,this._transport=e,this._stats=s?new _display_utils.StatTimer:null,this._pdfBug=s,this.commonObjs=e.commonObjs,this.objs=new PDFObjects,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this._intentStates=new Map,this.destroyed=!1}return _createClass(r,[{key:"pageNumber",get:function(){return this._pageIndex+1}},{key:"rotate",get:function(){return this._pageInfo.rotate}},{key:"ref",get:function(){return this._pageInfo.ref}},{key:"userUnit",get:function(){return this._pageInfo.userUnit}},{key:"view",get:function(){return this._pageInfo.view}},{key:"getViewport",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=t.scale,o=t.rotation,s=o===void 0?this.rotate:o,l=t.offsetX,c=l===void 0?0:l,d=t.offsetY,P=d===void 0?0:d,x=t.dontFlip,$=x===void 0?!1:x;return new _display_utils.PageViewport({viewBox:this.view,scale:e,rotation:s,offsetX:c,offsetY:P,dontFlip:$})}},{key:"getAnnotations",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=t.intent,o=e===void 0?null:e;return(!this._annotationsPromise||this._annotationsIntent!==o)&&(this._annotationsPromise=this._transport.getAnnotations(this._pageIndex,o),this._annotationsIntent=o),this._annotationsPromise}},{key:"getJSActions",value:function(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex))}},{key:"getXfa",value:function(){return this._xfaPromise||(this._xfaPromise=this._transport.getPageXfa(this._pageIndex))}},{key:"render",value:function(t){var e,o=this,s,l=t.canvasContext,c=t.viewport,d=t.intent,P=d===void 0?"display":d,x=t.renderInteractiveForms,$=x===void 0?!1:x,j=t.transform,O=j===void 0?null:j,A=t.imageLayer,y=A===void 0?null:A,G=t.canvasFactory,ue=G===void 0?null:G,K=t.background,U=K===void 0?null:K,I=t.includeAnnotationStorage,B=I===void 0?!1:I,C=t.optionalContentConfigPromise,W=C===void 0?null:C;((e=arguments[0])===null||e===void 0?void 0:e.annotationStorage)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts an `annotationStorage` option, please use the `includeAnnotationStorage`-boolean instead."),B||(B=!!arguments[0].annotationStorage)),this._stats&&this._stats.time("Overall");var b=P==="print"?"print":"display";this.pendingCleanup=!1,W||(W=this._transport.getOptionalContentConfig());var S=this._intentStates.get(b);S||(S=Object.create(null),this._intentStates.set(b,S)),S.streamReaderCancelTimeout&&(clearTimeout(S.streamReaderCancelTimeout),S.streamReaderCancelTimeout=null);var w=ue||new DefaultCanvasFactory({ownerDocument:this._ownerDocument}),k=B?this._transport.annotationStorage.serializable:null;S.displayReadyCapability||(S.displayReadyCapability=(0,_util.createPromiseCapability)(),S.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:b,renderInteractiveForms:$===!0,annotationStorage:k}));var z=function(ae){S.renderTasks.delete(Q),(o.cleanupAfterRender||b==="print")&&(o.pendingCleanup=!0),o._tryCleanup(),ae?(Q.capability.reject(ae),o._abortOperatorList({intentState:S,reason:ae})):Q.capability.resolve(),o._stats&&(o._stats.timeEnd("Rendering"),o._stats.timeEnd("Overall"))},Q=new InternalRenderTask({callback:z,params:{canvasContext:l,viewport:c,transform:O,imageLayer:y,background:U},objs:this.objs,commonObjs:this.commonObjs,operatorList:S.operatorList,pageIndex:this._pageIndex,canvasFactory:w,useRequestAnimationFrame:b!=="print",pdfBug:this._pdfBug});((s=S).renderTasks||(s.renderTasks=new Set)).add(Q);var Y=Q.task;return Promise.all([S.displayReadyCapability.promise,W]).then(function(re){var ae=_slicedToArray(re,2),ce=ae[0],J=ae[1];if(o.pendingCleanup){z();return}o._stats&&o._stats.time("Rendering"),Q.initializeGraphics({transparency:ce,optionalContentConfig:J}),Q.operatorListChanged()}).catch(z),Y}},{key:"getOperatorList",value:function(){function t(){o.operatorList.lastChunk&&(o.opListReadCapability.resolve(o.operatorList),o.renderTasks.delete(s))}var e="oplist",o=this._intentStates.get(e);o||(o=Object.create(null),this._intentStates.set(e,o));var s;if(!o.opListReadCapability){var l;s=Object.create(null),s.operatorListChanged=t,o.opListReadCapability=(0,_util.createPromiseCapability)(),((l=o).renderTasks||(l.renderTasks=new Set)).add(s),o.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:e})}return o.opListReadCapability.promise}},{key:"streamTextContent",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=t.normalizeWhitespace,o=e===void 0?!1:e,s=t.disableCombineTextItems,l=s===void 0?!1:s,c=t.includeMarkedContent,d=c===void 0?!1:c,P=100;return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,normalizeWhitespace:o===!0,combineTextItems:l!==!0,includeMarkedContent:d===!0},{highWaterMark:P,size:function($){return $.items.length}})}},{key:"getTextContent",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=this.streamTextContent(t);return new Promise(function(o,s){function l(){c.read().then(function(P){var x,$=P.value,j=P.done;if(j){o(d);return}Object.assign(d.styles,$.styles),(x=d.items).push.apply(x,_toConsumableArray($.items)),l()},s)}var c=e.getReader(),d={items:[],styles:Object.create(null)};l()})}},{key:"getStructTree",value:function(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex))}},{key:"_destroy",value:function(){this.destroyed=!0,this._transport.pageCache[this._pageIndex]=null;var t=[],e=_createForOfIteratorHelper(this._intentStates),o;try{for(e.s();!(o=e.n()).done;){var s=_slicedToArray(o.value,2),l=s[0],c=s[1];if(this._abortOperatorList({intentState:c,reason:new Error("Page was destroyed."),force:!0}),l!=="oplist"){var d=_createForOfIteratorHelper(c.renderTasks),P;try{for(d.s();!(P=d.n()).done;){var x=P.value;t.push(x.completed),x.cancel()}}catch($){d.e($)}finally{d.f()}}}}catch($){e.e($)}finally{e.f()}return this.objs.clear(),this._annotationsPromise=null,this._jsActionsPromise=null,this._xfaPromise=null,this._structTreePromise=null,this.pendingCleanup=!1,Promise.all(t)}},{key:"cleanup",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;return this.pendingCleanup=!0,this._tryCleanup(t)}},{key:"_tryCleanup",value:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;if(!this.pendingCleanup)return!1;var e=_createForOfIteratorHelper(this._intentStates.values()),o;try{for(e.s();!(o=e.n()).done;){var s=o.value,l=s.renderTasks,c=s.operatorList;if(l.size>0||!c.lastChunk)return!1}}catch(d){e.e(d)}finally{e.f()}return this._intentStates.clear(),this.objs.clear(),this._annotationsPromise=null,this._jsActionsPromise=null,this._xfaPromise=null,this._structTreePromise=null,t&&this._stats&&(this._stats=new _display_utils.StatTimer),this.pendingCleanup=!1,!0}},{key:"_startRenderPage",value:function(t,e){var o=this._intentStates.get(e);!o||(this._stats&&this._stats.timeEnd("Page Request"),o.displayReadyCapability&&o.displayReadyCapability.resolve(t))}},{key:"_renderPageChunk",value:function(t,e){for(var o=0,s=t.length;o<s;o++)e.operatorList.fnArray.push(t.fnArray[o]),e.operatorList.argsArray.push(t.argsArray[o]);e.operatorList.lastChunk=t.lastChunk;var l=_createForOfIteratorHelper(e.renderTasks),c;try{for(l.s();!(c=l.n()).done;){var d=c.value;d.operatorListChanged()}}catch(P){l.e(P)}finally{l.f()}t.lastChunk&&this._tryCleanup()}},{key:"_pumpOperatorList",value:function(t){var e=this;(0,_util.assert)(t.intent,'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');var o=this._transport.messageHandler.sendWithStream("GetOperatorList",t),s=o.getReader(),l=this._intentStates.get(t.intent);l.streamReader=s;var c=function d(){s.read().then(function(P){var x=P.value,$=P.done;if($){l.streamReader=null;return}e._transport.destroyed||(e._renderPageChunk(x,l),d())},function(P){if(l.streamReader=null,!e._transport.destroyed){if(l.operatorList){l.operatorList.lastChunk=!0;var x=_createForOfIteratorHelper(l.renderTasks),$;try{for(x.s();!($=x.n()).done;){var j=$.value;j.operatorListChanged()}}catch(O){x.e(O)}finally{x.f()}e._tryCleanup()}if(l.displayReadyCapability)l.displayReadyCapability.reject(P);else if(l.opListReadCapability)l.opListReadCapability.reject(P);else throw P}})};c()}},{key:"_abortOperatorList",value:function(t){var e=this,o=t.intentState,s=t.reason,l=t.force,c=l===void 0?!1:l;if((0,_util.assert)(s instanceof Error||_typeof(s)==="object"&&s!==null,'PDFPageProxy._abortOperatorList: Expected "reason" argument.'),!!o.streamReader){if(!c){if(o.renderTasks.size>0)return;if(s instanceof _display_utils.RenderingCancelledException){o.streamReaderCancelTimeout=setTimeout(function(){e._abortOperatorList({intentState:o,reason:s,force:!0}),o.streamReaderCancelTimeout=null},RENDERING_CANCELLED_TIMEOUT);return}}if(o.streamReader.cancel(new _util.AbortException(s==null?void 0:s.message)),o.streamReader=null,!this._transport.destroyed){var d=_createForOfIteratorHelper(this._intentStates),P;try{for(d.s();!(P=d.n()).done;){var x=_slicedToArray(P.value,2),$=x[0],j=x[1];if(j===o){this._intentStates.delete($);break}}}catch(O){d.e(O)}finally{d.f()}this.cleanup()}}}},{key:"stats",get:function(){return this._stats}}]),r}();exports.PDFPageProxy=PDFPageProxy;var LoopbackPort=function(){function r(){_classCallCheck(this,r),this._listeners=[],this._deferred=Promise.resolve(void 0)}return _createClass(r,[{key:"postMessage",value:function(t,e){var o=this;function s(d){if(_typeof(d)!=="object"||d===null)return d;if(l.has(d))return l.get(d);var P,x;if((P=d.buffer)&&(0,_util.isArrayBuffer)(P))return e!=null&&e.includes(P)?x=new d.constructor(P,d.byteOffset,d.byteLength):x=new d.constructor(d),l.set(d,x),x;if(d instanceof Map){x=new Map,l.set(d,x);var $=_createForOfIteratorHelper(d),j;try{for($.s();!(j=$.n()).done;){var O=_slicedToArray(j.value,2),A=O[0],y=O[1];x.set(A,s(y))}}catch(W){$.e(W)}finally{$.f()}return x}if(d instanceof Set){x=new Set,l.set(d,x);var G=_createForOfIteratorHelper(d),ue;try{for(G.s();!(ue=G.n()).done;){var K=ue.value;x.add(s(K))}}catch(W){G.e(W)}finally{G.f()}return x}if(d instanceof URL)throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(d));x=Array.isArray(d)?[]:Object.create(null),l.set(d,x);for(var U in d){for(var I=void 0,B=d;!(I=Object.getOwnPropertyDescriptor(B,U));)B=Object.getPrototypeOf(B);if(typeof I.value!="undefined"){if(typeof I.value=="function"){var C;if((C=d.hasOwnProperty)!==null&&C!==void 0&&C.call(d,U))throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(d[U]));continue}x[U]=s(I.value)}}return x}var l=new WeakMap,c={data:s(t)};this._deferred.then(function(){var d=_createForOfIteratorHelper(o._listeners),P;try{for(d.s();!(P=d.n()).done;){var x=P.value;x.call(o,c)}}catch($){d.e($)}finally{d.f()}})}},{key:"addEventListener",value:function(t,e){this._listeners.push(e)}},{key:"removeEventListener",value:function(t,e){var o=this._listeners.indexOf(e);this._listeners.splice(o,1)}},{key:"terminate",value:function(){this._listeners.length=0}}]),r}();exports.LoopbackPort=LoopbackPort;var PDFWorker=function(){var pdfWorkerPorts=new WeakMap,isWorkerDisabled=!1,fallbackWorkerSrc,nextFakeWorkerId=0,fakeWorkerCapability;if(_is_node.isNodeJS&&typeof commonjsRequire=="function")isWorkerDisabled=!0,fallbackWorkerSrc="./pdf.worker.js";else if((typeof document=="undefined"?"undefined":_typeof(document))==="object"&&"currentScript"in document){var _document$currentScri,pdfjsFilePath=(_document$currentScri=document.currentScript)===null||_document$currentScri===void 0?void 0:_document$currentScri.src;pdfjsFilePath&&(fallbackWorkerSrc=pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}function _getWorkerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(typeof fallbackWorkerSrc!="undefined")return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}function getMainThreadWorkerMessageHandler(){var r;try{var a;r=(a=globalThis.pdfjsWorker)===null||a===void 0?void 0:a.WorkerMessageHandler}catch(t){}return r||null}function setupFakeWorkerGlobal(){if(fakeWorkerCapability)return fakeWorkerCapability.promise;fakeWorkerCapability=(0,_util.createPromiseCapability)();var loader=function(){var _ref12=_asyncToGenerator(_regenerator.default.mark(function _callee(){var mainWorkerMessageHandler,worker;return _regenerator.default.wrap(function(_context){for(;;)switch(_context.prev=_context.next){case 0:if(mainWorkerMessageHandler=getMainThreadWorkerMessageHandler(),!mainWorkerMessageHandler){_context.next=3;break}return _context.abrupt("return",mainWorkerMessageHandler);case 3:if(!(_is_node.isNodeJS&&typeof commonjsRequire=="function")){_context.next=6;break}return worker=eval("require")(_getWorkerSrc()),_context.abrupt("return",worker.WorkerMessageHandler);case 6:return _context.next=8,(0,_display_utils.loadScript)(_getWorkerSrc());case 8:return _context.abrupt("return",window.pdfjsWorker.WorkerMessageHandler);case 9:case"end":return _context.stop()}},_callee)}));return function(){return _ref12.apply(this,arguments)}}();return loader().then(fakeWorkerCapability.resolve,fakeWorkerCapability.reject),fakeWorkerCapability.promise}function createCDNWrapper(r){var a="importScripts('"+r+"');";return URL.createObjectURL(new Blob([a]))}var PDFWorker=function(){function r(){var a=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=a.name,e=t===void 0?null:t,o=a.port,s=o===void 0?null:o,l=a.verbosity,c=l===void 0?(0,_util.getVerbosityLevel)():l;if(_classCallCheck(this,r),s&&pdfWorkerPorts.has(s))throw new Error("Cannot use more than one PDFWorker per port");if(this.name=e,this.destroyed=!1,this.postMessageTransfers=!0,this.verbosity=c,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,s){pdfWorkerPorts.set(s,this),this._initializeFromPort(s);return}this._initialize()}return _createClass(r,[{key:"promise",get:function(){return this._readyCapability.promise}},{key:"port",get:function(){return this._port}},{key:"messageHandler",get:function(){return this._messageHandler}},{key:"_initializeFromPort",value:function(t){this._port=t,this._messageHandler=new _message_handler.MessageHandler("main","worker",t),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve()}},{key:"_initialize",value:function(){var t=this;if(typeof Worker!="undefined"&&!isWorkerDisabled&&!getMainThreadWorkerMessageHandler()){var e=_getWorkerSrc();try{(0,_util.isSameOrigin)(window.location.href,e)||(e=createCDNWrapper(new URL(e,window.location).href));var o=new Worker(e),s=new _message_handler.MessageHandler("main","worker",o),l=function(){o.removeEventListener("error",c),s.destroy(),o.terminate(),t.destroyed?t._readyCapability.reject(new Error("Worker was destroyed")):t._setupFakeWorker()},c=function(){t._webWorker||l()};o.addEventListener("error",c),s.on("test",function(P){if(o.removeEventListener("error",c),t.destroyed){l();return}P?(t._messageHandler=s,t._port=o,t._webWorker=o,P.supportTransfers||(t.postMessageTransfers=!1),t._readyCapability.resolve(),s.send("configure",{verbosity:t.verbosity})):(t._setupFakeWorker(),s.destroy(),o.terminate())}),s.on("ready",function(P){if(o.removeEventListener("error",c),t.destroyed){l();return}try{d()}catch(x){t._setupFakeWorker()}});var d=function(){var x=new Uint8Array([t.postMessageTransfers?255:0]);try{s.send("test",x,[x.buffer])}catch($){(0,_util.warn)("Cannot use postMessage transfers."),x[0]=0,s.send("test",x)}};d();return}catch(P){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}},{key:"_setupFakeWorker",value:function(){var t=this;isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),isWorkerDisabled=!0),setupFakeWorkerGlobal().then(function(e){if(t.destroyed){t._readyCapability.reject(new Error("Worker was destroyed"));return}var o=new LoopbackPort;t._port=o;var s="fake"+nextFakeWorkerId++,l=new _message_handler.MessageHandler(s+"_worker",s,o);e.setup(l,o);var c=new _message_handler.MessageHandler(s,s+"_worker",o);t._messageHandler=c,t._readyCapability.resolve(),c.send("configure",{verbosity:t.verbosity})}).catch(function(e){t._readyCapability.reject(new Error('Setting up fake worker failed: "'.concat(e.message,'".')))})}},{key:"destroy",value:function(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),pdfWorkerPorts.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}}],[{key:"fromPort",value:function(t){if(!t||!t.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return pdfWorkerPorts.has(t.port)?pdfWorkerPorts.get(t.port):new r(t)}},{key:"getWorkerSrc",value:function(){return _getWorkerSrc()}}]),r}();return PDFWorker}();exports.PDFWorker=PDFWorker;var WorkerTransport=function(){function r(a,t,e,o){_classCallCheck(this,r),this.messageHandler=a,this.loadingTask=t,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:t.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:o.ownerDocument}),this._params=o,this.CMapReaderFactory=new o.CMapReaderFactory({baseUrl:o.cMapUrl,isCompressed:o.cMapPacked}),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=e,this._fullReader=null,this._lastProgress=null,this.pageCache=[],this.pagePromises=[],this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}return _createClass(r,[{key:"annotationStorage",get:function(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}},{key:"destroy",value:function(){var t=this;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));var e=[],o=_createForOfIteratorHelper(this.pageCache),s;try{for(o.s();!(s=o.n()).done;){var l=s.value;l&&e.push(l._destroy())}}catch(d){o.e(d)}finally{o.f()}this.pageCache.length=0,this.pagePromises.length=0,this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();var c=this.messageHandler.sendWithPromise("Terminate",null);return e.push(c),Promise.all(e).then(function(){t.commonObjs.clear(),t.fontLoader.clear(),t._hasJSActionsPromise=null,t._networkStream&&t._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),t.messageHandler&&(t.messageHandler.destroy(),t.messageHandler=null),t.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}},{key:"setupMessageHandler",value:function(){var t=this,e=this.messageHandler,o=this.loadingTask;e.on("GetReader",function(s,l){(0,_util.assert)(t._networkStream,"GetReader - no `IPDFStream` instance available."),t._fullReader=t._networkStream.getFullReader(),t._fullReader.onProgress=function(c){t._lastProgress={loaded:c.loaded,total:c.total}},l.onPull=function(){t._fullReader.read().then(function(c){var d=c.value,P=c.done;if(P){l.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(d),"GetReader - expected an ArrayBuffer."),l.enqueue(new Uint8Array(d),1,[d])}).catch(function(c){l.error(c)})},l.onCancel=function(c){t._fullReader.cancel(c),l.ready.catch(function(d){if(!t.destroyed)throw d})}}),e.on("ReaderHeadersReady",function(s){var l=(0,_util.createPromiseCapability)(),c=t._fullReader;return c.headersReady.then(function(){(!c.isStreamingSupported||!c.isRangeSupported)&&(t._lastProgress&&o.onProgress&&o.onProgress(t._lastProgress),c.onProgress=function(d){o.onProgress&&o.onProgress({loaded:d.loaded,total:d.total})}),l.resolve({isStreamingSupported:c.isStreamingSupported,isRangeSupported:c.isRangeSupported,contentLength:c.contentLength})},l.reject),l.promise}),e.on("GetRangeReader",function(s,l){(0,_util.assert)(t._networkStream,"GetRangeReader - no `IPDFStream` instance available.");var c=t._networkStream.getRangeReader(s.begin,s.end);if(!c){l.close();return}l.onPull=function(){c.read().then(function(d){var P=d.value,x=d.done;if(x){l.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(P),"GetRangeReader - expected an ArrayBuffer."),l.enqueue(new Uint8Array(P),1,[P])}).catch(function(d){l.error(d)})},l.onCancel=function(d){c.cancel(d),l.ready.catch(function(P){if(!t.destroyed)throw P})}}),e.on("GetDoc",function(s){var l=s.pdfInfo;t._numPages=l.numPages,o._capability.resolve(new PDFDocumentProxy(l,t))}),e.on("DocException",function(s){var l;switch(s.name){case"PasswordException":l=new _util.PasswordException(s.message,s.code);break;case"InvalidPDFException":l=new _util.InvalidPDFException(s.message);break;case"MissingPDFException":l=new _util.MissingPDFException(s.message);break;case"UnexpectedResponseException":l=new _util.UnexpectedResponseException(s.message,s.status);break;case"UnknownErrorException":l=new _util.UnknownErrorException(s.message,s.details);break}if(!(l instanceof Error)){var c="DocException - expected a valid Error.";(0,_util.warn)(c)}o._capability.reject(l)}),e.on("PasswordRequest",function(s){if(t._passwordCapability=(0,_util.createPromiseCapability)(),o.onPassword){var l=function(d){t._passwordCapability.resolve({password:d})};try{o.onPassword(l,s.code)}catch(c){t._passwordCapability.reject(c)}}else t._passwordCapability.reject(new _util.PasswordException(s.message,s.code));return t._passwordCapability.promise}),e.on("DataLoaded",function(s){o.onProgress&&o.onProgress({loaded:s.length,total:s.length}),t.downloadInfoCapability.resolve(s)}),e.on("StartRenderPage",function(s){if(!t.destroyed){var l=t.pageCache[s.pageIndex];l._startRenderPage(s.transparency,s.intent)}}),e.on("commonobj",function(s){var l;if(!t.destroyed){var c=_slicedToArray(s,3),d=c[0],P=c[1],x=c[2];if(!t.commonObjs.has(d))switch(P){case"Font":var $=t._params;if("error"in x){var j=x.error;(0,_util.warn)("Error during font loading: ".concat(j)),t.commonObjs.resolve(d,j);break}var O=null;$.pdfBug&&(l=globalThis.FontInspector)!==null&&l!==void 0&&l.enabled&&(O={registerFont:function(G,ue){globalThis.FontInspector.fontAdded(G,ue)}});var A=new _font_loader.FontFaceObject(x,{isEvalSupported:$.isEvalSupported,disableFontFace:$.disableFontFace,ignoreErrors:$.ignoreErrors,onUnsupportedFeature:t._onUnsupportedFeature.bind(t),fontRegistry:O});t.fontLoader.bind(A).catch(function(y){return e.sendWithPromise("FontFallback",{id:d})}).finally(function(){!$.fontExtraProperties&&A.data&&(A.data=null),t.commonObjs.resolve(d,A)});break;case"FontPath":case"Image":t.commonObjs.resolve(d,x);break;default:throw new Error("Got unknown common object type ".concat(P))}}}),e.on("obj",function(s){var l;if(!t.destroyed){var c=_slicedToArray(s,4),d=c[0],P=c[1],x=c[2],$=c[3],j=t.pageCache[P];if(!j.objs.has(d))switch(x){case"Image":j.objs.resolve(d,$);var O=8e6;($==null||(l=$.data)===null||l===void 0?void 0:l.length)>O&&(j.cleanupAfterRender=!0);break;default:throw new Error("Got unknown object type ".concat(x))}}}),e.on("DocProgress",function(s){t.destroyed||o.onProgress&&o.onProgress({loaded:s.loaded,total:s.total})}),e.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),e.on("FetchBuiltInCMap",function(s,l){if(t.destroyed){l.error(new Error("Worker was destroyed"));return}var c=!1;l.onPull=function(){if(c){l.close();return}c=!0,t.CMapReaderFactory.fetch(s).then(function(d){l.enqueue(d,1,[d.cMapData.buffer])}).catch(function(d){l.error(d)})}})}},{key:"_onUnsupportedFeature",value:function(t){var e=t.featureId;this.destroyed||this.loadingTask.onUnsupportedFeature&&this.loadingTask.onUnsupportedFeature(e)}},{key:"getData",value:function(){return this.messageHandler.sendWithPromise("GetData",null)}},{key:"getPage",value:function(t){var e=this;if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request"));var o=t-1;if(o in this.pagePromises)return this.pagePromises[o];var s=this.messageHandler.sendWithPromise("GetPage",{pageIndex:o}).then(function(l){if(e.destroyed)throw new Error("Transport destroyed");var c=new PDFPageProxy(o,l,e,e._params.ownerDocument,e._params.pdfBug);return e.pageCache[o]=c,c});return this.pagePromises[o]=s,s}},{key:"getPageIndex",value:function(t){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:t}).catch(function(e){return Promise.reject(new Error(e))})}},{key:"getAnnotations",value:function(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}},{key:"saveDocument",value:function(){var t,e,o=this;return this.messageHandler.sendWithPromise("SaveDocument",{numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:(t=(e=this._fullReader)===null||e===void 0?void 0:e.filename)!==null&&t!==void 0?t:null}).finally(function(){o.annotationStorage.resetModified()})}},{key:"getFieldObjects",value:function(){return this.messageHandler.sendWithPromise("GetFieldObjects",null)}},{key:"hasJSActions",value:function(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise("HasJSActions",null))}},{key:"getCalculationOrderIds",value:function(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}},{key:"getDestinations",value:function(){return this.messageHandler.sendWithPromise("GetDestinations",null)}},{key:"getDestination",value:function(t){return typeof t!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}},{key:"getPageLabels",value:function(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}},{key:"getPageLayout",value:function(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}},{key:"getPageMode",value:function(){return this.messageHandler.sendWithPromise("GetPageMode",null)}},{key:"getViewerPreferences",value:function(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}},{key:"getOpenAction",value:function(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}},{key:"getAttachments",value:function(){return this.messageHandler.sendWithPromise("GetAttachments",null)}},{key:"getJavaScript",value:function(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}},{key:"getDocJSActions",value:function(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}},{key:"getPageJSActions",value:function(t){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:t})}},{key:"getPageXfa",value:function(t){return this.messageHandler.sendWithPromise("GetPageXfa",{pageIndex:t})}},{key:"getStructTree",value:function(t){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:t})}},{key:"getOutline",value:function(){return this.messageHandler.sendWithPromise("GetOutline",null)}},{key:"getOptionalContentConfig",value:function(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(function(t){return new _optional_content_config.OptionalContentConfig(t)})}},{key:"getPermissions",value:function(){return this.messageHandler.sendWithPromise("GetPermissions",null)}},{key:"getMetadata",value:function(){var t=this;return this.messageHandler.sendWithPromise("GetMetadata",null).then(function(e){var o,s,l,c;return{info:e[0],metadata:e[1]?new _metadata.Metadata(e[1]):null,contentDispositionFilename:(o=(s=t._fullReader)===null||s===void 0?void 0:s.filename)!==null&&o!==void 0?o:null,contentLength:(l=(c=t._fullReader)===null||c===void 0?void 0:c.contentLength)!==null&&l!==void 0?l:null}})}},{key:"getMarkInfo",value:function(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}},{key:"getStats",value:function(){return this.messageHandler.sendWithPromise("GetStats",null)}},{key:"startCleanup",value:function(){var a=_asyncToGenerator(_regenerator.default.mark(function e(){var o,s,l,c,d,P=arguments;return _regenerator.default.wrap(function($){for(;;)switch($.prev=$.next){case 0:return o=P.length>0&&P[0]!==void 0?P[0]:!1,$.next=3,this.messageHandler.sendWithPromise("Cleanup",null);case 3:if(!this.destroyed){$.next=5;break}return $.abrupt("return");case 5:s=0,l=this.pageCache.length;case 6:if(!(s<l)){$.next=16;break}if(c=this.pageCache[s],c){$.next=10;break}return $.abrupt("continue",13);case 10:if(d=c.cleanup(),d){$.next=13;break}throw new Error("startCleanup: Page ".concat(s+1," is currently rendering."));case 13:s++,$.next=6;break;case 16:this.commonObjs.clear(),o||this.fontLoader.clear(),this._hasJSActionsPromise=null;case 19:case"end":return $.stop()}},e,this)}));function t(){return a.apply(this,arguments)}return t}()},{key:"loadingParams",get:function(){var t=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:t.disableAutoFetch,disableFontFace:t.disableFontFace})}}]),r}(),PDFObjects=function(){function r(){_classCallCheck(this,r),this._objs=Object.create(null)}return _createClass(r,[{key:"_ensureObj",value:function(t){return this._objs[t]?this._objs[t]:this._objs[t]={capability:(0,_util.createPromiseCapability)(),data:null,resolved:!1}}},{key:"get",value:function(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(e)return this._ensureObj(t).capability.promise.then(e),null;var o=this._objs[t];if(!o||!o.resolved)throw new Error("Requesting object that isn't resolved yet ".concat(t,"."));return o.data}},{key:"has",value:function(t){var e=this._objs[t];return(e==null?void 0:e.resolved)||!1}},{key:"resolve",value:function(t,e){var o=this._ensureObj(t);o.resolved=!0,o.data=e,o.capability.resolve(e)}},{key:"clear",value:function(){this._objs=Object.create(null)}}]),r}(),RenderTask=function(){function r(a){_classCallCheck(this,r),this._internalRenderTask=a,this.onContinue=null}return _createClass(r,[{key:"promise",get:function(){return this._internalRenderTask.capability.promise}},{key:"cancel",value:function(){this._internalRenderTask.cancel()}}]),r}(),InternalRenderTask=function(){var a=new WeakSet,t=function(){function e(o){var s=o.callback,l=o.params,c=o.objs,d=o.commonObjs,P=o.operatorList,x=o.pageIndex,$=o.canvasFactory,j=o.useRequestAnimationFrame,O=j===void 0?!1:j,A=o.pdfBug,y=A===void 0?!1:A;_classCallCheck(this,e),this.callback=s,this.params=l,this.objs=c,this.commonObjs=d,this.operatorListIdx=null,this.operatorList=P,this._pageIndex=x,this.canvasFactory=$,this._pdfBug=y,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=O===!0&&typeof window!="undefined",this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=l.canvasContext.canvas}return _createClass(e,[{key:"completed",get:function(){return this.capability.promise.catch(function(){})}},{key:"initializeGraphics",value:function(s){var l,c=s.transparency,d=c===void 0?!1:c,P=s.optionalContentConfig;if(!this.cancelled){if(this._canvas){if(a.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");a.add(this._canvas)}this._pdfBug&&(l=globalThis.StepperManager)!==null&&l!==void 0&&l.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());var x=this.params,$=x.canvasContext,j=x.viewport,O=x.transform,A=x.imageLayer,y=x.background;this.gfx=new _canvas.CanvasGraphics($,this.commonObjs,this.objs,this.canvasFactory,A,P),this.gfx.beginDrawing({transform:O,viewport:j,transparency:d,background:y}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}}},{key:"cancel",value:function(){var s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&a.delete(this._canvas),this.callback(s||new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex+1),"canvas"))}},{key:"operatorListChanged",value:function(){if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}this.stepper&&this.stepper.updateOperatorList(this.operatorList),!this.running&&this._continue()}},{key:"_continue",value:function(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}},{key:"_scheduleNext",value:function(){var s=this;this._useRequestAnimationFrame?window.requestAnimationFrame(function(){s._nextBound().catch(s._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}},{key:"_next",value:function(){var o=_asyncToGenerator(_regenerator.default.mark(function l(){return _regenerator.default.wrap(function(d){for(;;)switch(d.prev=d.next){case 0:if(!this.cancelled){d.next=2;break}return d.abrupt("return");case 2:this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&a.delete(this._canvas),this.callback()));case 4:case"end":return d.stop()}},l,this)}));function s(){return o.apply(this,arguments)}return s}()}]),e}();return t}(),version="2.9.359";exports.version=version;var build="e667c8cbc";exports.build=build},(r,a,t)=>{function e(S){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(k){return typeof k}:e=function(k){return k&&typeof Symbol=="function"&&k.constructor===Symbol&&k!==Symbol.prototype?"symbol":typeof k},e(S)}Object.defineProperty(a,"__esModule",{value:!0}),a.FontLoader=a.FontFaceObject=void 0;var o=l(t(2)),s=t(4);function l(S){return S&&S.__esModule?S:{default:S}}function c(S,w){if(typeof w!="function"&&w!==null)throw new TypeError("Super expression must either be null or a function");S.prototype=Object.create(w&&w.prototype,{constructor:{value:S,writable:!0,configurable:!0}}),w&&d(S,w)}function d(S,w){return d=Object.setPrototypeOf||function(z,Q){return z.__proto__=Q,z},d(S,w)}function P(S){var w=j();return function(){var z=O(S),Q;if(w){var Y=O(this).constructor;Q=Reflect.construct(z,arguments,Y)}else Q=z.apply(this,arguments);return x(this,Q)}}function x(S,w){return w&&(e(w)==="object"||typeof w=="function")?w:$(S)}function $(S){if(S===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return S}function j(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(S){return!1}}function O(S){return O=Object.setPrototypeOf?Object.getPrototypeOf:function(k){return k.__proto__||Object.getPrototypeOf(k)},O(S)}function A(S,w,k,z,Q,Y,re){try{var ae=S[Y](re),ce=ae.value}catch(J){k(J);return}ae.done?w(ce):Promise.resolve(ce).then(z,Q)}function y(S){return function(){var w=this,k=arguments;return new Promise(function(z,Q){var Y=S.apply(w,k);function re(ce){A(Y,z,Q,re,ae,"next",ce)}function ae(ce){A(Y,z,Q,re,ae,"throw",ce)}re(void 0)})}}function G(S,w){var k=typeof Symbol!="undefined"&&S[Symbol.iterator]||S["@@iterator"];if(!k){if(Array.isArray(S)||(k=ue(S))||w&&S&&typeof S.length=="number"){k&&(S=k);var z=0,Q=function(){};return{s:Q,n:function(){return z>=S.length?{done:!0}:{done:!1,value:S[z++]}},e:function(J){throw J},f:Q}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var Y=!0,re=!1,ae;return{s:function(){k=k.call(S)},n:function(){var J=k.next();return Y=J.done,J},e:function(J){re=!0,ae=J},f:function(){try{!Y&&k.return!=null&&k.return()}finally{if(re)throw ae}}}}function ue(S,w){if(!!S){if(typeof S=="string")return K(S,w);var k=Object.prototype.toString.call(S).slice(8,-1);if(k==="Object"&&S.constructor&&(k=S.constructor.name),k==="Map"||k==="Set")return Array.from(S);if(k==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(k))return K(S,w)}}function K(S,w){(w==null||w>S.length)&&(w=S.length);for(var k=0,z=new Array(w);k<w;k++)z[k]=S[k];return z}function U(S,w){if(!(S instanceof w))throw new TypeError("Cannot call a class as a function")}function I(S,w){for(var k=0;k<w.length;k++){var z=w[k];z.enumerable=z.enumerable||!1,z.configurable=!0,"value"in z&&(z.writable=!0),Object.defineProperty(S,z.key,z)}}function B(S,w,k){return w&&I(S.prototype,w),k&&I(S,k),S}var C=function(){function S(w){var k=w.docId,z=w.onUnsupportedFeature,Q=w.ownerDocument,Y=Q===void 0?globalThis.document:Q;U(this,S),this.constructor===S&&(0,s.unreachable)("Cannot initialize BaseFontLoader."),this.docId=k,this._onUnsupportedFeature=z,this._document=Y,this.nativeFontFaces=[],this.styleElement=null}return B(S,[{key:"addNativeFontFace",value:function(k){this.nativeFontFaces.push(k),this._document.fonts.add(k)}},{key:"insertRule",value:function(k){var z=this.styleElement;z||(z=this.styleElement=this._document.createElement("style"),z.id="PDFJS_FONT_STYLE_TAG_".concat(this.docId),this._document.documentElement.getElementsByTagName("head")[0].appendChild(z));var Q=z.sheet;Q.insertRule(k,Q.cssRules.length)}},{key:"clear",value:function(){var k=G(this.nativeFontFaces),z;try{for(k.s();!(z=k.n()).done;){var Q=z.value;this._document.fonts.delete(Q)}}catch(Y){k.e(Y)}finally{k.f()}this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}},{key:"bind",value:function(){var w=y(o.default.mark(function z(Q){var Y=this,re,ae;return o.default.wrap(function(J){for(;;)switch(J.prev=J.next){case 0:if(!(Q.attached||Q.missingFile)){J.next=2;break}return J.abrupt("return");case 2:if(Q.attached=!0,!this.isFontLoadingAPISupported){J.next=19;break}if(re=Q.createNativeFontFace(),!re){J.next=18;break}return this.addNativeFontFace(re),J.prev=7,J.next=10,re.loaded;case 10:J.next=18;break;case 12:throw J.prev=12,J.t0=J.catch(7),this._onUnsupportedFeature({featureId:s.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,s.warn)("Failed to load font '".concat(re.family,"': '").concat(J.t0,"'.")),Q.disableFontFace=!0,J.t0;case 18:return J.abrupt("return");case 19:if(ae=Q.createFontFaceRule(),!ae){J.next=26;break}if(this.insertRule(ae),!this.isSyncFontLoadingSupported){J.next=24;break}return J.abrupt("return");case 24:return J.next=26,new Promise(function(X){var L=Y._queueLoadingCallback(X);Y._prepareFontLoadEvent([ae],[Q],L)});case 26:case"end":return J.stop()}},z,this,[[7,12]])}));function k(z){return w.apply(this,arguments)}return k}()},{key:"_queueLoadingCallback",value:function(k){(0,s.unreachable)("Abstract method `_queueLoadingCallback`.")}},{key:"isFontLoadingAPISupported",get:function(){var k;return(0,s.shadow)(this,"isFontLoadingAPISupported",!!((k=this._document)!==null&&k!==void 0&&k.fonts))}},{key:"isSyncFontLoadingSupported",get:function(){(0,s.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}},{key:"_loadTestFont",get:function(){(0,s.unreachable)("Abstract method `_loadTestFont`.")}},{key:"_prepareFontLoadEvent",value:function(k,z,Q){(0,s.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}]),S}(),W;a.FontLoader=W,a.FontLoader=W=function(S){c(k,S);var w=P(k);function k(z){var Q;return U(this,k),Q=w.call(this,z),Q.loadingContext={requests:[],nextRequestId:0},Q.loadTestFontId=0,Q}return B(k,[{key:"isSyncFontLoadingSupported",get:function(){var Q=!1;if(typeof navigator=="undefined")Q=!0;else{var Y=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);(Y==null?void 0:Y[1])>=14&&(Q=!0)}return(0,s.shadow)(this,"isSyncFontLoadingSupported",Q)}},{key:"_queueLoadingCallback",value:function(Q){function Y(){for((0,s.assert)(!ae.done,"completeRequest() cannot be called twice."),ae.done=!0;re.requests.length>0&&re.requests[0].done;){var ce=re.requests.shift();setTimeout(ce.callback,0)}}var re=this.loadingContext,ae={id:"pdfjs-font-loading-".concat(re.nextRequestId++),done:!1,complete:Y,callback:Q};return re.requests.push(ae),ae}},{key:"_loadTestFont",get:function(){var Q=function(){return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==")};return(0,s.shadow)(this,"_loadTestFont",Q())}},{key:"_prepareFontLoadEvent",value:function(Q,Y,re){var ae=this;function ce(V,ge){return V.charCodeAt(ge)<<24|V.charCodeAt(ge+1)<<16|V.charCodeAt(ge+2)<<8|V.charCodeAt(ge+3)&255}function J(V,ge,ye,pe){var Se=V.substring(0,ge),ke=V.substring(ge+ye);return Se+pe+ke}var X,L,v=this._document.createElement("canvas");v.width=1,v.height=1;var R=v.getContext("2d"),D=0;function Z(V,ge){if(D++,D>30){(0,s.warn)("Load test font never loaded."),ge();return}R.font="30px "+V,R.fillText(".",0,20);var ye=R.getImageData(0,0,1,1);if(ye.data[3]>0){ge();return}setTimeout(Z.bind(null,V,ge))}var se="lt".concat(Date.now()).concat(this.loadTestFontId++),ie=this._loadTestFont,Pe=976;ie=J(ie,Pe,se.length,se);var le=16,fe=1482184792,N=ce(ie,le);for(X=0,L=se.length-3;X<L;X+=4)N=N-fe+ce(se,X)|0;X<se.length&&(N=N-fe+ce(se+"XXX",X)|0),ie=J(ie,le,4,(0,s.string32)(N));var E="url(data:font/opentype;base64,".concat(btoa(ie),");"),T='@font-face {font-family:"'.concat(se,'";src:').concat(E,"}");this.insertRule(T);var te=[],ne=G(Y),de;try{for(ne.s();!(de=ne.n()).done;){var he=de.value;te.push(he.loadedName)}}catch(V){ne.e(V)}finally{ne.f()}te.push(se);var Ae=this._document.createElement("div");Ae.style.visibility="hidden",Ae.style.width=Ae.style.height="10px",Ae.style.position="absolute",Ae.style.top=Ae.style.left="0px";for(var ee=0,oe=te;ee<oe.length;ee++){var M=oe[ee],H=this._document.createElement("span");H.textContent="Hi",H.style.fontFamily=M,Ae.appendChild(H)}this._document.body.appendChild(Ae),Z(se,function(){ae._document.body.removeChild(Ae),re.complete()})}}]),k}(C);var b=function(){function S(w,k){var z=k.isEvalSupported,Q=z===void 0?!0:z,Y=k.disableFontFace,re=Y===void 0?!1:Y,ae=k.ignoreErrors,ce=ae===void 0?!1:ae,J=k.onUnsupportedFeature,X=k.fontRegistry,L=X===void 0?null:X;U(this,S),this.compiledGlyphs=Object.create(null);for(var v in w)this[v]=w[v];this.isEvalSupported=Q!==!1,this.disableFontFace=re===!0,this.ignoreErrors=ce===!0,this._onUnsupportedFeature=J,this.fontRegistry=L}return B(S,[{key:"createNativeFontFace",value:function(){if(!this.data||this.disableFontFace)return null;var k;if(!this.cssFontInfo)k=new FontFace(this.loadedName,this.data,{});else{var z={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(z.style="oblique ".concat(this.cssFontInfo.italicAngle,"deg")),k=new FontFace(this.cssFontInfo.fontFamily,this.data,z)}return this.fontRegistry&&this.fontRegistry.registerFont(this),k}},{key:"createFontFaceRule",value:function(){if(!this.data||this.disableFontFace)return null;var k=(0,s.bytesToString)(this.data),z="url(data:".concat(this.mimetype,";base64,").concat(btoa(k),");"),Q;if(!this.cssFontInfo)Q='@font-face {font-family:"'.concat(this.loadedName,'";src:').concat(z,"}");else{var Y="font-weight: ".concat(this.cssFontInfo.fontWeight,";");this.cssFontInfo.italicAngle&&(Y+="font-style: oblique ".concat(this.cssFontInfo.italicAngle,"deg;")),Q='@font-face {font-family:"'.concat(this.cssFontInfo.fontFamily,'";').concat(Y,"src:").concat(z,"}")}return this.fontRegistry&&this.fontRegistry.registerFont(this,z),Q}},{key:"getPathGenerator",value:function(k,z){if(this.compiledGlyphs[z]!==void 0)return this.compiledGlyphs[z];var Q;try{Q=k.get(this.loadedName+"_path_"+z)}catch(X){if(!this.ignoreErrors)throw X;return this._onUnsupportedFeature({featureId:s.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,s.warn)('getPathGenerator - ignoring character: "'.concat(X,'".')),this.compiledGlyphs[z]=function(L,v){}}if(this.isEvalSupported&&s.IsEvalSupportedCached.value){var Y=[],re=G(Q),ae;try{for(re.s();!(ae=re.n()).done;){var ce=ae.value,J=ce.args!==void 0?ce.args.join(","):"";Y.push("c.",ce.cmd,"(",J,`);
`)}}catch(X){re.e(X)}finally{re.f()}return this.compiledGlyphs[z]=new Function("c","size",Y.join(""))}return this.compiledGlyphs[z]=function(X,L){var v=G(Q),R;try{for(v.s();!(R=v.n()).done;){var D=R.value;D.cmd==="scale"&&(D.args=[L,-L]),X[D.cmd].apply(X,D.args)}}catch(Z){v.e(Z)}finally{v.f()}}}}]),S}();a.FontFaceObject=b},(r,a,t)=>{function e(U){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(B){return typeof B}:e=function(B){return B&&typeof Symbol=="function"&&B.constructor===Symbol&&B!==Symbol.prototype?"symbol":typeof B},e(U)}Object.defineProperty(a,"__esModule",{value:!0}),a.NodeCMapReaderFactory=a.NodeCanvasFactory=void 0;var o=t(1),s=t(6),l=t(4);function c(U,I){for(var B=0;B<I.length;B++){var C=I[B];C.enumerable=C.enumerable||!1,C.configurable=!0,"value"in C&&(C.writable=!0),Object.defineProperty(U,C.key,C)}}function d(U,I,B){return I&&c(U.prototype,I),B&&c(U,B),U}function P(U,I){if(typeof I!="function"&&I!==null)throw new TypeError("Super expression must either be null or a function");U.prototype=Object.create(I&&I.prototype,{constructor:{value:U,writable:!0,configurable:!0}}),I&&x(U,I)}function x(U,I){return x=Object.setPrototypeOf||function(C,W){return C.__proto__=W,C},x(U,I)}function $(U){var I=A();return function(){var C=y(U),W;if(I){var b=y(this).constructor;W=Reflect.construct(C,arguments,b)}else W=C.apply(this,arguments);return j(this,W)}}function j(U,I){return I&&(e(I)==="object"||typeof I=="function")?I:O(U)}function O(U){if(U===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return U}function A(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(U){return!1}}function y(U){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(B){return B.__proto__||Object.getPrototypeOf(B)},y(U)}function G(U,I){if(!(U instanceof I))throw new TypeError("Cannot call a class as a function")}var ue=function U(){G(this,U),(0,l.unreachable)("Not implemented: NodeCanvasFactory")};a.NodeCanvasFactory=ue;var K=function U(){G(this,U),(0,l.unreachable)("Not implemented: NodeCMapReaderFactory")};a.NodeCMapReaderFactory=K,s.isNodeJS&&(a.NodeCanvasFactory=ue=function(U){P(B,U);var I=$(B);function B(){return G(this,B),I.apply(this,arguments)}return d(B,[{key:"create",value:function(W,b){if(W<=0||b<=0)throw new Error("Invalid canvas size");var S=require$$0,w=S.createCanvas(W,b);return{canvas:w,context:w.getContext("2d")}}}]),B}(o.BaseCanvasFactory),a.NodeCMapReaderFactory=K=function(U){P(B,U);var I=$(B);function B(){return G(this,B),I.apply(this,arguments)}return d(B,[{key:"_fetchData",value:function(W,b){return new Promise(function(S,w){var k=require$$0;k.readFile(W,function(z,Q){if(z||!Q){w(new Error(z));return}S({cMapData:new Uint8Array(Q),compressionType:b})})})}}]),B}(o.BaseCMapReaderFactory))},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.AnnotationStorage=void 0;var e=t(4);function o(A,y){return P(A)||d(A,y)||l(A,y)||s()}function s(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function l(A,y){if(!!A){if(typeof A=="string")return c(A,y);var G=Object.prototype.toString.call(A).slice(8,-1);if(G==="Object"&&A.constructor&&(G=A.constructor.name),G==="Map"||G==="Set")return Array.from(A);if(G==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(G))return c(A,y)}}function c(A,y){(y==null||y>A.length)&&(y=A.length);for(var G=0,ue=new Array(y);G<y;G++)ue[G]=A[G];return ue}function d(A,y){var G=A&&(typeof Symbol!="undefined"&&A[Symbol.iterator]||A["@@iterator"]);if(G!=null){var ue=[],K=!0,U=!1,I,B;try{for(G=G.call(A);!(K=(I=G.next()).done)&&(ue.push(I.value),!(y&&ue.length===y));K=!0);}catch(C){U=!0,B=C}finally{try{!K&&G.return!=null&&G.return()}finally{if(U)throw B}}return ue}}function P(A){if(Array.isArray(A))return A}function x(A,y){if(!(A instanceof y))throw new TypeError("Cannot call a class as a function")}function $(A,y){for(var G=0;G<y.length;G++){var ue=y[G];ue.enumerable=ue.enumerable||!1,ue.configurable=!0,"value"in ue&&(ue.writable=!0),Object.defineProperty(A,ue.key,ue)}}function j(A,y,G){return y&&$(A.prototype,y),G&&$(A,G),A}var O=function(){function A(){x(this,A),this._storage=new Map,this._modified=!1,this.onSetModified=null,this.onResetModified=null}return j(A,[{key:"getValue",value:function(G,ue){var K=this._storage.get(G);return K!==void 0?K:ue}},{key:"setValue",value:function(G,ue){var K=this._storage.get(G),U=!1;if(K!==void 0)for(var I=0,B=Object.entries(ue);I<B.length;I++){var C=o(B[I],2),W=C[0],b=C[1];K[W]!==b&&(U=!0,K[W]=b)}else this._storage.set(G,ue),U=!0;U&&this._setModified()}},{key:"getAll",value:function(){return this._storage.size>0?(0,e.objectFromMap)(this._storage):null}},{key:"size",get:function(){return this._storage.size}},{key:"_setModified",value:function(){this._modified||(this._modified=!0,typeof this.onSetModified=="function"&&this.onSetModified())}},{key:"resetModified",value:function(){this._modified&&(this._modified=!1,typeof this.onResetModified=="function"&&this.onResetModified())}},{key:"serializable",get:function(){return this._storage.size>0?this._storage:null}}]),A}();a.AnnotationStorage=O},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.apiCompatibilityParams=void 0;var e=t(6),o=Object.create(null);(function(){e.isNodeJS&&(o.disableFontFace=!0)})();var s=Object.freeze(o);a.apiCompatibilityParams=s},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.CanvasGraphics=void 0;var e=t(4),o=t(119);function s(k){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?s=function(Q){return typeof Q}:s=function(Q){return Q&&typeof Symbol=="function"&&Q.constructor===Symbol&&Q!==Symbol.prototype?"symbol":typeof Q},s(k)}function l(k,z){var Q=typeof Symbol!="undefined"&&k[Symbol.iterator]||k["@@iterator"];if(!Q){if(Array.isArray(k)||(Q=j(k))||z&&k&&typeof k.length=="number"){Q&&(k=Q);var Y=0,re=function(){};return{s:re,n:function(){return Y>=k.length?{done:!0}:{done:!1,value:k[Y++]}},e:function(L){throw L},f:re}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ae=!0,ce=!1,J;return{s:function(){Q=Q.call(k)},n:function(){var L=Q.next();return ae=L.done,L},e:function(L){ce=!0,J=L},f:function(){try{!ae&&Q.return!=null&&Q.return()}finally{if(ce)throw J}}}}function c(k,z){if(!(k instanceof z))throw new TypeError("Cannot call a class as a function")}function d(k,z){for(var Q=0;Q<z.length;Q++){var Y=z[Q];Y.enumerable=Y.enumerable||!1,Y.configurable=!0,"value"in Y&&(Y.writable=!0),Object.defineProperty(k,Y.key,Y)}}function P(k,z,Q){return z&&d(k.prototype,z),Q&&d(k,Q),k}function x(k,z){return y(k)||A(k,z)||j(k,z)||$()}function $(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function j(k,z){if(!!k){if(typeof k=="string")return O(k,z);var Q=Object.prototype.toString.call(k).slice(8,-1);if(Q==="Object"&&k.constructor&&(Q=k.constructor.name),Q==="Map"||Q==="Set")return Array.from(k);if(Q==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Q))return O(k,z)}}function O(k,z){(z==null||z>k.length)&&(z=k.length);for(var Q=0,Y=new Array(z);Q<z;Q++)Y[Q]=k[Q];return Y}function A(k,z){var Q=k&&(typeof Symbol!="undefined"&&k[Symbol.iterator]||k["@@iterator"]);if(Q!=null){var Y=[],re=!0,ae=!1,ce,J;try{for(Q=Q.call(k);!(re=(ce=Q.next()).done)&&(Y.push(ce.value),!(z&&Y.length===z));re=!0);}catch(X){ae=!0,J=X}finally{try{!re&&Q.return!=null&&Q.return()}finally{if(ae)throw J}}return Y}}function y(k){if(Array.isArray(k))return k}var G=16,ue=100,K=4096,U=1e3,I=16,B=1.000001;function C(k){if(!k.mozCurrentTransform){k._originalSave=k.save,k._originalRestore=k.restore,k._originalRotate=k.rotate,k._originalScale=k.scale,k._originalTranslate=k.translate,k._originalTransform=k.transform,k._originalSetTransform=k.setTransform,k._originalResetTransform=k.resetTransform,k._transformMatrix=k._transformMatrix||[1,0,0,1,0,0],k._transformStack=[];try{var z=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(k),"lineWidth");k._setLineWidth=z.set,k._getLineWidth=z.get,Object.defineProperty(k,"lineWidth",{set:function(Y){this._setLineWidth(Y*B)},get:function(){return this._getLineWidth()}})}catch(Q){}Object.defineProperty(k,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(k,"mozCurrentTransformInverse",{get:function(){var Y=x(this._transformMatrix,6),re=Y[0],ae=Y[1],ce=Y[2],J=Y[3],X=Y[4],L=Y[5],v=re*J-ae*ce,R=ae*ce-re*J;return[J/v,ae/R,ce/R,re/v,(J*X-ce*L)/R,(ae*X-re*L)/v]}}),k.save=function(){var Y=this._transformMatrix;this._transformStack.push(Y),this._transformMatrix=Y.slice(0,6),this._originalSave()},k.restore=function(){var Y=this._transformStack.pop();Y&&(this._transformMatrix=Y,this._originalRestore())},k.translate=function(Y,re){var ae=this._transformMatrix;ae[4]=ae[0]*Y+ae[2]*re+ae[4],ae[5]=ae[1]*Y+ae[3]*re+ae[5],this._originalTranslate(Y,re)},k.scale=function(Y,re){var ae=this._transformMatrix;ae[0]=ae[0]*Y,ae[1]=ae[1]*Y,ae[2]=ae[2]*re,ae[3]=ae[3]*re,this._originalScale(Y,re)},k.transform=function(Y,re,ae,ce,J,X){var L=this._transformMatrix;this._transformMatrix=[L[0]*Y+L[2]*re,L[1]*Y+L[3]*re,L[0]*ae+L[2]*ce,L[1]*ae+L[3]*ce,L[0]*J+L[2]*X+L[4],L[1]*J+L[3]*X+L[5]],k._originalTransform(Y,re,ae,ce,J,X)},k.setTransform=function(Y,re,ae,ce,J,X){this._transformMatrix=[Y,re,ae,ce,J,X],k._originalSetTransform(Y,re,ae,ce,J,X)},k.resetTransform=function(){this._transformMatrix=[1,0,0,1,0,0],k._originalResetTransform()},k.rotate=function(Y){var re=Math.cos(Y),ae=Math.sin(Y),ce=this._transformMatrix;this._transformMatrix=[ce[0]*re+ce[2]*ae,ce[1]*re+ce[3]*ae,ce[0]*-ae+ce[2]*re,ce[1]*-ae+ce[3]*re,ce[4],ce[5]],this._originalRotate(Y)}}}var W=function(){function k(z){c(this,k),this.canvasFactory=z,this.cache=Object.create(null)}return P(k,[{key:"getCanvas",value:function(Q,Y,re,ae){var ce;return this.cache[Q]!==void 0?(ce=this.cache[Q],this.canvasFactory.reset(ce,Y,re),ce.context.setTransform(1,0,0,1,0,0)):(ce=this.canvasFactory.create(Y,re),this.cache[Q]=ce),ae&&C(ce.context),ce}},{key:"clear",value:function(){for(var Q in this.cache){var Y=this.cache[Q];this.canvasFactory.destroy(Y),delete this.cache[Q]}}}]),k}();function b(k){var z=1e3,Q=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),Y=k.width,re=k.height,ae=Y+1,ce,J,X,L,v=new Uint8Array(ae*(re+1)),R=Y+7&~7,D=k.data,Z=new Uint8Array(R*re),se=0;for(ce=0,J=D.length;ce<J;ce++)for(var ie=D[ce],Pe=128;Pe>0;)Z[se++]=ie&Pe?0:255,Pe>>=1;var le=0;for(se=0,Z[se]!==0&&(v[0]=1,++le),X=1;X<Y;X++)Z[se]!==Z[se+1]&&(v[X]=Z[se]?2:1,++le),se++;for(Z[se]!==0&&(v[X]=2,++le),ce=1;ce<re;ce++){se=ce*R,L=ce*ae,Z[se-R]!==Z[se]&&(v[L]=Z[se]?1:8,++le);var fe=(Z[se]?4:0)+(Z[se-R]?8:0);for(X=1;X<Y;X++)fe=(fe>>2)+(Z[se+1]?4:0)+(Z[se-R+1]?8:0),Q[fe]&&(v[L+X]=Q[fe],++le),se++;if(Z[se-R]!==Z[se]&&(v[L+X]=Z[se]?2:4,++le),le>z)return null}for(se=R*(re-1),L=ce*ae,Z[se]!==0&&(v[L]=8,++le),X=1;X<Y;X++)Z[se]!==Z[se+1]&&(v[L+X]=Z[se]?4:8,++le),se++;if(Z[se]!==0&&(v[L+X]=4,++le),le>z)return null;var N=new Int32Array([0,ae,-1,0,-ae,0,0,0,1]),E=[];for(ce=0;le&&ce<=re;ce++){for(var T=ce*ae,te=T+Y;T<te&&!v[T];)T++;if(T!==te){var ne=[T%ae,ce],de=T,he=v[T];do{var Ae=N[he];do T+=Ae;while(!v[T]);var ee=v[T];ee!==5&&ee!==10?(he=ee,v[T]=0):(he=ee&51*he>>4,v[T]&=he>>2|he<<2),ne.push(T%ae,T/ae|0),v[T]||--le}while(de!==T);E.push(ne),--ce}}var oe=function(H){H.save(),H.scale(1/Y,-1/re),H.translate(0,-re),H.beginPath();for(var V=0,ge=E.length;V<ge;V++){var ye=E[V];H.moveTo(ye[0],ye[1]);for(var pe=2,Se=ye.length;pe<Se;pe+=2)H.lineTo(ye[pe],ye[pe+1])}H.fill(),H.beginPath(),H.restore()};return oe}var S=function(){function k(){c(this,k),this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=e.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=e.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=e.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.resumeSMaskCtx=null,this.transferMaps=null}return P(k,[{key:"clone",value:function(){return Object.create(this)}},{key:"setCurrentPoint",value:function(Q,Y){this.x=Q,this.y=Y}}]),k}(),w=function(){var z=15,Q=10;function Y(fe,N){var E=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null;if(typeof ImageData!="undefined"&&N instanceof ImageData){fe.putImageData(N,0,0);return}var T=N.height,te=N.width,ne=T%I,de=(T-ne)/I,he=ne===0?de:de+1,Ae=fe.createImageData(te,I),ee=0,oe,M=N.data,H=Ae.data,V,ge,ye,pe,Se,ke,Ce,Ie;if(E)switch(E.length){case 1:Se=E[0],ke=E[0],Ce=E[0],Ie=E[0];break;case 4:Se=E[0],ke=E[1],Ce=E[2],Ie=E[3];break}if(N.kind===e.ImageKind.GRAYSCALE_1BPP){var Ne=M.byteLength,Me=new Uint32Array(H.buffer,0,H.byteLength>>2),Ee=Me.length,Be=te+7>>3,_e=4294967295,we=e.IsLittleEndianCached.value?4278190080:255;if(Ie&&Ie[0]===255&&Ie[255]===0){var Fe=[we,_e];_e=Fe[0],we=Fe[1]}for(V=0;V<he;V++){for(ye=V<de?I:ne,oe=0,ge=0;ge<ye;ge++){for(var Le=Ne-ee,$e=0,Ge=Le>Be?te:Le*8-7,Ke=Ge&~7,Ye=0,ze=0;$e<Ke;$e+=8)ze=M[ee++],Me[oe++]=ze&128?_e:we,Me[oe++]=ze&64?_e:we,Me[oe++]=ze&32?_e:we,Me[oe++]=ze&16?_e:we,Me[oe++]=ze&8?_e:we,Me[oe++]=ze&4?_e:we,Me[oe++]=ze&2?_e:we,Me[oe++]=ze&1?_e:we;for(;$e<Ge;$e++)Ye===0&&(ze=M[ee++],Ye=128),Me[oe++]=ze&Ye?_e:we,Ye>>=1}for(;oe<Ee;)Me[oe++]=0;fe.putImageData(Ae,0,V*I)}}else if(N.kind===e.ImageKind.RGBA_32BPP){var nt=!!(Se||ke||Ce);for(ge=0,pe=te*I*4,V=0;V<de;V++){if(H.set(M.subarray(ee,ee+pe)),ee+=pe,nt)for(var Xe=0;Xe<pe;Xe+=4)Se&&(H[Xe+0]=Se[H[Xe+0]]),ke&&(H[Xe+1]=ke[H[Xe+1]]),Ce&&(H[Xe+2]=Ce[H[Xe+2]]);fe.putImageData(Ae,0,ge),ge+=I}if(V<he){if(pe=te*ne*4,H.set(M.subarray(ee,ee+pe)),nt)for(var tt=0;tt<pe;tt+=4)Se&&(H[tt+0]=Se[H[tt+0]]),ke&&(H[tt+1]=ke[H[tt+1]]),Ce&&(H[tt+2]=Ce[H[tt+2]]);fe.putImageData(Ae,0,ge)}}else if(N.kind===e.ImageKind.RGB_24BPP){var it=!!(Se||ke||Ce);for(ye=I,pe=te*ye,V=0;V<he;V++){for(V>=de&&(ye=ne,pe=te*ye),oe=0,ge=pe;ge--;)H[oe++]=M[ee++],H[oe++]=M[ee++],H[oe++]=M[ee++],H[oe++]=255;if(it)for(var Ze=0;Ze<oe;Ze+=4)Se&&(H[Ze+0]=Se[H[Ze+0]]),ke&&(H[Ze+1]=ke[H[Ze+1]]),Ce&&(H[Ze+2]=Ce[H[Ze+2]]);fe.putImageData(Ae,0,V*I)}}else throw new Error("bad image kind: ".concat(N.kind))}function re(fe,N){for(var E=N.height,T=N.width,te=E%I,ne=(E-te)/I,de=te===0?ne:ne+1,he=fe.createImageData(T,I),Ae=0,ee=N.data,oe=he.data,M=0;M<de;M++){for(var H=M<ne?I:te,V=3,ge=0;ge<H;ge++)for(var ye=void 0,pe=0,Se=0;Se<T;Se++)pe||(ye=ee[Ae++],pe=128),oe[V]=ye&pe?0:255,V+=4,pe>>=1;fe.putImageData(he,0,M*I)}}function ae(fe,N){for(var E=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],T=0,te=E.length;T<te;T++){var ne=E[T];fe[ne]!==void 0&&(N[ne]=fe[ne])}fe.setLineDash!==void 0&&(N.setLineDash(fe.getLineDash()),N.lineDashOffset=fe.lineDashOffset)}function ce(fe){fe.strokeStyle="#000000",fe.fillStyle="#000000",fe.fillRule="nonzero",fe.globalAlpha=1,fe.lineWidth=1,fe.lineCap="butt",fe.lineJoin="miter",fe.miterLimit=10,fe.globalCompositeOperation="source-over",fe.font="10px sans-serif",fe.setLineDash!==void 0&&(fe.setLineDash([]),fe.lineDashOffset=0)}function J(fe,N,E,T){for(var te=fe.length,ne=3;ne<te;ne+=4){var de=fe[ne];if(de===0)fe[ne-3]=N,fe[ne-2]=E,fe[ne-1]=T;else if(de<255){var he=255-de;fe[ne-3]=fe[ne-3]*de+N*he>>8,fe[ne-2]=fe[ne-2]*de+E*he>>8,fe[ne-1]=fe[ne-1]*de+T*he>>8}}}function X(fe,N,E){for(var T=fe.length,te=1/255,ne=3;ne<T;ne+=4){var de=E?E[fe[ne]]:fe[ne];N[ne]=N[ne]*de*te|0}}function L(fe,N,E){for(var T=fe.length,te=3;te<T;te+=4){var ne=fe[te-3]*77+fe[te-2]*152+fe[te-1]*28;N[te]=E?N[te]*E[ne>>8]>>8:N[te]*ne>>16}}function v(fe,N,E,T,te,ne,de){var he=!!ne,Ae=he?ne[0]:0,ee=he?ne[1]:0,oe=he?ne[2]:0,M;te==="Luminosity"?M=L:M=X;for(var H=1048576,V=Math.min(T,Math.ceil(H/E)),ge=0;ge<T;ge+=V){var ye=Math.min(V,T-ge),pe=fe.getImageData(0,ge,E,ye),Se=N.getImageData(0,ge,E,ye);he&&J(pe.data,Ae,ee,oe),M(pe.data,Se.data,de),fe.putImageData(Se,0,ge)}}function R(fe,N,E){var T=N.canvas,te=N.context;fe.setTransform(N.scaleX,0,0,N.scaleY,N.offsetX,N.offsetY),v(te,E,T.width,T.height,N.subtype,N.backdrop,N.transferMap),fe.drawImage(T,0,0)}var D=["butt","round","square"],Z=["miter","round","bevel"],se={},ie={},Pe=function(){function fe(N,E,T,te,ne,de){c(this,fe),this.ctx=N,this.current=new S,this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=E,this.objs=T,this.canvasFactory=te,this.imageLayer=ne,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.contentVisible=!0,this.markedContentStack=[],this.optionalContentConfig=de,this.cachedCanvases=new W(this.canvasFactory),N&&C(N),this._cachedGetSinglePixelWidth=null}return P(fe,[{key:"beginDrawing",value:function(E){var T=E.transform,te=E.viewport,ne=E.transparency,de=ne===void 0?!1:ne,he=E.background,Ae=he===void 0?null:he,ee=this.ctx.canvas.width,oe=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=Ae||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,ee,oe),this.ctx.restore(),de){var M=this.cachedCanvases.getCanvas("transparent",ee,oe,!0);this.compositeCtx=this.ctx,this.transparentCanvas=M.canvas,this.ctx=M.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),ce(this.ctx),T&&this.ctx.transform.apply(this.ctx,T),this.ctx.transform.apply(this.ctx,te.transform),this.baseTransform=this.ctx.mozCurrentTransform.slice(),this._combinedScaleFactor=Math.hypot(this.baseTransform[0],this.baseTransform[2]),this.imageLayer&&this.imageLayer.beginLayout()}},{key:"executeOperatorList",value:function(E,T,te,ne){var de=E.argsArray,he=E.fnArray,Ae=T||0,ee=de.length;if(ee===Ae)return Ae;for(var oe=ee-Ae>Q&&typeof te=="function",M=oe?Date.now()+z:0,H=0,V=this.commonObjs,ge=this.objs,ye;;){if(ne!==void 0&&Ae===ne.nextBreakPoint)return ne.breakIt(Ae,te),Ae;if(ye=he[Ae],ye!==e.OPS.dependency)this[ye].apply(this,de[Ae]);else{var pe=l(de[Ae]),Se;try{for(pe.s();!(Se=pe.n()).done;){var ke=Se.value,Ce=ke.startsWith("g_")?V:ge;if(!Ce.has(ke))return Ce.get(ke,te),Ae}}catch(Ie){pe.e(Ie)}finally{pe.f()}}if(Ae++,Ae===ee)return Ae;if(oe&&++H>Q){if(Date.now()>M)return te(),Ae;H=0}}}},{key:"endDrawing",value:function(){for(;this.stateStack.length||this.current.activeSMask!==null;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.imageLayer&&this.imageLayer.endLayout()}},{key:"setLineWidth",value:function(E){this.current.lineWidth=E,this.ctx.lineWidth=E}},{key:"setLineCap",value:function(E){this.ctx.lineCap=D[E]}},{key:"setLineJoin",value:function(E){this.ctx.lineJoin=Z[E]}},{key:"setMiterLimit",value:function(E){this.ctx.miterLimit=E}},{key:"setDash",value:function(E,T){var te=this.ctx;te.setLineDash!==void 0&&(te.setLineDash(E),te.lineDashOffset=T)}},{key:"setRenderingIntent",value:function(E){}},{key:"setFlatness",value:function(E){}},{key:"setGState",value:function(E){for(var T=0,te=E.length;T<te;T++){var ne=E[T],de=ne[0],he=ne[1];switch(de){case"LW":this.setLineWidth(he);break;case"LC":this.setLineCap(he);break;case"LJ":this.setLineJoin(he);break;case"ML":this.setMiterLimit(he);break;case"D":this.setDash(he[0],he[1]);break;case"RI":this.setRenderingIntent(he);break;case"FL":this.setFlatness(he);break;case"Font":this.setFont(he[0],he[1]);break;case"CA":this.current.strokeAlpha=ne[1];break;case"ca":this.current.fillAlpha=ne[1],this.ctx.globalAlpha=ne[1];break;case"BM":this.ctx.globalCompositeOperation=he;break;case"SMask":this.current.activeSMask&&(this.stateStack.length>0&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask?this.suspendSMaskGroup():this.endSMaskGroup()),this.current.activeSMask=he?this.tempSMask:null,this.current.activeSMask&&this.beginSMaskGroup(),this.tempSMask=null;break;case"TR":this.current.transferMaps=he}}}},{key:"beginSMaskGroup",value:function(){var E=this.current.activeSMask,T=E.canvas.width,te=E.canvas.height,ne="smaskGroupAt"+this.groupLevel,de=this.cachedCanvases.getCanvas(ne,T,te,!0),he=this.ctx,Ae=he.mozCurrentTransform;this.ctx.save();var ee=de.context;ee.scale(1/E.scaleX,1/E.scaleY),ee.translate(-E.offsetX,-E.offsetY),ee.transform.apply(ee,Ae),E.startTransformInverse=ee.mozCurrentTransformInverse,ae(he,ee),this.ctx=ee,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(he),this.groupLevel++}},{key:"suspendSMaskGroup",value:function(){var E=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),R(this.ctx,this.current.activeSMask,E),this.ctx.restore(),this.ctx.save(),ae(E,this.ctx),this.current.resumeSMaskCtx=E;var T=e.Util.transform(this.current.activeSMask.startTransformInverse,E.mozCurrentTransform);this.ctx.transform.apply(this.ctx,T),E.save(),E.setTransform(1,0,0,1,0,0),E.clearRect(0,0,E.canvas.width,E.canvas.height),E.restore()}},{key:"resumeSMaskGroup",value:function(){var E=this.current.resumeSMaskCtx,T=this.ctx;this.ctx=E,this.groupStack.push(T),this.groupLevel++}},{key:"endSMaskGroup",value:function(){var E=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),R(this.ctx,this.current.activeSMask,E),this.ctx.restore(),ae(E,this.ctx);var T=e.Util.transform(this.current.activeSMask.startTransformInverse,E.mozCurrentTransform);this.ctx.transform.apply(this.ctx,T)}},{key:"save",value:function(){this.ctx.save();var E=this.current;this.stateStack.push(E),this.current=E.clone(),this.current.resumeSMaskCtx=null}},{key:"restore",value:function(){this.current.resumeSMaskCtx&&this.resumeSMaskGroup(),this.current.activeSMask!==null&&(this.stateStack.length===0||this.stateStack[this.stateStack.length-1].activeSMask!==this.current.activeSMask)&&this.endSMaskGroup(),this.stateStack.length!==0?(this.current=this.stateStack.pop(),this.ctx.restore(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null):this.current.activeSMask=null}},{key:"transform",value:function(E,T,te,ne,de,he){this.ctx.transform(E,T,te,ne,de,he),this._cachedGetSinglePixelWidth=null}},{key:"constructPath",value:function(E,T){for(var te=this.ctx,ne=this.current,de=ne.x,he=ne.y,Ae=0,ee=0,oe=E.length;Ae<oe;Ae++)switch(E[Ae]|0){case e.OPS.rectangle:de=T[ee++],he=T[ee++];var M=T[ee++],H=T[ee++],V=de+M,ge=he+H;te.moveTo(de,he),M===0||H===0?te.lineTo(V,ge):(te.lineTo(V,he),te.lineTo(V,ge),te.lineTo(de,ge)),te.closePath();break;case e.OPS.moveTo:de=T[ee++],he=T[ee++],te.moveTo(de,he);break;case e.OPS.lineTo:de=T[ee++],he=T[ee++],te.lineTo(de,he);break;case e.OPS.curveTo:de=T[ee+4],he=T[ee+5],te.bezierCurveTo(T[ee],T[ee+1],T[ee+2],T[ee+3],de,he),ee+=6;break;case e.OPS.curveTo2:te.bezierCurveTo(de,he,T[ee],T[ee+1],T[ee+2],T[ee+3]),de=T[ee+2],he=T[ee+3],ee+=4;break;case e.OPS.curveTo3:de=T[ee+2],he=T[ee+3],te.bezierCurveTo(T[ee],T[ee+1],de,he,de,he),ee+=4;break;case e.OPS.closePath:te.closePath();break}ne.setCurrentPoint(de,he)}},{key:"closePath",value:function(){this.ctx.closePath()}},{key:"stroke",value:function(E){E=typeof E!="undefined"?E:!0;var T=this.ctx,te=this.current.strokeColor;if(T.globalAlpha=this.current.strokeAlpha,this.contentVisible)if(s(te)==="object"&&te!==null&&te!==void 0&&te.getPattern){var ne=this.getSinglePixelWidth();T.save(),T.strokeStyle=te.getPattern(T,this),T.lineWidth=Math.max(ne,this.current.lineWidth),T.stroke(),T.restore()}else{var de=this.getSinglePixelWidth();de<0&&-de>=this.current.lineWidth?(T.save(),T.resetTransform(),T.lineWidth=Math.round(this._combinedScaleFactor),T.stroke(),T.restore()):(T.lineWidth=Math.max(de,this.current.lineWidth),T.stroke())}E&&this.consumePath(),T.globalAlpha=this.current.fillAlpha}},{key:"closeStroke",value:function(){this.closePath(),this.stroke()}},{key:"fill",value:function(E){E=typeof E!="undefined"?E:!0;var T=this.ctx,te=this.current.fillColor,ne=this.current.patternFill,de=!1;ne&&(T.save(),T.fillStyle=te.getPattern(T,this),de=!0),this.contentVisible&&(this.pendingEOFill?(T.fill("evenodd"),this.pendingEOFill=!1):T.fill()),de&&T.restore(),E&&this.consumePath()}},{key:"eoFill",value:function(){this.pendingEOFill=!0,this.fill()}},{key:"fillStroke",value:function(){this.fill(!1),this.stroke(!1),this.consumePath()}},{key:"eoFillStroke",value:function(){this.pendingEOFill=!0,this.fillStroke()}},{key:"closeFillStroke",value:function(){this.closePath(),this.fillStroke()}},{key:"closeEOFillStroke",value:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}},{key:"endPath",value:function(){this.consumePath()}},{key:"clip",value:function(){this.pendingClip=se}},{key:"eoClip",value:function(){this.pendingClip=ie}},{key:"beginText",value:function(){this.current.textMatrix=e.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}},{key:"endText",value:function(){var E=this.pendingTextPaths,T=this.ctx;if(E===void 0){T.beginPath();return}T.save(),T.beginPath();for(var te=0;te<E.length;te++){var ne=E[te];T.setTransform.apply(T,ne.transform),T.translate(ne.x,ne.y),ne.addToPath(T,ne.fontSize)}T.restore(),T.clip(),T.beginPath(),delete this.pendingTextPaths}},{key:"setCharSpacing",value:function(E){this.current.charSpacing=E}},{key:"setWordSpacing",value:function(E){this.current.wordSpacing=E}},{key:"setHScale",value:function(E){this.current.textHScale=E/100}},{key:"setLeading",value:function(E){this.current.leading=-E}},{key:"setFont",value:function(E,T){var te=this.commonObjs.get(E),ne=this.current;if(!te)throw new Error("Can't find font for ".concat(E));if(ne.fontMatrix=te.fontMatrix||e.FONT_IDENTITY_MATRIX,(ne.fontMatrix[0]===0||ne.fontMatrix[3]===0)&&(0,e.warn)("Invalid font matrix for font "+E),T<0?(T=-T,ne.fontDirection=-1):ne.fontDirection=1,this.current.font=te,this.current.fontSize=T,!te.isType3Font){var de=te.loadedName||"sans-serif",he="normal";te.black?he="900":te.bold&&(he="bold");var Ae=te.italic?"italic":"normal",ee='"'.concat(de,'", ').concat(te.fallbackName),oe=T;T<G?oe=G:T>ue&&(oe=ue),this.current.fontSizeScale=T/oe,this.ctx.font="".concat(Ae," ").concat(he," ").concat(oe,"px ").concat(ee)}}},{key:"setTextRenderingMode",value:function(E){this.current.textRenderingMode=E}},{key:"setTextRise",value:function(E){this.current.textRise=E}},{key:"moveText",value:function(E,T){this.current.x=this.current.lineX+=E,this.current.y=this.current.lineY+=T}},{key:"setLeadingMoveText",value:function(E,T){this.setLeading(-T),this.moveText(E,T)}},{key:"setTextMatrix",value:function(E,T,te,ne,de,he){this.current.textMatrix=[E,T,te,ne,de,he],this.current.textMatrixScale=Math.hypot(E,T),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}},{key:"nextLine",value:function(){this.moveText(0,this.current.leading)}},{key:"paintChar",value:function(E,T,te,ne,de){var he=this.ctx,Ae=this.current,ee=Ae.font,oe=Ae.textRenderingMode,M=Ae.fontSize/Ae.fontSizeScale,H=oe&e.TextRenderingMode.FILL_STROKE_MASK,V=!!(oe&e.TextRenderingMode.ADD_TO_PATH_FLAG),ge=Ae.patternFill&&!ee.missingFile,ye;if((ee.disableFontFace||V||ge)&&(ye=ee.getPathGenerator(this.commonObjs,E)),ee.disableFontFace||ge?(he.save(),he.translate(T,te),he.beginPath(),ye(he,M),ne&&he.setTransform.apply(he,ne),(H===e.TextRenderingMode.FILL||H===e.TextRenderingMode.FILL_STROKE)&&he.fill(),(H===e.TextRenderingMode.STROKE||H===e.TextRenderingMode.FILL_STROKE)&&(de&&(he.resetTransform(),he.lineWidth=Math.round(this._combinedScaleFactor)),he.stroke()),he.restore()):((H===e.TextRenderingMode.FILL||H===e.TextRenderingMode.FILL_STROKE)&&he.fillText(E,T,te),(H===e.TextRenderingMode.STROKE||H===e.TextRenderingMode.FILL_STROKE)&&(de?(he.save(),he.moveTo(T,te),he.resetTransform(),he.lineWidth=Math.round(this._combinedScaleFactor),he.strokeText(E,0,0),he.restore()):he.strokeText(E,T,te))),V){var pe=this.pendingTextPaths||(this.pendingTextPaths=[]);pe.push({transform:he.mozCurrentTransform,x:T,y:te,fontSize:M,addToPath:ye})}}},{key:"isFontSubpixelAAEnabled",get:function(){var E=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10),T=E.context;T.scale(1.5,1),T.fillText("I",0,10);for(var te=T.getImageData(0,0,10,10).data,ne=!1,de=3;de<te.length;de+=4)if(te[de]>0&&te[de]<255){ne=!0;break}return(0,e.shadow)(this,"isFontSubpixelAAEnabled",ne)}},{key:"showText",value:function(E){var T=this.current,te=T.font;if(te.isType3Font)return this.showType3Text(E);var ne=T.fontSize;if(ne!==0){var de=this.ctx,he=T.fontSizeScale,Ae=T.charSpacing,ee=T.wordSpacing,oe=T.fontDirection,M=T.textHScale*oe,H=E.length,V=te.vertical,ge=V?1:-1,ye=te.defaultVMetrics,pe=ne*T.fontMatrix[0],Se=T.textRenderingMode===e.TextRenderingMode.FILL&&!te.disableFontFace&&!T.patternFill;de.save();var ke;if(T.patternFill){de.save();var Ce=T.fillColor.getPattern(de,this);ke=de.mozCurrentTransform,de.restore(),de.fillStyle=Ce}de.transform.apply(de,T.textMatrix),de.translate(T.x,T.y+T.textRise),oe>0?de.scale(M,-1):de.scale(M,1);var Ie=T.lineWidth,Ne=!1,Me=T.textMatrixScale;if(Me===0||Ie===0){var Ee=T.textRenderingMode&e.TextRenderingMode.FILL_STROKE_MASK;(Ee===e.TextRenderingMode.STROKE||Ee===e.TextRenderingMode.FILL_STROKE)&&(this._cachedGetSinglePixelWidth=null,Ie=this.getSinglePixelWidth(),Ne=Ie<0)}else Ie/=Me;he!==1&&(de.scale(he,he),Ie/=he),de.lineWidth=Ie;var Be=0,_e;for(_e=0;_e<H;++_e){var we=E[_e];if((0,e.isNum)(we)){Be+=ge*we*ne/1e3;continue}var Fe=!1,Le=(we.isSpace?ee:0)+Ae,$e=we.fontChar,Ge=we.accent,Ke=void 0,Ye=void 0,ze=we.width;if(V){var nt=we.vmetric||ye,Xe=-(we.vmetric?nt[1]:ze*.5)*pe,tt=nt[2]*pe;ze=nt?-nt[0]:ze,Ke=Xe/he,Ye=(Be+tt)/he}else Ke=Be/he,Ye=0;if(te.remeasure&&ze>0){var it=de.measureText($e).width*1e3/ne*he;if(ze<it&&this.isFontSubpixelAAEnabled){var Ze=ze/it;Fe=!0,de.save(),de.scale(Ze,1),Ke/=Ze}else ze!==it&&(Ke+=(ze-it)/2e3*ne/he)}if(this.contentVisible&&(we.isInFont||te.missingFile)){if(Se&&!Ge)de.fillText($e,Ke,Ye);else if(this.paintChar($e,Ke,Ye,ke,Ne),Ge){var lt=Ke+ne*Ge.offset.x/he,mt=Ye-ne*Ge.offset.y/he;this.paintChar(Ge.fontChar,lt,mt,ke,Ne)}}var dt=void 0;V?dt=ze*pe-Le*oe:dt=ze*pe+Le*oe,Be+=dt,Fe&&de.restore()}V?T.y-=Be:T.x+=Be*M,de.restore()}}},{key:"showType3Text",value:function(E){var T=this.ctx,te=this.current,ne=te.font,de=te.fontSize,he=te.fontDirection,Ae=ne.vertical?1:-1,ee=te.charSpacing,oe=te.wordSpacing,M=te.textHScale*he,H=te.fontMatrix||e.FONT_IDENTITY_MATRIX,V=E.length,ge=te.textRenderingMode===e.TextRenderingMode.INVISIBLE,ye,pe,Se,ke;if(!(ge||de===0)){for(this._cachedGetSinglePixelWidth=null,T.save(),T.transform.apply(T,te.textMatrix),T.translate(te.x,te.y),T.scale(M,he),ye=0;ye<V;++ye){if(pe=E[ye],(0,e.isNum)(pe)){ke=Ae*pe*de/1e3,this.ctx.translate(ke,0),te.x+=ke*M;continue}var Ce=(pe.isSpace?oe:0)+ee,Ie=ne.charProcOperatorList[pe.operatorListId];if(!Ie){(0,e.warn)('Type3 character "'.concat(pe.operatorListId,'" is not available.'));continue}this.contentVisible&&(this.processingType3=pe,this.save(),T.scale(de,de),T.transform.apply(T,H),this.executeOperatorList(Ie),this.restore());var Ne=e.Util.applyTransform([pe.width,0],H);Se=Ne[0]*de+Ce,T.translate(Se,0),te.x+=Se*M}T.restore(),this.processingType3=null}}},{key:"setCharWidth",value:function(E,T){}},{key:"setCharWidthAndBounds",value:function(E,T,te,ne,de,he){this.ctx.rect(te,ne,de-te,he-ne),this.clip(),this.endPath()}},{key:"getColorN_Pattern",value:function(E){var T=this,te;if(E[0]==="TilingPattern"){var ne=E[1],de=this.baseTransform||this.ctx.mozCurrentTransform.slice(),he={createCanvasGraphics:function(ee){return new fe(ee,T.commonObjs,T.objs,T.canvasFactory)}};te=new o.TilingPattern(E,ne,this.ctx,he,de)}else te=(0,o.getShadingPattern)(E);return te}},{key:"setStrokeColorN",value:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)}},{key:"setFillColorN",value:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}},{key:"setStrokeRGBColor",value:function(E,T,te){var ne=e.Util.makeHexColor(E,T,te);this.ctx.strokeStyle=ne,this.current.strokeColor=ne}},{key:"setFillRGBColor",value:function(E,T,te){var ne=e.Util.makeHexColor(E,T,te);this.ctx.fillStyle=ne,this.current.fillColor=ne,this.current.patternFill=!1}},{key:"shadingFill",value:function(E){if(!!this.contentVisible){var T=this.ctx;this.save();var te=(0,o.getShadingPattern)(E);T.fillStyle=te.getPattern(T,this,!0);var ne=T.mozCurrentTransformInverse;if(ne){var de=T.canvas,he=de.width,Ae=de.height,ee=e.Util.applyTransform([0,0],ne),oe=e.Util.applyTransform([0,Ae],ne),M=e.Util.applyTransform([he,0],ne),H=e.Util.applyTransform([he,Ae],ne),V=Math.min(ee[0],oe[0],M[0],H[0]),ge=Math.min(ee[1],oe[1],M[1],H[1]),ye=Math.max(ee[0],oe[0],M[0],H[0]),pe=Math.max(ee[1],oe[1],M[1],H[1]);this.ctx.fillRect(V,ge,ye-V,pe-ge)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.restore()}}},{key:"beginInlineImage",value:function(){(0,e.unreachable)("Should not call beginInlineImage")}},{key:"beginImageData",value:function(){(0,e.unreachable)("Should not call beginImageData")}},{key:"paintFormXObjectBegin",value:function(E,T){if(!!this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(E)&&E.length===6&&this.transform.apply(this,E),this.baseTransform=this.ctx.mozCurrentTransform,T)){var te=T[2]-T[0],ne=T[3]-T[1];this.ctx.rect(T[0],T[1],te,ne),this.clip(),this.endPath()}}},{key:"paintFormXObjectEnd",value:function(){!this.contentVisible||(this.restore(),this.baseTransform=this.baseTransformStack.pop())}},{key:"beginGroup",value:function(E){if(!!this.contentVisible){this.save();var T=this.ctx;E.isolated||(0,e.info)("TODO: Support non-isolated groups."),E.knockout&&(0,e.warn)("Knockout groups not supported.");var te=T.mozCurrentTransform;if(E.matrix&&T.transform.apply(T,E.matrix),!E.bbox)throw new Error("Bounding box is required.");var ne=e.Util.getAxialAlignedBoundingBox(E.bbox,T.mozCurrentTransform),de=[0,0,T.canvas.width,T.canvas.height];ne=e.Util.intersect(ne,de)||[0,0,0,0];var he=Math.floor(ne[0]),Ae=Math.floor(ne[1]),ee=Math.max(Math.ceil(ne[2])-he,1),oe=Math.max(Math.ceil(ne[3])-Ae,1),M=1,H=1;ee>K&&(M=ee/K,ee=K),oe>K&&(H=oe/K,oe=K);var V="groupAt"+this.groupLevel;E.smask&&(V+="_smask_"+this.smaskCounter++%2);var ge=this.cachedCanvases.getCanvas(V,ee,oe,!0),ye=ge.context;ye.scale(1/M,1/H),ye.translate(-he,-Ae),ye.transform.apply(ye,te),E.smask?this.smaskStack.push({canvas:ge.canvas,context:ye,offsetX:he,offsetY:Ae,scaleX:M,scaleY:H,subtype:E.smask.subtype,backdrop:E.smask.backdrop,transferMap:E.smask.transferMap||null,startTransformInverse:null}):(T.setTransform(1,0,0,1,0,0),T.translate(he,Ae),T.scale(M,H)),ae(T,ye),this.ctx=ye,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(T),this.groupLevel++,this.current.activeSMask=null}}},{key:"endGroup",value:function(E){if(!!this.contentVisible){this.groupLevel--;var T=this.ctx;this.ctx=this.groupStack.pop(),this.ctx.imageSmoothingEnabled!==void 0?this.ctx.imageSmoothingEnabled=!1:this.ctx.mozImageSmoothingEnabled=!1,E.smask?this.tempSMask=this.smaskStack.pop():this.ctx.drawImage(T.canvas,0,0),this.restore()}}},{key:"beginAnnotations",value:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)}},{key:"endAnnotations",value:function(){this.restore()}},{key:"beginAnnotation",value:function(E,T,te){if(this.save(),ce(this.ctx),this.current=new S,Array.isArray(E)&&E.length===4){var ne=E[2]-E[0],de=E[3]-E[1];this.ctx.rect(E[0],E[1],ne,de),this.clip(),this.endPath()}this.transform.apply(this,T),this.transform.apply(this,te)}},{key:"endAnnotation",value:function(){this.restore()}},{key:"paintImageMaskXObject",value:function(E){if(!!this.contentVisible){var T=this.ctx,te=E.width,ne=E.height,de=this.current.fillColor,he=this.current.patternFill,Ae=this.processingType3;if(Ae&&Ae.compiled===void 0&&(te<=U&&ne<=U?Ae.compiled=b({data:E.data,width:te,height:ne}):Ae.compiled=null),Ae!=null&&Ae.compiled){Ae.compiled(T);return}var ee=this.cachedCanvases.getCanvas("maskCanvas",te,ne),oe=ee.context;oe.save(),re(oe,E),oe.globalCompositeOperation="source-in",oe.fillStyle=he?de.getPattern(oe,this):de,oe.fillRect(0,0,te,ne),oe.restore(),this.paintInlineImageXObject(ee.canvas)}}},{key:"paintImageMaskXObjectRepeat",value:function(E,T){var te=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,ne=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,de=arguments.length>4?arguments[4]:void 0,he=arguments.length>5?arguments[5]:void 0;if(!!this.contentVisible){var Ae=E.width,ee=E.height,oe=this.current.fillColor,M=this.current.patternFill,H=this.cachedCanvases.getCanvas("maskCanvas",Ae,ee),V=H.context;V.save(),re(V,E),V.globalCompositeOperation="source-in",V.fillStyle=M?oe.getPattern(V,this):oe,V.fillRect(0,0,Ae,ee),V.restore();for(var ge=this.ctx,ye=0,pe=he.length;ye<pe;ye+=2)ge.save(),ge.transform(T,te,ne,de,he[ye],he[ye+1]),ge.scale(1,-1),ge.drawImage(H.canvas,0,0,Ae,ee,0,-1,1,1),ge.restore()}}},{key:"paintImageMaskXObjectGroup",value:function(E){if(!!this.contentVisible)for(var T=this.ctx,te=this.current.fillColor,ne=this.current.patternFill,de=0,he=E.length;de<he;de++){var Ae=E[de],ee=Ae.width,oe=Ae.height,M=this.cachedCanvases.getCanvas("maskCanvas",ee,oe),H=M.context;H.save(),re(H,Ae),H.globalCompositeOperation="source-in",H.fillStyle=ne?te.getPattern(H,this):te,H.fillRect(0,0,ee,oe),H.restore(),T.save(),T.transform.apply(T,Ae.transform),T.scale(1,-1),T.drawImage(M.canvas,0,0,ee,oe,0,-1,1,1),T.restore()}}},{key:"paintImageXObject",value:function(E){if(!!this.contentVisible){var T=E.startsWith("g_")?this.commonObjs.get(E):this.objs.get(E);if(!T){(0,e.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(T)}}},{key:"paintImageXObjectRepeat",value:function(E,T,te,ne){if(!!this.contentVisible){var de=E.startsWith("g_")?this.commonObjs.get(E):this.objs.get(E);if(!de){(0,e.warn)("Dependent image isn't ready yet");return}for(var he=de.width,Ae=de.height,ee=[],oe=0,M=ne.length;oe<M;oe+=2)ee.push({transform:[T,0,0,te,ne[oe],ne[oe+1]],x:0,y:0,w:he,h:Ae});this.paintInlineImageXObjectGroup(de,ee)}}},{key:"paintInlineImageXObject",value:function(E){if(!!this.contentVisible){var T=E.width,te=E.height,ne=this.ctx;this.save(),ne.scale(1/T,-1/te);var de=ne.mozCurrentTransformInverse,he=Math.max(Math.hypot(de[0],de[1]),1),Ae=Math.max(Math.hypot(de[2],de[3]),1),ee,oe,M;typeof HTMLElement=="function"&&E instanceof HTMLElement||!E.data?ee=E:(oe=this.cachedCanvases.getCanvas("inlineImage",T,te),M=oe.context,Y(M,E,this.current.transferMaps),ee=oe.canvas);for(var H=T,V=te,ge="prescale1";he>2&&H>1||Ae>2&&V>1;){var ye=H,pe=V;he>2&&H>1&&(ye=Math.ceil(H/2),he/=H/ye),Ae>2&&V>1&&(pe=Math.ceil(V/2),Ae/=V/pe),oe=this.cachedCanvases.getCanvas(ge,ye,pe),M=oe.context,M.clearRect(0,0,ye,pe),M.drawImage(ee,0,0,H,V,0,0,ye,pe),ee=oe.canvas,H=ye,V=pe,ge=ge==="prescale1"?"prescale2":"prescale1"}if(ne.drawImage(ee,0,0,H,V,0,-te,T,te),this.imageLayer){var Se=this.getCanvasPosition(0,-te);this.imageLayer.appendImage({imgData:E,left:Se[0],top:Se[1],width:T/de[0],height:te/de[3]})}this.restore()}}},{key:"paintInlineImageXObjectGroup",value:function(E,T){if(!!this.contentVisible){var te=this.ctx,ne=E.width,de=E.height,he=this.cachedCanvases.getCanvas("inlineImage",ne,de),Ae=he.context;Y(Ae,E,this.current.transferMaps);for(var ee=0,oe=T.length;ee<oe;ee++){var M=T[ee];if(te.save(),te.transform.apply(te,M.transform),te.scale(1,-1),te.drawImage(he.canvas,M.x,M.y,M.w,M.h,0,-1,1,1),this.imageLayer){var H=this.getCanvasPosition(M.x,M.y);this.imageLayer.appendImage({imgData:E,left:H[0],top:H[1],width:ne,height:de})}te.restore()}}}},{key:"paintSolidColorImageMask",value:function(){!this.contentVisible||this.ctx.fillRect(0,0,1,1)}},{key:"markPoint",value:function(E){}},{key:"markPointProps",value:function(E,T){}},{key:"beginMarkedContent",value:function(E){this.markedContentStack.push({visible:!0})}},{key:"beginMarkedContentProps",value:function(E,T){E==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(T)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}},{key:"endMarkedContent",value:function(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}},{key:"beginCompat",value:function(){}},{key:"endCompat",value:function(){}},{key:"consumePath",value:function(){var E=this.ctx;this.pendingClip&&(this.pendingClip===ie?E.clip("evenodd"):E.clip(),this.pendingClip=null),E.beginPath()}},{key:"getSinglePixelWidth",value:function(){if(this._cachedGetSinglePixelWidth===null){var E=this.ctx.mozCurrentTransform,T=Math.abs(E[0]*E[3]-E[2]*E[1]),te=Math.pow(E[0],2)+Math.pow(E[2],2),ne=Math.pow(E[1],2)+Math.pow(E[3],2),de=Math.sqrt(Math.max(te,ne))/T;te!==ne&&this._combinedScaleFactor*de>1?this._cachedGetSinglePixelWidth=-(this._combinedScaleFactor*de):T>Number.EPSILON?this._cachedGetSinglePixelWidth=de:this._cachedGetSinglePixelWidth=1}return this._cachedGetSinglePixelWidth}},{key:"getCanvasPosition",value:function(E,T){var te=this.ctx.mozCurrentTransform;return[te[0]*E+te[2]*T+te[4],te[1]*E+te[3]*T+te[5]]}},{key:"isContentVisible",value:function(){for(var E=this.markedContentStack.length-1;E>=0;E--)if(!this.markedContentStack[E].visible)return!1;return!0}}]),fe}();for(var le in e.OPS)Pe.prototype[e.OPS[le]]=Pe.prototype[le];return Pe}();a.CanvasGraphics=w},(r,a,t)=>{function e(Y){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(ae){return typeof ae}:e=function(ae){return ae&&typeof Symbol=="function"&&ae.constructor===Symbol&&ae!==Symbol.prototype?"symbol":typeof ae},e(Y)}Object.defineProperty(a,"__esModule",{value:!0}),a.getShadingPattern=k,a.TilingPattern=void 0;var o=t(4);function s(Y,re){var ae=typeof Symbol!="undefined"&&Y[Symbol.iterator]||Y["@@iterator"];if(!ae){if(Array.isArray(Y)||(ae=l(Y))||re&&Y&&typeof Y.length=="number"){ae&&(Y=ae);var ce=0,J=function(){};return{s:J,n:function(){return ce>=Y.length?{done:!0}:{done:!1,value:Y[ce++]}},e:function(D){throw D},f:J}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var X=!0,L=!1,v;return{s:function(){ae=ae.call(Y)},n:function(){var D=ae.next();return X=D.done,D},e:function(D){L=!0,v=D},f:function(){try{!X&&ae.return!=null&&ae.return()}finally{if(L)throw v}}}}function l(Y,re){if(!!Y){if(typeof Y=="string")return c(Y,re);var ae=Object.prototype.toString.call(Y).slice(8,-1);if(ae==="Object"&&Y.constructor&&(ae=Y.constructor.name),ae==="Map"||ae==="Set")return Array.from(Y);if(ae==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(ae))return c(Y,re)}}function c(Y,re){(re==null||re>Y.length)&&(re=Y.length);for(var ae=0,ce=new Array(re);ae<re;ae++)ce[ae]=Y[ae];return ce}function d(Y,re){if(typeof re!="function"&&re!==null)throw new TypeError("Super expression must either be null or a function");Y.prototype=Object.create(re&&re.prototype,{constructor:{value:Y,writable:!0,configurable:!0}}),re&&P(Y,re)}function P(Y,re){return P=Object.setPrototypeOf||function(ce,J){return ce.__proto__=J,ce},P(Y,re)}function x(Y){var re=O();return function(){var ce=A(Y),J;if(re){var X=A(this).constructor;J=Reflect.construct(ce,arguments,X)}else J=ce.apply(this,arguments);return $(this,J)}}function $(Y,re){return re&&(e(re)==="object"||typeof re=="function")?re:j(Y)}function j(Y){if(Y===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return Y}function O(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(Y){return!1}}function A(Y){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(ae){return ae.__proto__||Object.getPrototypeOf(ae)},A(Y)}function y(Y,re){if(!(Y instanceof re))throw new TypeError("Cannot call a class as a function")}function G(Y,re){for(var ae=0;ae<re.length;ae++){var ce=re[ae];ce.enumerable=ce.enumerable||!1,ce.configurable=!0,"value"in ce&&(ce.writable=!0),Object.defineProperty(Y,ce.key,ce)}}function ue(Y,re,ae){return re&&G(Y.prototype,re),ae&&G(Y,ae),Y}var K;function U(Y){return typeof DOMMatrix!="undefined"?new DOMMatrix(Y):(K||(K=document.createElementNS("http://www.w3.org/2000/svg","svg")),K.createSVGMatrix(Y))}function I(Y,re){if(!(!re||typeof Path2D=="undefined")){var ae=re[2]-re[0],ce=re[3]-re[1],J=new Path2D;J.rect(re[0],re[1],ae,ce),Y.clip(J)}}var B=function(){function Y(){y(this,Y),this.constructor===Y&&(0,o.unreachable)("Cannot initialize BaseShadingPattern.")}return ue(Y,[{key:"getPattern",value:function(){(0,o.unreachable)("Abstract method `getPattern` called.")}}]),Y}(),C=function(Y){d(ae,Y);var re=x(ae);function ae(ce){var J;return y(this,ae),J=re.call(this),J._type=ce[1],J._bbox=ce[2],J._colorStops=ce[3],J._p0=ce[4],J._p1=ce[5],J._r0=ce[6],J._r1=ce[7],J._matrix=ce[8],J}return ue(ae,[{key:"getPattern",value:function(J,X,L){var v=X.cachedCanvases.getCanvas("pattern",J.canvas.width,J.canvas.height,!0),R=v.context;R.clearRect(0,0,R.canvas.width,R.canvas.height),R.beginPath(),R.rect(0,0,R.canvas.width,R.canvas.height),L?R.setTransform.apply(R,J.mozCurrentTransform):(R.setTransform.apply(R,X.baseTransform),this._matrix&&R.transform.apply(R,this._matrix)),I(R,this._bbox);var D;this._type==="axial"?D=R.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(D=R.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));var Z=s(this._colorStops),se;try{for(Z.s();!(se=Z.n()).done;){var ie=se.value;D.addColorStop(ie[0],ie[1])}}catch(le){Z.e(le)}finally{Z.f()}R.fillStyle=D,R.fill();var Pe=J.createPattern(v.canvas,"repeat");return Pe.setTransform(U(J.mozCurrentTransformInverse)),Pe}}]),ae}(B);function W(Y,re,ae,ce,J,X,L,v){var R=re.coords,D=re.colors,Z=Y.data,se=Y.width*4,ie;R[ae+1]>R[ce+1]&&(ie=ae,ae=ce,ce=ie,ie=X,X=L,L=ie),R[ce+1]>R[J+1]&&(ie=ce,ce=J,J=ie,ie=L,L=v,v=ie),R[ae+1]>R[ce+1]&&(ie=ae,ae=ce,ce=ie,ie=X,X=L,L=ie);var Pe=(R[ae]+re.offsetX)*re.scaleX,le=(R[ae+1]+re.offsetY)*re.scaleY,fe=(R[ce]+re.offsetX)*re.scaleX,N=(R[ce+1]+re.offsetY)*re.scaleY,E=(R[J]+re.offsetX)*re.scaleX,T=(R[J+1]+re.offsetY)*re.scaleY;if(!(le>=T))for(var te=D[X],ne=D[X+1],de=D[X+2],he=D[L],Ae=D[L+1],ee=D[L+2],oe=D[v],M=D[v+1],H=D[v+2],V=Math.round(le),ge=Math.round(T),ye,pe,Se,ke,Ce,Ie,Ne,Me,Ee=V;Ee<=ge;Ee++){if(Ee<N){var Be=void 0;Ee<le?Be=0:le===N?Be=1:Be=(le-Ee)/(le-N),ye=Pe-(Pe-fe)*Be,pe=te-(te-he)*Be,Se=ne-(ne-Ae)*Be,ke=de-(de-ee)*Be}else{var _e=void 0;Ee>T?_e=1:N===T?_e=0:_e=(N-Ee)/(N-T),ye=fe-(fe-E)*_e,pe=he-(he-oe)*_e,Se=Ae-(Ae-M)*_e,ke=ee-(ee-H)*_e}var we=void 0;Ee<le?we=0:Ee>T?we=1:we=(le-Ee)/(le-T),Ce=Pe-(Pe-E)*we,Ie=te-(te-oe)*we,Ne=ne-(ne-M)*we,Me=de-(de-H)*we;for(var Fe=Math.round(Math.min(ye,Ce)),Le=Math.round(Math.max(ye,Ce)),$e=se*Ee+Fe*4,Ge=Fe;Ge<=Le;Ge++)we=(ye-Ge)/(ye-Ce),we<0?we=0:we>1&&(we=1),Z[$e++]=pe-(pe-Ie)*we|0,Z[$e++]=Se-(Se-Ne)*we|0,Z[$e++]=ke-(ke-Me)*we|0,Z[$e++]=255}}function b(Y,re,ae){var ce=re.coords,J=re.colors,X,L;switch(re.type){case"lattice":var v=re.verticesPerRow,R=Math.floor(ce.length/v)-1,D=v-1;for(X=0;X<R;X++)for(var Z=X*v,se=0;se<D;se++,Z++)W(Y,ae,ce[Z],ce[Z+1],ce[Z+v],J[Z],J[Z+1],J[Z+v]),W(Y,ae,ce[Z+v+1],ce[Z+1],ce[Z+v],J[Z+v+1],J[Z+1],J[Z+v]);break;case"triangles":for(X=0,L=ce.length;X<L;X+=3)W(Y,ae,ce[X],ce[X+1],ce[X+2],J[X],J[X+1],J[X+2]);break;default:throw new Error("illegal figure")}}var S=function(Y){d(ae,Y);var re=x(ae);function ae(ce){var J;return y(this,ae),J=re.call(this),J._coords=ce[2],J._colors=ce[3],J._figures=ce[4],J._bounds=ce[5],J._matrix=ce[6],J._bbox=ce[7],J._background=ce[8],J}return ue(ae,[{key:"_createMeshCanvas",value:function(J,X,L){var v=1.1,R=3e3,D=2,Z=Math.floor(this._bounds[0]),se=Math.floor(this._bounds[1]),ie=Math.ceil(this._bounds[2])-Z,Pe=Math.ceil(this._bounds[3])-se,le=Math.min(Math.ceil(Math.abs(ie*J[0]*v)),R),fe=Math.min(Math.ceil(Math.abs(Pe*J[1]*v)),R),N=ie/le,E=Pe/fe,T={coords:this._coords,colors:this._colors,offsetX:-Z,offsetY:-se,scaleX:1/N,scaleY:1/E},te=le+D*2,ne=fe+D*2,de=L.getCanvas("mesh",te,ne,!1),he=de.context,Ae=he.createImageData(le,fe);if(X)for(var ee=Ae.data,oe=0,M=ee.length;oe<M;oe+=4)ee[oe]=X[0],ee[oe+1]=X[1],ee[oe+2]=X[2],ee[oe+3]=255;var H=s(this._figures),V;try{for(H.s();!(V=H.n()).done;){var ge=V.value;b(Ae,ge,T)}}catch(pe){H.e(pe)}finally{H.f()}he.putImageData(Ae,D,D);var ye=de.canvas;return{canvas:ye,offsetX:Z-D*N,offsetY:se-D*E,scaleX:N,scaleY:E}}},{key:"getPattern",value:function(J,X,L){I(J,this._bbox);var v;if(L)v=o.Util.singularValueDecompose2dScale(J.mozCurrentTransform);else if(v=o.Util.singularValueDecompose2dScale(X.baseTransform),this._matrix){var R=o.Util.singularValueDecompose2dScale(this._matrix);v=[v[0]*R[0],v[1]*R[1]]}var D=this._createMeshCanvas(v,L?null:this._background,X.cachedCanvases);return L||(J.setTransform.apply(J,X.baseTransform),this._matrix&&J.transform.apply(J,this._matrix)),J.translate(D.offsetX,D.offsetY),J.scale(D.scaleX,D.scaleY),J.createPattern(D.canvas,"no-repeat")}}]),ae}(B),w=function(Y){d(ae,Y);var re=x(ae);function ae(){return y(this,ae),re.apply(this,arguments)}return ue(ae,[{key:"getPattern",value:function(){return"hotpink"}}]),ae}(B);function k(Y){switch(Y[0]){case"RadialAxial":return new C(Y);case"Mesh":return new S(Y);case"Dummy":return new w}throw new Error("Unknown IR type: ".concat(Y[0]))}var z={COLORED:1,UNCOLORED:2},Q=function(){function Y(re,ae,ce,J,X){y(this,Y),this.operatorList=re[2],this.matrix=re[3]||[1,0,0,1,0,0],this.bbox=re[4],this.xstep=re[5],this.ystep=re[6],this.paintType=re[7],this.tilingType=re[8],this.color=ae,this.ctx=ce,this.canvasGraphicsFactory=J,this.baseTransform=X}return ue(Y,[{key:"createPatternCanvas",value:function(ae){var ce=this.operatorList,J=this.bbox,X=this.xstep,L=this.ystep,v=this.paintType,R=this.tilingType,D=this.color,Z=this.canvasGraphicsFactory;(0,o.info)("TilingType: "+R);var se=J[0],ie=J[1],Pe=J[2],le=J[3],fe=o.Util.singularValueDecompose2dScale(this.matrix),N=o.Util.singularValueDecompose2dScale(this.baseTransform),E=[fe[0]*N[0],fe[1]*N[1]],T=this.getSizeAndScale(X,this.ctx.canvas.width,E[0]),te=this.getSizeAndScale(L,this.ctx.canvas.height,E[1]),ne=ae.cachedCanvases.getCanvas("pattern",T.size,te.size,!0),de=ne.context,he=Z.createCanvasGraphics(de);return he.groupLevel=ae.groupLevel,this.setFillAndStrokeStyleToContext(he,v,D),he.transform(T.scale,0,0,te.scale,0,0),this.clipBbox(he,J,se,ie,Pe,le),he.baseTransform=he.ctx.mozCurrentTransform.slice(),he.executeOperatorList(ce),he.endDrawing(),{canvas:ne.canvas,scaleX:T.scale,scaleY:te.scale}}},{key:"getSizeAndScale",value:function(ae,ce,J){ae=Math.abs(ae);var X=Math.max(Y.MAX_PATTERN_SIZE,ce),L=Math.ceil(ae*J);return L>=X?L=X:J=L/ae,{scale:J,size:L}}},{key:"clipBbox",value:function(ae,ce,J,X,L,v){if(Array.isArray(ce)&&ce.length===4){var R=L-J,D=v-X;ae.ctx.rect(J,X,R,D),ae.clip(),ae.endPath()}}},{key:"setFillAndStrokeStyleToContext",value:function(ae,ce,J){var X=ae.ctx,L=ae.current;switch(ce){case z.COLORED:var v=this.ctx;X.fillStyle=v.fillStyle,X.strokeStyle=v.strokeStyle,L.fillColor=v.fillStyle,L.strokeColor=v.strokeStyle;break;case z.UNCOLORED:var R=o.Util.makeHexColor(J[0],J[1],J[2]);X.fillStyle=R,X.strokeStyle=R,L.fillColor=R,L.strokeColor=R;break;default:throw new o.FormatError("Unsupported paint type: ".concat(ce))}}},{key:"getPattern",value:function(ae,ce,J){ae=this.ctx;var X=ae.mozCurrentTransformInverse;J||(X=o.Util.transform(X,ce.baseTransform),this.matrix&&(X=o.Util.transform(X,this.matrix)));var L=this.createPatternCanvas(ce),v=U(X);v=v.scale(1/L.scaleX,1/L.scaleY);var R=ae.createPattern(L.canvas,"repeat");return R.setTransform(v),R}}],[{key:"MAX_PATTERN_SIZE",get:function(){return(0,o.shadow)(this,"MAX_PATTERN_SIZE",3e3)}}]),Y}();a.TilingPattern=Q},(r,a)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.GlobalWorkerOptions=void 0;var t=Object.create(null);a.GlobalWorkerOptions=t,t.workerPort=t.workerPort===void 0?null:t.workerPort,t.workerSrc=t.workerSrc===void 0?"":t.workerSrc},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.MessageHandler=void 0;var e=s(t(2)),o=t(4);function s(G){return G&&G.__esModule?G:{default:G}}function l(G,ue,K,U,I,B,C){try{var W=G[B](C),b=W.value}catch(S){K(S);return}W.done?ue(b):Promise.resolve(b).then(U,I)}function c(G){return function(){var ue=this,K=arguments;return new Promise(function(U,I){var B=G.apply(ue,K);function C(b){l(B,U,I,C,W,"next",b)}function W(b){l(B,U,I,C,W,"throw",b)}C(void 0)})}}function d(G,ue){if(!(G instanceof ue))throw new TypeError("Cannot call a class as a function")}function P(G,ue){for(var K=0;K<ue.length;K++){var U=ue[K];U.enumerable=U.enumerable||!1,U.configurable=!0,"value"in U&&(U.writable=!0),Object.defineProperty(G,U.key,U)}}function x(G,ue,K){return ue&&P(G.prototype,ue),K&&P(G,K),G}function $(G){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?$=function(K){return typeof K}:$=function(K){return K&&typeof Symbol=="function"&&K.constructor===Symbol&&K!==Symbol.prototype?"symbol":typeof K},$(G)}var j={UNKNOWN:0,DATA:1,ERROR:2},O={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function A(G){if($(G)!=="object"||G===null)return G;switch(G.name){case"AbortException":return new o.AbortException(G.message);case"MissingPDFException":return new o.MissingPDFException(G.message);case"UnexpectedResponseException":return new o.UnexpectedResponseException(G.message,G.status);case"UnknownErrorException":return new o.UnknownErrorException(G.message,G.details);default:return new o.UnknownErrorException(G.message,G.toString())}}var y=function(){function G(ue,K,U){var I=this;d(this,G),this.sourceName=ue,this.targetName=K,this.comObj=U,this.callbackId=1,this.streamId=1,this.postMessageTransfers=!0,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=function(B){var C=B.data;if(C.targetName===I.sourceName){if(C.stream){I._processStreamMessage(C);return}if(C.callback){var W=C.callbackId,b=I.callbackCapabilities[W];if(!b)throw new Error("Cannot resolve callback ".concat(W));if(delete I.callbackCapabilities[W],C.callback===j.DATA)b.resolve(C.data);else if(C.callback===j.ERROR)b.reject(A(C.reason));else throw new Error("Unexpected callback case");return}var S=I.actionHandler[C.action];if(!S)throw new Error("Unknown action from worker: ".concat(C.action));if(C.callbackId){var w=I.sourceName,k=C.sourceName;new Promise(function(z){z(S(C.data))}).then(function(z){U.postMessage({sourceName:w,targetName:k,callback:j.DATA,callbackId:C.callbackId,data:z})},function(z){U.postMessage({sourceName:w,targetName:k,callback:j.ERROR,callbackId:C.callbackId,reason:A(z)})});return}if(C.streamId){I._createStreamSink(C);return}S(C.data)}},U.addEventListener("message",this._onComObjOnMessage)}return x(G,[{key:"on",value:function(K,U){var I=this.actionHandler;if(I[K])throw new Error('There is already an actionName called "'.concat(K,'"'));I[K]=U}},{key:"send",value:function(K,U,I){this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:K,data:U},I)}},{key:"sendWithPromise",value:function(K,U,I){var B=this.callbackId++,C=(0,o.createPromiseCapability)();this.callbackCapabilities[B]=C;try{this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:K,callbackId:B,data:U},I)}catch(W){C.reject(W)}return C.promise}},{key:"sendWithStream",value:function(K,U,I,B){var C=this,W=this.streamId++,b=this.sourceName,S=this.targetName,w=this.comObj;return new ReadableStream({start:function(z){var Q=(0,o.createPromiseCapability)();return C.streamControllers[W]={controller:z,startCall:Q,pullCall:null,cancelCall:null,isClosed:!1},C._postMessage({sourceName:b,targetName:S,action:K,streamId:W,data:U,desiredSize:z.desiredSize},B),Q.promise},pull:function(z){var Q=(0,o.createPromiseCapability)();return C.streamControllers[W].pullCall=Q,w.postMessage({sourceName:b,targetName:S,stream:O.PULL,streamId:W,desiredSize:z.desiredSize}),Q.promise},cancel:function(z){(0,o.assert)(z instanceof Error,"cancel must have a valid reason");var Q=(0,o.createPromiseCapability)();return C.streamControllers[W].cancelCall=Q,C.streamControllers[W].isClosed=!0,w.postMessage({sourceName:b,targetName:S,stream:O.CANCEL,streamId:W,reason:A(z)}),Q.promise}},I)}},{key:"_createStreamSink",value:function(K){var U=this,I=this.actionHandler[K.action],B=K.streamId,C=this.sourceName,W=K.sourceName,b=this.comObj,S={enqueue:function(k){var z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,Q=arguments.length>2?arguments[2]:void 0;if(!this.isCancelled){var Y=this.desiredSize;this.desiredSize-=z,Y>0&&this.desiredSize<=0&&(this.sinkCapability=(0,o.createPromiseCapability)(),this.ready=this.sinkCapability.promise),U._postMessage({sourceName:C,targetName:W,stream:O.ENQUEUE,streamId:B,chunk:k},Q)}},close:function(){this.isCancelled||(this.isCancelled=!0,b.postMessage({sourceName:C,targetName:W,stream:O.CLOSE,streamId:B}),delete U.streamSinks[B])},error:function(k){(0,o.assert)(k instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,b.postMessage({sourceName:C,targetName:W,stream:O.ERROR,streamId:B,reason:A(k)}))},sinkCapability:(0,o.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:K.desiredSize,ready:null};S.sinkCapability.resolve(),S.ready=S.sinkCapability.promise,this.streamSinks[B]=S,new Promise(function(w){w(I(K.data,S))}).then(function(){b.postMessage({sourceName:C,targetName:W,stream:O.START_COMPLETE,streamId:B,success:!0})},function(w){b.postMessage({sourceName:C,targetName:W,stream:O.START_COMPLETE,streamId:B,reason:A(w)})})}},{key:"_processStreamMessage",value:function(K){var U=K.streamId,I=this.sourceName,B=K.sourceName,C=this.comObj;switch(K.stream){case O.START_COMPLETE:K.success?this.streamControllers[U].startCall.resolve():this.streamControllers[U].startCall.reject(A(K.reason));break;case O.PULL_COMPLETE:K.success?this.streamControllers[U].pullCall.resolve():this.streamControllers[U].pullCall.reject(A(K.reason));break;case O.PULL:if(!this.streamSinks[U]){C.postMessage({sourceName:I,targetName:B,stream:O.PULL_COMPLETE,streamId:U,success:!0});break}this.streamSinks[U].desiredSize<=0&&K.desiredSize>0&&this.streamSinks[U].sinkCapability.resolve(),this.streamSinks[U].desiredSize=K.desiredSize;var W=this.streamSinks[K.streamId].onPull;new Promise(function(S){S(W&&W())}).then(function(){C.postMessage({sourceName:I,targetName:B,stream:O.PULL_COMPLETE,streamId:U,success:!0})},function(S){C.postMessage({sourceName:I,targetName:B,stream:O.PULL_COMPLETE,streamId:U,reason:A(S)})});break;case O.ENQUEUE:if((0,o.assert)(this.streamControllers[U],"enqueue should have stream controller"),this.streamControllers[U].isClosed)break;this.streamControllers[U].controller.enqueue(K.chunk);break;case O.CLOSE:if((0,o.assert)(this.streamControllers[U],"close should have stream controller"),this.streamControllers[U].isClosed)break;this.streamControllers[U].isClosed=!0,this.streamControllers[U].controller.close(),this._deleteStreamController(U);break;case O.ERROR:(0,o.assert)(this.streamControllers[U],"error should have stream controller"),this.streamControllers[U].controller.error(A(K.reason)),this._deleteStreamController(U);break;case O.CANCEL_COMPLETE:K.success?this.streamControllers[U].cancelCall.resolve():this.streamControllers[U].cancelCall.reject(A(K.reason)),this._deleteStreamController(U);break;case O.CANCEL:if(!this.streamSinks[U])break;var b=this.streamSinks[K.streamId].onCancel;new Promise(function(S){S(b&&b(A(K.reason)))}).then(function(){C.postMessage({sourceName:I,targetName:B,stream:O.CANCEL_COMPLETE,streamId:U,success:!0})},function(S){C.postMessage({sourceName:I,targetName:B,stream:O.CANCEL_COMPLETE,streamId:U,reason:A(S)})}),this.streamSinks[U].sinkCapability.reject(A(K.reason)),this.streamSinks[U].isCancelled=!0,delete this.streamSinks[U];break;default:throw new Error("Unexpected stream case")}}},{key:"_deleteStreamController",value:function(){var ue=c(e.default.mark(function U(I){return e.default.wrap(function(C){for(;;)switch(C.prev=C.next){case 0:return C.next=2,Promise.allSettled([this.streamControllers[I].startCall,this.streamControllers[I].pullCall,this.streamControllers[I].cancelCall].map(function(W){return W&&W.promise}));case 2:delete this.streamControllers[I];case 3:case"end":return C.stop()}},U,this)}));function K(U){return ue.apply(this,arguments)}return K}()},{key:"_postMessage",value:function(K,U){U&&this.postMessageTransfers?this.comObj.postMessage(K,U):this.comObj.postMessage(K)}},{key:"destroy",value:function(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}]),G}();a.MessageHandler=y},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.Metadata=void 0;var e=t(4);function o(d,P){if(!(d instanceof P))throw new TypeError("Cannot call a class as a function")}function s(d,P){for(var x=0;x<P.length;x++){var $=P[x];$.enumerable=$.enumerable||!1,$.configurable=!0,"value"in $&&($.writable=!0),Object.defineProperty(d,$.key,$)}}function l(d,P,x){return P&&s(d.prototype,P),x&&s(d,x),d}var c=function(){function d(P){var x=P.parsedData,$=P.rawData;o(this,d),this._metadataMap=x,this._data=$}return l(d,[{key:"getRaw",value:function(){return this._data}},{key:"get",value:function(x){var $;return($=this._metadataMap.get(x))!==null&&$!==void 0?$:null}},{key:"getAll",value:function(){return(0,e.objectFromMap)(this._metadataMap)}},{key:"has",value:function(x){return this._metadataMap.has(x)}}]),d}();a.Metadata=c},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.OptionalContentConfig=void 0;var e=t(4);function o(j,O){var A=typeof Symbol!="undefined"&&j[Symbol.iterator]||j["@@iterator"];if(!A){if(Array.isArray(j)||(A=s(j))||O&&j&&typeof j.length=="number"){A&&(j=A);var y=0,G=function(){};return{s:G,n:function(){return y>=j.length?{done:!0}:{done:!1,value:j[y++]}},e:function(B){throw B},f:G}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ue=!0,K=!1,U;return{s:function(){A=A.call(j)},n:function(){var B=A.next();return ue=B.done,B},e:function(B){K=!0,U=B},f:function(){try{!ue&&A.return!=null&&A.return()}finally{if(K)throw U}}}}function s(j,O){if(!!j){if(typeof j=="string")return l(j,O);var A=Object.prototype.toString.call(j).slice(8,-1);if(A==="Object"&&j.constructor&&(A=j.constructor.name),A==="Map"||A==="Set")return Array.from(j);if(A==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(A))return l(j,O)}}function l(j,O){(O==null||O>j.length)&&(O=j.length);for(var A=0,y=new Array(O);A<O;A++)y[A]=j[A];return y}function c(j,O){for(var A=0;A<O.length;A++){var y=O[A];y.enumerable=y.enumerable||!1,y.configurable=!0,"value"in y&&(y.writable=!0),Object.defineProperty(j,y.key,y)}}function d(j,O,A){return O&&c(j.prototype,O),A&&c(j,A),j}function P(j,O){if(!(j instanceof O))throw new TypeError("Cannot call a class as a function")}var x=function j(O,A){P(this,j),this.visible=!0,this.name=O,this.intent=A},$=function(){function j(O){if(P(this,j),this.name=null,this.creator=null,this._order=null,this._groups=new Map,O!==null){this.name=O.name,this.creator=O.creator,this._order=O.order;var A=o(O.groups),y;try{for(A.s();!(y=A.n()).done;){var G=y.value;this._groups.set(G.id,new x(G.name,G.intent))}}catch(w){A.e(w)}finally{A.f()}if(O.baseState==="OFF"){var ue=o(this._groups),K;try{for(ue.s();!(K=ue.n()).done;){var U=K.value;U.visible=!1}}catch(w){ue.e(w)}finally{ue.f()}}var I=o(O.on),B;try{for(I.s();!(B=I.n()).done;){var C=B.value;this._groups.get(C).visible=!0}}catch(w){I.e(w)}finally{I.f()}var W=o(O.off),b;try{for(W.s();!(b=W.n()).done;){var S=b.value;this._groups.get(S).visible=!1}}catch(w){W.e(w)}finally{W.f()}}}return d(j,[{key:"_evaluateVisibilityExpression",value:function(A){var y=A.length;if(y<2)return!0;for(var G=A[0],ue=1;ue<y;ue++){var K=A[ue],U=void 0;if(Array.isArray(K))U=this._evaluateVisibilityExpression(K);else if(this._groups.has(K))U=this._groups.get(K).visible;else return(0,e.warn)("Optional content group not found: ".concat(K)),!0;switch(G){case"And":if(!U)return!1;break;case"Or":if(U)return!0;break;case"Not":return!U;default:return!0}}return G==="And"}},{key:"isVisible",value:function(A){if(A.type==="OCG")return this._groups.has(A.id)?this._groups.get(A.id).visible:((0,e.warn)("Optional content group not found: ".concat(A.id)),!0);if(A.type==="OCMD"){if(A.expression)return this._evaluateVisibilityExpression(A.expression);if(!A.policy||A.policy==="AnyOn"){var y=o(A.ids),G;try{for(y.s();!(G=y.n()).done;){var ue=G.value;if(!this._groups.has(ue))return(0,e.warn)("Optional content group not found: ".concat(ue)),!0;if(this._groups.get(ue).visible)return!0}}catch(k){y.e(k)}finally{y.f()}return!1}else if(A.policy==="AllOn"){var K=o(A.ids),U;try{for(K.s();!(U=K.n()).done;){var I=U.value;if(!this._groups.has(I))return(0,e.warn)("Optional content group not found: ".concat(I)),!0;if(!this._groups.get(I).visible)return!1}}catch(k){K.e(k)}finally{K.f()}return!0}else if(A.policy==="AnyOff"){var B=o(A.ids),C;try{for(B.s();!(C=B.n()).done;){var W=C.value;if(!this._groups.has(W))return(0,e.warn)("Optional content group not found: ".concat(W)),!0;if(!this._groups.get(W).visible)return!0}}catch(k){B.e(k)}finally{B.f()}return!1}else if(A.policy==="AllOff"){var b=o(A.ids),S;try{for(b.s();!(S=b.n()).done;){var w=S.value;if(!this._groups.has(w))return(0,e.warn)("Optional content group not found: ".concat(w)),!0;if(this._groups.get(w).visible)return!1}}catch(k){b.e(k)}finally{b.f()}return!0}return(0,e.warn)("Unknown optional content policy ".concat(A.policy,".")),!0}return(0,e.warn)("Unknown group type ".concat(A.type,".")),!0}},{key:"setVisibility",value:function(A){var y=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;if(!this._groups.has(A)){(0,e.warn)("Optional content group not found: ".concat(A));return}this._groups.get(A).visible=!!y}},{key:"getOrder",value:function(){return this._groups.size?this._order?this._order.slice():Array.from(this._groups.keys()):null}},{key:"getGroups",value:function(){return this._groups.size>0?(0,e.objectFromMap)(this._groups):null}},{key:"getGroup",value:function(A){return this._groups.get(A)||null}}]),j}();a.OptionalContentConfig=$},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.PDFDataTransportStream=void 0;var e=l(t(2)),o=t(4),s=t(1);function l(K){return K&&K.__esModule?K:{default:K}}function c(K,U,I,B,C,W,b){try{var S=K[W](b),w=S.value}catch(k){I(k);return}S.done?U(w):Promise.resolve(w).then(B,C)}function d(K){return function(){var U=this,I=arguments;return new Promise(function(B,C){var W=K.apply(U,I);function b(w){c(W,B,C,b,S,"next",w)}function S(w){c(W,B,C,b,S,"throw",w)}b(void 0)})}}function P(K,U){var I=typeof Symbol!="undefined"&&K[Symbol.iterator]||K["@@iterator"];if(!I){if(Array.isArray(K)||(I=x(K))||U&&K&&typeof K.length=="number"){I&&(K=I);var B=0,C=function(){};return{s:C,n:function(){return B>=K.length?{done:!0}:{done:!1,value:K[B++]}},e:function(k){throw k},f:C}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var W=!0,b=!1,S;return{s:function(){I=I.call(K)},n:function(){var k=I.next();return W=k.done,k},e:function(k){b=!0,S=k},f:function(){try{!W&&I.return!=null&&I.return()}finally{if(b)throw S}}}}function x(K,U){if(!!K){if(typeof K=="string")return $(K,U);var I=Object.prototype.toString.call(K).slice(8,-1);if(I==="Object"&&K.constructor&&(I=K.constructor.name),I==="Map"||I==="Set")return Array.from(K);if(I==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(I))return $(K,U)}}function $(K,U){(U==null||U>K.length)&&(U=K.length);for(var I=0,B=new Array(U);I<U;I++)B[I]=K[I];return B}function j(K,U){if(!(K instanceof U))throw new TypeError("Cannot call a class as a function")}function O(K,U){for(var I=0;I<U.length;I++){var B=U[I];B.enumerable=B.enumerable||!1,B.configurable=!0,"value"in B&&(B.writable=!0),Object.defineProperty(K,B.key,B)}}function A(K,U,I){return U&&O(K.prototype,U),I&&O(K,I),K}var y=function(){function K(U,I){var B=this;j(this,K),(0,o.assert)(I,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=U.progressiveDone||!1,this._contentDispositionFilename=U.contentDispositionFilename||null;var C=U.initialData;if((C==null?void 0:C.length)>0){var W=new Uint8Array(C).buffer;this._queuedChunks.push(W)}this._pdfDataRangeTransport=I,this._isStreamingSupported=!U.disableStream,this._isRangeSupported=!U.disableRange,this._contentLength=U.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(function(b,S){B._onReceiveData({begin:b,chunk:S})}),this._pdfDataRangeTransport.addProgressListener(function(b,S){B._onProgress({loaded:b,total:S})}),this._pdfDataRangeTransport.addProgressiveReadListener(function(b){B._onReceiveData({chunk:b})}),this._pdfDataRangeTransport.addProgressiveDoneListener(function(){B._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}return A(K,[{key:"_onReceiveData",value:function(I){var B=new Uint8Array(I.chunk).buffer;if(I.begin===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(B):this._queuedChunks.push(B);else{var C=this._rangeReaders.some(function(W){return W._begin!==I.begin?!1:(W._enqueue(B),!0)});(0,o.assert)(C,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}},{key:"_progressiveDataLength",get:function(){var I,B;return(I=(B=this._fullRequestReader)===null||B===void 0?void 0:B._loaded)!==null&&I!==void 0?I:0}},{key:"_onProgress",value:function(I){if(I.total===void 0){var B=this._rangeReaders[0];B!=null&&B.onProgress&&B.onProgress({loaded:I.loaded})}else{var C=this._fullRequestReader;C!=null&&C.onProgress&&C.onProgress({loaded:I.loaded,total:I.total})}}},{key:"_onProgressiveDone",value:function(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}},{key:"_removeRangeReader",value:function(I){var B=this._rangeReaders.indexOf(I);B>=0&&this._rangeReaders.splice(B,1)}},{key:"getFullReader",value:function(){(0,o.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");var I=this._queuedChunks;return this._queuedChunks=null,new G(this,I,this._progressiveDone,this._contentDispositionFilename)}},{key:"getRangeReader",value:function(I,B){if(B<=this._progressiveDataLength)return null;var C=new ue(this,I,B);return this._pdfDataRangeTransport.requestDataRange(I,B),this._rangeReaders.push(C),C}},{key:"cancelAllRequests",value:function(I){this._fullRequestReader&&this._fullRequestReader.cancel(I);var B=P(this._rangeReaders.slice(0)),C;try{for(B.s();!(C=B.n()).done;){var W=C.value;W.cancel(I)}}catch(b){B.e(b)}finally{B.f()}this._pdfDataRangeTransport.abort()}}]),K}();a.PDFDataTransportStream=y;var G=function(){function K(U,I){var B=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,C=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null;j(this,K),this._stream=U,this._done=B||!1,this._filename=(0,s.isPdfFile)(C)?C:null,this._queuedChunks=I||[],this._loaded=0;var W=P(this._queuedChunks),b;try{for(W.s();!(b=W.n()).done;){var S=b.value;this._loaded+=S.byteLength}}catch(w){W.e(w)}finally{W.f()}this._requests=[],this._headersReady=Promise.resolve(),U._fullRequestReader=this,this.onProgress=null}return A(K,[{key:"_enqueue",value:function(I){if(!this._done){if(this._requests.length>0){var B=this._requests.shift();B.resolve({value:I,done:!1})}else this._queuedChunks.push(I);this._loaded+=I.byteLength}}},{key:"headersReady",get:function(){return this._headersReady}},{key:"filename",get:function(){return this._filename}},{key:"isRangeSupported",get:function(){return this._stream._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._stream._isStreamingSupported}},{key:"contentLength",get:function(){return this._stream._contentLength}},{key:"read",value:function(){var U=d(e.default.mark(function B(){var C,W;return e.default.wrap(function(S){for(;;)switch(S.prev=S.next){case 0:if(!(this._queuedChunks.length>0)){S.next=3;break}return C=this._queuedChunks.shift(),S.abrupt("return",{value:C,done:!1});case 3:if(!this._done){S.next=5;break}return S.abrupt("return",{value:void 0,done:!0});case 5:return W=(0,o.createPromiseCapability)(),this._requests.push(W),S.abrupt("return",W.promise);case 8:case"end":return S.stop()}},B,this)}));function I(){return U.apply(this,arguments)}return I}()},{key:"cancel",value:function(I){this._done=!0;var B=P(this._requests),C;try{for(B.s();!(C=B.n()).done;){var W=C.value;W.resolve({value:void 0,done:!0})}}catch(b){B.e(b)}finally{B.f()}this._requests.length=0}},{key:"progressiveDone",value:function(){this._done||(this._done=!0)}}]),K}(),ue=function(){function K(U,I,B){j(this,K),this._stream=U,this._begin=I,this._end=B,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}return A(K,[{key:"_enqueue",value:function(I){if(!this._done){if(this._requests.length===0)this._queuedChunk=I;else{var B=this._requests.shift();B.resolve({value:I,done:!1});var C=P(this._requests),W;try{for(C.s();!(W=C.n()).done;){var b=W.value;b.resolve({value:void 0,done:!0})}}catch(S){C.e(S)}finally{C.f()}this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}},{key:"isStreamingSupported",get:function(){return!1}},{key:"read",value:function(){var U=d(e.default.mark(function B(){var C,W;return e.default.wrap(function(S){for(;;)switch(S.prev=S.next){case 0:if(!this._queuedChunk){S.next=4;break}return C=this._queuedChunk,this._queuedChunk=null,S.abrupt("return",{value:C,done:!1});case 4:if(!this._done){S.next=6;break}return S.abrupt("return",{value:void 0,done:!0});case 6:return W=(0,o.createPromiseCapability)(),this._requests.push(W),S.abrupt("return",W.promise);case 9:case"end":return S.stop()}},B,this)}));function I(){return U.apply(this,arguments)}return I}()},{key:"cancel",value:function(I){this._done=!0;var B=P(this._requests),C;try{for(B.s();!(C=B.n()).done;){var W=C.value;W.resolve({value:void 0,done:!0})}}catch(b){B.e(b)}finally{B.f()}this._requests.length=0,this._stream._removeRangeReader(this)}}]),K}()},(r,a,t)=>{function e(ee){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(M){return typeof M}:e=function(M){return M&&typeof Symbol=="function"&&M.constructor===Symbol&&M!==Symbol.prototype?"symbol":typeof M},e(ee)}Object.defineProperty(a,"__esModule",{value:!0}),a.AnnotationLayer=void 0;var o=t(1),s=t(4),l=t(116),c=t(126);function d(ee,oe,M){return typeof Reflect!="undefined"&&Reflect.get?d=Reflect.get:d=function(V,ge,ye){var pe=P(V,ge);if(!!pe){var Se=Object.getOwnPropertyDescriptor(pe,ge);return Se.get?Se.get.call(ye):Se.value}},d(ee,oe,M||ee)}function P(ee,oe){for(;!Object.prototype.hasOwnProperty.call(ee,oe)&&(ee=I(ee),ee!==null););return ee}function x(ee,oe){return O(ee)||j(ee,oe)||C(ee,oe)||$()}function $(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function j(ee,oe){var M=ee&&(typeof Symbol!="undefined"&&ee[Symbol.iterator]||ee["@@iterator"]);if(M!=null){var H=[],V=!0,ge=!1,ye,pe;try{for(M=M.call(ee);!(V=(ye=M.next()).done)&&(H.push(ye.value),!(oe&&H.length===oe));V=!0);}catch(Se){ge=!0,pe=Se}finally{try{!V&&M.return!=null&&M.return()}finally{if(ge)throw pe}}return H}}function O(ee){if(Array.isArray(ee))return ee}function A(ee,oe){if(typeof oe!="function"&&oe!==null)throw new TypeError("Super expression must either be null or a function");ee.prototype=Object.create(oe&&oe.prototype,{constructor:{value:ee,writable:!0,configurable:!0}}),oe&&y(ee,oe)}function y(ee,oe){return y=Object.setPrototypeOf||function(H,V){return H.__proto__=V,H},y(ee,oe)}function G(ee){var oe=U();return function(){var H=I(ee),V;if(oe){var ge=I(this).constructor;V=Reflect.construct(H,arguments,ge)}else V=H.apply(this,arguments);return ue(this,V)}}function ue(ee,oe){return oe&&(e(oe)==="object"||typeof oe=="function")?oe:K(ee)}function K(ee){if(ee===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return ee}function U(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(ee){return!1}}function I(ee){return I=Object.setPrototypeOf?Object.getPrototypeOf:function(M){return M.__proto__||Object.getPrototypeOf(M)},I(ee)}function B(ee,oe){var M=typeof Symbol!="undefined"&&ee[Symbol.iterator]||ee["@@iterator"];if(!M){if(Array.isArray(ee)||(M=C(ee))||oe&&ee&&typeof ee.length=="number"){M&&(ee=M);var H=0,V=function(){};return{s:V,n:function(){return H>=ee.length?{done:!0}:{done:!1,value:ee[H++]}},e:function(ke){throw ke},f:V}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ge=!0,ye=!1,pe;return{s:function(){M=M.call(ee)},n:function(){var ke=M.next();return ge=ke.done,ke},e:function(ke){ye=!0,pe=ke},f:function(){try{!ge&&M.return!=null&&M.return()}finally{if(ye)throw pe}}}}function C(ee,oe){if(!!ee){if(typeof ee=="string")return W(ee,oe);var M=Object.prototype.toString.call(ee).slice(8,-1);if(M==="Object"&&ee.constructor&&(M=ee.constructor.name),M==="Map"||M==="Set")return Array.from(ee);if(M==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(M))return W(ee,oe)}}function W(ee,oe){(oe==null||oe>ee.length)&&(oe=ee.length);for(var M=0,H=new Array(oe);M<oe;M++)H[M]=ee[M];return H}function b(ee,oe){if(!(ee instanceof oe))throw new TypeError("Cannot call a class as a function")}function S(ee,oe){for(var M=0;M<oe.length;M++){var H=oe[M];H.enumerable=H.enumerable||!1,H.configurable=!0,"value"in H&&(H.writable=!0),Object.defineProperty(ee,H.key,H)}}function w(ee,oe,M){return oe&&S(ee.prototype,oe),M&&S(ee,M),ee}var k=function(){function ee(){b(this,ee)}return w(ee,null,[{key:"create",value:function(M){var H=M.data.annotationType;switch(H){case s.AnnotationType.LINK:return new Q(M);case s.AnnotationType.TEXT:return new Y(M);case s.AnnotationType.WIDGET:var V=M.data.fieldType;switch(V){case"Tx":return new ae(M);case"Btn":return M.data.radioButton?new J(M):M.data.checkBox?new ce(M):new X(M);case"Ch":return new L(M)}return new re(M);case s.AnnotationType.POPUP:return new v(M);case s.AnnotationType.FREETEXT:return new D(M);case s.AnnotationType.LINE:return new Z(M);case s.AnnotationType.SQUARE:return new se(M);case s.AnnotationType.CIRCLE:return new ie(M);case s.AnnotationType.POLYLINE:return new Pe(M);case s.AnnotationType.CARET:return new fe(M);case s.AnnotationType.INK:return new N(M);case s.AnnotationType.POLYGON:return new le(M);case s.AnnotationType.HIGHLIGHT:return new E(M);case s.AnnotationType.UNDERLINE:return new T(M);case s.AnnotationType.SQUIGGLY:return new te(M);case s.AnnotationType.STRIKEOUT:return new ne(M);case s.AnnotationType.STAMP:return new de(M);case s.AnnotationType.FILEATTACHMENT:return new he(M);default:return new z(M)}}}]),ee}(),z=function(){function ee(oe){var M=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},H=M.isRenderable,V=H===void 0?!1:H,ge=M.ignoreBorder,ye=ge===void 0?!1:ge,pe=M.createQuadrilaterals,Se=pe===void 0?!1:pe;b(this,ee),this.isRenderable=V,this.data=oe.data,this.layer=oe.layer,this.page=oe.page,this.viewport=oe.viewport,this.linkService=oe.linkService,this.downloadManager=oe.downloadManager,this.imageResourcesPath=oe.imageResourcesPath,this.renderInteractiveForms=oe.renderInteractiveForms,this.svgFactory=oe.svgFactory,this.annotationStorage=oe.annotationStorage,this.enableScripting=oe.enableScripting,this.hasJSActions=oe.hasJSActions,this._mouseState=oe.mouseState,V&&(this.container=this._createContainer(ye)),Se&&(this.quadrilaterals=this._createQuadrilaterals(ye))}return w(ee,[{key:"_createContainer",value:function(){var M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,H=this.data,V=this.page,ge=this.viewport,ye=document.createElement("section"),pe=H.rect[2]-H.rect[0],Se=H.rect[3]-H.rect[1];ye.setAttribute("data-annotation-id",H.id);var ke=s.Util.normalizeRect([H.rect[0],V.view[3]-H.rect[1]+V.view[1],H.rect[2],V.view[3]-H.rect[3]+V.view[1]]);if(ye.style.transform="matrix(".concat(ge.transform.join(","),")"),ye.style.transformOrigin="".concat(-ke[0],"px ").concat(-ke[1],"px"),!M&&H.borderStyle.width>0){ye.style.borderWidth="".concat(H.borderStyle.width,"px"),H.borderStyle.style!==s.AnnotationBorderStyleType.UNDERLINE&&(pe=pe-2*H.borderStyle.width,Se=Se-2*H.borderStyle.width);var Ce=H.borderStyle.horizontalCornerRadius,Ie=H.borderStyle.verticalCornerRadius;if(Ce>0||Ie>0){var Ne="".concat(Ce,"px / ").concat(Ie,"px");ye.style.borderRadius=Ne}switch(H.borderStyle.style){case s.AnnotationBorderStyleType.SOLID:ye.style.borderStyle="solid";break;case s.AnnotationBorderStyleType.DASHED:ye.style.borderStyle="dashed";break;case s.AnnotationBorderStyleType.BEVELED:(0,s.warn)("Unimplemented border style: beveled");break;case s.AnnotationBorderStyleType.INSET:(0,s.warn)("Unimplemented border style: inset");break;case s.AnnotationBorderStyleType.UNDERLINE:ye.style.borderBottomStyle="solid";break}H.color?ye.style.borderColor=s.Util.makeHexColor(H.color[0]|0,H.color[1]|0,H.color[2]|0):ye.style.borderWidth=0}return ye.style.left="".concat(ke[0],"px"),ye.style.top="".concat(ke[1],"px"),ye.style.width="".concat(pe,"px"),ye.style.height="".concat(Se,"px"),ye}},{key:"_createQuadrilaterals",value:function(){var M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;if(!this.data.quadPoints)return null;var H=[],V=this.data.rect,ge=B(this.data.quadPoints),ye;try{for(ge.s();!(ye=ge.n()).done;){var pe=ye.value;this.data.rect=[pe[2].x,pe[2].y,pe[1].x,pe[1].y],H.push(this._createContainer(M))}}catch(Se){ge.e(Se)}finally{ge.f()}return this.data.rect=V,H}},{key:"_createPopup",value:function(M,H){var V=this.container;this.quadrilaterals&&(M=M||this.quadrilaterals,V=this.quadrilaterals[0]),M||(M=document.createElement("div"),M.style.height=V.style.height,M.style.width=V.style.width,V.appendChild(M));var ge=new R({container:V,trigger:M,color:H.color,title:H.title,modificationDate:H.modificationDate,contents:H.contents,hideWrapper:!0}),ye=ge.render();ye.style.left=V.style.width,V.appendChild(ye)}},{key:"_renderQuadrilaterals",value:function(M){var H=B(this.quadrilaterals),V;try{for(H.s();!(V=H.n()).done;){var ge=V.value;ge.className=M}}catch(ye){H.e(ye)}finally{H.f()}return this.quadrilaterals}},{key:"render",value:function(){(0,s.unreachable)("Abstract method `AnnotationElement.render` called")}}]),ee}(),Q=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.url||H.data.dest||H.data.action||H.data.isTooltipOnly||H.data.actions&&(H.data.actions.Action||H.data.actions["Mouse Up"]||H.data.actions["Mouse Down"]));return oe.call(this,H,{isRenderable:V,createQuadrilaterals:!0})}return w(M,[{key:"render",value:function(){var V=this.data,ge=this.linkService,ye=document.createElement("a");return V.url?(0,o.addLinkAttributes)(ye,{url:V.url,target:V.newWindow?o.LinkTarget.BLANK:ge.externalLinkTarget,rel:ge.externalLinkRel,enabled:ge.externalLinkEnabled}):V.action?this._bindNamedAction(ye,V.action):V.dest?this._bindLink(ye,V.dest):V.actions&&(V.actions.Action||V.actions["Mouse Up"]||V.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions?this._bindJSAction(ye,V):this._bindLink(ye,""),this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map(function(pe,Se){var ke=Se===0?ye:ye.cloneNode();return pe.appendChild(ke),pe}):(this.container.className="linkAnnotation",this.container.appendChild(ye),this.container)}},{key:"_bindLink",value:function(V,ge){var ye=this;V.href=this.linkService.getDestinationHash(ge),V.onclick=function(){return ge&&ye.linkService.goToDestination(ge),!1},(ge||ge==="")&&(V.className="internalLink")}},{key:"_bindNamedAction",value:function(V,ge){var ye=this;V.href=this.linkService.getAnchorUrl(""),V.onclick=function(){return ye.linkService.executeNamedAction(ge),!1},V.className="internalLink"}},{key:"_bindJSAction",value:function(V,ge){var ye=this;V.href=this.linkService.getAnchorUrl("");for(var pe=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]),Se=function(){var Me=Ce[ke],Ee=pe.get(Me);if(!Ee)return"continue";V[Ee]=function(){var Be;return(Be=ye.linkService.eventBus)===null||Be===void 0||Be.dispatch("dispatcheventinsandbox",{source:ye,detail:{id:ge.id,name:Me}}),!1}},ke=0,Ce=Object.keys(ge.actions);ke<Ce.length;ke++)var Ie=Se();V.className="internalLink"}}]),M}(z),Y=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V})}return w(M,[{key:"render",value:function(){this.container.className="textAnnotation";var V=document.createElement("img");return V.style.height=this.container.style.height,V.style.width=this.container.style.width,V.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",V.alt="[{{type}} Annotation]",V.dataset.l10nId="text_annotation_type",V.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(V,this.data),this.container.appendChild(V),this.container}}]),M}(z),re=function(ee){A(M,ee);var oe=G(M);function M(){return b(this,M),oe.apply(this,arguments)}return w(M,[{key:"render",value:function(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}},{key:"_getKeyModifier",value:function(V){return navigator.platform.includes("Win")&&V.ctrlKey||navigator.platform.includes("Mac")&&V.metaKey}},{key:"_setEventListener",value:function(V,ge,ye,pe){var Se=this;ge.includes("mouse")?V.addEventListener(ge,function(ke){var Ce;(Ce=Se.linkService.eventBus)===null||Ce===void 0||Ce.dispatch("dispatcheventinsandbox",{source:Se,detail:{id:Se.data.id,name:ye,value:pe(ke),shift:ke.shiftKey,modifier:Se._getKeyModifier(ke)}})}):V.addEventListener(ge,function(ke){var Ce;(Ce=Se.linkService.eventBus)===null||Ce===void 0||Ce.dispatch("dispatcheventinsandbox",{source:Se,detail:{id:Se.data.id,name:ye,value:ke.target.checked}})})}},{key:"_setEventListeners",value:function(V,ge,ye){var pe=B(ge),Se;try{for(pe.s();!(Se=pe.n()).done;){var ke,Ce=x(Se.value,2),Ie=Ce[0],Ne=Ce[1];(Ne==="Action"||(ke=this.data.actions)!==null&&ke!==void 0&&ke[Ne])&&this._setEventListener(V,Ie,Ne,ye)}}catch(Me){pe.e(Me)}finally{pe.f()}}},{key:"_dispatchEventFromSandbox",value:function(V,ge){for(var ye=this,pe=function(Ee,Be,_e){var we=_e.detail[Ee];_e.target.style[Be]=c.ColorConverters["".concat(we[0],"_HTML")](we.slice(1))},Se={display:function(Ee){var Be=Ee.detail.display%2==1;Ee.target.style.visibility=Be?"hidden":"visible",ye.annotationStorage.setValue(ye.data.id,{hidden:Be,print:Ee.detail.display===0||Ee.detail.display===3})},print:function(Ee){ye.annotationStorage.setValue(ye.data.id,{print:Ee.detail.print})},hidden:function(Ee){Ee.target.style.visibility=Ee.detail.hidden?"hidden":"visible",ye.annotationStorage.setValue(ye.data.id,{hidden:Ee.detail.hidden})},focus:function(Ee){setTimeout(function(){return Ee.target.focus({preventScroll:!1})},0)},userName:function(Ee){Ee.target.title=Ee.detail.userName},readonly:function(Ee){Ee.detail.readonly?Ee.target.setAttribute("readonly",""):Ee.target.removeAttribute("readonly")},required:function(Ee){Ee.detail.required?Ee.target.setAttribute("required",""):Ee.target.removeAttribute("required")},bgColor:function(Ee){pe("bgColor","backgroundColor",Ee)},fillColor:function(Ee){pe("fillColor","backgroundColor",Ee)},fgColor:function(Ee){pe("fgColor","color",Ee)},textColor:function(Ee){pe("textColor","color",Ee)},borderColor:function(Ee){pe("borderColor","borderColor",Ee)},strokeColor:function(Ee){pe("strokeColor","borderColor",Ee)}},ke=0,Ce=Object.keys(ge.detail);ke<Ce.length;ke++){var Ie=Ce[ke],Ne=V[Ie]||Se[Ie];Ne&&Ne(ge)}}}]),M}(z),ae=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=H.renderInteractiveForms||!H.data.hasAppearance&&!!H.data.fieldValue;return oe.call(this,H,{isRenderable:V})}return w(M,[{key:"setPropertyOnSiblings",value:function(V,ge,ye,pe){var Se=this.annotationStorage,ke=B(document.getElementsByName(V.name)),Ce;try{for(ke.s();!(Ce=ke.n()).done;){var Ie=Ce.value;if(Ie!==V){Ie[ge]=ye;var Ne=Object.create(null);Ne[pe]=ye,Se.setValue(Ie.getAttribute("id"),Ne)}}}catch(Me){ke.e(Me)}finally{ke.f()}}},{key:"render",value:function(){var V=this,ge=this.annotationStorage,ye=this.data.id;this.container.className="textWidgetAnnotation";var pe=null;if(this.renderInteractiveForms){var Se=ge.getValue(ye,{value:this.data.fieldValue,valueAsString:this.data.fieldValue}),ke=Se.valueAsString||Se.value||"",Ce={userValue:null,formattedValue:null,beforeInputSelectionRange:null,beforeInputValue:null};this.data.multiLine?(pe=document.createElement("textarea"),pe.textContent=ke):(pe=document.createElement("input"),pe.type="text",pe.setAttribute("value",ke)),Ce.userValue=ke,pe.setAttribute("id",ye),pe.addEventListener("input",function(_e){ge.setValue(ye,{value:_e.target.value}),V.setPropertyOnSiblings(pe,"value",_e.target.value,"value")});var Ie=function(we){Ce.formattedValue&&(we.target.value=Ce.formattedValue),we.target.scrollLeft=0,Ce.beforeInputSelectionRange=null};if(this.enableScripting&&this.hasJSActions){var Ne;pe.addEventListener("focus",function(_e){Ce.userValue&&(_e.target.value=Ce.userValue)}),pe.addEventListener("updatefromsandbox",function(_e){var we={value:function(Le){Ce.userValue=Le.detail.value||"",ge.setValue(ye,{value:Ce.userValue.toString()}),Ce.formattedValue||(Le.target.value=Ce.userValue)},valueAsString:function(Le){Ce.formattedValue=Le.detail.valueAsString||"",Le.target!==document.activeElement&&(Le.target.value=Ce.formattedValue),ge.setValue(ye,{formattedValue:Ce.formattedValue})},selRange:function(Le){var $e=x(Le.detail.selRange,2),Ge=$e[0],Ke=$e[1];Ge>=0&&Ke<Le.target.value.length&&Le.target.setSelectionRange(Ge,Ke)}};V._dispatchEventFromSandbox(we,_e)}),pe.addEventListener("keydown",function(_e){var we;Ce.beforeInputValue=_e.target.value;var Fe=-1;_e.key==="Escape"?Fe=0:_e.key==="Enter"?Fe=2:_e.key==="Tab"&&(Fe=3),Fe!==-1&&(Ce.userValue=_e.target.value,(we=V.linkService.eventBus)===null||we===void 0||we.dispatch("dispatcheventinsandbox",{source:V,detail:{id:ye,name:"Keystroke",value:_e.target.value,willCommit:!0,commitKey:Fe,selStart:_e.target.selectionStart,selEnd:_e.target.selectionEnd}}))});var Me=Ie;Ie=null,pe.addEventListener("blur",function(_e){if(V._mouseState.isDown){var we;Ce.userValue=_e.target.value,(we=V.linkService.eventBus)===null||we===void 0||we.dispatch("dispatcheventinsandbox",{source:V,detail:{id:ye,name:"Keystroke",value:_e.target.value,willCommit:!0,commitKey:1,selStart:_e.target.selectionStart,selEnd:_e.target.selectionEnd}})}Me(_e)}),pe.addEventListener("mousedown",function(_e){Ce.beforeInputValue=_e.target.value,Ce.beforeInputSelectionRange=null}),pe.addEventListener("keyup",function(_e){_e.target.selectionStart===_e.target.selectionEnd&&(Ce.beforeInputSelectionRange=null)}),pe.addEventListener("select",function(_e){Ce.beforeInputSelectionRange=[_e.target.selectionStart,_e.target.selectionEnd]}),(Ne=this.data.actions)!==null&&Ne!==void 0&&Ne.Keystroke&&pe.addEventListener("input",function(_e){var we,Fe=-1,Le=-1;if(Ce.beforeInputSelectionRange){var $e=x(Ce.beforeInputSelectionRange,2);Fe=$e[0],Le=$e[1]}(we=V.linkService.eventBus)===null||we===void 0||we.dispatch("dispatcheventinsandbox",{source:V,detail:{id:ye,name:"Keystroke",value:Ce.beforeInputValue,change:_e.data,willCommit:!1,selStart:Fe,selEnd:Le}})}),this._setEventListeners(pe,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],function(_e){return _e.target.value})}if(Ie&&pe.addEventListener("blur",Ie),pe.disabled=this.data.readOnly,pe.name=this.data.fieldName,this.data.maxLen!==null&&(pe.maxLength=this.data.maxLen),this.data.comb){var Ee=this.data.rect[2]-this.data.rect[0],Be=Ee/this.data.maxLen;pe.classList.add("comb"),pe.style.letterSpacing="calc(".concat(Be,"px - 1ch)")}}else pe=document.createElement("div"),pe.textContent=this.data.fieldValue,pe.style.verticalAlign="middle",pe.style.display="table-cell";return this._setTextStyle(pe),this.container.appendChild(pe),this.container}},{key:"_setTextStyle",value:function(V){var ge=["left","center","right"],ye=this.data.defaultAppearanceData,pe=ye.fontSize,Se=ye.fontColor,ke=V.style;pe&&(ke.fontSize="".concat(pe,"px")),ke.color=s.Util.makeHexColor(Se[0],Se[1],Se[2]),this.data.textAlignment!==null&&(ke.textAlign=ge[this.data.textAlignment])}}]),M}(re),ce=function(ee){A(M,ee);var oe=G(M);function M(H){return b(this,M),oe.call(this,H,{isRenderable:H.renderInteractiveForms})}return w(M,[{key:"render",value:function(){var V=this,ge=this.annotationStorage,ye=this.data,pe=ye.id,Se=ge.getValue(pe,{value:ye.fieldValue&&(ye.exportValue&&ye.exportValue===ye.fieldValue||!ye.exportValue&&ye.fieldValue!=="Off")}).value;typeof Se=="string"&&(Se=Se!=="Off",ge.setValue(pe,{value:Se})),this.container.className="buttonWidgetAnnotation checkBox";var ke=document.createElement("input");return ke.disabled=ye.readOnly,ke.type="checkbox",ke.name=this.data.fieldName,Se&&ke.setAttribute("checked",!0),ke.setAttribute("id",pe),ke.addEventListener("change",function(Ce){var Ie=Ce.target.name,Ne=B(document.getElementsByName(Ie)),Me;try{for(Ne.s();!(Me=Ne.n()).done;){var Ee=Me.value;Ee!==Ce.target&&(Ee.checked=!1,ge.setValue(Ee.parentNode.getAttribute("data-annotation-id"),{value:!1}))}}catch(Be){Ne.e(Be)}finally{Ne.f()}ge.setValue(pe,{value:Ce.target.checked})}),this.enableScripting&&this.hasJSActions&&(ke.addEventListener("updatefromsandbox",function(Ce){var Ie={value:function(Me){Me.target.checked=Me.detail.value!=="Off",ge.setValue(pe,{value:Me.target.checked})}};V._dispatchEventFromSandbox(Ie,Ce)}),this._setEventListeners(ke,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],function(Ce){return Ce.target.checked})),this.container.appendChild(ke),this.container}}]),M}(re),J=function(ee){A(M,ee);var oe=G(M);function M(H){return b(this,M),oe.call(this,H,{isRenderable:H.renderInteractiveForms})}return w(M,[{key:"render",value:function(){var V=this;this.container.className="buttonWidgetAnnotation radioButton";var ge=this.annotationStorage,ye=this.data,pe=ye.id,Se=ge.getValue(pe,{value:ye.fieldValue===ye.buttonValue}).value;typeof Se=="string"&&(Se=Se!==ye.buttonValue,ge.setValue(pe,{value:Se}));var ke=document.createElement("input");if(ke.disabled=ye.readOnly,ke.type="radio",ke.name=ye.fieldName,Se&&ke.setAttribute("checked",!0),ke.setAttribute("id",pe),ke.addEventListener("change",function(Ie){var Ne=Ie.target,Me=B(document.getElementsByName(Ne.name)),Ee;try{for(Me.s();!(Ee=Me.n()).done;){var Be=Ee.value;Be!==Ne&&ge.setValue(Be.getAttribute("id"),{value:!1})}}catch(_e){Me.e(_e)}finally{Me.f()}ge.setValue(pe,{value:Ne.checked})}),this.enableScripting&&this.hasJSActions){var Ce=ye.buttonValue;ke.addEventListener("updatefromsandbox",function(Ie){var Ne={value:function(Ee){var Be=Ce===Ee.detail.value,_e=B(document.getElementsByName(Ee.target.name)),we;try{for(_e.s();!(we=_e.n()).done;){var Fe=we.value,Le=Fe.getAttribute("id");Fe.checked=Le===pe&&Be,ge.setValue(Le,{value:Fe.checked})}}catch($e){_e.e($e)}finally{_e.f()}}};V._dispatchEventFromSandbox(Ne,Ie)}),this._setEventListeners(ke,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],function(Ie){return Ie.target.checked})}return this.container.appendChild(ke),this.container}}]),M}(re),X=function(ee){A(M,ee);var oe=G(M);function M(){return b(this,M),oe.apply(this,arguments)}return w(M,[{key:"render",value:function(){var V=d(I(M.prototype),"render",this).call(this);return V.className="buttonWidgetAnnotation pushButton",this.data.alternativeText&&(V.title=this.data.alternativeText),V}}]),M}(Q),L=function(ee){A(M,ee);var oe=G(M);function M(H){return b(this,M),oe.call(this,H,{isRenderable:H.renderInteractiveForms})}return w(M,[{key:"render",value:function(){var V=this;this.container.className="choiceWidgetAnnotation";var ge=this.annotationStorage,ye=this.data.id;ge.getValue(ye,{value:this.data.fieldValue.length>0?this.data.fieldValue[0]:void 0});var pe=document.createElement("select");pe.disabled=this.data.readOnly,pe.name=this.data.fieldName,pe.setAttribute("id",ye),this.data.combo||(pe.size=this.data.options.length,this.data.multiSelect&&(pe.multiple=!0));var Se=B(this.data.options),ke;try{for(Se.s();!(ke=Se.n()).done;){var Ce=ke.value,Ie=document.createElement("option");Ie.textContent=Ce.displayValue,Ie.value=Ce.exportValue,this.data.fieldValue.includes(Ce.exportValue)&&Ie.setAttribute("selected",!0),pe.appendChild(Ie)}}catch(Ee){Se.e(Ee)}finally{Se.f()}var Ne=function(Be,_e){var we=_e?"value":"textContent",Fe=Be.target.options;return Be.target.multiple?Array.prototype.filter.call(Fe,function(Le){return Le.selected}).map(function(Le){return Le[we]}):Fe.selectedIndex===-1?null:Fe[Fe.selectedIndex][we]},Me=function(Be){var _e=Be.target.options;return Array.prototype.map.call(_e,function(we){return{displayValue:we.textContent,exportValue:we.value}})};return this.enableScripting&&this.hasJSActions?(pe.addEventListener("updatefromsandbox",function(Ee){var Be={value:function(we){var Fe=pe.options,Le=we.detail.value,$e=new Set(Array.isArray(Le)?Le:[Le]);Array.prototype.forEach.call(Fe,function(Ge){Ge.selected=$e.has(Ge.value)}),ge.setValue(ye,{value:Ne(we,!0)})},multipleSelection:function(we){pe.multiple=!0},remove:function(we){var Fe=pe.options,Le=we.detail.remove;if(Fe[Le].selected=!1,pe.remove(Le),Fe.length>0){var $e=Array.prototype.findIndex.call(Fe,function(Ge){return Ge.selected});$e===-1&&(Fe[0].selected=!0)}ge.setValue(ye,{value:Ne(we,!0),items:Me(we)})},clear:function(we){for(;pe.length!==0;)pe.remove(0);ge.setValue(ye,{value:null,items:[]})},insert:function(we){var Fe=we.detail.insert,Le=Fe.index,$e=Fe.displayValue,Ge=Fe.exportValue,Ke=document.createElement("option");Ke.textContent=$e,Ke.value=Ge,pe.insertBefore(Ke,pe.children[Le]),ge.setValue(ye,{value:Ne(we,!0),items:Me(we)})},items:function(we){for(var Fe=we.detail.items;pe.length!==0;)pe.remove(0);var Le=B(Fe),$e;try{for(Le.s();!($e=Le.n()).done;){var Ge=$e.value,Ke=Ge.displayValue,Ye=Ge.exportValue,ze=document.createElement("option");ze.textContent=Ke,ze.value=Ye,pe.appendChild(ze)}}catch(nt){Le.e(nt)}finally{Le.f()}pe.options.length>0&&(pe.options[0].selected=!0),ge.setValue(ye,{value:Ne(we,!0),items:Me(we)})},indices:function(we){var Fe=new Set(we.detail.indices),Le=we.target.options;Array.prototype.forEach.call(Le,function($e,Ge){$e.selected=Fe.has(Ge)}),ge.setValue(ye,{value:Ne(we,!0)})},editable:function(we){we.target.disabled=!we.detail.editable}};V._dispatchEventFromSandbox(Be,Ee)}),pe.addEventListener("input",function(Ee){var Be,_e=Ne(Ee,!0),we=Ne(Ee,!1);ge.setValue(ye,{value:_e}),(Be=V.linkService.eventBus)===null||Be===void 0||Be.dispatch("dispatcheventinsandbox",{source:V,detail:{id:ye,name:"Keystroke",value:we,changeEx:_e,willCommit:!0,commitKey:1,keyDown:!1}})}),this._setEventListeners(pe,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"]],function(Ee){return Ee.target.checked})):pe.addEventListener("input",function(Ee){ge.setValue(ye,{value:Ne(Ee)})}),this.container.appendChild(pe),this.container}}]),M}(re),v=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V})}return w(M,[{key:"render",value:function(){var V=["Line","Square","Circle","PolyLine","Polygon","Ink"];if(this.container.className="popupAnnotation",V.includes(this.data.parentType))return this.container;var ge='[data-annotation-id="'.concat(this.data.parentId,'"]'),ye=this.layer.querySelectorAll(ge);if(ye.length===0)return this.container;var pe=new R({container:this.container,trigger:Array.from(ye),color:this.data.color,title:this.data.title,modificationDate:this.data.modificationDate,contents:this.data.contents}),Se=this.page,ke=s.Util.normalizeRect([this.data.parentRect[0],Se.view[3]-this.data.parentRect[1]+Se.view[1],this.data.parentRect[2],Se.view[3]-this.data.parentRect[3]+Se.view[1]]),Ce=ke[0]+this.data.parentRect[2]-this.data.parentRect[0],Ie=ke[1];return this.container.style.transformOrigin="".concat(-Ce,"px ").concat(-Ie,"px"),this.container.style.left="".concat(Ce,"px"),this.container.style.top="".concat(Ie,"px"),this.container.appendChild(pe.render()),this.container}}]),M}(z),R=function(){function ee(oe){b(this,ee),this.container=oe.container,this.trigger=oe.trigger,this.color=oe.color,this.title=oe.title,this.modificationDate=oe.modificationDate,this.contents=oe.contents,this.hideWrapper=oe.hideWrapper||!1,this.pinned=!1}return w(ee,[{key:"render",value:function(){var M=.7,H=document.createElement("div");H.className="popupWrapper",this.hideElement=this.hideWrapper?H:this.container,this.hideElement.hidden=!0;var V=document.createElement("div");V.className="popup";var ge=this.color;if(ge){var ye=M*(255-ge[0])+ge[0],pe=M*(255-ge[1])+ge[1],Se=M*(255-ge[2])+ge[2];V.style.backgroundColor=s.Util.makeHexColor(ye|0,pe|0,Se|0)}var ke=document.createElement("h1");ke.textContent=this.title,V.appendChild(ke);var Ce=o.PDFDateString.toDateObject(this.modificationDate);if(Ce){var Ie=document.createElement("span");Ie.textContent="{{date}}, {{time}}",Ie.dataset.l10nId="annotation_date_string",Ie.dataset.l10nArgs=JSON.stringify({date:Ce.toLocaleDateString(),time:Ce.toLocaleTimeString()}),V.appendChild(Ie)}var Ne=this._formatContents(this.contents);V.appendChild(Ne),Array.isArray(this.trigger)||(this.trigger=[this.trigger]);var Me=B(this.trigger),Ee;try{for(Me.s();!(Ee=Me.n()).done;){var Be=Ee.value;Be.addEventListener("click",this._toggle.bind(this)),Be.addEventListener("mouseover",this._show.bind(this,!1)),Be.addEventListener("mouseout",this._hide.bind(this,!1))}}catch(_e){Me.e(_e)}finally{Me.f()}return V.addEventListener("click",this._hide.bind(this,!0)),H.appendChild(V),H}},{key:"_formatContents",value:function(M){for(var H=document.createElement("p"),V=M.split(/(?:\r\n?|\n)/),ge=0,ye=V.length;ge<ye;++ge){var pe=V[ge];H.appendChild(document.createTextNode(pe)),ge<ye-1&&H.appendChild(document.createElement("br"))}return H}},{key:"_toggle",value:function(){this.pinned?this._hide(!0):this._show(!0)}},{key:"_show",value:function(){var M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;M&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex+=1)}},{key:"_hide",value:function(){var M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;M&&(this.pinned=!1),!this.hideElement.hidden&&!this.pinned&&(this.hideElement.hidden=!0,this.container.style.zIndex-=1)}}]),ee}(),D=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),M}(z),Z=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){this.container.className="lineAnnotation";var V=this.data,ge=V.rect[2]-V.rect[0],ye=V.rect[3]-V.rect[1],pe=this.svgFactory.create(ge,ye),Se=this.svgFactory.createElement("svg:line");return Se.setAttribute("x1",V.rect[2]-V.lineCoordinates[0]),Se.setAttribute("y1",V.rect[3]-V.lineCoordinates[1]),Se.setAttribute("x2",V.rect[2]-V.lineCoordinates[2]),Se.setAttribute("y2",V.rect[3]-V.lineCoordinates[3]),Se.setAttribute("stroke-width",V.borderStyle.width||1),Se.setAttribute("stroke","transparent"),pe.appendChild(Se),this.container.append(pe),this._createPopup(Se,V),this.container}}]),M}(z),se=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){this.container.className="squareAnnotation";var V=this.data,ge=V.rect[2]-V.rect[0],ye=V.rect[3]-V.rect[1],pe=this.svgFactory.create(ge,ye),Se=V.borderStyle.width,ke=this.svgFactory.createElement("svg:rect");return ke.setAttribute("x",Se/2),ke.setAttribute("y",Se/2),ke.setAttribute("width",ge-Se),ke.setAttribute("height",ye-Se),ke.setAttribute("stroke-width",Se||1),ke.setAttribute("stroke","transparent"),ke.setAttribute("fill","none"),pe.appendChild(ke),this.container.append(pe),this._createPopup(ke,V),this.container}}]),M}(z),ie=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){this.container.className="circleAnnotation";var V=this.data,ge=V.rect[2]-V.rect[0],ye=V.rect[3]-V.rect[1],pe=this.svgFactory.create(ge,ye),Se=V.borderStyle.width,ke=this.svgFactory.createElement("svg:ellipse");return ke.setAttribute("cx",ge/2),ke.setAttribute("cy",ye/2),ke.setAttribute("rx",ge/2-Se/2),ke.setAttribute("ry",ye/2-Se/2),ke.setAttribute("stroke-width",Se||1),ke.setAttribute("stroke","transparent"),ke.setAttribute("fill","none"),pe.appendChild(ke),this.container.append(pe),this._createPopup(ke,V),this.container}}]),M}(z),Pe=function(ee){A(M,ee);var oe=G(M);function M(H){var V;b(this,M);var ge=!!(H.data.hasPopup||H.data.title||H.data.contents);return V=oe.call(this,H,{isRenderable:ge,ignoreBorder:!0}),V.containerClassName="polylineAnnotation",V.svgElementName="svg:polyline",V}return w(M,[{key:"render",value:function(){this.container.className=this.containerClassName;var V=this.data,ge=V.rect[2]-V.rect[0],ye=V.rect[3]-V.rect[1],pe=this.svgFactory.create(ge,ye),Se=[],ke=B(V.vertices),Ce;try{for(ke.s();!(Ce=ke.n()).done;){var Ie=Ce.value,Ne=Ie.x-V.rect[0],Me=V.rect[3]-Ie.y;Se.push(Ne+","+Me)}}catch(Be){ke.e(Be)}finally{ke.f()}Se=Se.join(" ");var Ee=this.svgFactory.createElement(this.svgElementName);return Ee.setAttribute("points",Se),Ee.setAttribute("stroke-width",V.borderStyle.width||1),Ee.setAttribute("stroke","transparent"),Ee.setAttribute("fill","none"),pe.appendChild(Ee),this.container.append(pe),this._createPopup(Ee,V),this.container}}]),M}(z),le=function(ee){A(M,ee);var oe=G(M);function M(H){var V;return b(this,M),V=oe.call(this,H),V.containerClassName="polygonAnnotation",V.svgElementName="svg:polygon",V}return M}(Pe),fe=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),M}(z),N=function(ee){A(M,ee);var oe=G(M);function M(H){var V;b(this,M);var ge=!!(H.data.hasPopup||H.data.title||H.data.contents);return V=oe.call(this,H,{isRenderable:ge,ignoreBorder:!0}),V.containerClassName="inkAnnotation",V.svgElementName="svg:polyline",V}return w(M,[{key:"render",value:function(){this.container.className=this.containerClassName;var V=this.data,ge=V.rect[2]-V.rect[0],ye=V.rect[3]-V.rect[1],pe=this.svgFactory.create(ge,ye),Se=B(V.inkLists),ke;try{for(Se.s();!(ke=Se.n()).done;){var Ce=ke.value,Ie=[],Ne=B(Ce),Me;try{for(Ne.s();!(Me=Ne.n()).done;){var Ee=Me.value,Be=Ee.x-V.rect[0],_e=V.rect[3]-Ee.y;Ie.push("".concat(Be,",").concat(_e))}}catch(Fe){Ne.e(Fe)}finally{Ne.f()}Ie=Ie.join(" ");var we=this.svgFactory.createElement(this.svgElementName);we.setAttribute("points",Ie),we.setAttribute("stroke-width",V.borderStyle.width||1),we.setAttribute("stroke","transparent"),we.setAttribute("fill","none"),this._createPopup(we,V),pe.appendChild(we)}}catch(Fe){Se.e(Fe)}finally{Se.f()}return this.container.append(pe),this.container}}]),M}(z),E=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0,createQuadrilaterals:!0})}return w(M,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.className="highlightAnnotation",this.container)}}]),M}(z),T=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0,createQuadrilaterals:!0})}return w(M,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.className="underlineAnnotation",this.container)}}]),M}(z),te=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0,createQuadrilaterals:!0})}return w(M,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.className="squigglyAnnotation",this.container)}}]),M}(z),ne=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0,createQuadrilaterals:!0})}return w(M,[{key:"render",value:function(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.className="strikeoutAnnotation",this.container)}}]),M}(z),de=function(ee){A(M,ee);var oe=G(M);function M(H){b(this,M);var V=!!(H.data.hasPopup||H.data.title||H.data.contents);return oe.call(this,H,{isRenderable:V,ignoreBorder:!0})}return w(M,[{key:"render",value:function(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}]),M}(z),he=function(ee){A(M,ee);var oe=G(M);function M(H){var V,ge;b(this,M),ge=oe.call(this,H,{isRenderable:!0});var ye=ge.data.file,pe=ye.filename,Se=ye.content;return ge.filename=(0,o.getFilenameFromUrl)(pe),ge.content=Se,(V=ge.linkService.eventBus)===null||V===void 0||V.dispatch("fileattachmentannotation",{source:K(ge),id:(0,s.stringToPDFString)(pe),filename:pe,content:Se}),ge}return w(M,[{key:"render",value:function(){this.container.className="fileAttachmentAnnotation";var V=document.createElement("div");return V.style.height=this.container.style.height,V.style.width=this.container.style.width,V.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&(this.data.title||this.data.contents)&&this._createPopup(V,this.data),this.container.appendChild(V),this.container}},{key:"_download",value:function(){var V;(V=this.downloadManager)===null||V===void 0||V.openOrDownloadData(this.container,this.content,this.filename)}}]),M}(z),Ae=function(){function ee(){b(this,ee)}return w(ee,null,[{key:"render",value:function(M){var H=[],V=[],ge=B(M.annotations),ye;try{for(ge.s();!(ye=ge.n()).done;){var pe=ye.value;if(!!pe){if(pe.annotationType===s.AnnotationType.POPUP){V.push(pe);continue}H.push(pe)}}}catch(_e){ge.e(_e)}finally{ge.f()}V.length&&H.push.apply(H,V);for(var Se=0,ke=H;Se<ke.length;Se++){var Ce=ke[Se],Ie=k.create({data:Ce,layer:M.div,page:M.page,viewport:M.viewport,linkService:M.linkService,downloadManager:M.downloadManager,imageResourcesPath:M.imageResourcesPath||"",renderInteractiveForms:M.renderInteractiveForms!==!1,svgFactory:new o.DOMSVGFactory,annotationStorage:M.annotationStorage||new l.AnnotationStorage,enableScripting:M.enableScripting,hasJSActions:M.hasJSActions,mouseState:M.mouseState||{isDown:!1}});if(Ie.isRenderable){var Ne=Ie.render();if(Ce.hidden&&(Ne.style.visibility="hidden"),Array.isArray(Ne)){var Me=B(Ne),Ee;try{for(Me.s();!(Ee=Me.n()).done;){var Be=Ee.value;M.div.appendChild(Be)}}catch(_e){Me.e(_e)}finally{Me.f()}}else Ie instanceof v?M.div.prepend(Ne):M.div.appendChild(Ne)}}}},{key:"update",value:function(M){var H="matrix(".concat(M.viewport.transform.join(","),")"),V=B(M.annotations),ge;try{for(V.s();!(ge=V.n()).done;){var ye=ge.value,pe=M.div.querySelectorAll('[data-annotation-id="'.concat(ye.id,'"]'));if(pe){var Se=B(pe),ke;try{for(Se.s();!(ke=Se.n()).done;){var Ce=ke.value;Ce.style.transform=H}}catch(Ie){Se.e(Ie)}finally{Se.f()}}}}catch(Ie){V.e(Ie)}finally{V.f()}M.div.hidden=!1}}]),ee}();a.AnnotationLayer=Ae},(r,a)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.ColorConverters=void 0;function t(O,A){return c(O)||l(O,A)||o(O,A)||e()}function e(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function o(O,A){if(!!O){if(typeof O=="string")return s(O,A);var y=Object.prototype.toString.call(O).slice(8,-1);if(y==="Object"&&O.constructor&&(y=O.constructor.name),y==="Map"||y==="Set")return Array.from(O);if(y==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(y))return s(O,A)}}function s(O,A){(A==null||A>O.length)&&(A=O.length);for(var y=0,G=new Array(A);y<A;y++)G[y]=O[y];return G}function l(O,A){var y=O&&(typeof Symbol!="undefined"&&O[Symbol.iterator]||O["@@iterator"]);if(y!=null){var G=[],ue=!0,K=!1,U,I;try{for(y=y.call(O);!(ue=(U=y.next()).done)&&(G.push(U.value),!(A&&G.length===A));ue=!0);}catch(B){K=!0,I=B}finally{try{!ue&&y.return!=null&&y.return()}finally{if(K)throw I}}return G}}function c(O){if(Array.isArray(O))return O}function d(O,A){if(!(O instanceof A))throw new TypeError("Cannot call a class as a function")}function P(O,A){for(var y=0;y<A.length;y++){var G=A[y];G.enumerable=G.enumerable||!1,G.configurable=!0,"value"in G&&(G.writable=!0),Object.defineProperty(O,G.key,G)}}function x(O,A,y){return A&&P(O.prototype,A),y&&P(O,y),O}function $(O){return Math.floor(Math.max(0,Math.min(1,O))*255).toString(16).padStart(2,"0")}var j=function(){function O(){d(this,O)}return x(O,null,[{key:"CMYK_G",value:function(y){var G=t(y,4),ue=G[0],K=G[1],U=G[2],I=G[3];return["G",1-Math.min(1,.3*ue+.59*U+.11*K+I)]}},{key:"G_CMYK",value:function(y){var G=t(y,1),ue=G[0];return["CMYK",0,0,0,1-ue]}},{key:"G_RGB",value:function(y){var G=t(y,1),ue=G[0];return["RGB",ue,ue,ue]}},{key:"G_HTML",value:function(y){var G=t(y,1),ue=G[0],K=$(ue);return"#".concat(K).concat(K).concat(K)}},{key:"RGB_G",value:function(y){var G=t(y,3),ue=G[0],K=G[1],U=G[2];return["G",.3*ue+.59*K+.11*U]}},{key:"RGB_HTML",value:function(y){var G=t(y,3),ue=G[0],K=G[1],U=G[2],I=$(ue),B=$(K),C=$(U);return"#".concat(I).concat(B).concat(C)}},{key:"T_HTML",value:function(){return"#00000000"}},{key:"CMYK_RGB",value:function(y){var G=t(y,4),ue=G[0],K=G[1],U=G[2],I=G[3];return["RGB",1-Math.min(1,ue+I),1-Math.min(1,U+I),1-Math.min(1,K+I)]}},{key:"CMYK_HTML",value:function(y){return this.RGB_HTML(this.CMYK_RGB(y))}},{key:"RGB_CMYK",value:function(y){var G=t(y,3),ue=G[0],K=G[1],U=G[2],I=1-ue,B=1-K,C=1-U,W=Math.min(I,B,C);return["CMYK",I,B,C,W]}}]),O}();a.ColorConverters=j},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.renderTextLayer=W;var e=t(4);function o(b,S){if(!(b instanceof S))throw new TypeError("Cannot call a class as a function")}function s(b,S){for(var w=0;w<S.length;w++){var k=S[w];k.enumerable=k.enumerable||!1,k.configurable=!0,"value"in k&&(k.writable=!0),Object.defineProperty(b,k.key,k)}}function l(b,S,w){return S&&s(b.prototype,S),w&&s(b,w),b}function c(b,S){var w=typeof Symbol!="undefined"&&b[Symbol.iterator]||b["@@iterator"];if(!w){if(Array.isArray(b)||(w=d(b))||S&&b&&typeof b.length=="number"){w&&(b=w);var k=0,z=function(){};return{s:z,n:function(){return k>=b.length?{done:!0}:{done:!1,value:b[k++]}},e:function(ce){throw ce},f:z}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var Q=!0,Y=!1,re;return{s:function(){w=w.call(b)},n:function(){var ce=w.next();return Q=ce.done,ce},e:function(ce){Y=!0,re=ce},f:function(){try{!Q&&w.return!=null&&w.return()}finally{if(Y)throw re}}}}function d(b,S){if(!!b){if(typeof b=="string")return P(b,S);var w=Object.prototype.toString.call(b).slice(8,-1);if(w==="Object"&&b.constructor&&(w=b.constructor.name),w==="Map"||w==="Set")return Array.from(b);if(w==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(w))return P(b,S)}}function P(b,S){(S==null||S>b.length)&&(S=b.length);for(var w=0,k=new Array(S);w<S;w++)k[w]=b[w];return k}var x=1e5,$=30,j=.8,O=new Map,A=/^\s+$/g;function y(b,S){var w=O.get(b);if(w)return w;S.save(),S.font="".concat($,"px ").concat(b);var k=S.measureText(""),z=k.fontBoundingBoxAscent,Q=Math.abs(k.fontBoundingBoxDescent);if(z){S.restore();var Y=z/(z+Q);return O.set(b,Y),Y}S.strokeStyle="red",S.clearRect(0,0,$,$),S.strokeText("g",0,0);var re=S.getImageData(0,0,$,$).data;Q=0;for(var ae=re.length-1-3;ae>=0;ae-=4)if(re[ae]>0){Q=Math.ceil(ae/4/$);break}S.clearRect(0,0,$,$),S.strokeText("A",0,$),re=S.getImageData(0,0,$,$).data,z=0;for(var ce=0,J=re.length;ce<J;ce+=4)if(re[ce]>0){z=$-Math.floor(ce/4/$);break}if(S.restore(),z){var X=z/(z+Q);return O.set(b,X),X}return O.set(b,j),j}function G(b,S,w,k){var z=document.createElement("span"),Q={angle:0,canvasWidth:0,hasText:S.str!=="",hasEOL:S.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1};b._textDivs.push(z);var Y=e.Util.transform(b._viewport.transform,S.transform),re=Math.atan2(Y[1],Y[0]),ae=w[S.fontName];ae.vertical&&(re+=Math.PI/2);var ce=Math.hypot(Y[2],Y[3]),J=ce*y(ae.fontFamily,k),X,L;re===0?(X=Y[4],L=Y[5]-J):(X=Y[4]+J*Math.sin(re),L=Y[5]-J*Math.cos(re)),z.style.left="".concat(X,"px"),z.style.top="".concat(L,"px"),z.style.fontSize="".concat(ce,"px"),z.style.fontFamily=ae.fontFamily,z.setAttribute("role","presentation"),z.textContent=S.str,z.dir=S.dir,b._fontInspectorEnabled&&(z.dataset.fontName=S.fontName),re!==0&&(Q.angle=re*(180/Math.PI));var v=!1;if(S.str.length>1||b._enhanceTextSelection&&A.test(S.str))v=!0;else if(S.transform[0]!==S.transform[3]){var R=Math.abs(S.transform[0]),D=Math.abs(S.transform[3]);R!==D&&Math.max(R,D)/Math.min(R,D)>1.5&&(v=!0)}if(v&&(ae.vertical?Q.canvasWidth=S.height*b._viewport.scale:Q.canvasWidth=S.width*b._viewport.scale),b._textDivProperties.set(z,Q),b._textContentStream&&b._layoutText(z),b._enhanceTextSelection&&Q.hasText){var Z=1,se=0;re!==0&&(Z=Math.cos(re),se=Math.sin(re));var ie=(ae.vertical?S.height:S.width)*b._viewport.scale,Pe=ce,le,fe;re!==0?(le=[Z,se,-se,Z,X,L],fe=e.Util.getAxialAlignedBoundingBox([0,0,ie,Pe],le)):fe=[X,L,X+ie,L+Pe],b._bounds.push({left:fe[0],top:fe[1],right:fe[2],bottom:fe[3],div:z,size:[ie,Pe],m:le})}}function ue(b){if(!b._canceled){var S=b._textDivs,w=b._capability,k=S.length;if(k>x){b._renderingDone=!0,w.resolve();return}if(!b._textContentStream)for(var z=0;z<k;z++)b._layoutText(S[z]);b._renderingDone=!0,w.resolve()}}function K(b,S,w){for(var k=0,z=0;z<w;z++){var Q=b[S++];Q>0&&(k=k?Math.min(Q,k):Q)}return k}function U(b){for(var S=b._bounds,w=b._viewport,k=I(w.width,w.height,S),z=0;z<k.length;z++){var Q=S[z].div,Y=b._textDivProperties.get(Q);if(Y.angle===0){Y.paddingLeft=S[z].left-k[z].left,Y.paddingTop=S[z].top-k[z].top,Y.paddingRight=k[z].right-S[z].right,Y.paddingBottom=k[z].bottom-S[z].bottom,b._textDivProperties.set(Q,Y);continue}for(var re=k[z],ae=S[z],ce=ae.m,J=ce[0],X=ce[1],L=[[0,0],[0,ae.size[1]],[ae.size[0],0],ae.size],v=new Float64Array(64),R=0,D=L.length;R<D;R++){var Z=e.Util.applyTransform(L[R],ce);v[R+0]=J&&(re.left-Z[0])/J,v[R+4]=X&&(re.top-Z[1])/X,v[R+8]=J&&(re.right-Z[0])/J,v[R+12]=X&&(re.bottom-Z[1])/X,v[R+16]=X&&(re.left-Z[0])/-X,v[R+20]=J&&(re.top-Z[1])/J,v[R+24]=X&&(re.right-Z[0])/-X,v[R+28]=J&&(re.bottom-Z[1])/J,v[R+32]=J&&(re.left-Z[0])/-J,v[R+36]=X&&(re.top-Z[1])/-X,v[R+40]=J&&(re.right-Z[0])/-J,v[R+44]=X&&(re.bottom-Z[1])/-X,v[R+48]=X&&(re.left-Z[0])/X,v[R+52]=J&&(re.top-Z[1])/-J,v[R+56]=X&&(re.right-Z[0])/X,v[R+60]=J&&(re.bottom-Z[1])/-J}var se=1+Math.min(Math.abs(J),Math.abs(X));Y.paddingLeft=K(v,32,16)/se,Y.paddingTop=K(v,48,16)/se,Y.paddingRight=K(v,0,16)/se,Y.paddingBottom=K(v,16,16)/se,b._textDivProperties.set(Q,Y)}}function I(b,S,w){var k=w.map(function(v,R){return{x1:v.left,y1:v.top,x2:v.right,y2:v.bottom,index:R,x1New:void 0,x2New:void 0}});B(b,k);var z=new Array(w.length),Q=c(k),Y;try{for(Q.s();!(Y=Q.n()).done;){var re=Y.value,ae=re.index;z[ae]={left:re.x1New,top:0,right:re.x2New,bottom:0}}}catch(v){Q.e(v)}finally{Q.f()}w.map(function(v,R){var D=z[R],Z=k[R];Z.x1=v.top,Z.y1=b-D.right,Z.x2=v.bottom,Z.y2=b-D.left,Z.index=R,Z.x1New=void 0,Z.x2New=void 0}),B(S,k);var ce=c(k),J;try{for(ce.s();!(J=ce.n()).done;){var X=J.value,L=X.index;z[L].top=X.x1New,z[L].bottom=X.x2New}}catch(v){ce.e(v)}finally{ce.f()}return z}function B(b,S){S.sort(function(E,T){return E.x1-T.x1||E.index-T.index});var w={x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0},k=[{start:-1/0,end:1/0,boundary:w}],z=c(S),Q;try{for(z.s();!(Q=z.n()).done;){for(var Y=Q.value,re=0;re<k.length&&k[re].end<=Y.y1;)re++;for(var ae=k.length-1;ae>=0&&k[ae].start>=Y.y2;)ae--;var ce=void 0,J=void 0,X=void 0,L=void 0,v=-1/0;for(X=re;X<=ae;X++){ce=k[X],J=ce.boundary;var R=void 0;J.x2>Y.x1?R=J.index>Y.index?J.x1New:Y.x1:J.x2New===void 0?R=(J.x2+Y.x1)/2:R=J.x2New,R>v&&(v=R)}for(Y.x1New=v,X=re;X<=ae;X++)ce=k[X],J=ce.boundary,J.x2New===void 0?J.x2>Y.x1?J.index>Y.index&&(J.x2New=J.x2):J.x2New=v:J.x2New>v&&(J.x2New=Math.max(v,J.x2));var D=[],Z=null;for(X=re;X<=ae;X++){ce=k[X],J=ce.boundary;var se=J.x2>Y.x2?J:Y;Z===se?D[D.length-1].end=ce.end:(D.push({start:ce.start,end:ce.end,boundary:se}),Z=se)}for(k[re].start<Y.y1&&(D[0].start=Y.y1,D.unshift({start:k[re].start,end:Y.y1,boundary:k[re].boundary})),Y.y2<k[ae].end&&(D[D.length-1].end=Y.y2,D.push({start:Y.y2,end:k[ae].end,boundary:k[ae].boundary})),X=re;X<=ae;X++)if(ce=k[X],J=ce.boundary,J.x2New===void 0){var ie=!1;for(L=re-1;!ie&&L>=0&&k[L].start>=J.y1;L--)ie=k[L].boundary===J;for(L=ae+1;!ie&&L<k.length&&k[L].end<=J.y2;L++)ie=k[L].boundary===J;for(L=0;!ie&&L<D.length;L++)ie=D[L].boundary===J;ie||(J.x2New=v)}Array.prototype.splice.apply(k,[re,ae-re+1].concat(D))}}catch(E){z.e(E)}finally{z.f()}for(var Pe=0,le=k;Pe<le.length;Pe++){var fe=le[Pe],N=fe.boundary;N.x2New===void 0&&(N.x2New=Math.max(b,N.x2))}}var C=function(){function b(S){var w,k=this,z=S.textContent,Q=S.textContentStream,Y=S.container,re=S.viewport,ae=S.textDivs,ce=S.textContentItemsStr,J=S.enhanceTextSelection;o(this,b),this._textContent=z,this._textContentStream=Q,this._container=Y,this._document=Y.ownerDocument,this._viewport=re,this._textDivs=ae||[],this._textContentItemsStr=ce||[],this._enhanceTextSelection=!!J,this._fontInspectorEnabled=!!((w=globalThis.FontInspector)!==null&&w!==void 0&&w.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,e.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally(function(){k._layoutTextCtx&&(k._layoutTextCtx.canvas.width=0,k._layoutTextCtx.canvas.height=0,k._layoutTextCtx=null)}).catch(function(){})}return l(b,[{key:"promise",get:function(){return this._capability.promise}},{key:"cancel",value:function(){this._canceled=!0,this._reader&&(this._reader.cancel(new e.AbortException("TextLayer task cancelled.")),this._reader=null),this._renderTimer!==null&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))}},{key:"_processItems",value:function(w,k){for(var z=0,Q=w.length;z<Q;z++){if(w[z].str===void 0){if(w[z].type==="beginMarkedContentProps"||w[z].type==="beginMarkedContent"){var Y=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),w[z].id!==null&&this._container.setAttribute("id","".concat(w[z].id)),Y.appendChild(this._container)}else w[z].type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(w[z].str),G(this,w[z],k,this._layoutTextCtx)}}},{key:"_layoutText",value:function(w){var k=this._textDivProperties.get(w),z="";if(k.canvasWidth!==0&&k.hasText){var Q=w.style,Y=Q.fontSize,re=Q.fontFamily;(Y!==this._layoutTextLastFontSize||re!==this._layoutTextLastFontFamily)&&(this._layoutTextCtx.font="".concat(Y," ").concat(re),this._layoutTextLastFontSize=Y,this._layoutTextLastFontFamily=re);var ae=this._layoutTextCtx.measureText(w.textContent),ce=ae.width;ce>0&&(k.scale=k.canvasWidth/ce,z="scaleX(".concat(k.scale,")"))}if(k.angle!==0&&(z="rotate(".concat(k.angle,"deg) ").concat(z)),z.length>0&&(this._enhanceTextSelection&&(k.originalTransform=z),w.style.transform=z),k.hasText&&this._container.appendChild(w),k.hasEOL){var J=document.createElement("br");J.setAttribute("role","presentation"),this._container.appendChild(J)}}},{key:"_render",value:function(){var w=this,k=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,z=(0,e.createPromiseCapability)(),Q=Object.create(null),Y=this._document.createElement("canvas");if(Y.height=Y.width=$,Y.mozOpaque=!0,this._layoutTextCtx=Y.getContext("2d",{alpha:!1}),this._textContent){var re=this._textContent.items,ae=this._textContent.styles;this._processItems(re,ae),z.resolve()}else if(this._textContentStream){var ce=function J(){w._reader.read().then(function(X){var L=X.value,v=X.done;if(v){z.resolve();return}Object.assign(Q,L.styles),w._processItems(L.items,Q),J()},z.reject)};this._reader=this._textContentStream.getReader(),ce()}else throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');z.promise.then(function(){Q=null,k?w._renderTimer=setTimeout(function(){ue(w),w._renderTimer=null},k):ue(w)},this._capability.reject)}},{key:"expandTextDivs",value:function(){var w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;if(!(!this._enhanceTextSelection||!this._renderingDone)){this._bounds!==null&&(U(this),this._bounds=null);for(var k=[],z=[],Q=0,Y=this._textDivs.length;Q<Y;Q++){var re=this._textDivs[Q],ae=this._textDivProperties.get(re);!ae.hasText||(w?(k.length=0,z.length=0,ae.originalTransform&&k.push(ae.originalTransform),ae.paddingTop>0?(z.push("".concat(ae.paddingTop,"px")),k.push("translateY(".concat(-ae.paddingTop,"px)"))):z.push(0),ae.paddingRight>0?z.push("".concat(ae.paddingRight/ae.scale,"px")):z.push(0),ae.paddingBottom>0?z.push("".concat(ae.paddingBottom,"px")):z.push(0),ae.paddingLeft>0?(z.push("".concat(ae.paddingLeft/ae.scale,"px")),k.push("translateX(".concat(-ae.paddingLeft/ae.scale,"px)"))):z.push(0),re.style.padding=z.join(" "),k.length&&(re.style.transform=k.join(" "))):(re.style.padding=null,re.style.transform=ae.originalTransform))}}}}]),b}();function W(b){var S=new C({textContent:b.textContent,textContentStream:b.textContentStream,container:b.container,viewport:b.viewport,textDivs:b.textDivs,textContentItemsStr:b.textContentItemsStr,enhanceTextSelection:b.enhanceTextSelection});return S._render(b.timeout),S}},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.SVGGraphics=void 0;var e=t(4),o=t(1),s=t(6);function l(J){return P(J)||d(J)||y(J)||c()}function c(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function d(J){if(typeof Symbol!="undefined"&&J[Symbol.iterator]!=null||J["@@iterator"]!=null)return Array.from(J)}function P(J){if(Array.isArray(J))return G(J)}function x(J,X){return O(J)||j(J,X)||y(J,X)||$()}function $(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function j(J,X){var L=J&&(typeof Symbol!="undefined"&&J[Symbol.iterator]||J["@@iterator"]);if(L!=null){var v=[],R=!0,D=!1,Z,se;try{for(L=L.call(J);!(R=(Z=L.next()).done)&&(v.push(Z.value),!(X&&v.length===X));R=!0);}catch(ie){D=!0,se=ie}finally{try{!R&&L.return!=null&&L.return()}finally{if(D)throw se}}return v}}function O(J){if(Array.isArray(J))return J}function A(J,X){var L=typeof Symbol!="undefined"&&J[Symbol.iterator]||J["@@iterator"];if(!L){if(Array.isArray(J)||(L=y(J))||X&&J&&typeof J.length=="number"){L&&(J=L);var v=0,R=function(){};return{s:R,n:function(){return v>=J.length?{done:!0}:{done:!1,value:J[v++]}},e:function(Pe){throw Pe},f:R}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var D=!0,Z=!1,se;return{s:function(){L=L.call(J)},n:function(){var Pe=L.next();return D=Pe.done,Pe},e:function(Pe){Z=!0,se=Pe},f:function(){try{!D&&L.return!=null&&L.return()}finally{if(Z)throw se}}}}function y(J,X){if(!!J){if(typeof J=="string")return G(J,X);var L=Object.prototype.toString.call(J).slice(8,-1);if(L==="Object"&&J.constructor&&(L=J.constructor.name),L==="Map"||L==="Set")return Array.from(J);if(L==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(L))return G(J,X)}}function G(J,X){(X==null||X>J.length)&&(X=J.length);for(var L=0,v=new Array(X);L<X;L++)v[L]=J[L];return v}function ue(J,X){for(var L=0;L<X.length;L++){var v=X[L];v.enumerable=v.enumerable||!1,v.configurable=!0,"value"in v&&(v.writable=!0),Object.defineProperty(J,v.key,v)}}function K(J,X,L){return X&&ue(J.prototype,X),L&&ue(J,L),J}function U(J,X){if(!(J instanceof X))throw new TypeError("Cannot call a class as a function")}var I=function J(){U(this,J),(0,e.unreachable)("Not implemented: SVGGraphics")};a.SVGGraphics=I;{var B=function(X){var L=[],v=[],R=A(X),D;try{for(R.s();!(D=R.n()).done;){var Z=D.value;if(Z.fn==="save"){L.push({fnId:92,fn:"group",items:[]}),v.push(L),L=L[L.length-1].items;continue}Z.fn==="restore"?L=v.pop():L.push(Z)}}catch(se){R.e(se)}finally{R.f()}return L},C=function(X){if(Number.isInteger(X))return X.toString();var L=X.toFixed(10),v=L.length-1;if(L[v]!=="0")return L;do v--;while(L[v]==="0");return L.substring(0,L[v]==="."?v:v+1)},W=function(X){if(X[4]===0&&X[5]===0){if(X[1]===0&&X[2]===0)return X[0]===1&&X[3]===1?"":"scale(".concat(C(X[0])," ").concat(C(X[3]),")");if(X[0]===X[3]&&X[1]===-X[2]){var L=Math.acos(X[0])*180/Math.PI;return"rotate(".concat(C(L),")")}}else if(X[0]===1&&X[1]===0&&X[2]===0&&X[3]===1)return"translate(".concat(C(X[4])," ").concat(C(X[5]),")");return"matrix(".concat(C(X[0])," ").concat(C(X[1])," ").concat(C(X[2])," ").concat(C(X[3])," ").concat(C(X[4])," ")+"".concat(C(X[5]),")")},b={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},S="http://www.w3.org/XML/1998/namespace",w="http://www.w3.org/1999/xlink",k=["butt","round","square"],z=["miter","round","bevel"],Q=function(){for(var J=new Uint8Array([137,80,78,71,13,10,26,10]),X=12,L=new Int32Array(256),v=0;v<256;v++){for(var R=v,D=0;D<8;D++)R&1?R=3988292384^R>>1&2147483647:R=R>>1&2147483647;L[v]=R}function Z(N,E,T){for(var te=-1,ne=E;ne<T;ne++){var de=(te^N[ne])&255,he=L[de];te=te>>>8^he}return te^-1}function se(N,E,T,te){var ne=te,de=E.length;T[ne]=de>>24&255,T[ne+1]=de>>16&255,T[ne+2]=de>>8&255,T[ne+3]=de&255,ne+=4,T[ne]=N.charCodeAt(0)&255,T[ne+1]=N.charCodeAt(1)&255,T[ne+2]=N.charCodeAt(2)&255,T[ne+3]=N.charCodeAt(3)&255,ne+=4,T.set(E,ne),ne+=E.length;var he=Z(T,te+4,ne);T[ne]=he>>24&255,T[ne+1]=he>>16&255,T[ne+2]=he>>8&255,T[ne+3]=he&255}function ie(N,E,T){for(var te=1,ne=0,de=E;de<T;++de)te=(te+(N[de]&255))%65521,ne=(ne+te)%65521;return ne<<16|te}function Pe(N){if(!s.isNodeJS)return le(N);try{var E;parseInt(process.versions.node)>=8?E=N:E=Buffer.from(N);var T=require("zlib").deflateSync(E,{level:9});return T instanceof Uint8Array?T:new Uint8Array(T)}catch(te){(0,e.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+te)}return le(N)}function le(N){var E=N.length,T=65535,te=Math.ceil(E/T),ne=new Uint8Array(2+E+te*5+4),de=0;ne[de++]=120,ne[de++]=156;for(var he=0;E>T;)ne[de++]=0,ne[de++]=255,ne[de++]=255,ne[de++]=0,ne[de++]=0,ne.set(N.subarray(he,he+T),de),de+=T,he+=T,E-=T;ne[de++]=1,ne[de++]=E&255,ne[de++]=E>>8&255,ne[de++]=~E&65535&255,ne[de++]=(~E&65535)>>8&255,ne.set(N.subarray(he),de),de+=N.length-he;var Ae=ie(N,0,N.length);return ne[de++]=Ae>>24&255,ne[de++]=Ae>>16&255,ne[de++]=Ae>>8&255,ne[de++]=Ae&255,ne}function fe(N,E,T,te){var ne=N.width,de=N.height,he,Ae,ee,oe=N.data;switch(E){case e.ImageKind.GRAYSCALE_1BPP:Ae=0,he=1,ee=ne+7>>3;break;case e.ImageKind.RGB_24BPP:Ae=2,he=8,ee=ne*3;break;case e.ImageKind.RGBA_32BPP:Ae=6,he=8,ee=ne*4;break;default:throw new Error("invalid format")}for(var M=new Uint8Array((1+ee)*de),H=0,V=0,ge=0;ge<de;++ge)M[H++]=0,M.set(oe.subarray(V,V+ee),H),V+=ee,H+=ee;if(E===e.ImageKind.GRAYSCALE_1BPP&&te){H=0;for(var ye=0;ye<de;ye++){H++;for(var pe=0;pe<ee;pe++)M[H++]^=255}}var Se=new Uint8Array([ne>>24&255,ne>>16&255,ne>>8&255,ne&255,de>>24&255,de>>16&255,de>>8&255,de&255,he,Ae,0,0,0]),ke=Pe(M),Ce=J.length+X*3+Se.length+ke.length,Ie=new Uint8Array(Ce),Ne=0;return Ie.set(J,Ne),Ne+=J.length,se("IHDR",Se,Ie,Ne),Ne+=X+Se.length,se("IDATA",ke,Ie,Ne),Ne+=X+ke.length,se("IEND",new Uint8Array(0),Ie,Ne),(0,e.createObjectURL)(Ie,"image/png",T)}return function(E,T,te){var ne=E.kind===void 0?e.ImageKind.GRAYSCALE_1BPP:E.kind;return fe(E,ne,T,te)}}(),Y=function(){function J(){U(this,J),this.fontSizeScale=1,this.fontWeight=b.fontWeight,this.fontSize=0,this.textMatrix=e.IDENTITY_MATRIX,this.fontMatrix=e.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=e.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=b.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}return K(J,[{key:"clone",value:function(){return Object.create(this)}},{key:"setCurrentPoint",value:function(L,v){this.x=L,this.y=v}}]),J}(),re=0,ae=0,ce=0;a.SVGGraphics=I=function(){function J(X,L){var v=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;U(this,J),this.svgFactory=new o.DOMSVGFactory,this.current=new Y,this.transformMatrix=e.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=X,this.objs=L,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!v,this._operatorIdMapping=[];for(var R in e.OPS)this._operatorIdMapping[e.OPS[R]]=R}return K(J,[{key:"save",value:function(){this.transformStack.push(this.transformMatrix);var L=this.current;this.extraStack.push(L),this.current=L.clone()}},{key:"restore",value:function(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}},{key:"group",value:function(L){this.save(),this.executeOpTree(L),this.restore()}},{key:"loadDependencies",value:function(L){for(var v=this,R=L.fnArray,D=L.argsArray,Z=0,se=R.length;Z<se;Z++)if(R[Z]===e.OPS.dependency){var ie=A(D[Z]),Pe;try{var le=function(){var N=Pe.value,E=N.startsWith("g_")?v.commonObjs:v.objs,T=new Promise(function(te){E.get(N,te)});v.current.dependencies.push(T)};for(ie.s();!(Pe=ie.n()).done;)le()}catch(fe){ie.e(fe)}finally{ie.f()}}return Promise.all(this.current.dependencies)}},{key:"transform",value:function(L,v,R,D,Z,se){var ie=[L,v,R,D,Z,se];this.transformMatrix=e.Util.transform(this.transformMatrix,ie),this.tgrp=null}},{key:"getSVG",value:function(L,v){var R=this;this.viewport=v;var D=this._initialize(v);return this.loadDependencies(L).then(function(){return R.transformMatrix=e.IDENTITY_MATRIX,R.executeOpTree(R.convertOpList(L)),D})}},{key:"convertOpList",value:function(L){for(var v=this._operatorIdMapping,R=L.argsArray,D=L.fnArray,Z=[],se=0,ie=D.length;se<ie;se++){var Pe=D[se];Z.push({fnId:Pe,fn:v[Pe],args:R[se]})}return B(Z)}},{key:"executeOpTree",value:function(L){var v=A(L),R;try{for(v.s();!(R=v.n()).done;){var D=R.value,Z=D.fn,se=D.fnId,ie=D.args;switch(se|0){case e.OPS.beginText:this.beginText();break;case e.OPS.dependency:break;case e.OPS.setLeading:this.setLeading(ie);break;case e.OPS.setLeadingMoveText:this.setLeadingMoveText(ie[0],ie[1]);break;case e.OPS.setFont:this.setFont(ie);break;case e.OPS.showText:this.showText(ie[0]);break;case e.OPS.showSpacedText:this.showText(ie[0]);break;case e.OPS.endText:this.endText();break;case e.OPS.moveText:this.moveText(ie[0],ie[1]);break;case e.OPS.setCharSpacing:this.setCharSpacing(ie[0]);break;case e.OPS.setWordSpacing:this.setWordSpacing(ie[0]);break;case e.OPS.setHScale:this.setHScale(ie[0]);break;case e.OPS.setTextMatrix:this.setTextMatrix(ie[0],ie[1],ie[2],ie[3],ie[4],ie[5]);break;case e.OPS.setTextRise:this.setTextRise(ie[0]);break;case e.OPS.setTextRenderingMode:this.setTextRenderingMode(ie[0]);break;case e.OPS.setLineWidth:this.setLineWidth(ie[0]);break;case e.OPS.setLineJoin:this.setLineJoin(ie[0]);break;case e.OPS.setLineCap:this.setLineCap(ie[0]);break;case e.OPS.setMiterLimit:this.setMiterLimit(ie[0]);break;case e.OPS.setFillRGBColor:this.setFillRGBColor(ie[0],ie[1],ie[2]);break;case e.OPS.setStrokeRGBColor:this.setStrokeRGBColor(ie[0],ie[1],ie[2]);break;case e.OPS.setStrokeColorN:this.setStrokeColorN(ie);break;case e.OPS.setFillColorN:this.setFillColorN(ie);break;case e.OPS.shadingFill:this.shadingFill(ie[0]);break;case e.OPS.setDash:this.setDash(ie[0],ie[1]);break;case e.OPS.setRenderingIntent:this.setRenderingIntent(ie[0]);break;case e.OPS.setFlatness:this.setFlatness(ie[0]);break;case e.OPS.setGState:this.setGState(ie[0]);break;case e.OPS.fill:this.fill();break;case e.OPS.eoFill:this.eoFill();break;case e.OPS.stroke:this.stroke();break;case e.OPS.fillStroke:this.fillStroke();break;case e.OPS.eoFillStroke:this.eoFillStroke();break;case e.OPS.clip:this.clip("nonzero");break;case e.OPS.eoClip:this.clip("evenodd");break;case e.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case e.OPS.paintImageXObject:this.paintImageXObject(ie[0]);break;case e.OPS.paintInlineImageXObject:this.paintInlineImageXObject(ie[0]);break;case e.OPS.paintImageMaskXObject:this.paintImageMaskXObject(ie[0]);break;case e.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(ie[0],ie[1]);break;case e.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case e.OPS.closePath:this.closePath();break;case e.OPS.closeStroke:this.closeStroke();break;case e.OPS.closeFillStroke:this.closeFillStroke();break;case e.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case e.OPS.nextLine:this.nextLine();break;case e.OPS.transform:this.transform(ie[0],ie[1],ie[2],ie[3],ie[4],ie[5]);break;case e.OPS.constructPath:this.constructPath(ie[0],ie[1]);break;case e.OPS.endPath:this.endPath();break;case 92:this.group(D.items);break;default:(0,e.warn)("Unimplemented operator ".concat(Z));break}}}catch(Pe){v.e(Pe)}finally{v.f()}}},{key:"setWordSpacing",value:function(L){this.current.wordSpacing=L}},{key:"setCharSpacing",value:function(L){this.current.charSpacing=L}},{key:"nextLine",value:function(){this.moveText(0,this.current.leading)}},{key:"setTextMatrix",value:function(L,v,R,D,Z,se){var ie=this.current;ie.textMatrix=ie.lineMatrix=[L,v,R,D,Z,se],ie.textMatrixScale=Math.hypot(L,v),ie.x=ie.lineX=0,ie.y=ie.lineY=0,ie.xcoords=[],ie.ycoords=[],ie.tspan=this.svgFactory.createElement("svg:tspan"),ie.tspan.setAttributeNS(null,"font-family",ie.fontFamily),ie.tspan.setAttributeNS(null,"font-size","".concat(C(ie.fontSize),"px")),ie.tspan.setAttributeNS(null,"y",C(-ie.y)),ie.txtElement=this.svgFactory.createElement("svg:text"),ie.txtElement.appendChild(ie.tspan)}},{key:"beginText",value:function(){var L=this.current;L.x=L.lineX=0,L.y=L.lineY=0,L.textMatrix=e.IDENTITY_MATRIX,L.lineMatrix=e.IDENTITY_MATRIX,L.textMatrixScale=1,L.tspan=this.svgFactory.createElement("svg:tspan"),L.txtElement=this.svgFactory.createElement("svg:text"),L.txtgrp=this.svgFactory.createElement("svg:g"),L.xcoords=[],L.ycoords=[]}},{key:"moveText",value:function(L,v){var R=this.current;R.x=R.lineX+=L,R.y=R.lineY+=v,R.xcoords=[],R.ycoords=[],R.tspan=this.svgFactory.createElement("svg:tspan"),R.tspan.setAttributeNS(null,"font-family",R.fontFamily),R.tspan.setAttributeNS(null,"font-size","".concat(C(R.fontSize),"px")),R.tspan.setAttributeNS(null,"y",C(-R.y))}},{key:"showText",value:function(L){var v=this.current,R=v.font,D=v.fontSize;if(D!==0){var Z=v.fontSizeScale,se=v.charSpacing,ie=v.wordSpacing,Pe=v.fontDirection,le=v.textHScale*Pe,fe=R.vertical,N=fe?1:-1,E=R.defaultVMetrics,T=D*v.fontMatrix[0],te=0,ne=A(L),de;try{for(ne.s();!(de=ne.n()).done;){var he=de.value;if(he===null){te+=Pe*ie;continue}else if((0,e.isNum)(he)){te+=N*he*D/1e3;continue}var Ae=(he.isSpace?ie:0)+se,ee=he.fontChar,oe=void 0,M=void 0,H=he.width;if(fe){var V=void 0,ge=he.vmetric||E;V=he.vmetric?ge[1]:H*.5,V=-V*T;var ye=ge[2]*T;H=ge?-ge[0]:H,oe=V/Z,M=(te+ye)/Z}else oe=te/Z,M=0;(he.isInFont||R.missingFile)&&(v.xcoords.push(v.x+oe),fe&&v.ycoords.push(-v.y+M),v.tspan.textContent+=ee);var pe=void 0;fe?pe=H*T-Ae*Pe:pe=H*T+Ae*Pe,te+=pe}}catch(Ie){ne.e(Ie)}finally{ne.f()}v.tspan.setAttributeNS(null,"x",v.xcoords.map(C).join(" ")),fe?v.tspan.setAttributeNS(null,"y",v.ycoords.map(C).join(" ")):v.tspan.setAttributeNS(null,"y",C(-v.y)),fe?v.y-=te:v.x+=te*le,v.tspan.setAttributeNS(null,"font-family",v.fontFamily),v.tspan.setAttributeNS(null,"font-size","".concat(C(v.fontSize),"px")),v.fontStyle!==b.fontStyle&&v.tspan.setAttributeNS(null,"font-style",v.fontStyle),v.fontWeight!==b.fontWeight&&v.tspan.setAttributeNS(null,"font-weight",v.fontWeight);var Se=v.textRenderingMode&e.TextRenderingMode.FILL_STROKE_MASK;if(Se===e.TextRenderingMode.FILL||Se===e.TextRenderingMode.FILL_STROKE?(v.fillColor!==b.fillColor&&v.tspan.setAttributeNS(null,"fill",v.fillColor),v.fillAlpha<1&&v.tspan.setAttributeNS(null,"fill-opacity",v.fillAlpha)):v.textRenderingMode===e.TextRenderingMode.ADD_TO_PATH?v.tspan.setAttributeNS(null,"fill","transparent"):v.tspan.setAttributeNS(null,"fill","none"),Se===e.TextRenderingMode.STROKE||Se===e.TextRenderingMode.FILL_STROKE){var ke=1/(v.textMatrixScale||1);this._setStrokeAttributes(v.tspan,ke)}var Ce=v.textMatrix;v.textRise!==0&&(Ce=Ce.slice(),Ce[5]+=v.textRise),v.txtElement.setAttributeNS(null,"transform","".concat(W(Ce)," scale(").concat(C(le),", -1)")),v.txtElement.setAttributeNS(S,"xml:space","preserve"),v.txtElement.appendChild(v.tspan),v.txtgrp.appendChild(v.txtElement),this._ensureTransformGroup().appendChild(v.txtElement)}}},{key:"setLeadingMoveText",value:function(L,v){this.setLeading(-v),this.moveText(L,v)}},{key:"addFontStyle",value:function(L){if(!L.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));var v=(0,e.createObjectURL)(L.data,L.mimetype,this.forceDataSchema);this.cssStyle.textContent+='@font-face { font-family: "'.concat(L.loadedName,'";')+" src: url(".concat(v,`); }
`)}},{key:"setFont",value:function(L){var v=this.current,R=this.commonObjs.get(L[0]),D=L[1];v.font=R,this.embedFonts&&!R.missingFile&&!this.embeddedFonts[R.loadedName]&&(this.addFontStyle(R),this.embeddedFonts[R.loadedName]=R),v.fontMatrix=R.fontMatrix||e.FONT_IDENTITY_MATRIX;var Z="normal";R.black?Z="900":R.bold&&(Z="bold");var se=R.italic?"italic":"normal";D<0?(D=-D,v.fontDirection=-1):v.fontDirection=1,v.fontSize=D,v.fontFamily=R.loadedName,v.fontWeight=Z,v.fontStyle=se,v.tspan=this.svgFactory.createElement("svg:tspan"),v.tspan.setAttributeNS(null,"y",C(-v.y)),v.xcoords=[],v.ycoords=[]}},{key:"endText",value:function(){var L,v=this.current;v.textRenderingMode&e.TextRenderingMode.ADD_TO_PATH_FLAG&&(L=v.txtElement)!==null&&L!==void 0&&L.hasChildNodes()&&(v.element=v.txtElement,this.clip("nonzero"),this.endPath())}},{key:"setLineWidth",value:function(L){L>0&&(this.current.lineWidth=L)}},{key:"setLineCap",value:function(L){this.current.lineCap=k[L]}},{key:"setLineJoin",value:function(L){this.current.lineJoin=z[L]}},{key:"setMiterLimit",value:function(L){this.current.miterLimit=L}},{key:"setStrokeAlpha",value:function(L){this.current.strokeAlpha=L}},{key:"setStrokeRGBColor",value:function(L,v,R){this.current.strokeColor=e.Util.makeHexColor(L,v,R)}},{key:"setFillAlpha",value:function(L){this.current.fillAlpha=L}},{key:"setFillRGBColor",value:function(L,v,R){this.current.fillColor=e.Util.makeHexColor(L,v,R),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}},{key:"setStrokeColorN",value:function(L){this.current.strokeColor=this._makeColorN_Pattern(L)}},{key:"setFillColorN",value:function(L){this.current.fillColor=this._makeColorN_Pattern(L)}},{key:"shadingFill",value:function(L){var v=this.viewport.width,R=this.viewport.height,D=e.Util.inverseTransform(this.transformMatrix),Z=e.Util.applyTransform([0,0],D),se=e.Util.applyTransform([0,R],D),ie=e.Util.applyTransform([v,0],D),Pe=e.Util.applyTransform([v,R],D),le=Math.min(Z[0],se[0],ie[0],Pe[0]),fe=Math.min(Z[1],se[1],ie[1],Pe[1]),N=Math.max(Z[0],se[0],ie[0],Pe[0]),E=Math.max(Z[1],se[1],ie[1],Pe[1]),T=this.svgFactory.createElement("svg:rect");T.setAttributeNS(null,"x",le),T.setAttributeNS(null,"y",fe),T.setAttributeNS(null,"width",N-le),T.setAttributeNS(null,"height",E-fe),T.setAttributeNS(null,"fill",this._makeShadingPattern(L)),this.current.fillAlpha<1&&T.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().appendChild(T)}},{key:"_makeColorN_Pattern",value:function(L){return L[0]==="TilingPattern"?this._makeTilingPattern(L):this._makeShadingPattern(L)}},{key:"_makeTilingPattern",value:function(L){var v=L[1],R=L[2],D=L[3]||e.IDENTITY_MATRIX,Z=x(L[4],4),se=Z[0],ie=Z[1],Pe=Z[2],le=Z[3],fe=L[5],N=L[6],E=L[7],T="shading".concat(ce++),te=e.Util.applyTransform([se,ie],D),ne=x(te,2),de=ne[0],he=ne[1],Ae=e.Util.applyTransform([Pe,le],D),ee=x(Ae,2),oe=ee[0],M=ee[1],H=e.Util.singularValueDecompose2dScale(D),V=x(H,2),ge=V[0],ye=V[1],pe=fe*ge,Se=N*ye,ke=this.svgFactory.createElement("svg:pattern");ke.setAttributeNS(null,"id",T),ke.setAttributeNS(null,"patternUnits","userSpaceOnUse"),ke.setAttributeNS(null,"width",pe),ke.setAttributeNS(null,"height",Se),ke.setAttributeNS(null,"x","".concat(de)),ke.setAttributeNS(null,"y","".concat(he));var Ce=this.svg,Ie=this.transformMatrix,Ne=this.current.fillColor,Me=this.current.strokeColor,Ee=this.svgFactory.create(oe-de,M-he);if(this.svg=Ee,this.transformMatrix=D,E===2){var Be=e.Util.makeHexColor.apply(e.Util,l(v));this.current.fillColor=Be,this.current.strokeColor=Be}return this.executeOpTree(this.convertOpList(R)),this.svg=Ce,this.transformMatrix=Ie,this.current.fillColor=Ne,this.current.strokeColor=Me,ke.appendChild(Ee.childNodes[0]),this.defs.appendChild(ke),"url(#".concat(T,")")}},{key:"_makeShadingPattern",value:function(L){switch(L[0]){case"RadialAxial":var v="shading".concat(ce++),R=L[3],D;switch(L[1]){case"axial":var Z=L[4],se=L[5];D=this.svgFactory.createElement("svg:linearGradient"),D.setAttributeNS(null,"id",v),D.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),D.setAttributeNS(null,"x1",Z[0]),D.setAttributeNS(null,"y1",Z[1]),D.setAttributeNS(null,"x2",se[0]),D.setAttributeNS(null,"y2",se[1]);break;case"radial":var ie=L[4],Pe=L[5],le=L[6],fe=L[7];D=this.svgFactory.createElement("svg:radialGradient"),D.setAttributeNS(null,"id",v),D.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),D.setAttributeNS(null,"cx",Pe[0]),D.setAttributeNS(null,"cy",Pe[1]),D.setAttributeNS(null,"r",fe),D.setAttributeNS(null,"fx",ie[0]),D.setAttributeNS(null,"fy",ie[1]),D.setAttributeNS(null,"fr",le);break;default:throw new Error("Unknown RadialAxial type: ".concat(L[1]))}var N=A(R),E;try{for(N.s();!(E=N.n()).done;){var T=E.value,te=this.svgFactory.createElement("svg:stop");te.setAttributeNS(null,"offset",T[0]),te.setAttributeNS(null,"stop-color",T[1]),D.appendChild(te)}}catch(ne){N.e(ne)}finally{N.f()}return this.defs.appendChild(D),"url(#".concat(v,")");case"Mesh":return(0,e.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error("Unknown IR type: ".concat(L[0]))}}},{key:"setDash",value:function(L,v){this.current.dashArray=L,this.current.dashPhase=v}},{key:"constructPath",value:function(L,v){var R=this.current,D=R.x,Z=R.y,se=[],ie=0,Pe=A(L),le;try{for(Pe.s();!(le=Pe.n()).done;){var fe=le.value;switch(fe|0){case e.OPS.rectangle:D=v[ie++],Z=v[ie++];var N=v[ie++],E=v[ie++],T=D+N,te=Z+E;se.push("M",C(D),C(Z),"L",C(T),C(Z),"L",C(T),C(te),"L",C(D),C(te),"Z");break;case e.OPS.moveTo:D=v[ie++],Z=v[ie++],se.push("M",C(D),C(Z));break;case e.OPS.lineTo:D=v[ie++],Z=v[ie++],se.push("L",C(D),C(Z));break;case e.OPS.curveTo:D=v[ie+4],Z=v[ie+5],se.push("C",C(v[ie]),C(v[ie+1]),C(v[ie+2]),C(v[ie+3]),C(D),C(Z)),ie+=6;break;case e.OPS.curveTo2:se.push("C",C(D),C(Z),C(v[ie]),C(v[ie+1]),C(v[ie+2]),C(v[ie+3])),D=v[ie+2],Z=v[ie+3],ie+=4;break;case e.OPS.curveTo3:D=v[ie+2],Z=v[ie+3],se.push("C",C(v[ie]),C(v[ie+1]),C(D),C(Z),C(D),C(Z)),ie+=4;break;case e.OPS.closePath:se.push("Z");break}}}catch(ne){Pe.e(ne)}finally{Pe.f()}se=se.join(" "),R.path&&L.length>0&&L[0]!==e.OPS.rectangle&&L[0]!==e.OPS.moveTo?se=R.path.getAttributeNS(null,"d")+se:(R.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(R.path)),R.path.setAttributeNS(null,"d",se),R.path.setAttributeNS(null,"fill","none"),R.element=R.path,R.setCurrentPoint(D,Z)}},{key:"endPath",value:function(){var L=this.current;if(L.path=null,!!this.pendingClip){if(!L.element){this.pendingClip=null;return}var v="clippath".concat(re++),R=this.svgFactory.createElement("svg:clipPath");R.setAttributeNS(null,"id",v),R.setAttributeNS(null,"transform",W(this.transformMatrix));var D=L.element.cloneNode(!0);if(this.pendingClip==="evenodd"?D.setAttributeNS(null,"clip-rule","evenodd"):D.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,R.appendChild(D),this.defs.appendChild(R),L.activeClipUrl){L.clipGroup=null;var Z=A(this.extraStack),se;try{for(Z.s();!(se=Z.n()).done;){var ie=se.value;ie.clipGroup=null}}catch(Pe){Z.e(Pe)}finally{Z.f()}R.setAttributeNS(null,"clip-path",L.activeClipUrl)}L.activeClipUrl="url(#".concat(v,")"),this.tgrp=null}}},{key:"clip",value:function(L){this.pendingClip=L}},{key:"closePath",value:function(){var L=this.current;if(L.path){var v="".concat(L.path.getAttributeNS(null,"d"),"Z");L.path.setAttributeNS(null,"d",v)}}},{key:"setLeading",value:function(L){this.current.leading=-L}},{key:"setTextRise",value:function(L){this.current.textRise=L}},{key:"setTextRenderingMode",value:function(L){this.current.textRenderingMode=L}},{key:"setHScale",value:function(L){this.current.textHScale=L/100}},{key:"setRenderingIntent",value:function(L){}},{key:"setFlatness",value:function(L){}},{key:"setGState",value:function(L){var v=A(L),R;try{for(v.s();!(R=v.n()).done;){var D=x(R.value,2),Z=D[0],se=D[1];switch(Z){case"LW":this.setLineWidth(se);break;case"LC":this.setLineCap(se);break;case"LJ":this.setLineJoin(se);break;case"ML":this.setMiterLimit(se);break;case"D":this.setDash(se[0],se[1]);break;case"RI":this.setRenderingIntent(se);break;case"FL":this.setFlatness(se);break;case"Font":this.setFont(se);break;case"CA":this.setStrokeAlpha(se);break;case"ca":this.setFillAlpha(se);break;default:(0,e.warn)("Unimplemented graphic state operator ".concat(Z));break}}}catch(ie){v.e(ie)}finally{v.f()}}},{key:"fill",value:function(){var L=this.current;L.element&&(L.element.setAttributeNS(null,"fill",L.fillColor),L.element.setAttributeNS(null,"fill-opacity",L.fillAlpha),this.endPath())}},{key:"stroke",value:function(){var L=this.current;L.element&&(this._setStrokeAttributes(L.element),L.element.setAttributeNS(null,"fill","none"),this.endPath())}},{key:"_setStrokeAttributes",value:function(L){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,R=this.current,D=R.dashArray;v!==1&&D.length>0&&(D=D.map(function(Z){return v*Z})),L.setAttributeNS(null,"stroke",R.strokeColor),L.setAttributeNS(null,"stroke-opacity",R.strokeAlpha),L.setAttributeNS(null,"stroke-miterlimit",C(R.miterLimit)),L.setAttributeNS(null,"stroke-linecap",R.lineCap),L.setAttributeNS(null,"stroke-linejoin",R.lineJoin),L.setAttributeNS(null,"stroke-width",C(v*R.lineWidth)+"px"),L.setAttributeNS(null,"stroke-dasharray",D.map(C).join(" ")),L.setAttributeNS(null,"stroke-dashoffset",C(v*R.dashPhase)+"px")}},{key:"eoFill",value:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}},{key:"fillStroke",value:function(){this.stroke(),this.fill()}},{key:"eoFillStroke",value:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}},{key:"closeStroke",value:function(){this.closePath(),this.stroke()}},{key:"closeFillStroke",value:function(){this.closePath(),this.fillStroke()}},{key:"closeEOFillStroke",value:function(){this.closePath(),this.eoFillStroke()}},{key:"paintSolidColorImageMask",value:function(){var L=this.svgFactory.createElement("svg:rect");L.setAttributeNS(null,"x","0"),L.setAttributeNS(null,"y","0"),L.setAttributeNS(null,"width","1px"),L.setAttributeNS(null,"height","1px"),L.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(L)}},{key:"paintImageXObject",value:function(L){var v=L.startsWith("g_")?this.commonObjs.get(L):this.objs.get(L);if(!v){(0,e.warn)("Dependent image with object ID ".concat(L," is not ready yet"));return}this.paintInlineImageXObject(v)}},{key:"paintInlineImageXObject",value:function(L,v){var R=L.width,D=L.height,Z=Q(L,this.forceDataSchema,!!v),se=this.svgFactory.createElement("svg:rect");se.setAttributeNS(null,"x","0"),se.setAttributeNS(null,"y","0"),se.setAttributeNS(null,"width",C(R)),se.setAttributeNS(null,"height",C(D)),this.current.element=se,this.clip("nonzero");var ie=this.svgFactory.createElement("svg:image");ie.setAttributeNS(w,"xlink:href",Z),ie.setAttributeNS(null,"x","0"),ie.setAttributeNS(null,"y",C(-D)),ie.setAttributeNS(null,"width",C(R)+"px"),ie.setAttributeNS(null,"height",C(D)+"px"),ie.setAttributeNS(null,"transform","scale(".concat(C(1/R)," ").concat(C(-1/D),")")),v?v.appendChild(ie):this._ensureTransformGroup().appendChild(ie)}},{key:"paintImageMaskXObject",value:function(L){var v=this.current,R=L.width,D=L.height,Z=v.fillColor;v.maskId="mask".concat(ae++);var se=this.svgFactory.createElement("svg:mask");se.setAttributeNS(null,"id",v.maskId);var ie=this.svgFactory.createElement("svg:rect");ie.setAttributeNS(null,"x","0"),ie.setAttributeNS(null,"y","0"),ie.setAttributeNS(null,"width",C(R)),ie.setAttributeNS(null,"height",C(D)),ie.setAttributeNS(null,"fill",Z),ie.setAttributeNS(null,"mask","url(#".concat(v.maskId,")")),this.defs.appendChild(se),this._ensureTransformGroup().appendChild(ie),this.paintInlineImageXObject(L,se)}},{key:"paintFormXObjectBegin",value:function(L,v){if(Array.isArray(L)&&L.length===6&&this.transform(L[0],L[1],L[2],L[3],L[4],L[5]),v){var R=v[2]-v[0],D=v[3]-v[1],Z=this.svgFactory.createElement("svg:rect");Z.setAttributeNS(null,"x",v[0]),Z.setAttributeNS(null,"y",v[1]),Z.setAttributeNS(null,"width",C(R)),Z.setAttributeNS(null,"height",C(D)),this.current.element=Z,this.clip("nonzero"),this.endPath()}}},{key:"paintFormXObjectEnd",value:function(){}},{key:"_initialize",value:function(L){var v=this.svgFactory.create(L.width,L.height),R=this.svgFactory.createElement("svg:defs");v.appendChild(R),this.defs=R;var D=this.svgFactory.createElement("svg:g");return D.setAttributeNS(null,"transform",W(L.transform)),v.appendChild(D),this.svg=D,v}},{key:"_ensureClipGroup",value:function(){if(!this.current.clipGroup){var L=this.svgFactory.createElement("svg:g");L.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(L),this.current.clipGroup=L}return this.current.clipGroup}},{key:"_ensureTransformGroup",value:function(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",W(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}]),J}()}},(r,a)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.XfaLayer=void 0;function t(O,A){return s(O)||o(O,A)||c(O,A)||e()}function e(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function o(O,A){var y=O&&(typeof Symbol!="undefined"&&O[Symbol.iterator]||O["@@iterator"]);if(y!=null){var G=[],ue=!0,K=!1,U,I;try{for(y=y.call(O);!(ue=(U=y.next()).done)&&(G.push(U.value),!(A&&G.length===A));ue=!0);}catch(B){K=!0,I=B}finally{try{!ue&&y.return!=null&&y.return()}finally{if(K)throw I}}return G}}function s(O){if(Array.isArray(O))return O}function l(O,A){var y=typeof Symbol!="undefined"&&O[Symbol.iterator]||O["@@iterator"];if(!y){if(Array.isArray(O)||(y=c(O))||A&&O&&typeof O.length=="number"){y&&(O=y);var G=0,ue=function(){};return{s:ue,n:function(){return G>=O.length?{done:!0}:{done:!1,value:O[G++]}},e:function(C){throw C},f:ue}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var K=!0,U=!1,I;return{s:function(){y=y.call(O)},n:function(){var C=y.next();return K=C.done,C},e:function(C){U=!0,I=C},f:function(){try{!K&&y.return!=null&&y.return()}finally{if(U)throw I}}}}function c(O,A){if(!!O){if(typeof O=="string")return d(O,A);var y=Object.prototype.toString.call(O).slice(8,-1);if(y==="Object"&&O.constructor&&(y=O.constructor.name),y==="Map"||y==="Set")return Array.from(O);if(y==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(y))return d(O,A)}}function d(O,A){(A==null||A>O.length)&&(A=O.length);for(var y=0,G=new Array(A);y<A;y++)G[y]=O[y];return G}function P(O,A){if(!(O instanceof A))throw new TypeError("Cannot call a class as a function")}function x(O,A){for(var y=0;y<A.length;y++){var G=A[y];G.enumerable=G.enumerable||!1,G.configurable=!0,"value"in G&&(G.writable=!0),Object.defineProperty(O,G.key,G)}}function $(O,A,y){return A&&x(O.prototype,A),y&&x(O,y),O}var j=function(){function O(){P(this,O)}return $(O,null,[{key:"setupStorage",value:function(y,G,ue,K){var U=K.getValue(G,{value:null});switch(ue.name){case"textarea":y.textContent=U.value!==null?U.value:"",y.addEventListener("input",function(W){K.setValue(G,{value:W.target.value})});break;case"input":U.value!==null&&y.setAttribute("value",U.value),ue.attributes.type==="radio"?y.addEventListener("change",function(W){var b=W.target,S=l(document.getElementsByName(b.name)),w;try{for(S.s();!(w=S.n()).done;){var k=w.value;if(k!==b){var z=k.id;K.setValue(z.split("-")[0],{value:!1})}}}catch(Q){S.e(Q)}finally{S.f()}K.setValue(G,{value:b.checked})}):y.addEventListener("input",function(W){K.setValue(G,{value:W.target.value})});break;case"select":if(U.value!==null){var I=l(ue.children),B;try{for(I.s();!(B=I.n()).done;){var C=B.value;C.attributes.value===U.value&&(C.attributes.selected=!0)}}catch(W){I.e(W)}finally{I.f()}}y.addEventListener("input",function(W){var b=W.target.options,S=b.selectedIndex===-1?null:b[b.selectedIndex].value;K.setValue(G,{value:S})});break}}},{key:"setAttributes",value:function(y,G,ue){for(var K=G.attributes,U=0,I=Object.entries(K);U<I.length;U++){var B=t(I[U],2),C=B[0],W=B[1];W==null||C==="fieldId"||(C!=="style"?C==="textContent"?y.textContent=W:y.setAttribute(C,W):Object.assign(y.style,W))}ue&&K.fieldId!==void 0&&this.setupStorage(y,K.fieldId,G,ue)}},{key:"render",value:function(y){var G=y.annotationStorage,ue=y.xfa,K=document.createElement(ue.name);ue.attributes&&this.setAttributes(K,ue);var U=[[ue,-1,K]],I=y.div;I.appendChild(K);var B=y.viewport.transform.join(",");for(I.style.transform="matrix(".concat(B,")"),I.setAttribute("class","xfaLayer xfaFont");U.length>0;){var C=t(U[U.length-1],3),W=C[0],b=C[1],S=C[2];if(b+1===W.children.length){U.pop();continue}var w=W.children[++U[U.length-1][1]];if(w!==null){var k=w.name;if(k==="#text"){S.appendChild(document.createTextNode(w.value));continue}var z=document.createElement(k);S.appendChild(z),w.attributes&&this.setAttributes(z,w,G),w.children&&w.children.length>0?U.push([w,-1,z]):w.value&&z.appendChild(document.createTextNode(w.value))}}}},{key:"update",value:function(y){var G="matrix(".concat(y.viewport.transform.join(","),")");y.div.style.transform=G,y.div.hidden=!1}}]),O}();a.XfaLayer=j},(r,a,t)=>{function e(v){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?e=function(D){return typeof D}:e=function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},e(v)}Object.defineProperty(a,"__esModule",{value:!0}),a.PDFNodeStream=void 0;var o=c(t(2)),s=t(4),l=t(131);function c(v){return v&&v.__esModule?v:{default:v}}function d(v,R){if(typeof R!="function"&&R!==null)throw new TypeError("Super expression must either be null or a function");v.prototype=Object.create(R&&R.prototype,{constructor:{value:v,writable:!0,configurable:!0}}),R&&P(v,R)}function P(v,R){return P=Object.setPrototypeOf||function(Z,se){return Z.__proto__=se,Z},P(v,R)}function x(v){var R=O();return function(){var Z=A(v),se;if(R){var ie=A(this).constructor;se=Reflect.construct(Z,arguments,ie)}else se=Z.apply(this,arguments);return $(this,se)}}function $(v,R){return R&&(e(R)==="object"||typeof R=="function")?R:j(v)}function j(v){if(v===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return v}function O(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(v){return!1}}function A(v){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(D){return D.__proto__||Object.getPrototypeOf(D)},A(v)}function y(v,R,D,Z,se,ie,Pe){try{var le=v[ie](Pe),fe=le.value}catch(N){D(N);return}le.done?R(fe):Promise.resolve(fe).then(Z,se)}function G(v){return function(){var R=this,D=arguments;return new Promise(function(Z,se){var ie=v.apply(R,D);function Pe(fe){y(ie,Z,se,Pe,le,"next",fe)}function le(fe){y(ie,Z,se,Pe,le,"throw",fe)}Pe(void 0)})}}function ue(v,R){var D=typeof Symbol!="undefined"&&v[Symbol.iterator]||v["@@iterator"];if(!D){if(Array.isArray(v)||(D=K(v))||R&&v&&typeof v.length=="number"){D&&(v=D);var Z=0,se=function(){};return{s:se,n:function(){return Z>=v.length?{done:!0}:{done:!1,value:v[Z++]}},e:function(N){throw N},f:se}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ie=!0,Pe=!1,le;return{s:function(){D=D.call(v)},n:function(){var N=D.next();return ie=N.done,N},e:function(N){Pe=!0,le=N},f:function(){try{!ie&&D.return!=null&&D.return()}finally{if(Pe)throw le}}}}function K(v,R){if(!!v){if(typeof v=="string")return U(v,R);var D=Object.prototype.toString.call(v).slice(8,-1);if(D==="Object"&&v.constructor&&(D=v.constructor.name),D==="Map"||D==="Set")return Array.from(v);if(D==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(D))return U(v,R)}}function U(v,R){(R==null||R>v.length)&&(R=v.length);for(var D=0,Z=new Array(R);D<R;D++)Z[D]=v[D];return Z}function I(v,R){if(!(v instanceof R))throw new TypeError("Cannot call a class as a function")}function B(v,R){for(var D=0;D<R.length;D++){var Z=R[D];Z.enumerable=Z.enumerable||!1,Z.configurable=!0,"value"in Z&&(Z.writable=!0),Object.defineProperty(v,Z.key,Z)}}function C(v,R,D){return R&&B(v.prototype,R),D&&B(v,D),v}var W=require$$0,b=require$$0,S=require$$0,w=require$$0,k=/^file:\/\/\/[a-zA-Z]:\//;function z(v){var R=w.parse(v);return R.protocol==="file:"||R.host?R:/^[a-z]:[/\\]/i.test(v)?w.parse("file:///".concat(v)):(R.host||(R.protocol="file:"),R)}var Q=function(){function v(R){I(this,v),this.source=R,this.url=z(R.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&R.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}return C(v,[{key:"_progressiveDataLength",get:function(){var D,Z;return(D=(Z=this._fullRequestReader)===null||Z===void 0?void 0:Z._loaded)!==null&&D!==void 0?D:0}},{key:"getFullReader",value:function(){return(0,s.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new X(this):new ce(this),this._fullRequestReader}},{key:"getRangeReader",value:function(D,Z){if(Z<=this._progressiveDataLength)return null;var se=this.isFsUrl?new L(this,D,Z):new J(this,D,Z);return this._rangeRequestReaders.push(se),se}},{key:"cancelAllRequests",value:function(D){this._fullRequestReader&&this._fullRequestReader.cancel(D);var Z=ue(this._rangeRequestReaders.slice(0)),se;try{for(Z.s();!(se=Z.n()).done;){var ie=se.value;ie.cancel(D)}}catch(Pe){Z.e(Pe)}finally{Z.f()}}}]),v}();a.PDFNodeStream=Q;var Y=function(){function v(R){I(this,v),this._url=R.url,this._done=!1,this._storedError=null,this.onProgress=null;var D=R.source;this._contentLength=D.length,this._loaded=0,this._filename=null,this._disableRange=D.disableRange||!1,this._rangeChunkSize=D.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!D.disableStream,this._isRangeSupported=!D.disableRange,this._readableStream=null,this._readCapability=(0,s.createPromiseCapability)(),this._headersCapability=(0,s.createPromiseCapability)()}return C(v,[{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:function(){var R=G(o.default.mark(function Z(){var se,ie;return o.default.wrap(function(le){for(;;)switch(le.prev=le.next){case 0:return le.next=2,this._readCapability.promise;case 2:if(!this._done){le.next=4;break}return le.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){le.next=6;break}throw this._storedError;case 6:if(se=this._readableStream.read(),se!==null){le.next=10;break}return this._readCapability=(0,s.createPromiseCapability)(),le.abrupt("return",this.read());case 10:return this._loaded+=se.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),ie=new Uint8Array(se).buffer,le.abrupt("return",{value:ie,done:!1});case 14:case"end":return le.stop()}},Z,this)}));function D(){return R.apply(this,arguments)}return D}()},{key:"cancel",value:function(D){if(!this._readableStream){this._error(D);return}this._readableStream.destroy(D)}},{key:"_error",value:function(D){this._storedError=D,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(D){var Z=this;this._readableStream=D,D.on("readable",function(){Z._readCapability.resolve()}),D.on("end",function(){D.destroy(),Z._done=!0,Z._readCapability.resolve()}),D.on("error",function(se){Z._error(se)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new s.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}]),v}(),re=function(){function v(R){I(this,v),this._url=R.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,s.createPromiseCapability)();var D=R.source;this._isStreamingSupported=!D.disableStream}return C(v,[{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:function(){var R=G(o.default.mark(function Z(){var se,ie;return o.default.wrap(function(le){for(;;)switch(le.prev=le.next){case 0:return le.next=2,this._readCapability.promise;case 2:if(!this._done){le.next=4;break}return le.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){le.next=6;break}throw this._storedError;case 6:if(se=this._readableStream.read(),se!==null){le.next=10;break}return this._readCapability=(0,s.createPromiseCapability)(),le.abrupt("return",this.read());case 10:return this._loaded+=se.length,this.onProgress&&this.onProgress({loaded:this._loaded}),ie=new Uint8Array(se).buffer,le.abrupt("return",{value:ie,done:!1});case 14:case"end":return le.stop()}},Z,this)}));function D(){return R.apply(this,arguments)}return D}()},{key:"cancel",value:function(D){if(!this._readableStream){this._error(D);return}this._readableStream.destroy(D)}},{key:"_error",value:function(D){this._storedError=D,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(D){var Z=this;this._readableStream=D,D.on("readable",function(){Z._readCapability.resolve()}),D.on("end",function(){D.destroy(),Z._done=!0,Z._readCapability.resolve()}),D.on("error",function(se){Z._error(se)}),this._storedError&&this._readableStream.destroy(this._storedError)}}]),v}();function ae(v,R){return{protocol:v.protocol,auth:v.auth,host:v.hostname,port:v.port,path:v.path,method:"GET",headers:R}}var ce=function(v){d(D,v);var R=x(D);function D(Z){var se;I(this,D),se=R.call(this,Z);var ie=function(le){if(le.statusCode===404){var fe=new s.MissingPDFException('Missing PDF "'.concat(se._url,'".'));se._storedError=fe,se._headersCapability.reject(fe);return}se._headersCapability.resolve(),se._setReadableStream(le);var N=function(de){return se._readableStream.headers[de.toLowerCase()]},E=(0,l.validateRangeRequestCapabilities)({getResponseHeader:N,isHttp:Z.isHttp,rangeChunkSize:se._rangeChunkSize,disableRange:se._disableRange}),T=E.allowRangeRequests,te=E.suggestedLength;se._isRangeSupported=T,se._contentLength=te||se._contentLength,se._filename=(0,l.extractFilenameFromHeader)(N)};return se._request=null,se._url.protocol==="http:"?se._request=b.request(ae(se._url,Z.httpHeaders),ie):se._request=S.request(ae(se._url,Z.httpHeaders),ie),se._request.on("error",function(Pe){se._storedError=Pe,se._headersCapability.reject(Pe)}),se._request.end(),se}return D}(Y),J=function(v){d(D,v);var R=x(D);function D(Z,se,ie){var Pe;I(this,D),Pe=R.call(this,Z),Pe._httpHeaders={};for(var le in Z.httpHeaders){var fe=Z.httpHeaders[le];typeof fe!="undefined"&&(Pe._httpHeaders[le]=fe)}Pe._httpHeaders.Range="bytes=".concat(se,"-").concat(ie-1);var N=function(T){if(T.statusCode===404){var te=new s.MissingPDFException('Missing PDF "'.concat(Pe._url,'".'));Pe._storedError=te;return}Pe._setReadableStream(T)};return Pe._request=null,Pe._url.protocol==="http:"?Pe._request=b.request(ae(Pe._url,Pe._httpHeaders),N):Pe._request=S.request(ae(Pe._url,Pe._httpHeaders),N),Pe._request.on("error",function(E){Pe._storedError=E}),Pe._request.end(),Pe}return D}(re),X=function(v){d(D,v);var R=x(D);function D(Z){var se;I(this,D),se=R.call(this,Z);var ie=decodeURIComponent(se._url.path);return k.test(se._url.href)&&(ie=ie.replace(/^\//,"")),W.lstat(ie,function(Pe,le){if(Pe){Pe.code==="ENOENT"&&(Pe=new s.MissingPDFException('Missing PDF "'.concat(ie,'".'))),se._storedError=Pe,se._headersCapability.reject(Pe);return}se._contentLength=le.size,se._setReadableStream(W.createReadStream(ie)),se._headersCapability.resolve()}),se}return D}(Y),L=function(v){d(D,v);var R=x(D);function D(Z,se,ie){var Pe;I(this,D),Pe=R.call(this,Z);var le=decodeURIComponent(Pe._url.path);return k.test(Pe._url.href)&&(le=le.replace(/^\//,"")),Pe._setReadableStream(W.createReadStream(le,{start:se,end:ie-1})),Pe}return D}(re)},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.createResponseStatusError=d,a.extractFilenameFromHeader=c,a.validateRangeRequestCapabilities=l,a.validateResponseStatus=P;var e=t(4),o=t(132),s=t(1);function l(x){var $=x.getResponseHeader,j=x.isHttp,O=x.rangeChunkSize,A=x.disableRange;(0,e.assert)(O>0,"Range chunk size must be larger than zero");var y={allowRangeRequests:!1,suggestedLength:void 0},G=parseInt($("Content-Length"),10);if(!Number.isInteger(G)||(y.suggestedLength=G,G<=2*O)||A||!j||$("Accept-Ranges")!=="bytes")return y;var ue=$("Content-Encoding")||"identity";return ue!=="identity"||(y.allowRangeRequests=!0),y}function c(x){var $=x("Content-Disposition");if($){var j=(0,o.getFilenameFromContentDispositionHeader)($);if(j.includes("%"))try{j=decodeURIComponent(j)}catch(O){}if((0,s.isPdfFile)(j))return j}return null}function d(x,$){return x===404||x===0&&$.startsWith("file:")?new e.MissingPDFException('Missing PDF "'+$+'".'):new e.UnexpectedResponseException("Unexpected server response (".concat(x,') while retrieving PDF "').concat($,'".'),x)}function P(x){return x===200||x===206}},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.getFilenameFromContentDispositionHeader=x;var e=t(4);function o($,j){return P($)||d($,j)||l($,j)||s()}function s(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function l($,j){if(!!$){if(typeof $=="string")return c($,j);var O=Object.prototype.toString.call($).slice(8,-1);if(O==="Object"&&$.constructor&&(O=$.constructor.name),O==="Map"||O==="Set")return Array.from($);if(O==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(O))return c($,j)}}function c($,j){(j==null||j>$.length)&&(j=$.length);for(var O=0,A=new Array(j);O<j;O++)A[O]=$[O];return A}function d($,j){var O=$&&(typeof Symbol!="undefined"&&$[Symbol.iterator]||$["@@iterator"]);if(O!=null){var A=[],y=!0,G=!1,ue,K;try{for(O=O.call($);!(y=(ue=O.next()).done)&&(A.push(ue.value),!(j&&A.length===j));y=!0);}catch(U){G=!0,K=U}finally{try{!y&&O.return!=null&&O.return()}finally{if(G)throw K}}return A}}function P($){if(Array.isArray($))return $}function x($){var j=!0,O=ue("filename\\*","i").exec($);if(O){O=O[1];var A=B(O);return A=unescape(A),A=C(A),A=W(A),U(A)}if(O=I($),O){var y=W(O);return U(y)}if(O=ue("filename","i").exec($),O){O=O[1];var G=B(O);return G=W(G),U(G)}function ue(b,S){return new RegExp("(?:^|;)\\s*"+b+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',S)}function K(b,S){if(b){if(!/^[\x00-\xFF]+$/.test(S))return S;try{var w=new TextDecoder(b,{fatal:!0}),k=(0,e.stringToBytes)(S);S=w.decode(k),j=!1}catch(z){if(/^utf-?8$/i.test(b))try{S=decodeURIComponent(escape(S)),j=!1}catch(Q){}}}return S}function U(b){return j&&/[\x80-\xff]/.test(b)&&(b=K("utf-8",b),j&&(b=K("iso-8859-1",b))),b}function I(b){for(var S=[],w,k=ue("filename\\*((?!0\\d)\\d+)(\\*?)","ig");(w=k.exec(b))!==null;){var z=w,Q=o(z,4),Y=Q[1],re=Q[2],ae=Q[3];if(Y=parseInt(Y,10),Y in S){if(Y===0)break;continue}S[Y]=[re,ae]}for(var ce=[],J=0;J<S.length&&J in S;++J){var X=o(S[J],2),L=X[0],v=X[1];v=B(v),L&&(v=unescape(v),J===0&&(v=C(v))),ce.push(v)}return ce.join("")}function B(b){if(b.startsWith('"')){for(var S=b.slice(1).split('\\"'),w=0;w<S.length;++w){var k=S[w].indexOf('"');k!==-1&&(S[w]=S[w].slice(0,k),S.length=w+1),S[w]=S[w].replace(/\\(.)/g,"$1")}b=S.join('"')}return b}function C(b){var S=b.indexOf("'");if(S===-1)return b;var w=b.slice(0,S),k=b.slice(S+1),z=k.replace(/^[^']*'/,"");return K(w,z)}function W(b){return!b.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(b)?b:b.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(S,w,k,z){if(k==="q"||k==="Q")return z=z.replace(/_/g," "),z=z.replace(/=([0-9a-fA-F]{2})/g,function(Q,Y){return String.fromCharCode(parseInt(Y,16))}),K(w,z);try{z=atob(z)}catch(Q){}return K(w,z)})}return""}},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.PDFNetworkStream=void 0;var e=l(t(2)),o=t(4),s=t(131);function l(C){return C&&C.__esModule?C:{default:C}}function c(C,W,b,S,w,k,z){try{var Q=C[k](z),Y=Q.value}catch(re){b(re);return}Q.done?W(Y):Promise.resolve(Y).then(S,w)}function d(C){return function(){var W=this,b=arguments;return new Promise(function(S,w){var k=C.apply(W,b);function z(Y){c(k,S,w,z,Q,"next",Y)}function Q(Y){c(k,S,w,z,Q,"throw",Y)}z(void 0)})}}function P(C,W){var b=typeof Symbol!="undefined"&&C[Symbol.iterator]||C["@@iterator"];if(!b){if(Array.isArray(C)||(b=x(C))||W&&C&&typeof C.length=="number"){b&&(C=b);var S=0,w=function(){};return{s:w,n:function(){return S>=C.length?{done:!0}:{done:!1,value:C[S++]}},e:function(re){throw re},f:w}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var k=!0,z=!1,Q;return{s:function(){b=b.call(C)},n:function(){var re=b.next();return k=re.done,re},e:function(re){z=!0,Q=re},f:function(){try{!k&&b.return!=null&&b.return()}finally{if(z)throw Q}}}}function x(C,W){if(!!C){if(typeof C=="string")return $(C,W);var b=Object.prototype.toString.call(C).slice(8,-1);if(b==="Object"&&C.constructor&&(b=C.constructor.name),b==="Map"||b==="Set")return Array.from(C);if(b==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b))return $(C,W)}}function $(C,W){(W==null||W>C.length)&&(W=C.length);for(var b=0,S=new Array(W);b<W;b++)S[b]=C[b];return S}function j(C,W){if(!(C instanceof W))throw new TypeError("Cannot call a class as a function")}function O(C,W){for(var b=0;b<W.length;b++){var S=W[b];S.enumerable=S.enumerable||!1,S.configurable=!0,"value"in S&&(S.writable=!0),Object.defineProperty(C,S.key,S)}}function A(C,W,b){return W&&O(C.prototype,W),b&&O(C,b),C}var y=200,G=206;function ue(C){var W=C.response;if(typeof W!="string")return W;var b=(0,o.stringToBytes)(W);return b.buffer}var K=function(){function C(W,b){j(this,C),this.url=W,b=b||{},this.isHttp=/^https?:/i.test(W),this.httpHeaders=this.isHttp&&b.httpHeaders||{},this.withCredentials=b.withCredentials||!1,this.getXhr=b.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}return A(C,[{key:"requestRange",value:function(b,S,w){var k={begin:b,end:S};for(var z in w)k[z]=w[z];return this.request(k)}},{key:"requestFull",value:function(b){return this.request(b)}},{key:"request",value:function(b){var S=this.getXhr(),w=this.currXhrId++,k=this.pendingRequests[w]={xhr:S};S.open("GET",this.url),S.withCredentials=this.withCredentials;for(var z in this.httpHeaders){var Q=this.httpHeaders[z];typeof Q!="undefined"&&S.setRequestHeader(z,Q)}return this.isHttp&&"begin"in b&&"end"in b?(S.setRequestHeader("Range","bytes=".concat(b.begin,"-").concat(b.end-1)),k.expectedStatus=G):k.expectedStatus=y,S.responseType="arraybuffer",b.onError&&(S.onerror=function(Y){b.onError(S.status)}),S.onreadystatechange=this.onStateChange.bind(this,w),S.onprogress=this.onProgress.bind(this,w),k.onHeadersReceived=b.onHeadersReceived,k.onDone=b.onDone,k.onError=b.onError,k.onProgress=b.onProgress,S.send(null),w}},{key:"onProgress",value:function(b,S){var w=this.pendingRequests[b];!w||w.onProgress&&w.onProgress(S)}},{key:"onStateChange",value:function(b,S){var w=this.pendingRequests[b];if(!!w){var k=w.xhr;if(k.readyState>=2&&w.onHeadersReceived&&(w.onHeadersReceived(),delete w.onHeadersReceived),k.readyState===4&&b in this.pendingRequests){if(delete this.pendingRequests[b],k.status===0&&this.isHttp){w.onError&&w.onError(k.status);return}var z=k.status||y,Q=z===y&&w.expectedStatus===G;if(!Q&&z!==w.expectedStatus){w.onError&&w.onError(k.status);return}var Y=ue(k);if(z===G){var re=k.getResponseHeader("Content-Range"),ae=/bytes (\d+)-(\d+)\/(\d+)/.exec(re);w.onDone({begin:parseInt(ae[1],10),chunk:Y})}else Y?w.onDone({begin:0,chunk:Y}):w.onError&&w.onError(k.status)}}}},{key:"getRequestXhr",value:function(b){return this.pendingRequests[b].xhr}},{key:"isPendingRequest",value:function(b){return b in this.pendingRequests}},{key:"abortRequest",value:function(b){var S=this.pendingRequests[b].xhr;delete this.pendingRequests[b],S.abort()}}]),C}(),U=function(){function C(W){j(this,C),this._source=W,this._manager=new K(W.url,{httpHeaders:W.httpHeaders,withCredentials:W.withCredentials}),this._rangeChunkSize=W.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}return A(C,[{key:"_onRangeRequestReaderClosed",value:function(b){var S=this._rangeRequestReaders.indexOf(b);S>=0&&this._rangeRequestReaders.splice(S,1)}},{key:"getFullReader",value:function(){return(0,o.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new I(this._manager,this._source),this._fullRequestReader}},{key:"getRangeReader",value:function(b,S){var w=new B(this._manager,b,S);return w.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(w),w}},{key:"cancelAllRequests",value:function(b){this._fullRequestReader&&this._fullRequestReader.cancel(b);var S=P(this._rangeRequestReaders.slice(0)),w;try{for(S.s();!(w=S.n()).done;){var k=w.value;k.cancel(b)}}catch(z){S.e(z)}finally{S.f()}}}]),C}();a.PDFNetworkStream=U;var I=function(){function C(W,b){j(this,C),this._manager=W;var S={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=b.url,this._fullRequestId=W.requestFull(S),this._headersReceivedCapability=(0,o.createPromiseCapability)(),this._disableRange=b.disableRange||!1,this._contentLength=b.length,this._rangeChunkSize=b.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}return A(C,[{key:"_onHeadersReceived",value:function(){var b=this._fullRequestId,S=this._manager.getRequestXhr(b),w=function(re){return S.getResponseHeader(re)},k=(0,s.validateRangeRequestCapabilities)({getResponseHeader:w,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange}),z=k.allowRangeRequests,Q=k.suggestedLength;z&&(this._isRangeSupported=!0),this._contentLength=Q||this._contentLength,this._filename=(0,s.extractFilenameFromHeader)(w),this._isRangeSupported&&this._manager.abortRequest(b),this._headersReceivedCapability.resolve()}},{key:"_onDone",value:function(b){if(b)if(this._requests.length>0){var S=this._requests.shift();S.resolve({value:b.chunk,done:!1})}else this._cachedChunks.push(b.chunk);if(this._done=!0,!(this._cachedChunks.length>0)){var w=P(this._requests),k;try{for(w.s();!(k=w.n()).done;){var z=k.value;z.resolve({value:void 0,done:!0})}}catch(Q){w.e(Q)}finally{w.f()}this._requests.length=0}}},{key:"_onError",value:function(b){var S=this._url,w=(0,s.createResponseStatusError)(b,S);this._storedError=w,this._headersReceivedCapability.reject(w);var k=P(this._requests),z;try{for(k.s();!(z=k.n()).done;){var Q=z.value;Q.reject(w)}}catch(Y){k.e(Y)}finally{k.f()}this._requests.length=0,this._cachedChunks.length=0}},{key:"_onProgress",value:function(b){this.onProgress&&this.onProgress({loaded:b.loaded,total:b.lengthComputable?b.total:this._contentLength})}},{key:"filename",get:function(){return this._filename}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"contentLength",get:function(){return this._contentLength}},{key:"headersReady",get:function(){return this._headersReceivedCapability.promise}},{key:"read",value:function(){var W=d(e.default.mark(function S(){var w,k;return e.default.wrap(function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(!this._storedError){Q.next=2;break}throw this._storedError;case 2:if(!(this._cachedChunks.length>0)){Q.next=5;break}return w=this._cachedChunks.shift(),Q.abrupt("return",{value:w,done:!1});case 5:if(!this._done){Q.next=7;break}return Q.abrupt("return",{value:void 0,done:!0});case 7:return k=(0,o.createPromiseCapability)(),this._requests.push(k),Q.abrupt("return",k.promise);case 10:case"end":return Q.stop()}},S,this)}));function b(){return W.apply(this,arguments)}return b}()},{key:"cancel",value:function(b){this._done=!0,this._headersReceivedCapability.reject(b);var S=P(this._requests),w;try{for(S.s();!(w=S.n()).done;){var k=w.value;k.resolve({value:void 0,done:!0})}}catch(z){S.e(z)}finally{S.f()}this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}]),C}(),B=function(){function C(W,b,S){j(this,C),this._manager=W;var w={onDone:this._onDone.bind(this),onProgress:this._onProgress.bind(this)};this._requestId=W.requestRange(b,S,w),this._requests=[],this._queuedChunk=null,this._done=!1,this.onProgress=null,this.onClosed=null}return A(C,[{key:"_close",value:function(){this.onClosed&&this.onClosed(this)}},{key:"_onDone",value:function(b){var S=b.chunk;if(this._requests.length>0){var w=this._requests.shift();w.resolve({value:S,done:!1})}else this._queuedChunk=S;this._done=!0;var k=P(this._requests),z;try{for(k.s();!(z=k.n()).done;){var Q=z.value;Q.resolve({value:void 0,done:!0})}}catch(Y){k.e(Y)}finally{k.f()}this._requests.length=0,this._close()}},{key:"_onProgress",value:function(b){!this.isStreamingSupported&&this.onProgress&&this.onProgress({loaded:b.loaded})}},{key:"isStreamingSupported",get:function(){return!1}},{key:"read",value:function(){var W=d(e.default.mark(function S(){var w,k;return e.default.wrap(function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(this._queuedChunk===null){Q.next=4;break}return w=this._queuedChunk,this._queuedChunk=null,Q.abrupt("return",{value:w,done:!1});case 4:if(!this._done){Q.next=6;break}return Q.abrupt("return",{value:void 0,done:!0});case 6:return k=(0,o.createPromiseCapability)(),this._requests.push(k),Q.abrupt("return",k.promise);case 9:case"end":return Q.stop()}},S,this)}));function b(){return W.apply(this,arguments)}return b}()},{key:"cancel",value:function(b){this._done=!0;var S=P(this._requests),w;try{for(S.s();!(w=S.n()).done;){var k=w.value;k.resolve({value:void 0,done:!0})}}catch(z){S.e(z)}finally{S.f()}this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}]),C}()},(r,a,t)=>{Object.defineProperty(a,"__esModule",{value:!0}),a.PDFFetchStream=void 0;var e=l(t(2)),o=t(4),s=t(131);function l(I){return I&&I.__esModule?I:{default:I}}function c(I,B,C,W,b,S,w){try{var k=I[S](w),z=k.value}catch(Q){C(Q);return}k.done?B(z):Promise.resolve(z).then(W,b)}function d(I){return function(){var B=this,C=arguments;return new Promise(function(W,b){var S=I.apply(B,C);function w(z){c(S,W,b,w,k,"next",z)}function k(z){c(S,W,b,w,k,"throw",z)}w(void 0)})}}function P(I,B){var C=typeof Symbol!="undefined"&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=x(I))||B&&I&&typeof I.length=="number"){C&&(I=C);var W=0,b=function(){};return{s:b,n:function(){return W>=I.length?{done:!0}:{done:!1,value:I[W++]}},e:function(Q){throw Q},f:b}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var S=!0,w=!1,k;return{s:function(){C=C.call(I)},n:function(){var Q=C.next();return S=Q.done,Q},e:function(Q){w=!0,k=Q},f:function(){try{!S&&C.return!=null&&C.return()}finally{if(w)throw k}}}}function x(I,B){if(!!I){if(typeof I=="string")return $(I,B);var C=Object.prototype.toString.call(I).slice(8,-1);if(C==="Object"&&I.constructor&&(C=I.constructor.name),C==="Map"||C==="Set")return Array.from(I);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return $(I,B)}}function $(I,B){(B==null||B>I.length)&&(B=I.length);for(var C=0,W=new Array(B);C<B;C++)W[C]=I[C];return W}function j(I,B){if(!(I instanceof B))throw new TypeError("Cannot call a class as a function")}function O(I,B){for(var C=0;C<B.length;C++){var W=B[C];W.enumerable=W.enumerable||!1,W.configurable=!0,"value"in W&&(W.writable=!0),Object.defineProperty(I,W.key,W)}}function A(I,B,C){return B&&O(I.prototype,B),C&&O(I,C),I}function y(I,B,C){return{method:"GET",headers:I,signal:C==null?void 0:C.signal,mode:"cors",credentials:B?"include":"same-origin",redirect:"follow"}}function G(I){var B=new Headers;for(var C in I){var W=I[C];typeof W!="undefined"&&B.append(C,W)}return B}var ue=function(){function I(B){j(this,I),this.source=B,this.isHttp=/^https?:/i.test(B.url),this.httpHeaders=this.isHttp&&B.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}return A(I,[{key:"_progressiveDataLength",get:function(){var C,W;return(C=(W=this._fullRequestReader)===null||W===void 0?void 0:W._loaded)!==null&&C!==void 0?C:0}},{key:"getFullReader",value:function(){return(0,o.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new K(this),this._fullRequestReader}},{key:"getRangeReader",value:function(C,W){if(W<=this._progressiveDataLength)return null;var b=new U(this,C,W);return this._rangeRequestReaders.push(b),b}},{key:"cancelAllRequests",value:function(C){this._fullRequestReader&&this._fullRequestReader.cancel(C);var W=P(this._rangeRequestReaders.slice(0)),b;try{for(W.s();!(b=W.n()).done;){var S=b.value;S.cancel(C)}}catch(w){W.e(w)}finally{W.f()}}}]),I}();a.PDFFetchStream=ue;var K=function(){function I(B){var C=this;j(this,I),this._stream=B,this._reader=null,this._loaded=0,this._filename=null;var W=B.source;this._withCredentials=W.withCredentials||!1,this._contentLength=W.length,this._headersCapability=(0,o.createPromiseCapability)(),this._disableRange=W.disableRange||!1,this._rangeChunkSize=W.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),typeof AbortController!="undefined"&&(this._abortController=new AbortController),this._isStreamingSupported=!W.disableStream,this._isRangeSupported=!W.disableRange,this._headers=G(this._stream.httpHeaders);var b=W.url;fetch(b,y(this._headers,this._withCredentials,this._abortController)).then(function(S){if(!(0,s.validateResponseStatus)(S.status))throw(0,s.createResponseStatusError)(S.status,b);C._reader=S.body.getReader(),C._headersCapability.resolve();var w=function(re){return S.headers.get(re)},k=(0,s.validateRangeRequestCapabilities)({getResponseHeader:w,isHttp:C._stream.isHttp,rangeChunkSize:C._rangeChunkSize,disableRange:C._disableRange}),z=k.allowRangeRequests,Q=k.suggestedLength;C._isRangeSupported=z,C._contentLength=Q||C._contentLength,C._filename=(0,s.extractFilenameFromHeader)(w),!C._isStreamingSupported&&C._isRangeSupported&&C.cancel(new o.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}return A(I,[{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:function(){var B=d(e.default.mark(function W(){var b,S,w,k;return e.default.wrap(function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,this._headersCapability.promise;case 2:return Q.next=4,this._reader.read();case 4:if(b=Q.sent,S=b.value,w=b.done,!w){Q.next=9;break}return Q.abrupt("return",{value:S,done:w});case 9:return this._loaded+=S.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),k=new Uint8Array(S).buffer,Q.abrupt("return",{value:k,done:!1});case 13:case"end":return Q.stop()}},W,this)}));function C(){return B.apply(this,arguments)}return C}()},{key:"cancel",value:function(C){this._reader&&this._reader.cancel(C),this._abortController&&this._abortController.abort()}}]),I}(),U=function(){function I(B,C,W){var b=this;j(this,I),this._stream=B,this._reader=null,this._loaded=0;var S=B.source;this._withCredentials=S.withCredentials||!1,this._readCapability=(0,o.createPromiseCapability)(),this._isStreamingSupported=!S.disableStream,typeof AbortController!="undefined"&&(this._abortController=new AbortController),this._headers=G(this._stream.httpHeaders),this._headers.append("Range","bytes=".concat(C,"-").concat(W-1));var w=S.url;fetch(w,y(this._headers,this._withCredentials,this._abortController)).then(function(k){if(!(0,s.validateResponseStatus)(k.status))throw(0,s.createResponseStatusError)(k.status,w);b._readCapability.resolve(),b._reader=k.body.getReader()}).catch(function(k){if((k==null?void 0:k.name)!=="AbortError")throw k}),this.onProgress=null}return A(I,[{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}},{key:"read",value:function(){var B=d(e.default.mark(function W(){var b,S,w,k;return e.default.wrap(function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,this._readCapability.promise;case 2:return Q.next=4,this._reader.read();case 4:if(b=Q.sent,S=b.value,w=b.done,!w){Q.next=9;break}return Q.abrupt("return",{value:S,done:w});case 9:return this._loaded+=S.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),k=new Uint8Array(S).buffer,Q.abrupt("return",{value:k,done:!1});case 13:case"end":return Q.stop()}},W,this)}));function C(){return B.apply(this,arguments)}return C}()},{key:"cancel",value:function(C){this._reader&&this._reader.cancel(C),this._abortController&&this._abortController.abort()}}]),I}()}],__webpack_module_cache__={};function __w_pdfjs_require__(r){var a=__webpack_module_cache__[r];if(a!==void 0)return a.exports;var t=__webpack_module_cache__[r]={id:r,loaded:!1,exports:{}};return __webpack_modules__[r].call(t.exports,t,t.exports,__w_pdfjs_require__),t.loaded=!0,t.exports}(()=>{__w_pdfjs_require__.nmd=r=>(r.paths=[],r.children||(r.children=[]),r)})();var __webpack_exports__={};return(()=>{var r=__webpack_exports__;Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"addLinkAttributes",{enumerable:!0,get:function(){return a.addLinkAttributes}}),Object.defineProperty(r,"getFilenameFromUrl",{enumerable:!0,get:function(){return a.getFilenameFromUrl}}),Object.defineProperty(r,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return a.getPdfFilenameFromUrl}}),Object.defineProperty(r,"isPdfFile",{enumerable:!0,get:function(){return a.isPdfFile}}),Object.defineProperty(r,"LinkTarget",{enumerable:!0,get:function(){return a.LinkTarget}}),Object.defineProperty(r,"loadScript",{enumerable:!0,get:function(){return a.loadScript}}),Object.defineProperty(r,"PDFDateString",{enumerable:!0,get:function(){return a.PDFDateString}}),Object.defineProperty(r,"RenderingCancelledException",{enumerable:!0,get:function(){return a.RenderingCancelledException}}),Object.defineProperty(r,"build",{enumerable:!0,get:function(){return t.build}}),Object.defineProperty(r,"getDocument",{enumerable:!0,get:function(){return t.getDocument}}),Object.defineProperty(r,"LoopbackPort",{enumerable:!0,get:function(){return t.LoopbackPort}}),Object.defineProperty(r,"PDFDataRangeTransport",{enumerable:!0,get:function(){return t.PDFDataRangeTransport}}),Object.defineProperty(r,"PDFWorker",{enumerable:!0,get:function(){return t.PDFWorker}}),Object.defineProperty(r,"version",{enumerable:!0,get:function(){return t.version}}),Object.defineProperty(r,"CMapCompressionType",{enumerable:!0,get:function(){return e.CMapCompressionType}}),Object.defineProperty(r,"createObjectURL",{enumerable:!0,get:function(){return e.createObjectURL}}),Object.defineProperty(r,"createPromiseCapability",{enumerable:!0,get:function(){return e.createPromiseCapability}}),Object.defineProperty(r,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return e.createValidAbsoluteUrl}}),Object.defineProperty(r,"InvalidPDFException",{enumerable:!0,get:function(){return e.InvalidPDFException}}),Object.defineProperty(r,"MissingPDFException",{enumerable:!0,get:function(){return e.MissingPDFException}}),Object.defineProperty(r,"OPS",{enumerable:!0,get:function(){return e.OPS}}),Object.defineProperty(r,"PasswordResponses",{enumerable:!0,get:function(){return e.PasswordResponses}}),Object.defineProperty(r,"PermissionFlag",{enumerable:!0,get:function(){return e.PermissionFlag}}),Object.defineProperty(r,"removeNullCharacters",{enumerable:!0,get:function(){return e.removeNullCharacters}}),Object.defineProperty(r,"shadow",{enumerable:!0,get:function(){return e.shadow}}),Object.defineProperty(r,"UnexpectedResponseException",{enumerable:!0,get:function(){return e.UnexpectedResponseException}}),Object.defineProperty(r,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return e.UNSUPPORTED_FEATURES}}),Object.defineProperty(r,"Util",{enumerable:!0,get:function(){return e.Util}}),Object.defineProperty(r,"VerbosityLevel",{enumerable:!0,get:function(){return e.VerbosityLevel}}),Object.defineProperty(r,"AnnotationLayer",{enumerable:!0,get:function(){return o.AnnotationLayer}}),Object.defineProperty(r,"apiCompatibilityParams",{enumerable:!0,get:function(){return s.apiCompatibilityParams}}),Object.defineProperty(r,"GlobalWorkerOptions",{enumerable:!0,get:function(){return l.GlobalWorkerOptions}}),Object.defineProperty(r,"renderTextLayer",{enumerable:!0,get:function(){return c.renderTextLayer}}),Object.defineProperty(r,"SVGGraphics",{enumerable:!0,get:function(){return d.SVGGraphics}}),Object.defineProperty(r,"XfaLayer",{enumerable:!0,get:function(){return P.XfaLayer}});var a=__w_pdfjs_require__(1),t=__w_pdfjs_require__(113),e=__w_pdfjs_require__(4),o=__w_pdfjs_require__(125),s=__w_pdfjs_require__(117),l=__w_pdfjs_require__(120),c=__w_pdfjs_require__(127),d=__w_pdfjs_require__(128),P=__w_pdfjs_require__(129);{var x=__w_pdfjs_require__(6),$=x.isNodeJS;if($){var j=__w_pdfjs_require__(130).PDFNodeStream;(0,t.setPDFNetworkStreamFactory)(function(y){return new j(y)})}else{var O=__w_pdfjs_require__(133).PDFNetworkStream,A;(0,a.isFetchSupported)()&&(A=__w_pdfjs_require__(134).PDFFetchStream),(0,t.setPDFNetworkStreamFactory)(function(y){return A&&(0,a.isValidFetchUrl)(y.url)?new A(y):new O(y)})}}})(),__webpack_exports__})()})})(pdf);var clipboardEvents=["onCopy","onCut","onPaste"],compositionEvents=["onCompositionEnd","onCompositionStart","onCompositionUpdate"],keyboardEvents=["onKeyDown","onKeyPress","onKeyUp"],focusEvents=["onFocus","onBlur"],formEvents=["onChange","onInput","onInvalid","onReset","onSubmit"],genericEvents=["onError","onLoad"],mouseEvents=["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],pointerEvents=["onPointerDown","onPointerMove","onPointerUp","onPointerCancel","onGotPointerCapture","onLostPointerCapture","onPointerEnter","onPointerLeave","onPointerOver","onPointerOut"],selectionEvents=["onSelect"],touchEvents=["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"],uiEvents=["onScroll"],wheelEvents=["onWheel"],mediaEvents=["onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onError","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting"],imageEvents=["onLoad","onError"],animationEvents=["onAnimationStart","onAnimationEnd","onAnimationIteration"],transitionEvents=["onTransitionEnd"],otherEvents=["onToggle"],allEvents=[].concat(clipboardEvents,compositionEvents,keyboardEvents,focusEvents,formEvents,genericEvents,mouseEvents,pointerEvents,selectionEvents,touchEvents,uiEvents,wheelEvents,mediaEvents,imageEvents,animationEvents,transitionEvents,otherEvents),makeEventProps=function(a,t){var e={};return allEvents.forEach(function(o){if(o in a){if(!t){e[o]=a[o];return}e[o]=function(s){return a[o](s,t(o))}}}),e};function makeCancellablePromise(r){var a=!1,t=new Promise(function(e,o){r.then(function(){return!a&&e.apply(void 0,arguments)}).catch(function(s){return!a&&o(s)})});return{promise:t,cancel:function(){a=!0}}}function mergeClassNames(){return Array.prototype.slice.call(arguments).reduce(function(r,a){return r.concat(a)},[]).filter(function(r){return typeof r=="string"}).join(" ")}var DocumentContext=react.exports.createContext(null);function Message(r){var a=r.children,t=r.type;return React$1.createElement("div",{className:"react-pdf__message react-pdf__message--".concat(t)},a)}Message.propTypes={children:PropTypes.node,type:PropTypes.oneOf(["error","loading","no-data"]).isRequired};var LinkService=function(){function r(){_classCallCheck(this,r),this.externalLinkTarget=null,this.externalLinkRel=null,this.externalLinkEnabled=!0}return _createClass(r,[{key:"setDocument",value:function(t){this.pdfDocument=t}},{key:"setViewer",value:function(t){this.pdfViewer=t}},{key:"setHistory",value:function(){}},{key:"pagesCount",get:function(){return this.pdfDocument?this.pdfDocument.numPages:0}},{key:"page",get:function(){return this.pdfViewer.currentPageNumber},set:function(t){this.pdfViewer.currentPageNumber=t}},{key:"rotation",get:function(){return 0},set:function(t){}},{key:"goToDestination",value:function(t){var e=this;new Promise(function(o){typeof t=="string"?e.pdfDocument.getDestination(t).then(o):t.then(o)}).then(function(o){if(!Array.isArray(o))throw new Error('"'.concat(o,'" is not a valid destination array.'));var s=o[0];new Promise(function(l){if(s instanceof Object)e.pdfDocument.getPageIndex(s).then(function(c){l(c+1)}).catch(function(){throw new Error('"'.concat(s,'" is not a valid page reference.'))});else if(typeof s=="number")l(s+1);else throw new Error('"'.concat(s,'" is not a valid destination reference.'))}).then(function(l){if(!l||l<1||l>e.pagesCount)throw new Error('"'.concat(l,'" is not a valid page number.'));e.pdfViewer.scrollPageIntoView({pageNumber:l})})})}},{key:"navigateTo",value:function(t){this.goToDestination(t)}},{key:"goToPage",value:function(){}},{key:"getDestinationHash",value:function(){return"#"}},{key:"getAnchorUrl",value:function(){return"#"}},{key:"setHash",value:function(){}},{key:"executeNamedAction",value:function(){}},{key:"cachePageRef",value:function(){}},{key:"isPageVisible",value:function(){return!0}},{key:"isPageCached",value:function(){return!0}}]),r}(),PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2},isBrowser$1=typeof window!="undefined",isLocalFileSystem=isBrowser$1&&window.location.protocol==="file:";function isDefined(r){return typeof r!="undefined"}function isProvided(r){return isDefined(r)&&r!==null}function isString(r){return typeof r=="string"}function isArrayBuffer(r){return r instanceof ArrayBuffer}function isBlob(r){if(!isBrowser$1)throw new Error("Attempted to check if a variable is a Blob on a non-browser environment.");return r instanceof Blob}function isFile$1(r){if(!isBrowser$1)throw new Error("Attempted to check if a variable is a File on a non-browser environment.");return r instanceof File}function isDataURI(r){return isString(r)&&/^data:/.test(r)}function dataURItoByteString(r){if(!isDataURI(r))throw new Error("Invalid data URI.");var a=r.split(","),t=_slicedToArray(a,2),e=t[0],o=t[1],s=e.split(";");return s.indexOf("base64")!==-1?atob(o):unescape(o)}function getPixelRatio(){return isBrowser$1&&window.devicePixelRatio||1}function consoleOnDev(r){}function warnOnDev(){for(var r=arguments.length,a=new Array(r),t=0;t<r;t++)a[t]=arguments[t];consoleOnDev.apply(void 0,["warn"].concat(a))}function errorOnDev(){for(var r=arguments.length,a=new Array(r),t=0;t<r;t++)a[t]=arguments[t];consoleOnDev.apply(void 0,["error"].concat(a))}function displayCORSWarning(){isLocalFileSystem&&warnOnDev("Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.")}function cancelRunningTask(r){r&&r.cancel&&r.cancel()}function makePageCallback(r,a){return Object.defineProperty(r,"width",{get:function(){return this.view[2]*a},configurable:!0}),Object.defineProperty(r,"height",{get:function(){return this.view[3]*a},configurable:!0}),Object.defineProperty(r,"originalWidth",{get:function(){return this.view[2]},configurable:!0}),Object.defineProperty(r,"originalHeight",{get:function(){return this.view[3]},configurable:!0}),r}function isCancelException(r){return r.name==="RenderingCancelledException"}function loadFromFile(r){return new Promise(function(a,t){var e=new FileReader;return e.onload=function(){return a(new Uint8Array(e.result))},e.onerror=function(o){switch(o.target.error.code){case o.target.error.NOT_FOUND_ERR:return t(new Error("Error while reading a file: File not found."));case o.target.error.NOT_READABLE_ERR:return t(new Error("Error while reading a file: File not readable."));case o.target.error.SECURITY_ERR:return t(new Error("Error while reading a file: Security error."));case o.target.error.ABORT_ERR:return t(new Error("Error while reading a file: Aborted."));default:return t(new Error("Error while reading a file."))}},e.readAsArrayBuffer(r),null})}var eventProps=function(){var r={};return[].concat(_toConsumableArray(mouseEvents),_toConsumableArray(touchEvents),_toConsumableArray(keyboardEvents)).forEach(function(a){r[a]=PropTypes.func}),r}(),fileTypes=[PropTypes.string,PropTypes.instanceOf(ArrayBuffer),PropTypes.shape({data:PropTypes.oneOfType([PropTypes.object,PropTypes.string]),httpHeaders:PropTypes.object,range:PropTypes.object,url:PropTypes.string,withCredentials:PropTypes.bool})];typeof File!="undefined"&&fileTypes.push(PropTypes.instanceOf(File));typeof Blob!="undefined"&&fileTypes.push(PropTypes.instanceOf(Blob));var isClassName=PropTypes.oneOfType([PropTypes.string,PropTypes.arrayOf(PropTypes.string)]),isFile=PropTypes.oneOfType(fileTypes),isLinkService=PropTypes.instanceOf(LinkService);PropTypes.oneOf(["_self","_blank","_parent","_top"]);var isPage=PropTypes.shape({_transport:PropTypes.shape({fontLoader:PropTypes.object.isRequired}).isRequired,commonObjs:PropTypes.shape({_objs:PropTypes.object.isRequired}).isRequired,getAnnotations:PropTypes.func.isRequired,getTextContent:PropTypes.func.isRequired,getViewport:PropTypes.func.isRequired,render:PropTypes.func.isRequired}),isPageIndex=function(a,t,e){var o=a[t],s=a.pageNumber,l=a.pdf;if(!isDefined(l))return null;if(isDefined(o)){if(typeof o!="number")return new Error("`".concat(t,"` of type `").concat(_typeof(o),"` supplied to `").concat(e,"`, expected `number`."));if(o<0)return new Error("Expected `".concat(t,"` to be greater or equal to 0."));var c=l.numPages;if(o+1>c)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(c-1,"."))}else if(!isDefined(s))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(e,"`."));return null},isPageNumber=function(a,t,e){var o=a[t],s=a.pageIndex,l=a.pdf;if(!isDefined(l))return null;if(isDefined(o)){if(typeof o!="number")return new Error("`".concat(t,"` of type `").concat(_typeof(o),"` supplied to `").concat(e,"`, expected `number`."));if(o<1)return new Error("Expected `".concat(t,"` to be greater or equal to 1."));var c=l.numPages;if(o>c)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(c,"."))}else if(!isDefined(s))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(e,"`."));return null},isPdf=PropTypes.oneOfType([PropTypes.shape({getDestination:PropTypes.func.isRequired,getOutline:PropTypes.func.isRequired,getPage:PropTypes.func.isRequired,numPages:PropTypes.number.isRequired}),PropTypes.bool]),isRef=PropTypes.oneOfType([PropTypes.func,PropTypes.shape({current:PropTypes.any})]),isRenderMode=PropTypes.oneOf(["canvas","none","svg"]),isRotate=PropTypes.oneOf([0,90,180,270]),_excluded$h=["url"];function ownKeys$2(r,a){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(r);a&&(e=e.filter(function(o){return Object.getOwnPropertyDescriptor(r,o).enumerable})),t.push.apply(t,e)}return t}function _objectSpread$2(r){for(var a=1;a<arguments.length;a++){var t=arguments[a]!=null?arguments[a]:{};a%2?ownKeys$2(Object(t),!0).forEach(function(e){_defineProperty(r,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):ownKeys$2(Object(t)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))})}return r}function _createSuper$6(r){var a=_isNativeReflectConstruct$6();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$6(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var PDFDataRangeTransport=pdf.exports.PDFDataRangeTransport,Document=function(r){_inherits(t,r);var a=_createSuper$6(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"state",{pdf:null}),_defineProperty(_assertThisInitialized(e),"viewer",{scrollPageIntoView:function(d){var P=d.pageNumber,x=e.props.onItemClick;if(x){x({pageNumber:P});return}var $=e.pages[P-1];if($){$.scrollIntoView();return}warnOnDev("Warning: An internal link leading to page ".concat(P," was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>."))}}),_defineProperty(_assertThisInitialized(e),"linkService",new LinkService),_defineProperty(_assertThisInitialized(e),"loadDocument",function(){e.findDocumentSource().then(function(c){if(e.onSourceSuccess(),!!c){e.setState(function(O){return O.pdf?{pdf:null}:null});var d=e.props,P=d.options,x=d.onLoadProgress,$=d.onPassword;cancelRunningTask(e.runningTask),e.loadingTask&&e.loadingTask.destroy(),e.loadingTask=pdf.exports.getDocument(_objectSpread$2(_objectSpread$2({},c),P)),e.loadingTask.onPassword=$,x&&(e.loadingTask.onProgress=x);var j=makeCancellablePromise(e.loadingTask.promise);e.runningTask=j,j.promise.then(function(O){e.setState(function(A){return A.pdf&&A.pdf.fingerprint===O.fingerprint?null:{pdf:O}},e.onLoadSuccess)}).catch(function(O){e.onLoadError(O)})}}).catch(function(c){e.onSourceError(c)})}),_defineProperty(_assertThisInitialized(e),"setupLinkService",function(){e.linkService.setViewer(e.viewer);var c=_assertThisInitialized(e);Object.defineProperty(e.linkService,"externalLinkTarget",{get:function(){var P=c.props.externalLinkTarget;switch(P){case"_self":return 1;case"_blank":return 2;case"_parent":return 3;case"_top":return 4;default:return 0}}})}),_defineProperty(_assertThisInitialized(e),"onSourceSuccess",function(){var c=e.props.onSourceSuccess;c&&c()}),_defineProperty(_assertThisInitialized(e),"onSourceError",function(c){errorOnDev(c);var d=e.props.onSourceError;d&&d(c)}),_defineProperty(_assertThisInitialized(e),"onLoadSuccess",function(){var c=e.props.onLoadSuccess,d=e.state.pdf;c&&c(d),e.pages=new Array(d.numPages),e.linkService.setDocument(d)}),_defineProperty(_assertThisInitialized(e),"onLoadError",function(c){e.setState({pdf:!1}),errorOnDev(c);var d=e.props.onLoadError;d&&d(c)}),_defineProperty(_assertThisInitialized(e),"findDocumentSource",function(){return new Promise(function(c){var d=e.props.file;if(d||c(null),typeof d=="string"){if(isDataURI(d)){var P=dataURItoByteString(d);c({data:P})}displayCORSWarning(),c({url:d})}if(d instanceof PDFDataRangeTransport&&c({range:d}),isArrayBuffer(d)&&c({data:d}),isBrowser$1&&(isBlob(d)||isFile$1(d))){loadFromFile(d).then(function(O){c({data:O})});return}if(_typeof(d)!=="object")throw new Error("Invalid parameter in file, need either Uint8Array, string or a parameter object");if(!d.url&&!d.data&&!d.range)throw new Error("Invalid parameter object: need either .data, .range or .url");if(typeof d.url=="string"){if(isDataURI(d.url)){var x=d.url,$=_objectWithoutProperties(d,_excluded$h),j=dataURItoByteString(x);c(_objectSpread$2({data:j},$))}displayCORSWarning()}c(d)})}),_defineProperty(_assertThisInitialized(e),"registerPage",function(c,d){e.pages[c]=d}),_defineProperty(_assertThisInitialized(e),"unregisterPage",function(c){delete e.pages[c]}),e}return _createClass(t,[{key:"componentDidMount",value:function(){this.loadDocument(),this.setupLinkService()}},{key:"componentDidUpdate",value:function(o){var s=this.props.file;s!==o.file&&this.loadDocument()}},{key:"componentWillUnmount",value:function(){cancelRunningTask(this.runningTask),this.loadingTask&&this.loadingTask.destroy()}},{key:"childContext",get:function(){var o=this.linkService,s=this.registerPage,l=this.unregisterPage,c=this.props,d=c.imageResourcesPath,P=c.renderMode,x=c.rotate,$=this.state.pdf;return{imageResourcesPath:d,linkService:o,pdf:$,registerPage:s,renderMode:P,rotate:x,unregisterPage:l}}},{key:"eventProps",get:function(){var o=this;return makeEventProps(this.props,function(){return o.state.pdf})}},{key:"renderChildren",value:function(){var o=this.props.children;return React$1.createElement(DocumentContext.Provider,{value:this.childContext},o)}},{key:"renderContent",value:function(){var o=this.props.file,s=this.state.pdf;if(!o){var l=this.props.noData;return React$1.createElement(Message,{type:"no-data"},typeof l=="function"?l():l)}if(s===null){var c=this.props.loading;return React$1.createElement(Message,{type:"loading"},typeof c=="function"?c():c)}if(s===!1){var d=this.props.error;return React$1.createElement(Message,{type:"error"},typeof d=="function"?d():d)}return this.renderChildren()}},{key:"render",value:function(){var o=this.props,s=o.className,l=o.inputRef;return React$1.createElement("div",_extends({className:mergeClassNames("react-pdf__Document",s),ref:l},this.eventProps),this.renderContent())}}]),t}(react.exports.PureComponent);Document.defaultProps={error:"Failed to load PDF file.",loading:"Loading PDF\u2026",noData:"No PDF file specified.",onPassword:function(a,t){switch(t){case PasswordResponses.NEED_PASSWORD:{var e=prompt("Enter the password to open this PDF file.");a(e);break}case PasswordResponses.INCORRECT_PASSWORD:{var o=prompt("Invalid password. Please try again.");a(o);break}}}};var isFunctionOrNode$1=PropTypes.oneOfType([PropTypes.func,PropTypes.node]);Document.propTypes=_objectSpread$2(_objectSpread$2({},eventProps),{},{children:PropTypes.node,className:isClassName,error:isFunctionOrNode$1,file:isFile,imageResourcesPath:PropTypes.string,inputRef:isRef,loading:isFunctionOrNode$1,noData:isFunctionOrNode$1,onItemClick:PropTypes.func,onLoadError:PropTypes.func,onLoadProgress:PropTypes.func,onLoadSuccess:PropTypes.func,onPassword:PropTypes.func,onSourceError:PropTypes.func,onSourceSuccess:PropTypes.func,rotate:PropTypes.number});var isDestination=PropTypes.oneOfType([PropTypes.string,PropTypes.arrayOf(PropTypes.any)]);PropTypes.shape({dest:isDestination,items:PropTypes.arrayOf(PropTypes.shape({dest:isDestination,title:PropTypes.string})),title:PropTypes.string}).isRequired,PropTypes.func,isPdf.isRequired;function ownKeys$1(r,a){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(r);a&&(e=e.filter(function(o){return Object.getOwnPropertyDescriptor(r,o).enumerable})),t.push.apply(t,e)}return t}function _objectSpread$1(r){for(var a=1;a<arguments.length;a++){var t=arguments[a]!=null?arguments[a]:{};a%2?ownKeys$1(Object(t),!0).forEach(function(e){_defineProperty(r,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):ownKeys$1(Object(t)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))})}return r}_objectSpread$1({className:isClassName,inputRef:isRef,onItemClick:PropTypes.func,onLoadError:PropTypes.func,onLoadSuccess:PropTypes.func,pdf:isPdf},eventProps);function mergeRefs(){for(var r=arguments.length,a=new Array(r),t=0;t<r;t++)a[t]=arguments[t];var e=a.filter(Boolean);return e.length<=1?e[0]:function(s){e.forEach(function(l){typeof l=="function"?l(s):l.current=s})}}var PageContext=react.exports.createContext(null);function _createSuper$5(r){var a=_isNativeReflectConstruct$5();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$5(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var PageCanvasInternal=function(r){_inherits(t,r);var a=_createSuper$5(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"onRenderSuccess",function(){e.renderer=null;var c=e.props,d=c.onRenderSuccess,P=c.page,x=c.scale;d&&d(makePageCallback(P,x))}),_defineProperty(_assertThisInitialized(e),"onRenderError",function(c){if(!isCancelException(c)){errorOnDev(c);var d=e.props.onRenderError;d&&d(c)}}),_defineProperty(_assertThisInitialized(e),"drawPageOnCanvas",function(){var c=_assertThisInitialized(e),d=c.canvasLayer;if(!d)return null;var P=_assertThisInitialized(e),x=P.renderViewport,$=P.viewport,j=e.props,O=j.page,A=j.renderInteractiveForms;d.width=x.width,d.height=x.height,d.style.width="".concat(Math.floor($.width),"px"),d.style.height="".concat(Math.floor($.height),"px");var y={get canvasContext(){return d.getContext("2d")},viewport:x,renderInteractiveForms:A};return e.cancelRenderingTask(),e.renderer=O.render(y),e.renderer.promise.then(e.onRenderSuccess).catch(e.onRenderError)}),e}return _createClass(t,[{key:"componentDidMount",value:function(){this.drawPageOnCanvas()}},{key:"componentDidUpdate",value:function(o){var s=this.props,l=s.page,c=s.renderInteractiveForms;c!==o.renderInteractiveForms&&(l.cleanup(),this.drawPageOnCanvas())}},{key:"componentWillUnmount",value:function(){this.cancelRenderingTask(),this.canvasLayer&&(this.canvasLayer.width=0,this.canvasLayer.height=0,this.canvasLayer=null)}},{key:"cancelRenderingTask",value:function(){this.renderer&&(this.renderer.cancel(),this.renderer=null)}},{key:"renderViewport",get:function(){var o=this.props,s=o.page,l=o.rotate,c=o.scale,d=getPixelRatio();return s.getViewport({scale:c*d,rotation:l})}},{key:"viewport",get:function(){var o=this.props,s=o.page,l=o.rotate,c=o.scale;return s.getViewport({scale:c,rotation:l})}},{key:"render",value:function(){var o=this,s=this.props.canvasRef;return React$1.createElement("canvas",{className:"react-pdf__Page__canvas",dir:"ltr",ref:mergeRefs(s,function(l){o.canvasLayer=l}),style:{display:"block",userSelect:"none"}})}}]),t}(react.exports.PureComponent);PageCanvasInternal.propTypes={canvasRef:isRef,onRenderError:PropTypes.func,onRenderSuccess:PropTypes.func,page:isPage.isRequired,renderInteractiveForms:PropTypes.bool,rotate:isRotate,scale:PropTypes.number.isRequired};function PageCanvas(r){return React$1.createElement(PageContext.Consumer,null,function(a){return React$1.createElement(PageCanvasInternal,_extends({},a,r))})}function _createSuper$4(r){var a=_isNativeReflectConstruct$4();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$4(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var PageSVGInternal=function(r){_inherits(t,r);var a=_createSuper$4(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"state",{svg:null}),_defineProperty(_assertThisInitialized(e),"onRenderSuccess",function(){e.renderer=null;var c=e.props,d=c.onRenderSuccess,P=c.page,x=c.scale;d&&d(makePageCallback(P,x))}),_defineProperty(_assertThisInitialized(e),"onRenderError",function(c){if(!isCancelException(c)){errorOnDev(c);var d=e.props.onRenderError;d&&d(c)}}),_defineProperty(_assertThisInitialized(e),"renderSVG",function(){var c=e.props.page;return e.renderer=c.getOperatorList(),e.renderer.then(function(d){var P=new pdf.exports.SVGGraphics(c.commonObjs,c.objs);e.renderer=P.getSVG(d,e.viewport).then(function(x){e.setState({svg:x},e.onRenderSuccess)}).catch(e.onRenderError)}).catch(e.onRenderError)}),_defineProperty(_assertThisInitialized(e),"drawPageOnContainer",function(c){var d=e.state.svg;if(!(!c||!d)){c.firstElementChild||c.appendChild(d);var P=e.viewport,x=P.width,$=P.height;d.setAttribute("width",x),d.setAttribute("height",$)}}),e}return _createClass(t,[{key:"componentDidMount",value:function(){this.renderSVG()}},{key:"viewport",get:function(){var o=this.props,s=o.page,l=o.rotate,c=o.scale;return s.getViewport({scale:c,rotation:l})}},{key:"render",value:function(){var o=this,s=this.viewport,l=s.width,c=s.height;return React$1.createElement("div",{className:"react-pdf__Page__svg",ref:function(P){return o.drawPageOnContainer(P)},style:{display:"block",backgroundColor:"white",overflow:"hidden",width:l,height:c,userSelect:"none"}})}}]),t}(react.exports.PureComponent);PageSVGInternal.propTypes={onRenderError:PropTypes.func,onRenderSuccess:PropTypes.func,page:isPage.isRequired,rotate:isRotate,scale:PropTypes.number.isRequired};function PageSVG(r){return React$1.createElement(PageContext.Consumer,null,function(a){return React$1.createElement(PageSVGInternal,_extends({},a,r))})}function _createSuper$3(r){var a=_isNativeReflectConstruct$3();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$3(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var TextLayerItemInternal=function(r){_inherits(t,r);var a=_createSuper$3(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"getElementWidth",function(c){var d=_assertThisInitialized(e),P=d.sideways;return c.getBoundingClientRect()[P?"height":"width"]}),e}return _createClass(t,[{key:"componentDidMount",value:function(){this.alignTextItem()}},{key:"componentDidUpdate",value:function(){this.alignTextItem()}},{key:"unrotatedViewport",get:function(){var o=this.props,s=o.page,l=o.scale;return s.getViewport({scale:l})}},{key:"rotate",get:function(){var o=this.props,s=o.page,l=o.rotate;return l-s.rotate}},{key:"sideways",get:function(){var o=this.rotate;return o%180!=0}},{key:"defaultSideways",get:function(){var o=this.unrotatedViewport.rotation;return o%180!=0}},{key:"fontSize",get:function(){var o=this.props.transform,s=this.defaultSideways,l=_slicedToArray(o,2),c=l[0],d=l[1];return s?d:c}},{key:"top",get:function(){var o=this.props.transform,s=this.unrotatedViewport,l=this.defaultSideways,c=_slicedToArray(o,6),d=c[2],P=c[3],x=c[4],$=c[5],j=_slicedToArray(s.viewBox,4),O=j[1],A=j[3];return l?x+d+O:A-($+P)}},{key:"left",get:function(){var o=this.props.transform,s=this.unrotatedViewport,l=this.defaultSideways,c=_slicedToArray(o,6),d=c[4],P=c[5],x=_slicedToArray(s.viewBox,1),$=x[0];return l?P-$:d-$}},{key:"getFontData",value:function(o){var s=this.props.page;return new Promise(function(l){s.commonObjs.get(o,l)})}},{key:"alignTextItem",value:function(){var o=this,s=this.item;if(!!s){s.style.transform="";var l=this.props,c=l.fontName,d=l.scale,P=l.width;s.style.fontFamily="".concat(c,", sans-serif"),this.getFontData(c).then(function(x){var $=x?x.fallbackName:"sans-serif";s.style.fontFamily="".concat(c,", ").concat($);var j=P*d,O=o.getElementWidth(s),A="scaleX(".concat(j/O,")"),y=x?x.ascent:0;y&&(A+=" translateY(".concat((1-y)*100,"%)")),s.style.transform=A,s.style.WebkitTransform=A})}}},{key:"render",value:function(){var o=this,s=this.fontSize,l=this.top,c=this.left,d=this.props,P=d.customTextRenderer,x=d.scale,$=d.str;return React$1.createElement("span",{ref:function(O){o.item=O},style:{height:"1em",fontFamily:"sans-serif",fontSize:"".concat(s*x,"px"),position:"absolute",top:"".concat(l*x,"px"),left:"".concat(c*x,"px"),transformOrigin:"left bottom",whiteSpace:"pre",pointerEvents:"all"}},P?P(this.props):$)}}]),t}(react.exports.PureComponent);TextLayerItemInternal.propTypes={customTextRenderer:PropTypes.func,fontName:PropTypes.string.isRequired,itemIndex:PropTypes.number.isRequired,page:isPage.isRequired,rotate:isRotate,scale:PropTypes.number,str:PropTypes.string.isRequired,transform:PropTypes.arrayOf(PropTypes.number).isRequired,width:PropTypes.number.isRequired};function TextLayerItem(r){return React$1.createElement(PageContext.Consumer,null,function(a){return React$1.createElement(TextLayerItemInternal,_extends({},a,r))})}function _createSuper$2(r){var a=_isNativeReflectConstruct$2();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$2(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var TextLayerInternal=function(r){_inherits(t,r);var a=_createSuper$2(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"state",{textItems:null}),_defineProperty(_assertThisInitialized(e),"loadTextItems",function(){var c=e.props.page,d=makeCancellablePromise(c.getTextContent());e.runningTask=d,d.promise.then(function(P){var x=P.items;e.setState({textItems:x},e.onLoadSuccess)}).catch(function(P){e.onLoadError(P)})}),_defineProperty(_assertThisInitialized(e),"onLoadSuccess",function(){var c=e.props.onGetTextSuccess,d=e.state.textItems;c&&c(d)}),_defineProperty(_assertThisInitialized(e),"onLoadError",function(c){e.setState({textItems:!1}),errorOnDev(c);var d=e.props.onGetTextError;d&&d(c)}),e}return _createClass(t,[{key:"componentDidMount",value:function(){var o=this.props.page;if(!o)throw new Error("Attempted to load page text content, but no page was specified.");this.loadTextItems()}},{key:"componentDidUpdate",value:function(o){var s=this.props.page;o.page&&s!==o.page&&this.loadTextItems()}},{key:"componentWillUnmount",value:function(){cancelRunningTask(this.runningTask)}},{key:"unrotatedViewport",get:function(){var o=this.props,s=o.page,l=o.scale;return s.getViewport({scale:l})}},{key:"rotate",get:function(){var o=this.props,s=o.page,l=o.rotate;return l-s.rotate}},{key:"renderTextItems",value:function(){var o=this.state.textItems;return o?o.map(function(s,l){return React$1.createElement(TextLayerItem,_extends({key:l,itemIndex:l},s))}):null}},{key:"render",value:function(){var o=this.unrotatedViewport,s=this.rotate;return React$1.createElement("div",{className:"react-pdf__Page__textContent",style:{position:"absolute",top:"50%",left:"50%",width:"".concat(o.width,"px"),height:"".concat(o.height,"px"),color:"transparent",transform:"translate(-50%, -50%) rotate(".concat(s,"deg)"),WebkitTransform:"translate(-50%, -50%) rotate(".concat(s,"deg)"),pointerEvents:"none"}},this.renderTextItems())}}]),t}(react.exports.PureComponent);TextLayerInternal.propTypes={onGetTextError:PropTypes.func,onGetTextSuccess:PropTypes.func,page:isPage.isRequired,rotate:isRotate,scale:PropTypes.number};function TextLayer(r){return React$1.createElement(PageContext.Consumer,null,function(a){return React$1.createElement(TextLayerInternal,_extends({},a,r))})}function _createSuper$1(r){var a=_isNativeReflectConstruct$1();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct$1(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var AnnotationLayerInternal=function(r){_inherits(t,r);var a=_createSuper$1(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"state",{annotations:null}),_defineProperty(_assertThisInitialized(e),"loadAnnotations",function(){var c=e.props.page,d=makeCancellablePromise(c.getAnnotations());e.runningTask=d,d.promise.then(function(P){e.setState({annotations:P},e.onLoadSuccess)}).catch(function(P){e.onLoadError(P)})}),_defineProperty(_assertThisInitialized(e),"onLoadSuccess",function(){var c=e.props.onGetAnnotationsSuccess,d=e.state.annotations;c&&c(d)}),_defineProperty(_assertThisInitialized(e),"onLoadError",function(c){e.setState({annotations:!1}),errorOnDev(c);var d=e.props.onGetAnnotationsError;d&&d(c)}),_defineProperty(_assertThisInitialized(e),"onRenderSuccess",function(){var c=e.props.onRenderAnnotationLayerSuccess;c&&c()}),_defineProperty(_assertThisInitialized(e),"onRenderError",function(c){errorOnDev(c);var d=e.props.onRenderAnnotationLayerError;d&&d(c)}),e}return _createClass(t,[{key:"componentDidMount",value:function(){var o=this.props.page;if(!o)throw new Error("Attempted to load page annotations, but no page was specified.");this.loadAnnotations()}},{key:"componentDidUpdate",value:function(o){var s=this.props,l=s.page,c=s.renderInteractiveForms;(o.page&&l!==o.page||c!==o.renderInteractiveForms)&&this.loadAnnotations()}},{key:"componentWillUnmount",value:function(){cancelRunningTask(this.runningTask)}},{key:"viewport",get:function(){var o=this.props,s=o.page,l=o.rotate,c=o.scale;return s.getViewport({scale:c,rotation:l})}},{key:"renderAnnotationLayer",value:function(){var o=this.state.annotations;if(!!o){var s=this.props,l=s.imageResourcesPath,c=s.linkService,d=s.page,P=s.renderInteractiveForms,x=this.viewport.clone({dontFlip:!0}),$={annotations:o,div:this.annotationLayer,imageResourcesPath:l,linkService:c,page:d,renderInteractiveForms:P,viewport:x};this.annotationLayer.innerHTML="";try{pdf.exports.AnnotationLayer.render($),this.onRenderSuccess()}catch(j){this.onRenderError(j)}}}},{key:"render",value:function(){var o=this;return React$1.createElement("div",{className:"react-pdf__Page__annotations annotationLayer",ref:function(l){o.annotationLayer=l}},this.renderAnnotationLayer())}}]),t}(react.exports.PureComponent);AnnotationLayerInternal.propTypes={imageResourcesPath:PropTypes.string,linkService:isLinkService.isRequired,onGetAnnotationsError:PropTypes.func,onGetAnnotationsSuccess:PropTypes.func,onRenderAnnotationLayerError:PropTypes.func,onRenderAnnotationLayerSuccess:PropTypes.func,page:isPage,renderInteractiveForms:PropTypes.bool,rotate:isRotate,scale:PropTypes.number};var AnnotationLayer=function(a){return React$1.createElement(DocumentContext.Consumer,null,function(t){return React$1.createElement(PageContext.Consumer,null,function(e){return React$1.createElement(AnnotationLayerInternal,_extends({},t,e,a))})})};function ownKeys(r,a){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(r);a&&(e=e.filter(function(o){return Object.getOwnPropertyDescriptor(r,o).enumerable})),t.push.apply(t,e)}return t}function _objectSpread(r){for(var a=1;a<arguments.length;a++){var t=arguments[a]!=null?arguments[a]:{};a%2?ownKeys(Object(t),!0).forEach(function(e){_defineProperty(r,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))})}return r}function _createSuper(r){var a=_isNativeReflectConstruct();return function(){var e=_getPrototypeOf(r),o;if(a){var s=_getPrototypeOf(this).constructor;o=Reflect.construct(e,arguments,s)}else o=e.apply(this,arguments);return _possibleConstructorReturn(this,o)}}function _isNativeReflectConstruct(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}var defaultScale=1,PageInternal=function(r){_inherits(t,r);var a=_createSuper(t);function t(){var e;_classCallCheck(this,t);for(var o=arguments.length,s=new Array(o),l=0;l<o;l++)s[l]=arguments[l];return e=a.call.apply(a,[this].concat(s)),_defineProperty(_assertThisInitialized(e),"state",{page:null}),_defineProperty(_assertThisInitialized(e),"onLoadSuccess",function(){var c=e.props,d=c.onLoadSuccess,P=c.registerPage,x=e.state.page;d&&d(makePageCallback(x,e.scale)),P&&P(e.pageIndex,e.ref)}),_defineProperty(_assertThisInitialized(e),"onLoadError",function(c){errorOnDev(c);var d=e.props.onLoadError;d&&d(c)}),_defineProperty(_assertThisInitialized(e),"loadPage",function(){var c=e.props.pdf,d=e.getPageNumber();if(!!d){e.setState(function(x){return x.page?{page:null}:null});var P=makeCancellablePromise(c.getPage(d));e.runningTask=P,P.promise.then(function(x){e.setState({page:x},e.onLoadSuccess)}).catch(function(x){e.setState({page:!1}),e.onLoadError(x)})}}),e}return _createClass(t,[{key:"componentDidMount",value:function(){var o=this.props.pdf;if(!o)throw new Error("Attempted to load a page, but no document was specified.");this.loadPage()}},{key:"componentDidUpdate",value:function(o){var s=this.props.pdf;if(o.pdf&&s!==o.pdf||this.getPageNumber()!==this.getPageNumber(o)){var l=this.props.unregisterPage;l&&l(this.getPageIndex(o)),this.loadPage()}}},{key:"componentWillUnmount",value:function(){var o=this.props.unregisterPage;o&&o(this.pageIndex),cancelRunningTask(this.runningTask)}},{key:"childContext",get:function(){var o=this.state.page;if(!o)return{};var s=this.props,l=s.customTextRenderer,c=s.onGetAnnotationsError,d=s.onGetAnnotationsSuccess,P=s.onGetTextError,x=s.onGetTextSuccess,$=s.onRenderAnnotationLayerError,j=s.onRenderAnnotationLayerSuccess,O=s.onRenderError,A=s.onRenderSuccess,y=s.renderInteractiveForms;return{customTextRenderer:l,onGetAnnotationsError:c,onGetAnnotationsSuccess:d,onGetTextError:P,onGetTextSuccess:x,onRenderAnnotationLayerError:$,onRenderAnnotationLayerSuccess:j,onRenderError:O,onRenderSuccess:A,page:o,renderInteractiveForms:y,rotate:this.rotate,scale:this.scale}}},{key:"getPageIndex",value:function(){var o=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.props;return isProvided(o.pageNumber)?o.pageNumber-1:isProvided(o.pageIndex)?o.pageIndex:null}},{key:"getPageNumber",value:function(){var o=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.props;return isProvided(o.pageNumber)?o.pageNumber:isProvided(o.pageIndex)?o.pageIndex+1:null}},{key:"pageIndex",get:function(){return this.getPageIndex()}},{key:"pageNumber",get:function(){return this.getPageNumber()}},{key:"rotate",get:function(){var o=this.props.rotate;if(isProvided(o))return o;var s=this.state.page;return s?s.rotate:null}},{key:"scale",get:function(){var o=this.state.page;if(!o)return null;var s=this.props,l=s.scale,c=s.width,d=s.height,P=this.rotate,x=1,$=l===null?defaultScale:l;if(c||d){var j=o.getViewport({scale:1,rotation:P});x=c?c/j.width:d/j.height}return $*x}},{key:"eventProps",get:function(){var o=this;return makeEventProps(this.props,function(){var s=o.state.page;return s&&makePageCallback(s,o.scale)})}},{key:"pageKey",get:function(){var o=this.state.page;return"".concat(o.pageIndex,"@").concat(this.scale,"/").concat(this.rotate)}},{key:"pageKeyNoScale",get:function(){var o=this.state.page;return"".concat(o.pageIndex,"/").concat(this.rotate)}},{key:"renderMainLayer",value:function(){var o=this.props,s=o.canvasRef,l=o.renderMode;switch(l){case"none":return null;case"svg":return React$1.createElement(PageSVG,{key:"".concat(this.pageKeyNoScale,"_svg")});case"canvas":default:return React$1.createElement(PageCanvas,{key:"".concat(this.pageKey,"_canvas"),canvasRef:s})}}},{key:"renderTextLayer",value:function(){var o=this.props.renderTextLayer;return o?React$1.createElement(TextLayer,{key:"".concat(this.pageKey,"_text")}):null}},{key:"renderAnnotationLayer",value:function(){var o=this.props.renderAnnotationLayer;return o?React$1.createElement(AnnotationLayer,{key:"".concat(this.pageKey,"_annotations")}):null}},{key:"renderChildren",value:function(){var o=this.props.children;return React$1.createElement(PageContext.Provider,{value:this.childContext},this.renderMainLayer(),this.renderTextLayer(),this.renderAnnotationLayer(),o)}},{key:"renderContent",value:function(){var o=this.pageNumber,s=this.props.pdf,l=this.state.page;if(!o){var c=this.props.noData;return React$1.createElement(Message,{type:"no-data"},typeof c=="function"?c():c)}if(s===null||l===null){var d=this.props.loading;return React$1.createElement(Message,{type:"loading"},typeof d=="function"?d():d)}if(s===!1||l===!1){var P=this.props.error;return React$1.createElement(Message,{type:"error"},typeof P=="function"?P():P)}return this.renderChildren()}},{key:"render",value:function(){var o=this.pageNumber,s=this.props,l=s.className,c=s.inputRef;return React$1.createElement("div",_extends({className:mergeClassNames("react-pdf__Page",l),"data-page-number":o,ref:mergeRefs(c,this.ref),style:{position:"relative"}},this.eventProps),this.renderContent())}}]),t}(react.exports.PureComponent);PageInternal.defaultProps={error:"Failed to load the page.",loading:"Loading page\u2026",noData:"No page specified.",renderAnnotationLayer:!0,renderInteractiveForms:!1,renderMode:"canvas",renderTextLayer:!0,scale:defaultScale};var isFunctionOrNode=PropTypes.oneOfType([PropTypes.func,PropTypes.node]);PageInternal.propTypes=_objectSpread(_objectSpread({},eventProps),{},{children:PropTypes.node,className:isClassName,customTextRenderer:PropTypes.func,error:isFunctionOrNode,height:PropTypes.number,imageResourcesPath:PropTypes.string,inputRef:isRef,loading:isFunctionOrNode,noData:isFunctionOrNode,onGetTextError:PropTypes.func,onGetTextSuccess:PropTypes.func,onLoadError:PropTypes.func,onLoadSuccess:PropTypes.func,onRenderError:PropTypes.func,onRenderSuccess:PropTypes.func,pageIndex:isPageIndex,pageNumber:isPageNumber,pdf:isPdf,registerPage:PropTypes.func,renderAnnotationLayer:PropTypes.bool,renderInteractiveForms:PropTypes.bool,renderMode:isRenderMode,renderTextLayer:PropTypes.bool,rotate:isRotate,scale:PropTypes.number,unregisterPage:PropTypes.func,width:PropTypes.number});function Page(r,a){return React$1.createElement(DocumentContext.Consumer,null,function(t){return React$1.createElement(PageInternal,_extends({ref:a},t,r))})}var Page$1=React$1.forwardRef(Page);isLocalFileSystem&&warnOnDev("You are running React-PDF from your local file system. PDF.js Worker may fail to load due to browser's security policies. If you're on Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.");pdf.exports.GlobalWorkerOptions.workerSrc="pdf.worker.js";function isPlainObject(r){return r!==null&&typeof r=="object"&&r.constructor===Object}function deepmerge(r,a,t={clone:!0}){const e=t.clone?_extends({},r):r;return isPlainObject(r)&&isPlainObject(a)&&Object.keys(a).forEach(o=>{o!=="__proto__"&&(isPlainObject(a[o])&&o in r&&isPlainObject(r[o])?e[o]=deepmerge(r[o],a[o],t):e[o]=a[o])}),e}function formatMuiErrorMessage(r){let a="https://mui.com/production-error/?code="+r;for(let t=1;t<arguments.length;t+=1)a+="&args[]="+encodeURIComponent(arguments[t]);return"Minified MUI error #"+r+"; visit "+a+" for the full message."}function capitalize(r){if(typeof r!="string")throw new Error(formatMuiErrorMessage(7));return r.charAt(0).toUpperCase()+r.slice(1)}function setRef(r,a){typeof r=="function"?r(a):r&&(r.current=a)}const useEnhancedEffect=typeof window!="undefined"?react.exports.useLayoutEffect:react.exports.useEffect;var useEnhancedEffect$1=useEnhancedEffect;function useControlled({controlled:r,default:a,name:t,state:e="value"}){const{current:o}=react.exports.useRef(r!==void 0),[s,l]=react.exports.useState(a),c=o?r:s,d=react.exports.useCallback(P=>{o||l(P)},[]);return[c,d]}function useEventCallback(r){const a=react.exports.useRef(r);return useEnhancedEffect$1(()=>{a.current=r}),react.exports.useCallback((...t)=>(0,a.current)(...t),[])}function useForkRef(r,a){return react.exports.useMemo(()=>r==null&&a==null?null:t=>{setRef(r,t),setRef(a,t)},[r,a])}let hadKeyboardEvent=!0,hadFocusVisibleRecently=!1,hadFocusVisibleRecentlyTimeout=null;const inputTypesWhitelist={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function focusTriggersKeyboardModality(r){const{type:a,tagName:t}=r;return!!(t==="INPUT"&&inputTypesWhitelist[a]&&!r.readOnly||t==="TEXTAREA"&&!r.readOnly||r.isContentEditable)}function handleKeyDown(r){r.metaKey||r.altKey||r.ctrlKey||(hadKeyboardEvent=!0)}function handlePointerDown(){hadKeyboardEvent=!1}function handleVisibilityChange(){this.visibilityState==="hidden"&&hadFocusVisibleRecently&&(hadKeyboardEvent=!0)}function prepare(r){r.addEventListener("keydown",handleKeyDown,!0),r.addEventListener("mousedown",handlePointerDown,!0),r.addEventListener("pointerdown",handlePointerDown,!0),r.addEventListener("touchstart",handlePointerDown,!0),r.addEventListener("visibilitychange",handleVisibilityChange,!0)}function isFocusVisible(r){const{target:a}=r;try{return a.matches(":focus-visible")}catch(t){}return hadKeyboardEvent||focusTriggersKeyboardModality(a)}function useIsFocusVisible(){const r=react.exports.useCallback(o=>{o!=null&&prepare(o.ownerDocument)},[]),a=react.exports.useRef(!1);function t(){return a.current?(hadFocusVisibleRecently=!0,window.clearTimeout(hadFocusVisibleRecentlyTimeout),hadFocusVisibleRecentlyTimeout=window.setTimeout(()=>{hadFocusVisibleRecently=!1},100),a.current=!1,!0):!1}function e(o){return isFocusVisible(o)?(a.current=!0,!0):!1}return{isFocusVisibleRef:a,onFocus:e,onBlur:t,ref:r}}function composeClasses(r,a,t){const e={};return Object.keys(r).forEach(o=>{e[o]=r[o].reduce((s,l)=>(l&&(t&&t[l]&&s.push(t[l]),s.push(a(l))),s),[]).join(" ")}),e}const globalStateClassesMapping={active:"Mui-active",checked:"Mui-checked",completed:"Mui-completed",disabled:"Mui-disabled",error:"Mui-error",expanded:"Mui-expanded",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",selected:"Mui-selected"};function generateUtilityClass(r,a){return globalStateClassesMapping[a]||`${r}-${a}`}function generateUtilityClasses(r,a){const t={};return a.forEach(e=>{t[e]=generateUtilityClass(r,e)}),t}var jsxRuntime={exports:{}},reactJsxRuntime_production_min={};/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var f=react.exports,g=60103;reactJsxRuntime_production_min.Fragment=60107;if(typeof Symbol=="function"&&Symbol.for){var h=Symbol.for;g=h("react.element"),reactJsxRuntime_production_min.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(r,a,t){var e,o={},s=null,l=null;t!==void 0&&(s=""+t),a.key!==void 0&&(s=""+a.key),a.ref!==void 0&&(l=a.ref);for(e in a)n.call(a,e)&&!p.hasOwnProperty(e)&&(o[e]=a[e]);if(r&&r.defaultProps)for(e in a=r.defaultProps,a)o[e]===void 0&&(o[e]=a[e]);return{$$typeof:g,type:r,key:s,ref:l,props:o,_owner:m.current}}reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;jsxRuntime.exports=reactJsxRuntime_production_min;var reactPropsRegex=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,isPropValid=memoize$1(function(r){return reactPropsRegex.test(r)||r.charCodeAt(0)===111&&r.charCodeAt(1)===110&&r.charCodeAt(2)<91});function sheetForTag(r){if(r.sheet)return r.sheet;for(var a=0;a<document.styleSheets.length;a++)if(document.styleSheets[a].ownerNode===r)return document.styleSheets[a]}function createStyleElement(r){var a=document.createElement("style");return a.setAttribute("data-emotion",r.key),r.nonce!==void 0&&a.setAttribute("nonce",r.nonce),a.appendChild(document.createTextNode("")),a.setAttribute("data-s",""),a}var StyleSheet=function(){function r(t){var e=this;this._insertTag=function(o){var s;e.tags.length===0?s=e.prepend?e.container.firstChild:e.before:s=e.tags[e.tags.length-1].nextSibling,e.container.insertBefore(o,s),e.tags.push(o)},this.isSpeedy=t.speedy===void 0?!0:t.speedy,this.tags=[],this.ctr=0,this.nonce=t.nonce,this.key=t.key,this.container=t.container,this.prepend=t.prepend,this.before=null}var a=r.prototype;return a.hydrate=function(e){e.forEach(this._insertTag)},a.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(createStyleElement(this));var o=this.tags[this.tags.length-1];if(this.isSpeedy){var s=sheetForTag(o);try{s.insertRule(e,s.cssRules.length)}catch(l){}}else o.appendChild(document.createTextNode(e));this.ctr++},a.flush=function(){this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0},r}(),MS="-ms-",MOZ="-moz-",WEBKIT="-webkit-",COMMENT="comm",RULESET="rule",DECLARATION="decl",IMPORT="@import",KEYFRAMES="@keyframes",abs=Math.abs,from=String.fromCharCode;function hash(r,a){return(((a<<2^charat(r,0))<<2^charat(r,1))<<2^charat(r,2))<<2^charat(r,3)}function trim(r){return r.trim()}function match(r,a){return(r=a.exec(r))?r[0]:r}function replace(r,a,t){return r.replace(a,t)}function indexof(r,a){return r.indexOf(a)}function charat(r,a){return r.charCodeAt(a)|0}function substr(r,a,t){return r.slice(a,t)}function strlen(r){return r.length}function sizeof(r){return r.length}function append(r,a){return a.push(r),r}function combine(r,a){return r.map(a).join("")}var line=1,column=1,length=0,position$1=0,character=0,characters="";function node(r,a,t,e,o,s,l){return{value:r,root:a,parent:t,type:e,props:o,children:s,line,column,length:l,return:""}}function copy(r,a,t){return node(r,a.root,a.parent,t,a.props,a.children,0)}function char(){return character}function prev(){return character=position$1>0?charat(characters,--position$1):0,column--,character===10&&(column=1,line--),character}function next(){return character=position$1<length?charat(characters,position$1++):0,column++,character===10&&(column=1,line++),character}function peek(){return charat(characters,position$1)}function caret(){return position$1}function slice(r,a){return substr(characters,r,a)}function token(r){switch(r){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function alloc(r){return line=column=1,length=strlen(characters=r),position$1=0,[]}function dealloc(r){return characters="",r}function delimit(r){return trim(slice(position$1-1,delimiter(r===91?r+2:r===40?r+1:r)))}function whitespace(r){for(;(character=peek())&&character<33;)next();return token(r)>2||token(character)>3?"":" "}function escaping(r,a){for(;--a&&next()&&!(character<48||character>102||character>57&&character<65||character>70&&character<97););return slice(r,caret()+(a<6&&peek()==32&&next()==32))}function delimiter(r){for(;next();)switch(character){case r:return position$1;case 34:case 39:return delimiter(r===34||r===39?r:character);case 40:r===41&&delimiter(r);break;case 92:next();break}return position$1}function commenter(r,a){for(;next()&&r+character!==47+10;)if(r+character===42+42&&peek()===47)break;return"/*"+slice(a,position$1-1)+"*"+from(r===47?r:next())}function identifier(r){for(;!token(peek());)next();return slice(r,position$1)}function compile(r){return dealloc(parse("",null,null,null,[""],r=alloc(r),0,[0],r))}function parse(r,a,t,e,o,s,l,c,d){for(var P=0,x=0,$=l,j=0,O=0,A=0,y=1,G=1,ue=1,K=0,U="",I=o,B=s,C=e,W=U;G;)switch(A=K,K=next()){case 34:case 39:case 91:case 40:W+=delimit(K);break;case 9:case 10:case 13:case 32:W+=whitespace(A);break;case 92:W+=escaping(caret()-1,7);continue;case 47:switch(peek()){case 42:case 47:append(comment(commenter(next(),caret()),a,t),d);break;default:W+="/"}break;case 123*y:c[P++]=strlen(W)*ue;case 125*y:case 59:case 0:switch(K){case 0:case 125:G=0;case 59+x:O>0&&strlen(W)-$&&append(O>32?declaration(W+";",e,t,$-1):declaration(replace(W," ","")+";",e,t,$-2),d);break;case 59:W+=";";default:if(append(C=ruleset(W,a,t,P,x,o,c,U,I=[],B=[],$),s),K===123)if(x===0)parse(W,a,C,C,I,s,$,c,B);else switch(j){case 100:case 109:case 115:parse(r,C,C,e&&append(ruleset(r,C,C,0,0,o,c,U,o,I=[],$),B),o,B,$,c,e?I:B);break;default:parse(W,C,C,C,[""],B,$,c,B)}}P=x=O=0,y=ue=1,U=W="",$=l;break;case 58:$=1+strlen(W),O=A;default:if(y<1){if(K==123)--y;else if(K==125&&y++==0&&prev()==125)continue}switch(W+=from(K),K*y){case 38:ue=x>0?1:(W+="\f",-1);break;case 44:c[P++]=(strlen(W)-1)*ue,ue=1;break;case 64:peek()===45&&(W+=delimit(next())),j=peek(),x=strlen(U=W+=identifier(caret())),K++;break;case 45:A===45&&strlen(W)==2&&(y=0)}}return s}function ruleset(r,a,t,e,o,s,l,c,d,P,x){for(var $=o-1,j=o===0?s:[""],O=sizeof(j),A=0,y=0,G=0;A<e;++A)for(var ue=0,K=substr(r,$+1,$=abs(y=l[A])),U=r;ue<O;++ue)(U=trim(y>0?j[ue]+" "+K:replace(K,/&\f/g,j[ue])))&&(d[G++]=U);return node(r,a,t,o===0?RULESET:c,d,P,x)}function comment(r,a,t){return node(r,a,t,COMMENT,from(char()),substr(r,2,-2),0)}function declaration(r,a,t,e){return node(r,a,t,DECLARATION,substr(r,0,e),substr(r,e+1,-1),e)}function prefix(r,a){switch(hash(r,a)){case 5103:return WEBKIT+"print-"+r+r;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return WEBKIT+r+r;case 5349:case 4246:case 4810:case 6968:case 2756:return WEBKIT+r+MOZ+r+MS+r+r;case 6828:case 4268:return WEBKIT+r+MS+r+r;case 6165:return WEBKIT+r+MS+"flex-"+r+r;case 5187:return WEBKIT+r+replace(r,/(\w+).+(:[^]+)/,WEBKIT+"box-$1$2"+MS+"flex-$1$2")+r;case 5443:return WEBKIT+r+MS+"flex-item-"+replace(r,/flex-|-self/,"")+r;case 4675:return WEBKIT+r+MS+"flex-line-pack"+replace(r,/align-content|flex-|-self/,"")+r;case 5548:return WEBKIT+r+MS+replace(r,"shrink","negative")+r;case 5292:return WEBKIT+r+MS+replace(r,"basis","preferred-size")+r;case 6060:return WEBKIT+"box-"+replace(r,"-grow","")+WEBKIT+r+MS+replace(r,"grow","positive")+r;case 4554:return WEBKIT+replace(r,/([^-])(transform)/g,"$1"+WEBKIT+"$2")+r;case 6187:return replace(replace(replace(r,/(zoom-|grab)/,WEBKIT+"$1"),/(image-set)/,WEBKIT+"$1"),r,"")+r;case 5495:case 3959:return replace(r,/(image-set\([^]*)/,WEBKIT+"$1$`$1");case 4968:return replace(replace(r,/(.+:)(flex-)?(.*)/,WEBKIT+"box-pack:$3"+MS+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+WEBKIT+r+r;case 4095:case 3583:case 4068:case 2532:return replace(r,/(.+)-inline(.+)/,WEBKIT+"$1$2")+r;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(strlen(r)-1-a>6)switch(charat(r,a+1)){case 109:if(charat(r,a+4)!==45)break;case 102:return replace(r,/(.+:)(.+)-([^]+)/,"$1"+WEBKIT+"$2-$3$1"+MOZ+(charat(r,a+3)==108?"$3":"$2-$3"))+r;case 115:return~indexof(r,"stretch")?prefix(replace(r,"stretch","fill-available"),a)+r:r}break;case 4949:if(charat(r,a+1)!==115)break;case 6444:switch(charat(r,strlen(r)-3-(~indexof(r,"!important")&&10))){case 107:return replace(r,":",":"+WEBKIT)+r;case 101:return replace(r,/(.+:)([^;!]+)(;|!.+)?/,"$1"+WEBKIT+(charat(r,14)===45?"inline-":"")+"box$3$1"+WEBKIT+"$2$3$1"+MS+"$2box$3")+r}break;case 5936:switch(charat(r,a+11)){case 114:return WEBKIT+r+MS+replace(r,/[svh]\w+-[tblr]{2}/,"tb")+r;case 108:return WEBKIT+r+MS+replace(r,/[svh]\w+-[tblr]{2}/,"tb-rl")+r;case 45:return WEBKIT+r+MS+replace(r,/[svh]\w+-[tblr]{2}/,"lr")+r}return WEBKIT+r+MS+r+r}return r}function serialize(r,a){for(var t="",e=sizeof(r),o=0;o<e;o++)t+=a(r[o],o,r,a)||"";return t}function stringify(r,a,t,e){switch(r.type){case IMPORT:case DECLARATION:return r.return=r.return||r.value;case COMMENT:return"";case RULESET:r.value=r.props.join(",")}return strlen(t=serialize(r.children,e))?r.return=r.value+"{"+t+"}":""}function middleware(r){var a=sizeof(r);return function(t,e,o,s){for(var l="",c=0;c<a;c++)l+=r[c](t,e,o,s)||"";return l}}function rulesheet(r){return function(a){a.root||(a=a.return)&&r(a)}}function prefixer(r,a,t,e){if(!r.return)switch(r.type){case DECLARATION:r.return=prefix(r.value,r.length);break;case KEYFRAMES:return serialize([copy(replace(r.value,"@","@"+WEBKIT),r,"")],e);case RULESET:if(r.length)return combine(r.props,function(o){switch(match(o,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return serialize([copy(replace(o,/:(read-\w+)/,":"+MOZ+"$1"),r,"")],e);case"::placeholder":return serialize([copy(replace(o,/:(plac\w+)/,":"+WEBKIT+"input-$1"),r,""),copy(replace(o,/:(plac\w+)/,":"+MOZ+"$1"),r,""),copy(replace(o,/:(plac\w+)/,MS+"input-$1"),r,"")],e)}return""})}}var toRules=function(a,t){var e=-1,o=44;do switch(token(o)){case 0:o===38&&peek()===12&&(t[e]=1),a[e]+=identifier(position$1-1);break;case 2:a[e]+=delimit(o);break;case 4:if(o===44){a[++e]=peek()===58?"&\f":"",t[e]=a[e].length;break}default:a[e]+=from(o)}while(o=next());return a},getRules=function(a,t){return dealloc(toRules(alloc(a),t))},fixedElements=new WeakMap,compat=function(a){if(!(a.type!=="rule"||!a.parent||!a.length)){for(var t=a.value,e=a.parent,o=a.column===e.column&&a.line===e.line;e.type!=="rule";)if(e=e.parent,!e)return;if(!(a.props.length===1&&t.charCodeAt(0)!==58&&!fixedElements.get(e))&&!o){fixedElements.set(a,!0);for(var s=[],l=getRules(t,s),c=e.props,d=0,P=0;d<l.length;d++)for(var x=0;x<c.length;x++,P++)a.props[P]=s[d]?l[d].replace(/&\f/g,c[x]):c[x]+" "+l[d]}}},removeLabel=function(a){if(a.type==="decl"){var t=a.value;t.charCodeAt(0)===108&&t.charCodeAt(2)===98&&(a.return="",a.value="")}},defaultStylisPlugins=[prefixer],createCache=function(a){var t=a.key;if(t==="css"){var e=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(e,function(y){var G=y.getAttribute("data-emotion");G.indexOf(" ")!==-1&&(document.head.appendChild(y),y.setAttribute("data-s",""))})}var o=a.stylisPlugins||defaultStylisPlugins,s={},l,c=[];l=a.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),function(y){for(var G=y.getAttribute("data-emotion").split(" "),ue=1;ue<G.length;ue++)s[G[ue]]=!0;c.push(y)});var d,P=[compat,removeLabel];{var x,$=[stringify,rulesheet(function(y){x.insert(y)})],j=middleware(P.concat(o,$)),O=function(G){return serialize(compile(G),j)};d=function(G,ue,K,U){x=K,O(G?G+"{"+ue.styles+"}":ue.styles),U&&(A.inserted[ue.name]=!0)}}var A={key:t,sheet:new StyleSheet({key:t,container:l,nonce:a.nonce,speedy:a.speedy,prepend:a.prepend}),nonce:a.nonce,inserted:s,registered:{},insert:d};return A.sheet.hydrate(c),A},isBrowser=!0;function getRegisteredStyles(r,a,t){var e="";return t.split(" ").forEach(function(o){r[o]!==void 0?a.push(r[o]+";"):e+=o+" "}),e}var insertStyles=function(a,t,e){var o=a.key+"-"+t.name;if((e===!1||isBrowser===!1)&&a.registered[o]===void 0&&(a.registered[o]=t.styles),a.inserted[t.name]===void 0){var s=t;do a.insert(t===s?"."+o:"",s,a.sheet,!0),s=s.next;while(s!==void 0)}};function murmur2(r){for(var a=0,t,e=0,o=r.length;o>=4;++e,o-=4)t=r.charCodeAt(e)&255|(r.charCodeAt(++e)&255)<<8|(r.charCodeAt(++e)&255)<<16|(r.charCodeAt(++e)&255)<<24,t=(t&65535)*1540483477+((t>>>16)*59797<<16),t^=t>>>24,a=(t&65535)*1540483477+((t>>>16)*59797<<16)^(a&65535)*1540483477+((a>>>16)*59797<<16);switch(o){case 3:a^=(r.charCodeAt(e+2)&255)<<16;case 2:a^=(r.charCodeAt(e+1)&255)<<8;case 1:a^=r.charCodeAt(e)&255,a=(a&65535)*1540483477+((a>>>16)*59797<<16)}return a^=a>>>13,a=(a&65535)*1540483477+((a>>>16)*59797<<16),((a^a>>>15)>>>0).toString(36)}var hyphenateRegex=/[A-Z]|^ms/g,animationRegex=/_EMO_([^_]+?)_([^]*?)_EMO_/g,isCustomProperty=function(a){return a.charCodeAt(1)===45},isProcessableValue=function(a){return a!=null&&typeof a!="boolean"},processStyleName=memoize$1(function(r){return isCustomProperty(r)?r:r.replace(hyphenateRegex,"-$&").toLowerCase()}),processStyleValue=function(a,t){switch(a){case"animation":case"animationName":if(typeof t=="string")return t.replace(animationRegex,function(e,o,s){return cursor={name:o,styles:s,next:cursor},o})}return unitlessKeys[a]!==1&&!isCustomProperty(a)&&typeof t=="number"&&t!==0?t+"px":t};function handleInterpolation(r,a,t){if(t==null)return"";if(t.__emotion_styles!==void 0)return t;switch(typeof t){case"boolean":return"";case"object":{if(t.anim===1)return cursor={name:t.name,styles:t.styles,next:cursor},t.name;if(t.styles!==void 0){var e=t.next;if(e!==void 0)for(;e!==void 0;)cursor={name:e.name,styles:e.styles,next:cursor},e=e.next;var o=t.styles+";";return o}return createStringFromObject(r,a,t)}case"function":{if(r!==void 0){var s=cursor,l=t(r);return cursor=s,handleInterpolation(r,a,l)}break}}if(a==null)return t;var c=a[t];return c!==void 0?c:t}function createStringFromObject(r,a,t){var e="";if(Array.isArray(t))for(var o=0;o<t.length;o++)e+=handleInterpolation(r,a,t[o])+";";else for(var s in t){var l=t[s];if(typeof l!="object")a!=null&&a[l]!==void 0?e+=s+"{"+a[l]+"}":isProcessableValue(l)&&(e+=processStyleName(s)+":"+processStyleValue(s,l)+";");else if(Array.isArray(l)&&typeof l[0]=="string"&&(a==null||a[l[0]]===void 0))for(var c=0;c<l.length;c++)isProcessableValue(l[c])&&(e+=processStyleName(s)+":"+processStyleValue(s,l[c])+";");else{var d=handleInterpolation(r,a,l);switch(s){case"animation":case"animationName":{e+=processStyleName(s)+":"+d+";";break}default:e+=s+"{"+d+"}"}}}return e}var labelPattern=/label:\s*([^\s;\n{]+)\s*(;|$)/g,cursor,serializeStyles=function(a,t,e){if(a.length===1&&typeof a[0]=="object"&&a[0]!==null&&a[0].styles!==void 0)return a[0];var o=!0,s="";cursor=void 0;var l=a[0];l==null||l.raw===void 0?(o=!1,s+=handleInterpolation(e,t,l)):s+=l[0];for(var c=1;c<a.length;c++)s+=handleInterpolation(e,t,a[c]),o&&(s+=l[c]);labelPattern.lastIndex=0;for(var d="",P;(P=labelPattern.exec(s))!==null;)d+="-"+P[1];var x=murmur2(s)+d;return{name:x,styles:s,next:cursor}},EmotionCacheContext=react.exports.createContext(typeof HTMLElement!="undefined"?createCache({key:"css"}):null);EmotionCacheContext.Provider;var withEmotionCache=function(a){return react.exports.forwardRef(function(t,e){var o=react.exports.useContext(EmotionCacheContext);return a(t,o,e)})},ThemeContext$2=react.exports.createContext({});function css(){for(var r=arguments.length,a=new Array(r),t=0;t<r;t++)a[t]=arguments[t];return serializeStyles(a)}var keyframes=function(){var a=css.apply(void 0,arguments),t="animation-"+a.name;return{name:t,styles:"@keyframes "+t+"{"+a.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},testOmitPropsOnStringTag=isPropValid,testOmitPropsOnComponent=function(a){return a!=="theme"},getDefaultShouldForwardProp=function(a){return typeof a=="string"&&a.charCodeAt(0)>96?testOmitPropsOnStringTag:testOmitPropsOnComponent},composeShouldForwardProps=function(a,t,e){var o;if(t){var s=t.shouldForwardProp;o=a.__emotion_forwardProp&&s?function(l){return a.__emotion_forwardProp(l)&&s(l)}:s}return typeof o!="function"&&e&&(o=a.__emotion_forwardProp),o},createStyled$1=function r(a,t){var e=a.__emotion_real===a,o=e&&a.__emotion_base||a,s,l;t!==void 0&&(s=t.label,l=t.target);var c=composeShouldForwardProps(a,t,e),d=c||getDefaultShouldForwardProp(o),P=!d("as");return function(){var x=arguments,$=e&&a.__emotion_styles!==void 0?a.__emotion_styles.slice(0):[];if(s!==void 0&&$.push("label:"+s+";"),x[0]==null||x[0].raw===void 0)$.push.apply($,x);else{$.push(x[0][0]);for(var j=x.length,O=1;O<j;O++)$.push(x[O],x[0][O])}var A=withEmotionCache(function(y,G,ue){var K=P&&y.as||o,U="",I=[],B=y;if(y.theme==null){B={};for(var C in y)B[C]=y[C];B.theme=react.exports.useContext(ThemeContext$2)}typeof y.className=="string"?U=getRegisteredStyles(G.registered,I,y.className):y.className!=null&&(U=y.className+" ");var W=serializeStyles($.concat(I),G.registered,B);insertStyles(G,W,typeof K=="string"),U+=G.key+"-"+W.name,l!==void 0&&(U+=" "+l);var b=P&&c===void 0?getDefaultShouldForwardProp(K):d,S={};for(var w in y)P&&w==="as"||b(w)&&(S[w]=y[w]);S.className=U,S.ref=ue;var k=react.exports.createElement(K,S);return k});return A.displayName=s!==void 0?s:"Styled("+(typeof o=="string"?o:o.displayName||o.name||"Component")+")",A.defaultProps=a.defaultProps,A.__emotion_real=A,A.__emotion_base=o,A.__emotion_styles=$,A.__emotion_forwardProp=c,Object.defineProperty(A,"toString",{value:function(){return"."+l}}),A.withComponent=function(y,G){return r(y,_extends({},t,G,{shouldForwardProp:composeShouldForwardProps(A,G,!0)})).apply(void 0,$)},A}},tags=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],newStyled=createStyled$1.bind();tags.forEach(function(r){newStyled[r]=newStyled(r)});var emStyled=newStyled;/** @license MUI v5.0.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function styled$2(r,a){return emStyled(r,a)}function merge(r,a){return a?deepmerge(r,a,{clone:!1}):r}const values={xs:0,sm:600,md:900,lg:1200,xl:1536},defaultBreakpoints={keys:["xs","sm","md","lg","xl"],up:r=>`@media (min-width:${values[r]}px)`};function handleBreakpoints(r,a,t){const e=r.theme||{};if(Array.isArray(a)){const s=e.breakpoints||defaultBreakpoints;return a.reduce((l,c,d)=>(l[s.up(s.keys[d])]=t(a[d]),l),{})}if(typeof a=="object"){const s=e.breakpoints||defaultBreakpoints;return Object.keys(a).reduce((l,c)=>{if(Object.keys(s.values||values).indexOf(c)!==-1){const d=s.up(c);l[d]=t(a[c],c)}else{const d=c;l[d]=a[d]}return l},{})}return t(a)}function createEmptyBreakpointObject(r={}){var a;return(r==null||(a=r.keys)==null?void 0:a.reduce((e,o)=>{const s=r.up(o);return e[s]={},e},{}))||{}}function removeUnusedBreakpoints(r,a){return r.reduce((t,e)=>{const o=t[e];return Object.keys(o).length===0&&delete t[e],t},a)}function resolveBreakpointValues({values:r,base:a}){const t=Object.keys(a);if(t.length===0)return r;let e;return t.reduce((o,s)=>(typeof r=="object"?o[s]=r[s]!=null?r[s]:r[e]:o[s]=r,e=s,o),{})}function getPath(r,a){return!a||typeof a!="string"?null:a.split(".").reduce((t,e)=>t&&t[e]?t[e]:null,r)}function getValue$1(r,a,t,e=t){let o;return typeof r=="function"?o=r(t):Array.isArray(r)?o=r[t]||e:o=getPath(r,t)||e,a&&(o=a(o)),o}function style$2(r){const{prop:a,cssProperty:t=r.prop,themeKey:e,transform:o}=r,s=l=>{if(l[a]==null)return null;const c=l[a],d=l.theme,P=getPath(d,e)||{};return handleBreakpoints(l,c,$=>{let j=getValue$1(P,o,$);return $===j&&typeof $=="string"&&(j=getValue$1(P,o,`${a}${$==="default"?"":capitalize($)}`,$)),t===!1?j:{[t]:j}})};return s.propTypes={},s.filterProps=[a],s}function compose(...r){const a=r.reduce((e,o)=>(o.filterProps.forEach(s=>{e[s]=o}),e),{}),t=e=>Object.keys(e).reduce((o,s)=>a[s]?merge(o,a[s](e)):o,{});return t.propTypes={},t.filterProps=r.reduce((e,o)=>e.concat(o.filterProps),[]),t}function memoize(r){const a={};return t=>(a[t]===void 0&&(a[t]=r(t)),a[t])}const properties={m:"margin",p:"padding"},directions={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},aliases={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},getCssProperties=memoize(r=>{if(r.length>2)if(aliases[r])r=aliases[r];else return[r];const[a,t]=r.split(""),e=properties[a],o=directions[t]||"";return Array.isArray(o)?o.map(s=>e+s):[e+o]}),marginKeys=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],paddingKeys=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],spacingKeys=[...marginKeys,...paddingKeys];function createUnaryUnit(r,a,t,e){const o=getPath(r,a)||t;return typeof o=="number"?s=>typeof s=="string"?s:o*s:Array.isArray(o)?s=>typeof s=="string"?s:o[s]:typeof o=="function"?o:()=>{}}function createUnarySpacing(r){return createUnaryUnit(r,"spacing",8)}function getValue(r,a){if(typeof a=="string"||a==null)return a;const t=Math.abs(a),e=r(t);return a>=0?e:typeof e=="number"?-e:`-${e}`}function getStyleFromPropValue(r,a){return t=>r.reduce((e,o)=>(e[o]=getValue(a,t),e),{})}function resolveCssProperty(r,a,t,e){if(a.indexOf(t)===-1)return null;const o=getCssProperties(t),s=getStyleFromPropValue(o,e),l=r[t];return handleBreakpoints(r,l,s)}function style$1(r,a){const t=createUnarySpacing(r.theme);return Object.keys(r).map(e=>resolveCssProperty(r,a,e,t)).reduce(merge,{})}function spacing(r){return style$1(r,spacingKeys)}spacing.propTypes={};spacing.filterProps=spacingKeys;function getBorder(r){return typeof r!="number"?r:`${r}px solid`}const border=style$2({prop:"border",themeKey:"borders",transform:getBorder}),borderTop=style$2({prop:"borderTop",themeKey:"borders",transform:getBorder}),borderRight=style$2({prop:"borderRight",themeKey:"borders",transform:getBorder}),borderBottom=style$2({prop:"borderBottom",themeKey:"borders",transform:getBorder}),borderLeft=style$2({prop:"borderLeft",themeKey:"borders",transform:getBorder}),borderColor=style$2({prop:"borderColor",themeKey:"palette"}),borderTopColor=style$2({prop:"borderTopColor",themeKey:"palette"}),borderRightColor=style$2({prop:"borderRightColor",themeKey:"palette"}),borderBottomColor=style$2({prop:"borderBottomColor",themeKey:"palette"}),borderLeftColor=style$2({prop:"borderLeftColor",themeKey:"palette"}),borderRadius=r=>{if(r.borderRadius!==void 0&&r.borderRadius!==null){const a=createUnaryUnit(r.theme,"shape.borderRadius",4),t=e=>({borderRadius:getValue(a,e)});return handleBreakpoints(r,r.borderRadius,t)}return null};borderRadius.propTypes={};borderRadius.filterProps=["borderRadius"];const borders=compose(border,borderTop,borderRight,borderBottom,borderLeft,borderColor,borderTopColor,borderRightColor,borderBottomColor,borderLeftColor,borderRadius);var borders$1=borders;const displayPrint=style$2({prop:"displayPrint",cssProperty:!1,transform:r=>({"@media print":{display:r}})}),displayRaw=style$2({prop:"display"}),overflow=style$2({prop:"overflow"}),textOverflow=style$2({prop:"textOverflow"}),visibility=style$2({prop:"visibility"}),whiteSpace=style$2({prop:"whiteSpace"});var display=compose(displayPrint,displayRaw,overflow,textOverflow,visibility,whiteSpace);const flexBasis=style$2({prop:"flexBasis"}),flexDirection=style$2({prop:"flexDirection"}),flexWrap=style$2({prop:"flexWrap"}),justifyContent=style$2({prop:"justifyContent"}),alignItems=style$2({prop:"alignItems"}),alignContent=style$2({prop:"alignContent"}),order=style$2({prop:"order"}),flex=style$2({prop:"flex"}),flexGrow=style$2({prop:"flexGrow"}),flexShrink=style$2({prop:"flexShrink"}),alignSelf=style$2({prop:"alignSelf"}),justifyItems=style$2({prop:"justifyItems"}),justifySelf=style$2({prop:"justifySelf"}),flexbox=compose(flexBasis,flexDirection,flexWrap,justifyContent,alignItems,alignContent,order,flex,flexGrow,flexShrink,alignSelf,justifyItems,justifySelf);var flexbox$1=flexbox;const gap=r=>{if(r.gap!==void 0&&r.gap!==null){const a=createUnaryUnit(r.theme,"spacing",8),t=e=>({gap:getValue(a,e)});return handleBreakpoints(r,r.gap,t)}return null};gap.propTypes={};gap.filterProps=["gap"];const columnGap=r=>{if(r.columnGap!==void 0&&r.columnGap!==null){const a=createUnaryUnit(r.theme,"spacing",8),t=e=>({columnGap:getValue(a,e)});return handleBreakpoints(r,r.columnGap,t)}return null};columnGap.propTypes={};columnGap.filterProps=["columnGap"];const rowGap=r=>{if(r.rowGap!==void 0&&r.rowGap!==null){const a=createUnaryUnit(r.theme,"spacing",8),t=e=>({rowGap:getValue(a,e)});return handleBreakpoints(r,r.rowGap,t)}return null};rowGap.propTypes={};rowGap.filterProps=["rowGap"];const gridColumn=style$2({prop:"gridColumn"}),gridRow=style$2({prop:"gridRow"}),gridAutoFlow=style$2({prop:"gridAutoFlow"}),gridAutoColumns=style$2({prop:"gridAutoColumns"}),gridAutoRows=style$2({prop:"gridAutoRows"}),gridTemplateColumns=style$2({prop:"gridTemplateColumns"}),gridTemplateRows=style$2({prop:"gridTemplateRows"}),gridTemplateAreas=style$2({prop:"gridTemplateAreas"}),gridArea=style$2({prop:"gridArea"}),grid=compose(gap,columnGap,rowGap,gridColumn,gridRow,gridAutoFlow,gridAutoColumns,gridAutoRows,gridTemplateColumns,gridTemplateRows,gridTemplateAreas,gridArea);var grid$1=grid;const color=style$2({prop:"color",themeKey:"palette"}),bgcolor=style$2({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),backgroundColor=style$2({prop:"backgroundColor",themeKey:"palette"}),palette=compose(color,bgcolor,backgroundColor);var palette$1=palette;const position=style$2({prop:"position"}),zIndex$2=style$2({prop:"zIndex",themeKey:"zIndex"}),top=style$2({prop:"top"}),right=style$2({prop:"right"}),bottom=style$2({prop:"bottom"}),left=style$2({prop:"left"});var positions=compose(position,zIndex$2,top,right,bottom,left);const boxShadow=style$2({prop:"boxShadow",themeKey:"shadows"});var shadows$2=boxShadow;function transform(r){return r<=1&&r!==0?`${r*100}%`:r}const width=style$2({prop:"width",transform}),maxWidth=r=>{if(r.maxWidth!==void 0&&r.maxWidth!==null){const a=t=>{var e,o,s;return{maxWidth:((e=r.theme)==null||(o=e.breakpoints)==null||(s=o.values)==null?void 0:s[t])||values[t]||transform(t)}};return handleBreakpoints(r,r.maxWidth,a)}return null};maxWidth.filterProps=["maxWidth"];const minWidth=style$2({prop:"minWidth",transform}),height=style$2({prop:"height",transform}),maxHeight=style$2({prop:"maxHeight",transform}),minHeight=style$2({prop:"minHeight",transform});style$2({prop:"size",cssProperty:"width",transform});style$2({prop:"size",cssProperty:"height",transform});const boxSizing=style$2({prop:"boxSizing"}),sizing=compose(width,maxWidth,minWidth,height,maxHeight,minHeight,boxSizing);var sizing$1=sizing;const fontFamily=style$2({prop:"fontFamily",themeKey:"typography"}),fontSize=style$2({prop:"fontSize",themeKey:"typography"}),fontStyle=style$2({prop:"fontStyle",themeKey:"typography"}),fontWeight=style$2({prop:"fontWeight",themeKey:"typography"}),letterSpacing=style$2({prop:"letterSpacing"}),lineHeight=style$2({prop:"lineHeight"}),textAlign=style$2({prop:"textAlign"}),typographyVariant=style$2({prop:"typography",cssProperty:!1,themeKey:"typography"}),typography=compose(typographyVariant,fontFamily,fontSize,fontStyle,fontWeight,letterSpacing,lineHeight,textAlign);var typography$1=typography;const filterPropsMapping={borders:borders$1.filterProps,display:display.filterProps,flexbox:flexbox$1.filterProps,grid:grid$1.filterProps,positions:positions.filterProps,palette:palette$1.filterProps,shadows:shadows$2.filterProps,sizing:sizing$1.filterProps,spacing:spacing.filterProps,typography:typography$1.filterProps},styleFunctionMapping={borders:borders$1,display,flexbox:flexbox$1,grid:grid$1,positions,palette:palette$1,shadows:shadows$2,sizing:sizing$1,spacing,typography:typography$1},propToStyleFunction=Object.keys(filterPropsMapping).reduce((r,a)=>(filterPropsMapping[a].forEach(t=>{r[t]=styleFunctionMapping[a]}),r),{});function getThemeValue(r,a,t){const e={[r]:a,theme:t},o=propToStyleFunction[r];return o?o(e):{[r]:a}}function objectsHaveSameKeys(...r){const a=r.reduce((e,o)=>e.concat(Object.keys(o)),[]),t=new Set(a);return r.every(e=>t.size===Object.keys(e).length)}function callIfFn(r,a){return typeof r=="function"?r(a):r}function styleFunctionSx(r){const{sx:a,theme:t={}}=r||{};if(!a)return null;if(typeof a=="function")return a(t);if(typeof a!="object")return a;const e=createEmptyBreakpointObject(t.breakpoints),o=Object.keys(e);let s=e;return Object.keys(a).forEach(l=>{const c=callIfFn(a[l],t);if(typeof c=="object")if(propToStyleFunction[l])s=merge(s,getThemeValue(l,c,t));else{const d=handleBreakpoints({theme:t},c,P=>({[l]:P}));objectsHaveSameKeys(d,c)?s[l]=styleFunctionSx({sx:c,theme:t}):s=merge(s,d)}else s=merge(s,getThemeValue(l,c,t))}),removeUnusedBreakpoints(o,s)}styleFunctionSx.filterProps=["sx"];const _excluded$g=["sx"],splitProps=r=>{const a={systemProps:{},otherProps:{}};return Object.keys(r).forEach(t=>{propToStyleFunction[t]?a.systemProps[t]=r[t]:a.otherProps[t]=r[t]}),a};function extendSxProp(r){const{sx:a}=r,t=_objectWithoutPropertiesLoose(r,_excluded$g),{systemProps:e,otherProps:o}=splitProps(t);return _extends({},o,{sx:_extends({},e,a)})}const _excluded$f=["values","unit","step"];function createBreakpoints(r){const{values:a={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:t="px",step:e=5}=r,o=_objectWithoutPropertiesLoose(r,_excluded$f),s=Object.keys(a);function l(x){return`@media (min-width:${typeof a[x]=="number"?a[x]:x}${t})`}function c(x){return`@media (max-width:${(typeof a[x]=="number"?a[x]:x)-e/100}${t})`}function d(x,$){const j=s.indexOf($);return`@media (min-width:${typeof a[x]=="number"?a[x]:x}${t}) and (max-width:${(j!==-1&&typeof a[s[j]]=="number"?a[s[j]]:$)-e/100}${t})`}function P(x){return s.indexOf(x)+1<s.length?d(x,s[s.indexOf(x)+1]):l(x)}return _extends({keys:s,values:a,up:l,down:c,between:d,only:P,unit:t},o)}const shape={borderRadius:4};var shape$1=shape;function createSpacing(r=8){if(r.mui)return r;const a=createUnarySpacing({spacing:r}),t=(...e)=>(e.length===0?[1]:e).map(s=>{const l=a(s);return typeof l=="number"?`${l}px`:l}).join(" ");return t.mui=!0,t}const _excluded$e=["breakpoints","palette","spacing","shape"];function createTheme$1(r={},...a){const{breakpoints:t={},palette:e={},spacing:o,shape:s={}}=r,l=_objectWithoutPropertiesLoose(r,_excluded$e),c=createBreakpoints(t),d=createSpacing(o);let P=deepmerge({breakpoints:c,direction:"ltr",components:{},palette:_extends({mode:"light"},e),spacing:d,shape:_extends({},shape$1,s)},l);return P=a.reduce((x,$)=>deepmerge(x,$),P),P}const ThemeContext=react.exports.createContext(null);var ThemeContext$1=ThemeContext;function useTheme$3(){return react.exports.useContext(ThemeContext$1)}function isObjectEmpty(r){return Object.keys(r).length===0}function useTheme$2(r=null){const a=useTheme$3();return!a||isObjectEmpty(a)?r:a}const systemDefaultTheme$1=createTheme$1();function useTheme$1(r=systemDefaultTheme$1){return useTheme$2(r)}const _excluded$d=["variant"];function isEmpty$1(r){return r.length===0}function propsToClassKey(r){const{variant:a}=r,t=_objectWithoutPropertiesLoose(r,_excluded$d);let e=a||"";return Object.keys(t).sort().forEach(o=>{o==="color"?e+=isEmpty$1(e)?r[o]:capitalize(r[o]):e+=`${isEmpty$1(e)?o:capitalize(o)}${capitalize(r[o].toString())}`}),e}const _excluded$c=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],_excluded2=["theme"],_excluded3=["theme"];function isEmpty(r){return Object.keys(r).length===0}const getStyleOverrides=(r,a)=>a.components&&a.components[r]&&a.components[r].styleOverrides?a.components[r].styleOverrides:null,getVariantStyles=(r,a)=>{let t=[];a&&a.components&&a.components[r]&&a.components[r].variants&&(t=a.components[r].variants);const e={};return t.forEach(o=>{const s=propsToClassKey(o.props);e[s]=o.style}),e},variantsResolver=(r,a,t,e)=>{var o,s;const{ownerState:l={}}=r,c=[],d=t==null||(o=t.components)==null||(s=o[e])==null?void 0:s.variants;return d&&d.forEach(P=>{let x=!0;Object.keys(P.props).forEach($=>{l[$]!==P.props[$]&&r[$]!==P.props[$]&&(x=!1)}),x&&c.push(a[propsToClassKey(P.props)])}),c};function shouldForwardProp(r){return r!=="ownerState"&&r!=="theme"&&r!=="sx"&&r!=="as"}const systemDefaultTheme=createTheme$1();function createStyled(r={}){const{defaultTheme:a=systemDefaultTheme,rootShouldForwardProp:t=shouldForwardProp,slotShouldForwardProp:e=shouldForwardProp}=r;return(o,s={})=>{const{name:l,slot:c,skipVariantsResolver:d,skipSx:P,overridesResolver:x}=s,$=_objectWithoutPropertiesLoose(s,_excluded$c),j=d!==void 0?d:c&&c!=="Root"||!1,O=P||!1;let A,y=shouldForwardProp;c==="Root"?y=t:c&&(y=e);const G=styled$2(o,_extends({shouldForwardProp:y,label:A},$));return(K,...U)=>{const I=U?U.map(b=>typeof b=="function"?S=>{let{theme:w}=S,k=_objectWithoutPropertiesLoose(S,_excluded2);return b(_extends({theme:isEmpty(w)?a:w},k))}:b):[];let B=K;l&&x&&I.push(b=>{const S=isEmpty(b.theme)?a:b.theme,w=getStyleOverrides(l,S);return w?x(b,w):null}),l&&!j&&I.push(b=>{const S=isEmpty(b.theme)?a:b.theme;return variantsResolver(b,getVariantStyles(l,S),S,l)}),O||I.push(b=>{const S=isEmpty(b.theme)?a:b.theme;return styleFunctionSx(_extends({},b,{theme:S}))});const C=I.length-U.length;if(Array.isArray(K)&&C>0){const b=new Array(C).fill("");B=[...K,...b],B.raw=[...K.raw,...b]}else typeof K=="function"&&(B=b=>{let{theme:S}=b,w=_objectWithoutPropertiesLoose(b,_excluded3);return K(_extends({theme:isEmpty(S)?a:S},w))});return G(B,...I)}}}function getThemeProps(r){const{theme:a,name:t,props:e}=r;if(!a||!a.components||!a.components[t]||!a.components[t].defaultProps)return e;const o=_extends({},e),s=a.components[t].defaultProps;let l;for(l in s)o[l]===void 0&&(o[l]=s[l]);return o}function useThemeProps$1({props:r,name:a,defaultTheme:t}){const e=useTheme$1(t);return getThemeProps({theme:e,name:a,props:r})}function clamp(r,a=0,t=1){return Math.min(Math.max(a,r),t)}function hexToRgb(r){r=r.substr(1);const a=new RegExp(`.{1,${r.length>=6?2:1}}`,"g");let t=r.match(a);return t&&t[0].length===1&&(t=t.map(e=>e+e)),t?`rgb${t.length===4?"a":""}(${t.map((e,o)=>o<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3).join(", ")})`:""}function decomposeColor(r){if(r.type)return r;if(r.charAt(0)==="#")return decomposeColor(hexToRgb(r));const a=r.indexOf("("),t=r.substring(0,a);if(["rgb","rgba","hsl","hsla","color"].indexOf(t)===-1)throw new Error(formatMuiErrorMessage(9,r));let e=r.substring(a+1,r.length-1),o;if(t==="color"){if(e=e.split(" "),o=e.shift(),e.length===4&&e[3].charAt(0)==="/"&&(e[3]=e[3].substr(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o)===-1)throw new Error(formatMuiErrorMessage(10,o))}else e=e.split(",");return e=e.map(s=>parseFloat(s)),{type:t,values:e,colorSpace:o}}function recomposeColor(r){const{type:a,colorSpace:t}=r;let{values:e}=r;return a.indexOf("rgb")!==-1?e=e.map((o,s)=>s<3?parseInt(o,10):o):a.indexOf("hsl")!==-1&&(e[1]=`${e[1]}%`,e[2]=`${e[2]}%`),a.indexOf("color")!==-1?e=`${t} ${e.join(" ")}`:e=`${e.join(", ")}`,`${a}(${e})`}function hslToRgb(r){r=decomposeColor(r);const{values:a}=r,t=a[0],e=a[1]/100,o=a[2]/100,s=e*Math.min(o,1-o),l=(P,x=(P+t/30)%12)=>o-s*Math.max(Math.min(x-3,9-x,1),-1);let c="rgb";const d=[Math.round(l(0)*255),Math.round(l(8)*255),Math.round(l(4)*255)];return r.type==="hsla"&&(c+="a",d.push(a[3])),recomposeColor({type:c,values:d})}function getLuminance(r){r=decomposeColor(r);let a=r.type==="hsl"?decomposeColor(hslToRgb(r)).values:r.values;return a=a.map(t=>(r.type!=="color"&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4)),Number((.2126*a[0]+.7152*a[1]+.0722*a[2]).toFixed(3))}function getContrastRatio(r,a){const t=getLuminance(r),e=getLuminance(a);return(Math.max(t,e)+.05)/(Math.min(t,e)+.05)}function alpha(r,a){return r=decomposeColor(r),a=clamp(a),(r.type==="rgb"||r.type==="hsl")&&(r.type+="a"),r.type==="color"?r.values[3]=`/${a}`:r.values[3]=a,recomposeColor(r)}function darken(r,a){if(r=decomposeColor(r),a=clamp(a),r.type.indexOf("hsl")!==-1)r.values[2]*=1-a;else if(r.type.indexOf("rgb")!==-1||r.type.indexOf("color")!==-1)for(let t=0;t<3;t+=1)r.values[t]*=1-a;return recomposeColor(r)}function lighten(r,a){if(r=decomposeColor(r),a=clamp(a),r.type.indexOf("hsl")!==-1)r.values[2]+=(100-r.values[2])*a;else if(r.type.indexOf("rgb")!==-1)for(let t=0;t<3;t+=1)r.values[t]+=(255-r.values[t])*a;else if(r.type.indexOf("color")!==-1)for(let t=0;t<3;t+=1)r.values[t]+=(1-r.values[t])*a;return recomposeColor(r)}function createMixins(r,a,t){return _extends({toolbar:{minHeight:56,[`${r.up("xs")} and (orientation: landscape)`]:{minHeight:48},[r.up("sm")]:{minHeight:64}}},t)}const common={black:"#000",white:"#fff"};var common$1=common;const grey={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"};var grey$1=grey;const purple={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"};var purple$1=purple;const red={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};var red$1=red;const orange={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};var orange$1=orange;const blue={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};var blue$1=blue;const lightBlue={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"};var lightBlue$1=lightBlue;const green={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};var green$1=green;const _excluded$b=["mode","contrastThreshold","tonalOffset"],light={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:common$1.white,default:common$1.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},dark={text:{primary:common$1.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:common$1.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function addLightOrDark(r,a,t,e){const o=e.light||e,s=e.dark||e*1.5;r[a]||(r.hasOwnProperty(t)?r[a]=r[t]:a==="light"?r.light=lighten(r.main,o):a==="dark"&&(r.dark=darken(r.main,s)))}function getDefaultPrimary(r="light"){return r==="dark"?{main:blue$1[200],light:blue$1[50],dark:blue$1[400]}:{main:blue$1[700],light:blue$1[400],dark:blue$1[800]}}function getDefaultSecondary(r="light"){return r==="dark"?{main:purple$1[200],light:purple$1[50],dark:purple$1[400]}:{main:purple$1[500],light:purple$1[300],dark:purple$1[700]}}function getDefaultError(r="light"){return r==="dark"?{main:red$1[500],light:red$1[300],dark:red$1[700]}:{main:red$1[700],light:red$1[400],dark:red$1[800]}}function getDefaultInfo(r="light"){return r==="dark"?{main:lightBlue$1[400],light:lightBlue$1[300],dark:lightBlue$1[700]}:{main:lightBlue$1[700],light:lightBlue$1[500],dark:lightBlue$1[900]}}function getDefaultSuccess(r="light"){return r==="dark"?{main:green$1[400],light:green$1[300],dark:green$1[700]}:{main:green$1[800],light:green$1[500],dark:green$1[900]}}function getDefaultWarning(r="light"){return r==="dark"?{main:orange$1[400],light:orange$1[300],dark:orange$1[700]}:{main:"#ED6C02",light:orange$1[500],dark:orange$1[900]}}function createPalette(r){const{mode:a="light",contrastThreshold:t=3,tonalOffset:e=.2}=r,o=_objectWithoutPropertiesLoose(r,_excluded$b),s=r.primary||getDefaultPrimary(a),l=r.secondary||getDefaultSecondary(a),c=r.error||getDefaultError(a),d=r.info||getDefaultInfo(a),P=r.success||getDefaultSuccess(a),x=r.warning||getDefaultWarning(a);function $(y){return getContrastRatio(y,dark.text.primary)>=t?dark.text.primary:light.text.primary}const j=({color:y,name:G,mainShade:ue=500,lightShade:K=300,darkShade:U=700})=>{if(y=_extends({},y),!y.main&&y[ue]&&(y.main=y[ue]),!y.hasOwnProperty("main"))throw new Error(formatMuiErrorMessage(11,G?` (${G})`:"",ue));if(typeof y.main!="string")throw new Error(formatMuiErrorMessage(12,G?` (${G})`:"",JSON.stringify(y.main)));return addLightOrDark(y,"light",K,e),addLightOrDark(y,"dark",U,e),y.contrastText||(y.contrastText=$(y.main)),y},O={dark,light};return deepmerge(_extends({common:common$1,mode:a,primary:j({color:s,name:"primary"}),secondary:j({color:l,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:j({color:c,name:"error"}),warning:j({color:x,name:"warning"}),info:j({color:d,name:"info"}),success:j({color:P,name:"success"}),grey:grey$1,contrastThreshold:t,getContrastText:$,augmentColor:j,tonalOffset:e},O[a]),o)}const _excluded$a=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function round(r){return Math.round(r*1e5)/1e5}const caseAllCaps={textTransform:"uppercase"},defaultFontFamily='"Roboto", "Helvetica", "Arial", sans-serif';function createTypography(r,a){const t=typeof a=="function"?a(r):a,{fontFamily:e=defaultFontFamily,fontSize:o=14,fontWeightLight:s=300,fontWeightRegular:l=400,fontWeightMedium:c=500,fontWeightBold:d=700,htmlFontSize:P=16,allVariants:x,pxToRem:$}=t,j=_objectWithoutPropertiesLoose(t,_excluded$a),O=o/14,A=$||(ue=>`${ue/P*O}rem`),y=(ue,K,U,I,B)=>_extends({fontFamily:e,fontWeight:ue,fontSize:A(K),lineHeight:U},e===defaultFontFamily?{letterSpacing:`${round(I/K)}em`}:{},B,x),G={h1:y(s,96,1.167,-1.5),h2:y(s,60,1.2,-.5),h3:y(l,48,1.167,0),h4:y(l,34,1.235,.25),h5:y(l,24,1.334,0),h6:y(c,20,1.6,.15),subtitle1:y(l,16,1.75,.15),subtitle2:y(c,14,1.57,.1),body1:y(l,16,1.5,.15),body2:y(l,14,1.43,.15),button:y(c,14,1.75,.4,caseAllCaps),caption:y(l,12,1.66,.4),overline:y(l,12,2.66,1,caseAllCaps)};return deepmerge(_extends({htmlFontSize:P,pxToRem:A,fontFamily:e,fontSize:o,fontWeightLight:s,fontWeightRegular:l,fontWeightMedium:c,fontWeightBold:d},G),j,{clone:!1})}const shadowKeyUmbraOpacity=.2,shadowKeyPenumbraOpacity=.14,shadowAmbientShadowOpacity=.12;function createShadow(...r){return[`${r[0]}px ${r[1]}px ${r[2]}px ${r[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`,`${r[4]}px ${r[5]}px ${r[6]}px ${r[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`,`${r[8]}px ${r[9]}px ${r[10]}px ${r[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",")}const shadows=["none",createShadow(0,2,1,-1,0,1,1,0,0,1,3,0),createShadow(0,3,1,-2,0,2,2,0,0,1,5,0),createShadow(0,3,3,-2,0,3,4,0,0,1,8,0),createShadow(0,2,4,-1,0,4,5,0,0,1,10,0),createShadow(0,3,5,-1,0,5,8,0,0,1,14,0),createShadow(0,3,5,-1,0,6,10,0,0,1,18,0),createShadow(0,4,5,-2,0,7,10,1,0,2,16,1),createShadow(0,5,5,-3,0,8,10,1,0,3,14,2),createShadow(0,5,6,-3,0,9,12,1,0,3,16,2),createShadow(0,6,6,-3,0,10,14,1,0,4,18,3),createShadow(0,6,7,-4,0,11,15,1,0,4,20,3),createShadow(0,7,8,-4,0,12,17,2,0,5,22,4),createShadow(0,7,8,-4,0,13,19,2,0,5,24,4),createShadow(0,7,9,-4,0,14,21,2,0,5,26,4),createShadow(0,8,9,-5,0,15,22,2,0,6,28,5),createShadow(0,8,10,-5,0,16,24,2,0,6,30,5),createShadow(0,8,11,-5,0,17,26,2,0,6,32,5),createShadow(0,9,11,-5,0,18,28,2,0,7,34,6),createShadow(0,9,12,-6,0,19,29,2,0,7,36,6),createShadow(0,10,13,-6,0,20,31,3,0,8,38,7),createShadow(0,10,13,-6,0,21,33,3,0,8,40,7),createShadow(0,10,14,-6,0,22,35,3,0,8,42,7),createShadow(0,11,14,-7,0,23,36,3,0,9,44,8),createShadow(0,11,15,-7,0,24,38,3,0,9,46,8)];var shadows$1=shadows;const _excluded$9=["duration","easing","delay"],easing={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},duration={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function formatMs(r){return`${Math.round(r)}ms`}function getAutoHeightDuration(r){if(!r)return 0;const a=r/36;return Math.round((4+15*a**.25+a/5)*10)}function createTransitions(r){const a=_extends({},easing,r.easing),t=_extends({},duration,r.duration);return _extends({getAutoHeightDuration,create:(o=["all"],s={})=>{const{duration:l=t.standard,easing:c=a.easeInOut,delay:d=0}=s;return _objectWithoutPropertiesLoose(s,_excluded$9),(Array.isArray(o)?o:[o]).map(P=>`${P} ${typeof l=="string"?l:formatMs(l)} ${c} ${typeof d=="string"?d:formatMs(d)}`).join(",")}},r,{easing:a,duration:t})}const zIndex={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var zIndex$1=zIndex;const _excluded$8=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function createTheme(r={},...a){const{mixins:t={},palette:e={},transitions:o={},typography:s={}}=r,l=_objectWithoutPropertiesLoose(r,_excluded$8),c=createPalette(e),d=createTheme$1(r);let P=deepmerge(d,{mixins:createMixins(d.breakpoints,d.spacing,t),palette:c,shadows:shadows$1.slice(),typography:createTypography(c,s),transitions:createTransitions(o),zIndex:_extends({},zIndex$1)});return P=deepmerge(P,l),P=a.reduce((x,$)=>deepmerge(x,$),P),P}const defaultTheme=createTheme();var defaultTheme$1=defaultTheme;function useThemeProps({props:r,name:a}){return useThemeProps$1({props:r,name:a,defaultTheme:defaultTheme$1})}function getPaginationUtilityClass(r){return generateUtilityClass("MuiPagination",r)}generateUtilityClasses("MuiPagination",["root","ul","outlined","text"]);const _excluded$7=["boundaryCount","componentName","count","defaultPage","disabled","hideNextButton","hidePrevButton","onChange","page","showFirstButton","showLastButton","siblingCount"];function usePagination(r={}){const{boundaryCount:a=1,componentName:t="usePagination",count:e=1,defaultPage:o=1,disabled:s=!1,hideNextButton:l=!1,hidePrevButton:c=!1,onChange:d,page:P,showFirstButton:x=!1,showLastButton:$=!1,siblingCount:j=1}=r,O=_objectWithoutPropertiesLoose(r,_excluded$7),[A,y]=useControlled({controlled:P,default:o,name:t,state:"page"}),G=(S,w)=>{P||y(w),d&&d(S,w)},ue=(S,w)=>{const k=w-S+1;return Array.from({length:k},(z,Q)=>S+Q)},K=ue(1,Math.min(a,e)),U=ue(Math.max(e-a+1,a+1),e),I=Math.max(Math.min(A-j,e-a-j*2-1),a+2),B=Math.min(Math.max(A+j,a+j*2+2),U.length>0?U[0]-2:e-1),C=[...x?["first"]:[],...c?[]:["previous"],...K,...I>a+2?["start-ellipsis"]:a+1<e-a?[a+1]:[],...ue(I,B),...B<e-a-1?["end-ellipsis"]:e-a>a?[e-a]:[],...U,...l?[]:["next"],...$?["last"]:[]],W=S=>{switch(S){case"first":return 1;case"previous":return A-1;case"next":return A+1;case"last":return e;default:return null}},b=C.map(S=>typeof S=="number"?{onClick:w=>{G(w,S)},type:"page",page:S,selected:S===A,disabled:s,"aria-current":S===A?"true":void 0}:{onClick:w=>{G(w,W(S))},type:S,page:W(S),selected:!1,disabled:s||S.indexOf("ellipsis")===-1&&(S==="next"||S==="last"?A>=e:A<=1)});return _extends({items:b},O)}function getPaginationItemUtilityClass(r){return generateUtilityClass("MuiPaginationItem",r)}const paginationItemClasses=generateUtilityClasses("MuiPaginationItem",["root","page","sizeSmall","sizeLarge","text","textPrimary","textSecondary","outlined","outlinedPrimary","outlinedSecondary","rounded","ellipsis","firstLast","previousNext","focusVisible","disabled","selected","icon"]);var paginationItemClasses$1=paginationItemClasses;function useTheme(){return useTheme$1(defaultTheme$1)}const rootShouldForwardProp=r=>shouldForwardProp(r)&&r!=="classes",styled=createStyled({defaultTheme:defaultTheme$1,rootShouldForwardProp});var styled$1=styled;function Ripple(r){const{className:a,classes:t,pulsate:e=!1,rippleX:o,rippleY:s,rippleSize:l,in:c,onExited:d,timeout:P}=r,[x,$]=react.exports.useState(!1),j=clsx(a,t.ripple,t.rippleVisible,e&&t.ripplePulsate),O={width:l,height:l,top:-(l/2)+s,left:-(l/2)+o},A=clsx(t.child,x&&t.childLeaving,e&&t.childPulsate);return!c&&!x&&$(!0),react.exports.useEffect(()=>{if(!c&&d!=null){const y=setTimeout(d,P);return()=>{clearTimeout(y)}}},[d,c,P]),jsxRuntime.exports.jsx("span",{className:j,style:O,children:jsxRuntime.exports.jsx("span",{className:A})})}const touchRippleClasses=generateUtilityClasses("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]);var touchRippleClasses$1=touchRippleClasses;const _excluded$6=["center","classes","className"];let _=r=>r,_t,_t2,_t3,_t4;const DURATION=550,DELAY_RIPPLE=80,enterKeyframe=keyframes(_t||(_t=_`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),exitKeyframe=keyframes(_t2||(_t2=_`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),pulsateKeyframe=keyframes(_t3||(_t3=_`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),TouchRippleRoot=styled$1("span",{name:"MuiTouchRipple",slot:"Root",skipSx:!0})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),TouchRippleRipple=styled$1(Ripple,{name:"MuiTouchRipple",slot:"Ripple"})(_t4||(_t4=_`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),touchRippleClasses$1.rippleVisible,enterKeyframe,DURATION,({theme:r})=>r.transitions.easing.easeInOut,touchRippleClasses$1.ripplePulsate,({theme:r})=>r.transitions.duration.shorter,touchRippleClasses$1.child,touchRippleClasses$1.childLeaving,exitKeyframe,DURATION,({theme:r})=>r.transitions.easing.easeInOut,touchRippleClasses$1.childPulsate,pulsateKeyframe,({theme:r})=>r.transitions.easing.easeInOut),TouchRipple=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiTouchRipple"}),{center:o=!1,classes:s={},className:l}=e,c=_objectWithoutPropertiesLoose(e,_excluded$6),[d,P]=react.exports.useState([]),x=react.exports.useRef(0),$=react.exports.useRef(null);react.exports.useEffect(()=>{$.current&&($.current(),$.current=null)},[d]);const j=react.exports.useRef(!1),O=react.exports.useRef(null),A=react.exports.useRef(null),y=react.exports.useRef(null);react.exports.useEffect(()=>()=>{clearTimeout(O.current)},[]);const G=react.exports.useCallback(I=>{const{pulsate:B,rippleX:C,rippleY:W,rippleSize:b,cb:S}=I;P(w=>[...w,jsxRuntime.exports.jsx(TouchRippleRipple,{classes:{ripple:clsx(s.ripple,touchRippleClasses$1.ripple),rippleVisible:clsx(s.rippleVisible,touchRippleClasses$1.rippleVisible),ripplePulsate:clsx(s.ripplePulsate,touchRippleClasses$1.ripplePulsate),child:clsx(s.child,touchRippleClasses$1.child),childLeaving:clsx(s.childLeaving,touchRippleClasses$1.childLeaving),childPulsate:clsx(s.childPulsate,touchRippleClasses$1.childPulsate)},timeout:DURATION,pulsate:B,rippleX:C,rippleY:W,rippleSize:b},x.current)]),x.current+=1,$.current=S},[s]),ue=react.exports.useCallback((I={},B={},C)=>{const{pulsate:W=!1,center:b=o||B.pulsate,fakeElement:S=!1}=B;if(I.type==="mousedown"&&j.current){j.current=!1;return}I.type==="touchstart"&&(j.current=!0);const w=S?null:y.current,k=w?w.getBoundingClientRect():{width:0,height:0,left:0,top:0};let z,Q,Y;if(b||I.clientX===0&&I.clientY===0||!I.clientX&&!I.touches)z=Math.round(k.width/2),Q=Math.round(k.height/2);else{const{clientX:re,clientY:ae}=I.touches?I.touches[0]:I;z=Math.round(re-k.left),Q=Math.round(ae-k.top)}if(b)Y=Math.sqrt((2*k.width**2+k.height**2)/3),Y%2==0&&(Y+=1);else{const re=Math.max(Math.abs((w?w.clientWidth:0)-z),z)*2+2,ae=Math.max(Math.abs((w?w.clientHeight:0)-Q),Q)*2+2;Y=Math.sqrt(re**2+ae**2)}I.touches?A.current===null&&(A.current=()=>{G({pulsate:W,rippleX:z,rippleY:Q,rippleSize:Y,cb:C})},O.current=setTimeout(()=>{A.current&&(A.current(),A.current=null)},DELAY_RIPPLE)):G({pulsate:W,rippleX:z,rippleY:Q,rippleSize:Y,cb:C})},[o,G]),K=react.exports.useCallback(()=>{ue({},{pulsate:!0})},[ue]),U=react.exports.useCallback((I,B)=>{if(clearTimeout(O.current),I.type==="touchend"&&A.current){A.current(),A.current=null,O.current=setTimeout(()=>{U(I,B)});return}A.current=null,P(C=>C.length>0?C.slice(1):C),$.current=B},[]);return react.exports.useImperativeHandle(t,()=>({pulsate:K,start:ue,stop:U}),[K,ue,U]),jsxRuntime.exports.jsx(TouchRippleRoot,_extends({className:clsx(s.root,touchRippleClasses$1.root,l),ref:y},c,{children:jsxRuntime.exports.jsx(TransitionGroup,{component:null,exit:!0,children:d})}))});var TouchRipple$1=TouchRipple;function getButtonBaseUtilityClass(r){return generateUtilityClass("MuiButtonBase",r)}const buttonBaseClasses=generateUtilityClasses("MuiButtonBase",["root","disabled","focusVisible"]);var buttonBaseClasses$1=buttonBaseClasses;const _excluded$5=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"],useUtilityClasses$4=r=>{const{disabled:a,focusVisible:t,focusVisibleClassName:e,classes:o}=r,l=composeClasses({root:["root",a&&"disabled",t&&"focusVisible"]},getButtonBaseUtilityClass,o);return t&&e&&(l.root+=` ${e}`),l},ButtonBaseRoot=styled$1("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(r,a)=>a.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${buttonBaseClasses$1.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),ButtonBase=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiButtonBase"}),{action:o,centerRipple:s=!1,children:l,className:c,component:d="button",disabled:P=!1,disableRipple:x=!1,disableTouchRipple:$=!1,focusRipple:j=!1,LinkComponent:O="a",onBlur:A,onClick:y,onContextMenu:G,onDragLeave:ue,onFocus:K,onFocusVisible:U,onKeyDown:I,onKeyUp:B,onMouseDown:C,onMouseLeave:W,onMouseUp:b,onTouchEnd:S,onTouchMove:w,onTouchStart:k,tabIndex:z=0,TouchRippleProps:Q,type:Y}=e,re=_objectWithoutPropertiesLoose(e,_excluded$5),ae=react.exports.useRef(null),ce=react.exports.useRef(null),{isFocusVisibleRef:J,onFocus:X,onBlur:L,ref:v}=useIsFocusVisible(),[R,D]=react.exports.useState(!1);P&&R&&D(!1),react.exports.useImperativeHandle(o,()=>({focusVisible:()=>{D(!0),ae.current.focus()}}),[]),react.exports.useEffect(()=>{R&&j&&!x&&ce.current.pulsate()},[x,j,R]);function Z(Ce,Ie,Ne=$){return useEventCallback(Me=>(Ie&&Ie(Me),!Ne&&ce.current&&ce.current[Ce](Me),!0))}const se=Z("start",C),ie=Z("stop",G),Pe=Z("stop",ue),le=Z("stop",b),fe=Z("stop",Ce=>{R&&Ce.preventDefault(),W&&W(Ce)}),N=Z("start",k),E=Z("stop",S),T=Z("stop",w),te=Z("stop",Ce=>{L(Ce),J.current===!1&&D(!1),A&&A(Ce)},!1),ne=useEventCallback(Ce=>{ae.current||(ae.current=Ce.currentTarget),X(Ce),J.current===!0&&(D(!0),U&&U(Ce)),K&&K(Ce)}),de=()=>{const Ce=ae.current;return d&&d!=="button"&&!(Ce.tagName==="A"&&Ce.href)},he=react.exports.useRef(!1),Ae=useEventCallback(Ce=>{j&&!he.current&&R&&ce.current&&Ce.key===" "&&(he.current=!0,ce.current.stop(Ce,()=>{ce.current.start(Ce)})),Ce.target===Ce.currentTarget&&de()&&Ce.key===" "&&Ce.preventDefault(),I&&I(Ce),Ce.target===Ce.currentTarget&&de()&&Ce.key==="Enter"&&!P&&(Ce.preventDefault(),y&&y(Ce))}),ee=useEventCallback(Ce=>{j&&Ce.key===" "&&ce.current&&R&&!Ce.defaultPrevented&&(he.current=!1,ce.current.stop(Ce,()=>{ce.current.pulsate(Ce)})),B&&B(Ce),y&&Ce.target===Ce.currentTarget&&de()&&Ce.key===" "&&!Ce.defaultPrevented&&y(Ce)});let oe=d;oe==="button"&&(re.href||re.to)&&(oe=O);const M={};oe==="button"?(M.type=Y===void 0?"button":Y,M.disabled=P):(!re.href&&!re.to&&(M.role="button"),P&&(M["aria-disabled"]=P));const H=useForkRef(v,ae),V=useForkRef(t,H),[ge,ye]=react.exports.useState(!1);react.exports.useEffect(()=>{ye(!0)},[]);const pe=ge&&!x&&!P,Se=_extends({},e,{centerRipple:s,component:d,disabled:P,disableRipple:x,disableTouchRipple:$,focusRipple:j,tabIndex:z,focusVisible:R}),ke=useUtilityClasses$4(Se);return jsxRuntime.exports.jsxs(ButtonBaseRoot,_extends({as:oe,className:clsx(ke.root,c),ownerState:Se,onBlur:te,onClick:y,onContextMenu:ie,onFocus:ne,onKeyDown:Ae,onKeyUp:ee,onMouseDown:se,onMouseLeave:fe,onMouseUp:le,onDragLeave:Pe,onTouchEnd:E,onTouchMove:T,onTouchStart:N,ref:V,tabIndex:P?-1:z,type:Y},M,re,{children:[l,pe?jsxRuntime.exports.jsx(TouchRipple$1,_extends({ref:ce,center:s},Q)):null]}))});var ButtonBase$1=ButtonBase;function getSvgIconUtilityClass(r){return generateUtilityClass("MuiSvgIcon",r)}generateUtilityClasses("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const _excluded$4=["children","className","color","component","fontSize","htmlColor","titleAccess","viewBox"],useUtilityClasses$3=r=>{const{color:a,fontSize:t,classes:e}=r,o={root:["root",a!=="inherit"&&`color${capitalize(a)}`,`fontSize${capitalize(t)}`]};return composeClasses(o,getSvgIconUtilityClass,e)},SvgIconRoot=styled$1("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(r,a)=>{const{ownerState:t}=r;return[a.root,t.color!=="inherit"&&a[`color${capitalize(t.color)}`],a[`fontSize${capitalize(t.fontSize)}`]]}})(({theme:r,ownerState:a})=>{var t,e;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:r.transitions.create("fill",{duration:r.transitions.duration.shorter}),fontSize:{inherit:"inherit",small:r.typography.pxToRem(20),medium:r.typography.pxToRem(24),large:r.typography.pxToRem(35)}[a.fontSize],color:(t=(e=r.palette[a.color])==null?void 0:e.main)!=null?t:{action:r.palette.action.active,disabled:r.palette.action.disabled,inherit:void 0}[a.color]}}),SvgIcon=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiSvgIcon"}),{children:o,className:s,color:l="inherit",component:c="svg",fontSize:d="medium",htmlColor:P,titleAccess:x,viewBox:$="0 0 24 24"}=e,j=_objectWithoutPropertiesLoose(e,_excluded$4),O=_extends({},e,{color:l,component:c,fontSize:d,viewBox:$}),A=useUtilityClasses$3(O);return jsxRuntime.exports.jsxs(SvgIconRoot,_extends({as:c,className:clsx(A.root,s),ownerState:O,focusable:"false",viewBox:$,color:P,"aria-hidden":x?void 0:!0,role:x?"img":void 0,ref:t},j,{children:[o,x?jsxRuntime.exports.jsx("title",{children:x}):null]}))});SvgIcon.muiName="SvgIcon";var SvgIcon$1=SvgIcon;function createSvgIcon(r,a){const t=(e,o)=>jsxRuntime.exports.jsx(SvgIcon$1,_extends({"data-testid":`${a}Icon`,ref:o},e,{children:r}));return t.muiName=SvgIcon$1.muiName,react.exports.memo(react.exports.forwardRef(t))}var FirstPageIcon=createSvgIcon(jsxRuntime.exports.jsx("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),LastPageIcon=createSvgIcon(jsxRuntime.exports.jsx("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage"),NavigateBeforeIcon=createSvgIcon(jsxRuntime.exports.jsx("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore"),NavigateNextIcon=createSvgIcon(jsxRuntime.exports.jsx("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext");const _excluded$3=["className","color","component","disabled","page","selected","shape","size","type","variant"],overridesResolver=(r,a)=>{const{ownerState:t}=r;return[a.root,a[t.variant],a[`size${capitalize(t.size)}`],t.variant==="text"&&a[`text${capitalize(t.color)}`],t.variant==="outlined"&&a[`outlined${capitalize(t.color)}`],t.shape==="rounded"&&a.rounded,t.type==="page"&&a.page,(t.type==="start-ellipsis"||t.type==="end-ellipsis")&&a.ellipsis,(t.type==="previous"||t.type==="next")&&a.previousNext,(t.type==="first"||t.type==="last")&&a.firstLast]},useUtilityClasses$2=r=>{const{classes:a,color:t,disabled:e,selected:o,size:s,shape:l,type:c,variant:d}=r,P={root:["root",`size${capitalize(s)}`,d,l,t!=="standard"&&`${d}${capitalize(t)}`,e&&"disabled",o&&"selected",{page:"page",first:"firstLast",last:"firstLast","start-ellipsis":"ellipsis","end-ellipsis":"ellipsis",previous:"previousNext",next:"previousNext"}[c]],icon:["icon"]};return composeClasses(P,getPaginationItemUtilityClass,a)},PaginationItemEllipsis=styled$1("div",{name:"MuiPaginationItem",slot:"Root",overridesResolver})(({theme:r,ownerState:a})=>_extends({},r.typography.body2,{borderRadius:32/2,textAlign:"center",boxSizing:"border-box",minWidth:32,padding:"0 6px",margin:"0 3px",color:r.palette.text.primary,height:"auto",[`&.${paginationItemClasses$1.disabled}`]:{opacity:r.palette.action.disabledOpacity}},a.size==="small"&&{minWidth:26,borderRadius:26/2,margin:"0 1px",padding:"0 4px"},a.size==="large"&&{minWidth:40,borderRadius:40/2,padding:"0 10px",fontSize:r.typography.pxToRem(15)})),PaginationItemPage=styled$1(ButtonBase$1,{name:"MuiPaginationItem",slot:"Root",overridesResolver})(({theme:r,ownerState:a})=>_extends({},r.typography.body2,{borderRadius:32/2,textAlign:"center",boxSizing:"border-box",minWidth:32,height:32,padding:"0 6px",margin:"0 3px",color:r.palette.text.primary,[`&.${paginationItemClasses$1.focusVisible}`]:{backgroundColor:r.palette.action.focus},[`&.${paginationItemClasses$1.disabled}`]:{opacity:r.palette.action.disabledOpacity},transition:r.transitions.create(["color","background-color"],{duration:r.transitions.duration.short}),"&:hover":{backgroundColor:r.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${paginationItemClasses$1.selected}`]:{backgroundColor:r.palette.action.selected,"&:hover":{backgroundColor:alpha(r.palette.action.selected,r.palette.action.selectedOpacity+r.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:r.palette.action.selected}},[`&.${paginationItemClasses$1.focusVisible}`]:{backgroundColor:alpha(r.palette.action.selected,r.palette.action.selectedOpacity+r.palette.action.focusOpacity)},[`&.${paginationItemClasses$1.disabled}`]:{opacity:1,color:r.palette.action.disabled,backgroundColor:r.palette.action.selected}}},a.size==="small"&&{minWidth:26,height:26,borderRadius:26/2,margin:"0 1px",padding:"0 4px"},a.size==="large"&&{minWidth:40,height:40,borderRadius:40/2,padding:"0 10px",fontSize:r.typography.pxToRem(15)},a.shape==="rounded"&&{borderRadius:r.shape.borderRadius}),({theme:r,ownerState:a})=>_extends({},a.variant==="text"&&{[`&.${paginationItemClasses$1.selected}`]:_extends({},a.color!=="standard"&&{color:r.palette[a.color].contrastText,backgroundColor:r.palette[a.color].main,"&:hover":{backgroundColor:r.palette[a.color].dark,"@media (hover: none)":{backgroundColor:r.palette[a.color].main}},[`&.${paginationItemClasses$1.focusVisible}`]:{backgroundColor:r.palette[a.color].dark}},{[`&.${paginationItemClasses$1.disabled}`]:{color:r.palette.action.disabled}})},a.variant==="outlined"&&{border:`1px solid ${r.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"}`,[`&.${paginationItemClasses$1.selected}`]:_extends({},a.color!=="standard"&&{color:r.palette[a.color].main,border:`1px solid ${alpha(r.palette[a.color].main,.5)}`,backgroundColor:alpha(r.palette[a.color].main,r.palette.action.activatedOpacity),"&:hover":{backgroundColor:alpha(r.palette[a.color].main,r.palette.action.activatedOpacity+r.palette.action.focusOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${paginationItemClasses$1.focusVisible}`]:{backgroundColor:alpha(r.palette[a.color].main,r.palette.action.activatedOpacity+r.palette.action.focusOpacity)}},{[`&.${paginationItemClasses$1.disabled}`]:{borderColor:r.palette.action.disabledBackground,color:r.palette.action.disabled}})})),PaginationItemPageIcon=styled$1("div",{name:"MuiPaginationItem",slot:"Icon",overridesResolver:(r,a)=>a.icon})(({theme:r,ownerState:a})=>_extends({fontSize:r.typography.pxToRem(20),margin:"0 -8px"},a.size==="small"&&{fontSize:r.typography.pxToRem(18)},a.size==="large"&&{fontSize:r.typography.pxToRem(22)})),PaginationItem=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiPaginationItem"}),{className:o,color:s="standard",component:l,disabled:c=!1,page:d,selected:P=!1,shape:x="circular",size:$="medium",type:j="page",variant:O="text"}=e,A=_objectWithoutPropertiesLoose(e,_excluded$3),y=_extends({},e,{color:s,disabled:c,selected:P,shape:x,size:$,type:j,variant:O}),G=useTheme(),ue=useUtilityClasses$2(y),U=(G.direction==="rtl"?{previous:NavigateNextIcon,next:NavigateBeforeIcon,last:FirstPageIcon,first:LastPageIcon}:{previous:NavigateBeforeIcon,next:NavigateNextIcon,first:FirstPageIcon,last:LastPageIcon})[j];return j==="start-ellipsis"||j==="end-ellipsis"?jsxRuntime.exports.jsx(PaginationItemEllipsis,_extends({ref:t,ownerState:y,className:clsx(ue.root,o)},A,{children:"\u2026"})):jsxRuntime.exports.jsxs(PaginationItemPage,_extends({ref:t,ownerState:y,component:l,disabled:c,className:clsx(ue.root,o)},A,{children:[j==="page"&&d,U?jsxRuntime.exports.jsx(PaginationItemPageIcon,{as:U,ownerState:y,className:ue.icon}):null]}))});var PaginationItem$1=PaginationItem;const _excluded$2=["boundaryCount","className","color","count","defaultPage","disabled","getItemAriaLabel","hideNextButton","hidePrevButton","onChange","page","renderItem","shape","showFirstButton","showLastButton","siblingCount","size","variant"],useUtilityClasses$1=r=>{const{classes:a,variant:t}=r;return composeClasses({root:["root",t],ul:["ul"]},getPaginationUtilityClass,a)},PaginationRoot=styled$1("nav",{name:"MuiPagination",slot:"Root",overridesResolver:(r,a)=>{const{ownerState:t}=r;return[a.root,a[t.variant]]}})({}),PaginationUl=styled$1("ul",{name:"MuiPagination",slot:"Ul",overridesResolver:(r,a)=>a.ul})({display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0,listStyle:"none"});function defaultGetAriaLabel(r,a,t){return r==="page"?`${t?"":"Go to "}page ${a}`:`Go to ${r} page`}const Pagination=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiPagination"}),{boundaryCount:o=1,className:s,color:l="standard",count:c=1,defaultPage:d=1,disabled:P=!1,getItemAriaLabel:x=defaultGetAriaLabel,hideNextButton:$=!1,hidePrevButton:j=!1,renderItem:O=b=>jsxRuntime.exports.jsx(PaginationItem$1,_extends({},b)),shape:A="circular",showFirstButton:y=!1,showLastButton:G=!1,siblingCount:ue=1,size:K="medium",variant:U="text"}=e,I=_objectWithoutPropertiesLoose(e,_excluded$2),{items:B}=usePagination(_extends({},e,{componentName:"Pagination"})),C=_extends({},e,{boundaryCount:o,color:l,count:c,defaultPage:d,disabled:P,getItemAriaLabel:x,hideNextButton:$,hidePrevButton:j,renderItem:O,shape:A,showFirstButton:y,showLastButton:G,siblingCount:ue,size:K,variant:U}),W=useUtilityClasses$1(C);return jsxRuntime.exports.jsx(PaginationRoot,_extends({"aria-label":"pagination navigation",className:clsx(W.root,s),ownerState:C,ref:t},I,{children:jsxRuntime.exports.jsx(PaginationUl,{className:W.ul,ownerState:C,children:B.map((b,S)=>jsxRuntime.exports.jsx("li",{children:O(_extends({},b,{color:l,"aria-label":x(b.type,b.page,b.selected),shape:A,size:K,variant:U}))},S))})}))});var Pagination$1=Pagination;const feedContainer="_feedContainer_11b6a_1",card="_card_11b6a_4",cartText="_cartText_11b6a_11",cartDescription="_cartDescription_11b6a_17",backButton="_backButton_11b6a_28",popover="_popover_11b6a_41";var styles$1={feedContainer,card,cartText,cartDescription,backButton,popover};function getContainerUtilityClass(r){return generateUtilityClass("MuiContainer",r)}generateUtilityClasses("MuiContainer",["root","disableGutters","fixed","maxWidthXs","maxWidthSm","maxWidthMd","maxWidthLg","maxWidthXl"]);const _excluded$1=["className","component","disableGutters","fixed","maxWidth"],useUtilityClasses=r=>{const{classes:a,fixed:t,disableGutters:e,maxWidth:o}=r,s={root:["root",o&&`maxWidth${capitalize(String(o))}`,t&&"fixed",e&&"disableGutters"]};return composeClasses(s,getContainerUtilityClass,a)},ContainerRoot=styled$1("div",{name:"MuiContainer",slot:"Root",overridesResolver:(r,a)=>{const{ownerState:t}=r;return[a.root,a[`maxWidth${capitalize(String(t.maxWidth))}`],t.fixed&&a.fixed,t.disableGutters&&a.disableGutters]}})(({theme:r,ownerState:a})=>_extends({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",display:"block"},!a.disableGutters&&{paddingLeft:r.spacing(2),paddingRight:r.spacing(2),[r.breakpoints.up("sm")]:{paddingLeft:r.spacing(3),paddingRight:r.spacing(3)}}),({theme:r,ownerState:a})=>a.fixed&&Object.keys(r.breakpoints.values).reduce((t,e)=>{const o=r.breakpoints.values[e];return o!==0&&(t[r.breakpoints.up(e)]={maxWidth:`${o}${r.breakpoints.unit}`}),t},{}),({theme:r,ownerState:a})=>_extends({},a.maxWidth==="xs"&&{[r.breakpoints.up("xs")]:{maxWidth:Math.max(r.breakpoints.values.xs,444)}},a.maxWidth&&a.maxWidth!=="xs"&&{[r.breakpoints.up(a.maxWidth)]:{maxWidth:`${r.breakpoints.values[a.maxWidth]}${r.breakpoints.unit}`}})),Container=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiContainer"}),{className:o,component:s="div",disableGutters:l=!1,fixed:c=!1,maxWidth:d="lg"}=e,P=_objectWithoutPropertiesLoose(e,_excluded$1),x=_extends({},e,{component:s,disableGutters:l,fixed:c,maxWidth:d}),$=useUtilityClasses(x);return jsxRuntime.exports.jsx(ContainerRoot,_extends({as:s,ownerState:x,className:clsx($.root,o),ref:t},P))});var Container$1=Container;const _excluded=["component","direction","spacing","divider","children"];function joinChildren(r,a){const t=react.exports.Children.toArray(r).filter(Boolean);return t.reduce((e,o,s)=>(e.push(o),s<t.length-1&&e.push(react.exports.cloneElement(a,{key:`separator-${s}`})),e),[])}const getSideFromDirection=r=>({row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"})[r],style=({ownerState:r,theme:a})=>{let t=_extends({display:"flex"},handleBreakpoints({theme:a},r.direction,e=>({flexDirection:e})));if(r.spacing){const e=createUnarySpacing(a),o=Object.keys(a.breakpoints.values).reduce((d,P)=>((r.spacing[P]!=null||r.direction[P]!=null)&&(d[P]=!0),d),{}),s=resolveBreakpointValues({values:r.direction,base:o}),l=resolveBreakpointValues({values:r.spacing,base:o});t=deepmerge(t,handleBreakpoints({theme:a},l,(d,P)=>({"& > :not(style) + :not(style)":{margin:0,[`margin${getSideFromDirection(P?s[P]:r.direction)}`]:getValue(e,d)}})))}return t},StackRoot=styled$1("div",{name:"MuiStack",slot:"Root",overridesResolver:(r,a)=>[a.root]})(style),Stack=react.exports.forwardRef(function(a,t){const e=useThemeProps({props:a,name:"MuiStack"}),o=extendSxProp(e),{component:s="div",direction:l="column",spacing:c=0,divider:d,children:P}=o,x=_objectWithoutPropertiesLoose(o,_excluded),$={direction:l,spacing:c};return jsxRuntime.exports.jsx(StackRoot,_extends({as:s,ownerState:$,ref:t},x,{children:d?joinChildren(P,d):P}))});var Stack$1=Stack;pdf.exports.GlobalWorkerOptions.workerSrc=`//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdf.exports.version}/pdf.worker.min.js`;const getComponentTypeForMedia=r=>{switch(!0){case r.startsWith("image"):return"img";case r.startsWith("video"):return"video";case r.startsWith("audio"):return"audio";case r==="application/pdf":return"pdf";default:return"img"}},Feed=({feedId:r})=>{let a=null;const t=useDispatch();useTranslation();const[e,o]=react.exports.useState(null),[s,l]=react.exports.useState(1),c=useFeedState();function d({numPages:$}){o($)}const P=($,j)=>{l(typeof j=="number"?j:s)};react.exports.useEffect(()=>{t(FeedService.getFeed(r))},[]),a=c.feeds.fetching.value===!1&&c.feeds.feed.value;const x=getComponentTypeForMedia(a.previewType||"image");return React$1.createElement("section",{className:styles$1.feedContainer},a&&React$1.createElement(Card,{className:styles$1.card},x!=="pdf"?React$1.createElement(CardMedia,{component:x==="audio"?"audio":"img",src:a.previewUrl,alt:a.title,className:styles$1.previewImage,controls:!0}):React$1.createElement(Container$1,null,React$1.createElement(Stack$1,{spacing:1},React$1.createElement(Pagination$1,{page:s,count:e,onChange:P}),React$1.createElement("p",null,"Page ",s," of ",e)),React$1.createElement(Document,{file:a.previewUrl,onLoadError:console.error,onLoadSuccess:d},React$1.createElement(Page$1,{pageNumber:s})),React$1.createElement(Stack$1,{spacing:1},React$1.createElement("p",null,"Page ",s," of ",e),React$1.createElement(Pagination$1,{page:s,count:e,onChange:P}))),React$1.createElement(CardContent,null,React$1.createElement(Typography,{className:styles$1.cartText,variant:"h6"},a.title),React$1.createElement(Typography,{className:styles$1.cartDescription,variant:"h6"},a.description))))};var Feed$1=Feed;const headerContainer="_headerContainer_jq6g2_1",title="_title_jq6g2_9";var styles={headerContainer,title};const useStyles=makeStyles(r=>({uploadButton:{marginTop:"100px"},addIcon:{fontSize:"100px",color:"#CFCFCF"}})),AppHeader=({title:r,setAddFilesView:a,setFilesTarget:t,hideAddButtons:e,inputFileRef:o})=>{useTranslation();const s=useAuthState(),l=useStyles(),[c,d]=react.exports.useState("");react.exports.useEffect(()=>{s.user&&d(s.user?.userRole?.value)},[s.user]);const P=async x=>{t([...x.target.files]),a&&a(!0)};return React$1.createElement("nav",{className:styles.headerContainer},r&&React$1.createElement("span",{className:styles.title},r),React$1.createElement("input",{className:styles.input,style:{display:"none"},id:"raised-button-file",multiple:!0,type:"file",onChange:P,ref:o}),!e&&c&&c!="guest"?React$1.createElement("div",{style:{width:"fit-content",backgroundColor:"#F8F8F8",border:"1px solid #F8F8F8",margin:"0 auto"}},React$1.createElement("label",{htmlFor:"raised-button-file"},React$1.createElement(Grid,{container:!0,justifyContent:"center"},React$1.createElement(default_1,{className:l.addIcon}),React$1.createElement("br",null)),React$1.createElement(Grid,{container:!0,justifyContent:"center"},React$1.createElement(Button,{style:{backgroundColor:"#FFF",margin:"10px 20px",border:"none",boxShadow:"none",color:"#C4C4C4",fontSize:"15pt",fontWeight:500},variant:"contained"},"Add Files")))):"")};var AppHeader$1=AppHeader;export{AppHeader$1 as A,Feed$1 as F,useEnhancedEffect$1 as a,getComponentTypeForMedia as b,default_1 as d,getThemeProps as g,useTheme$2 as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNWQwZjllNDguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQWRkQ2lyY2xlT3V0bGluZWQuanMiLCIuLi8uLi9fX3ZpdGUtYnJvd3Nlci1leHRlcm5hbCIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xlZ2FjeS9idWlsZC9wZGYuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWFrZS1ldmVudC1wcm9wcy9kaXN0L2VzbS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tYWtlLWNhbmNlbGxhYmxlLXByb21pc2UvZGlzdC9lc20vaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWVyZ2UtY2xhc3MtbmFtZXMvZGlzdC9lc20vaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL0RvY3VtZW50Q29udGV4dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1wZGYvZGlzdC9lc20vTWVzc2FnZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1wZGYvZGlzdC9lc20vTGlua1NlcnZpY2UuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL1Bhc3N3b3JkUmVzcG9uc2VzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9zaGFyZWQvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL3NoYXJlZC9wcm9wVHlwZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL0RvY3VtZW50LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9PdXRsaW5lSXRlbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1wZGYvZGlzdC9lc20vT3V0bGluZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tZXJnZS1yZWZzL2Rpc3QvZXNtL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9QYWdlQ29udGV4dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1wZGYvZGlzdC9lc20vUGFnZS9QYWdlQ2FudmFzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9QYWdlL1BhZ2VTVkcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL1BhZ2UvVGV4dExheWVySXRlbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1wZGYvZGlzdC9lc20vUGFnZS9UZXh0TGF5ZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtcGRmL2Rpc3QvZXNtL1BhZ2UvQW5ub3RhdGlvbkxheWVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9QYWdlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBkZi9kaXN0L2VzbS9lbnRyeS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NhcGl0YWxpemUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUNvbnRyb2xsZWQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VGb3JrUmVmLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvY29yZS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL2NvcmUvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9jb3JlL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUHJlZml4ZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvTWlkZGxld2FyZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L2Vtb3Rpb24tc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1lbGVtZW50LTk5Mjg5YjIxLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ib3JkZXJzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9mbGV4Ym94LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ncmlkLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NoYWRvd3MuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdHlwb2dyYXBoeS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZ2V0VGhlbWVWYWx1ZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlQnJlYWtwb2ludHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVUaGVtZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvdXNlVGhlbWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVN0eWxlZC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL3VzZVRoZW1lUHJvcHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2NvbW1vbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3B1cnBsZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2JsdWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvbGlnaHRCbHVlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3pJbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUaGVtZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWVQcm9wcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhZ2luYXRpb24vcGFnaW5hdGlvbkNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91c2VQYWdpbmF0aW9uL3VzZVBhZ2luYXRpb24uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYWdpbmF0aW9uSXRlbS9wYWdpbmF0aW9uSXRlbUNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc3R5bGVkLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9SaXBwbGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL2J1dHRvbkJhc2VDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvRmlyc3RQYWdlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0xhc3RQYWdlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL05hdmlnYXRlQmVmb3JlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL05hdmlnYXRlTmV4dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhZ2luYXRpb25JdGVtL1BhZ2luYXRpb25JdGVtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFnaW5hdGlvbi9QYWdpbmF0aW9uLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ29udGFpbmVyL2NvbnRhaW5lckNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db250YWluZXIvQ29udGFpbmVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RhY2svU3RhY2suanMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9GZWVkL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0hlYWRlci9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTUgMTFoLTR2NGgtMnYtNEg3di0yaDRWN2gydjRoNHYyelwiXG59KSwgJ0FkZENpcmNsZU91dGxpbmVkJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImV4cG9ydCBkZWZhdWx0IHt9IiwiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblxuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJwZGZqcy1kaXN0L2J1aWxkL3BkZlwiXSA9IHJvb3QucGRmanNMaWIgPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKFtcbi8qIDAgKi8sXG4vKiAxICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5hZGRMaW5rQXR0cmlidXRlcyA9IGFkZExpbmtBdHRyaWJ1dGVzO1xuZXhwb3J0cy5kZXByZWNhdGVkID0gZGVwcmVjYXRlZDtcbmV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tVXJsID0gZ2V0RmlsZW5hbWVGcm9tVXJsO1xuZXhwb3J0cy5nZXRQZGZGaWxlbmFtZUZyb21VcmwgPSBnZXRQZGZGaWxlbmFtZUZyb21Vcmw7XG5leHBvcnRzLmlzRGF0YVNjaGVtZSA9IGlzRGF0YVNjaGVtZTtcbmV4cG9ydHMuaXNGZXRjaFN1cHBvcnRlZCA9IGlzRmV0Y2hTdXBwb3J0ZWQ7XG5leHBvcnRzLmlzUGRmRmlsZSA9IGlzUGRmRmlsZTtcbmV4cG9ydHMuaXNWYWxpZEZldGNoVXJsID0gaXNWYWxpZEZldGNoVXJsO1xuZXhwb3J0cy5sb2FkU2NyaXB0ID0gbG9hZFNjcmlwdDtcbmV4cG9ydHMuU3RhdFRpbWVyID0gZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBleHBvcnRzLlBERkRhdGVTdHJpbmcgPSBleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IGV4cG9ydHMuTGlua1RhcmdldCA9IGV4cG9ydHMuRE9NU1ZHRmFjdG9yeSA9IGV4cG9ydHMuRE9NQ01hcFJlYWRlckZhY3RvcnkgPSBleHBvcnRzLkRPTUNhbnZhc0ZhY3RvcnkgPSBleHBvcnRzLkRFRkFVTFRfTElOS19SRUwgPSBleHBvcnRzLkJhc2VDTWFwUmVhZGVyRmFjdG9yeSA9IGV4cG9ydHMuQmFzZUNhbnZhc0ZhY3RvcnkgPSB2b2lkIDA7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgREVGQVVMVF9MSU5LX1JFTCA9IFwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiO1xuZXhwb3J0cy5ERUZBVUxUX0xJTktfUkVMID0gREVGQVVMVF9MSU5LX1JFTDtcbnZhciBTVkdfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5cbnZhciBCYXNlQ2FudmFzRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VDYW52YXNGYWN0b3J5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlQ2FudmFzRmFjdG9yeSk7XG5cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZUNhbnZhc0ZhY3RvcnkpIHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlQ2FudmFzRmFjdG9yeS5cIik7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VDYW52YXNGYWN0b3J5LCBbe1xuICAgIGtleTogXCJjcmVhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYGNyZWF0ZWAgY2FsbGVkLlwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoY2FudmFzQW5kQ29udGV4dCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgaWYgKCFjYW52YXNBbmRDb250ZXh0LmNhbnZhcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgaXMgbm90IHNwZWNpZmllZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMgc2l6ZVwiKTtcbiAgICAgIH1cblxuICAgICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KGNhbnZhc0FuZENvbnRleHQpIHtcbiAgICAgIGlmICghY2FudmFzQW5kQ29udGV4dC5jYW52YXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGlzIG5vdCBzcGVjaWZpZWRcIik7XG4gICAgICB9XG5cbiAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLndpZHRoID0gMDtcbiAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcyA9IG51bGw7XG4gICAgICBjYW52YXNBbmRDb250ZXh0LmNvbnRleHQgPSBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlQ2FudmFzRmFjdG9yeTtcbn0oKTtcblxuZXhwb3J0cy5CYXNlQ2FudmFzRmFjdG9yeSA9IEJhc2VDYW52YXNGYWN0b3J5O1xuXG52YXIgRE9NQ2FudmFzRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDYW52YXNGYWN0b3J5KSB7XG4gIF9pbmhlcml0cyhET01DYW52YXNGYWN0b3J5LCBfQmFzZUNhbnZhc0ZhY3RvcnkpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRE9NQ2FudmFzRmFjdG9yeSk7XG5cbiAgZnVuY3Rpb24gRE9NQ2FudmFzRmFjdG9yeSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkb3duZXJEb2N1bWVudCA9IF9yZWYub3duZXJEb2N1bWVudCxcbiAgICAgICAgb3duZXJEb2N1bWVudCA9IF9yZWYkb3duZXJEb2N1bWVudCA9PT0gdm9pZCAwID8gZ2xvYmFsVGhpcy5kb2N1bWVudCA6IF9yZWYkb3duZXJEb2N1bWVudDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01DYW52YXNGYWN0b3J5KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgX3RoaXMuX2RvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRE9NQ2FudmFzRmFjdG9yeSwgW3tcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbnZhcyBzaXplXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FudmFzID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblxuICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FudmFzOiBjYW52YXMsXG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERPTUNhbnZhc0ZhY3Rvcnk7XG59KEJhc2VDYW52YXNGYWN0b3J5KTtcblxuZXhwb3J0cy5ET01DYW52YXNGYWN0b3J5ID0gRE9NQ2FudmFzRmFjdG9yeTtcblxudmFyIEJhc2VDTWFwUmVhZGVyRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VDTWFwUmVhZGVyRmFjdG9yeShfcmVmMikge1xuICAgIHZhciBfcmVmMiRiYXNlVXJsID0gX3JlZjIuYmFzZVVybCxcbiAgICAgICAgYmFzZVVybCA9IF9yZWYyJGJhc2VVcmwgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMiRiYXNlVXJsLFxuICAgICAgICBfcmVmMiRpc0NvbXByZXNzZWQgPSBfcmVmMi5pc0NvbXByZXNzZWQsXG4gICAgICAgIGlzQ29tcHJlc3NlZCA9IF9yZWYyJGlzQ29tcHJlc3NlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRpc0NvbXByZXNzZWQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUNNYXBSZWFkZXJGYWN0b3J5KTtcblxuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlQ01hcFJlYWRlckZhY3RvcnkpIHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlQ01hcFJlYWRlckZhY3RvcnkuXCIpO1xuICAgIH1cblxuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgdGhpcy5pc0NvbXByZXNzZWQgPSBpc0NvbXByZXNzZWQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZUNNYXBSZWFkZXJGYWN0b3J5LCBbe1xuICAgIGtleTogXCJmZXRjaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2ZldGNoID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmMykge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgbmFtZSwgdXJsLCBjb21wcmVzc2lvblR5cGU7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbmFtZSA9IF9yZWYzLm5hbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5iYXNlVXJsKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIENNYXAgXCJiYXNlVXJsXCIgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkLCBlbnN1cmUgdGhhdCAnICsgJ3RoZSBcImNNYXBVcmxcIiBhbmQgXCJjTWFwUGFja2VkXCIgQVBJIHBhcmFtZXRlcnMgYXJlIHByb3ZpZGVkLicpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDTWFwIG5hbWUgbXVzdCBiZSBzcGVjaWZpZWQuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJhc2VVcmwgKyBuYW1lICsgKHRoaXMuaXNDb21wcmVzc2VkID8gXCIuYmNtYXBcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uVHlwZSA9IHRoaXMuaXNDb21wcmVzc2VkID8gX3V0aWwuQ01hcENvbXByZXNzaW9uVHlwZS5CSU5BUlkgOiBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlLk5PTkU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCB0aGlzLl9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGxvYWQgXCIuY29uY2F0KF90aGlzMi5pc0NvbXByZXNzZWQgPyBcImJpbmFyeSBcIiA6IFwiXCIsIFwiQ01hcCBhdDogXCIpLmNvbmNhdCh1cmwpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBmZXRjaChfeCkge1xuICAgICAgICByZXR1cm4gX2ZldGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmZXRjaDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJfZmV0Y2hEYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpIHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9mZXRjaERhdGFgIGNhbGxlZC5cIik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VDTWFwUmVhZGVyRmFjdG9yeTtcbn0oKTtcblxuZXhwb3J0cy5CYXNlQ01hcFJlYWRlckZhY3RvcnkgPSBCYXNlQ01hcFJlYWRlckZhY3Rvcnk7XG5cbnZhciBET01DTWFwUmVhZGVyRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDTWFwUmVhZGVyRmFjdG9yKSB7XG4gIF9pbmhlcml0cyhET01DTWFwUmVhZGVyRmFjdG9yeSwgX0Jhc2VDTWFwUmVhZGVyRmFjdG9yKTtcblxuICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihET01DTWFwUmVhZGVyRmFjdG9yeSk7XG5cbiAgZnVuY3Rpb24gRE9NQ01hcFJlYWRlckZhY3RvcnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERPTUNNYXBSZWFkZXJGYWN0b3J5KTtcblxuICAgIHJldHVybiBfc3VwZXIyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRE9NQ01hcFJlYWRlckZhY3RvcnksIFt7XG4gICAga2V5OiBcIl9mZXRjaERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZldGNoRGF0YSh1cmwsIGNvbXByZXNzaW9uVHlwZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmIChpc0ZldGNoU3VwcG9ydGVkKCkgJiYgaXNWYWxpZEZldGNoVXJsKHVybCwgZG9jdW1lbnQuYmFzZVVSSSkpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKHVybCkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlMihyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGNNYXBEYXRhO1xuICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzMy5pc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gVWludDhBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgY01hcERhdGEgPSBuZXcgX2NvbnRleHQyLnQwKF9jb250ZXh0Mi50MSk7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIudDIgPSBfdXRpbC5zdHJpbmdUb0J5dGVzO1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIudDMgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgY01hcERhdGEgPSAoMCwgX2NvbnRleHQyLnQyKShfY29udGV4dDIudDMpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY01hcERhdGE6IGNNYXBEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uVHlwZTogY29tcHJlc3Npb25UeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIF9jYWxsZWUyKTtcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94Mikge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF90aGlzMy5pc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCB8fCByZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIGNNYXBEYXRhO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMzLmlzQ29tcHJlc3NlZCAmJiByZXF1ZXN0LnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGNNYXBEYXRhID0gbmV3IFVpbnQ4QXJyYXkocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFfdGhpczMuaXNDb21wcmVzc2VkICYmIHJlcXVlc3QucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgIGNNYXBEYXRhID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNNYXBEYXRhKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGNNYXBEYXRhOiBjTWFwRGF0YSxcbiAgICAgICAgICAgICAgICBjb21wcmVzc2lvblR5cGU6IGNvbXByZXNzaW9uVHlwZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVxdWVzdC5zdGF0dXNUZXh0KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERPTUNNYXBSZWFkZXJGYWN0b3J5O1xufShCYXNlQ01hcFJlYWRlckZhY3RvcnkpO1xuXG5leHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gRE9NQ01hcFJlYWRlckZhY3Rvcnk7XG5cbnZhciBET01TVkdGYWN0b3J5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRE9NU1ZHRmFjdG9yeSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRE9NU1ZHRmFjdG9yeSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRE9NU1ZHRmFjdG9yeSwgW3tcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMCwgXCJJbnZhbGlkIFNWRyBkaW1lbnNpb25zXCIpO1xuICAgICAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIFwic3ZnOnN2Z1wiKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoICsgXCJweFwiKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgXCJweFwiKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwibm9uZVwiKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIFwiICsgd2lkdGggKyBcIiBcIiArIGhlaWdodCk7XG4gICAgICByZXR1cm4gc3ZnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVFbGVtZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSkge1xuICAgICAgKDAsIF91dGlsLmFzc2VydCkodHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIsIFwiSW52YWxpZCBTVkcgZWxlbWVudCB0eXBlXCIpO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIHR5cGUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBET01TVkdGYWN0b3J5O1xufSgpO1xuXG5leHBvcnRzLkRPTVNWR0ZhY3RvcnkgPSBET01TVkdGYWN0b3J5O1xuXG52YXIgUGFnZVZpZXdwb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFnZVZpZXdwb3J0KF9yZWY1KSB7XG4gICAgdmFyIHZpZXdCb3ggPSBfcmVmNS52aWV3Qm94LFxuICAgICAgICBzY2FsZSA9IF9yZWY1LnNjYWxlLFxuICAgICAgICByb3RhdGlvbiA9IF9yZWY1LnJvdGF0aW9uLFxuICAgICAgICBfcmVmNSRvZmZzZXRYID0gX3JlZjUub2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WCA9IF9yZWY1JG9mZnNldFggPT09IHZvaWQgMCA/IDAgOiBfcmVmNSRvZmZzZXRYLFxuICAgICAgICBfcmVmNSRvZmZzZXRZID0gX3JlZjUub2Zmc2V0WSxcbiAgICAgICAgb2Zmc2V0WSA9IF9yZWY1JG9mZnNldFkgPT09IHZvaWQgMCA/IDAgOiBfcmVmNSRvZmZzZXRZLFxuICAgICAgICBfcmVmNSRkb250RmxpcCA9IF9yZWY1LmRvbnRGbGlwLFxuICAgICAgICBkb250RmxpcCA9IF9yZWY1JGRvbnRGbGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1JGRvbnRGbGlwO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VWaWV3cG9ydCk7XG5cbiAgICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XG4gICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgIHZhciBjZW50ZXJYID0gKHZpZXdCb3hbMl0gKyB2aWV3Qm94WzBdKSAvIDI7XG4gICAgdmFyIGNlbnRlclkgPSAodmlld0JveFszXSArIHZpZXdCb3hbMV0pIC8gMjtcbiAgICB2YXIgcm90YXRlQSwgcm90YXRlQiwgcm90YXRlQywgcm90YXRlRDtcbiAgICByb3RhdGlvbiAlPSAzNjA7XG5cbiAgICBpZiAocm90YXRpb24gPCAwKSB7XG4gICAgICByb3RhdGlvbiArPSAzNjA7XG4gICAgfVxuXG4gICAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJvdGF0ZUEgPSAtMTtcbiAgICAgICAgcm90YXRlQiA9IDA7XG4gICAgICAgIHJvdGF0ZUMgPSAwO1xuICAgICAgICByb3RhdGVEID0gMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICByb3RhdGVCID0gMTtcbiAgICAgICAgcm90YXRlQyA9IDE7XG4gICAgICAgIHJvdGF0ZUQgPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICByb3RhdGVCID0gLTE7XG4gICAgICAgIHJvdGF0ZUMgPSAtMTtcbiAgICAgICAgcm90YXRlRCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJvdGF0ZUEgPSAxO1xuICAgICAgICByb3RhdGVCID0gMDtcbiAgICAgICAgcm90YXRlQyA9IDA7XG4gICAgICAgIHJvdGF0ZUQgPSAtMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhZ2VWaWV3cG9ydDogSW52YWxpZCByb3RhdGlvbiwgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDkwIGRlZ3JlZXMuXCIpO1xuICAgIH1cblxuICAgIGlmIChkb250RmxpcCkge1xuICAgICAgcm90YXRlQyA9IC1yb3RhdGVDO1xuICAgICAgcm90YXRlRCA9IC1yb3RhdGVEO1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRDYW52YXNYLCBvZmZzZXRDYW52YXNZO1xuICAgIHZhciB3aWR0aCwgaGVpZ2h0O1xuXG4gICAgaWYgKHJvdGF0ZUEgPT09IDApIHtcbiAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJZIC0gdmlld0JveFsxXSkgKiBzY2FsZSArIG9mZnNldFg7XG4gICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRZO1xuICAgICAgd2lkdGggPSBNYXRoLmFicyh2aWV3Qm94WzNdIC0gdmlld0JveFsxXSkgKiBzY2FsZTtcbiAgICAgIGhlaWdodCA9IE1hdGguYWJzKHZpZXdCb3hbMl0gLSB2aWV3Qm94WzBdKSAqIHNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXRDYW52YXNYID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRYO1xuICAgICAgb2Zmc2V0Q2FudmFzWSA9IE1hdGguYWJzKGNlbnRlclkgLSB2aWV3Qm94WzFdKSAqIHNjYWxlICsgb2Zmc2V0WTtcbiAgICAgIHdpZHRoID0gTWF0aC5hYnModmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7XG4gICAgICBoZWlnaHQgPSBNYXRoLmFicyh2aWV3Qm94WzNdIC0gdmlld0JveFsxXSkgKiBzY2FsZTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYW5zZm9ybSA9IFtyb3RhdGVBICogc2NhbGUsIHJvdGF0ZUIgKiBzY2FsZSwgcm90YXRlQyAqIHNjYWxlLCByb3RhdGVEICogc2NhbGUsIG9mZnNldENhbnZhc1ggLSByb3RhdGVBICogc2NhbGUgKiBjZW50ZXJYIC0gcm90YXRlQyAqIHNjYWxlICogY2VudGVyWSwgb2Zmc2V0Q2FudmFzWSAtIHJvdGF0ZUIgKiBzY2FsZSAqIGNlbnRlclggLSByb3RhdGVEICogc2NhbGUgKiBjZW50ZXJZXTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFnZVZpZXdwb3J0LCBbe1xuICAgIGtleTogXCJjbG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHZhciBfcmVmNiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgX3JlZjYkc2NhbGUgPSBfcmVmNi5zY2FsZSxcbiAgICAgICAgICBzY2FsZSA9IF9yZWY2JHNjYWxlID09PSB2b2lkIDAgPyB0aGlzLnNjYWxlIDogX3JlZjYkc2NhbGUsXG4gICAgICAgICAgX3JlZjYkcm90YXRpb24gPSBfcmVmNi5yb3RhdGlvbixcbiAgICAgICAgICByb3RhdGlvbiA9IF9yZWY2JHJvdGF0aW9uID09PSB2b2lkIDAgPyB0aGlzLnJvdGF0aW9uIDogX3JlZjYkcm90YXRpb24sXG4gICAgICAgICAgX3JlZjYkb2Zmc2V0WCA9IF9yZWY2Lm9mZnNldFgsXG4gICAgICAgICAgb2Zmc2V0WCA9IF9yZWY2JG9mZnNldFggPT09IHZvaWQgMCA/IHRoaXMub2Zmc2V0WCA6IF9yZWY2JG9mZnNldFgsXG4gICAgICAgICAgX3JlZjYkb2Zmc2V0WSA9IF9yZWY2Lm9mZnNldFksXG4gICAgICAgICAgb2Zmc2V0WSA9IF9yZWY2JG9mZnNldFkgPT09IHZvaWQgMCA/IHRoaXMub2Zmc2V0WSA6IF9yZWY2JG9mZnNldFksXG4gICAgICAgICAgX3JlZjYkZG9udEZsaXAgPSBfcmVmNi5kb250RmxpcCxcbiAgICAgICAgICBkb250RmxpcCA9IF9yZWY2JGRvbnRGbGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JGRvbnRGbGlwO1xuXG4gICAgICByZXR1cm4gbmV3IFBhZ2VWaWV3cG9ydCh7XG4gICAgICAgIHZpZXdCb3g6IHRoaXMudmlld0JveC5zbGljZSgpLFxuICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbixcbiAgICAgICAgb2Zmc2V0WDogb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSxcbiAgICAgICAgZG9udEZsaXA6IGRvbnRGbGlwXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29udmVydFRvVmlld3BvcnRQb2ludFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9WaWV3cG9ydFBvaW50KHgsIHkpIHtcbiAgICAgIHJldHVybiBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt4LCB5XSwgdGhpcy50cmFuc2Zvcm0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb252ZXJ0VG9WaWV3cG9ydFJlY3RhbmdsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9WaWV3cG9ydFJlY3RhbmdsZShyZWN0KSB7XG4gICAgICB2YXIgdG9wTGVmdCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JlY3RbMF0sIHJlY3RbMV1dLCB0aGlzLnRyYW5zZm9ybSk7XG5cbiAgICAgIHZhciBib3R0b21SaWdodCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JlY3RbMl0sIHJlY3RbM11dLCB0aGlzLnRyYW5zZm9ybSk7XG5cbiAgICAgIHJldHVybiBbdG9wTGVmdFswXSwgdG9wTGVmdFsxXSwgYm90dG9tUmlnaHRbMF0sIGJvdHRvbVJpZ2h0WzFdXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29udmVydFRvUGRmUG9pbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRvUGRmUG9pbnQoeCwgeSkge1xuICAgICAgcmV0dXJuIF91dGlsLlV0aWwuYXBwbHlJbnZlcnNlVHJhbnNmb3JtKFt4LCB5XSwgdGhpcy50cmFuc2Zvcm0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdlVmlld3BvcnQ7XG59KCk7XG5cbmV4cG9ydHMuUGFnZVZpZXdwb3J0ID0gUGFnZVZpZXdwb3J0O1xuXG52YXIgUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbikge1xuICBfaW5oZXJpdHMoUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uLCBfQmFzZUV4Y2VwdGlvbik7XG5cbiAgdmFyIF9zdXBlcjMgPSBfY3JlYXRlU3VwZXIoUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uKTtcblxuICBmdW5jdGlvbiBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24obXNnLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzNDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24pO1xuXG4gICAgX3RoaXM0ID0gX3N1cGVyMy5jYWxsKHRoaXMsIG1zZyk7XG4gICAgX3RoaXM0LnR5cGUgPSB0eXBlO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICByZXR1cm4gUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uO1xufShfdXRpbC5CYXNlRXhjZXB0aW9uKTtcblxuZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb247XG52YXIgTGlua1RhcmdldCA9IHtcbiAgTk9ORTogMCxcbiAgU0VMRjogMSxcbiAgQkxBTks6IDIsXG4gIFBBUkVOVDogMyxcbiAgVE9QOiA0XG59O1xuZXhwb3J0cy5MaW5rVGFyZ2V0ID0gTGlua1RhcmdldDtcblxuZnVuY3Rpb24gYWRkTGlua0F0dHJpYnV0ZXMobGluaykge1xuICB2YXIgX3JlZjcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgdXJsID0gX3JlZjcudXJsLFxuICAgICAgdGFyZ2V0ID0gX3JlZjcudGFyZ2V0LFxuICAgICAgcmVsID0gX3JlZjcucmVsLFxuICAgICAgX3JlZjckZW5hYmxlZCA9IF9yZWY3LmVuYWJsZWQsXG4gICAgICBlbmFibGVkID0gX3JlZjckZW5hYmxlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY3JGVuYWJsZWQ7XG5cbiAgKDAsIF91dGlsLmFzc2VydCkodXJsICYmIHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIsICdhZGRMaW5rQXR0cmlidXRlczogQSB2YWxpZCBcInVybFwiIHBhcmFtZXRlciBtdXN0IHByb3ZpZGVkLicpO1xuICB2YXIgdXJsTnVsbFJlbW92ZWQgPSAoMCwgX3V0aWwucmVtb3ZlTnVsbENoYXJhY3RlcnMpKHVybCk7XG5cbiAgaWYgKGVuYWJsZWQpIHtcbiAgICBsaW5rLmhyZWYgPSBsaW5rLnRpdGxlID0gdXJsTnVsbFJlbW92ZWQ7XG4gIH0gZWxzZSB7XG4gICAgbGluay5ocmVmID0gXCJcIjtcbiAgICBsaW5rLnRpdGxlID0gXCJEaXNhYmxlZDogXCIuY29uY2F0KHVybE51bGxSZW1vdmVkKTtcblxuICAgIGxpbmsub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHRhcmdldFN0ciA9IFwiXCI7XG5cbiAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICBjYXNlIExpbmtUYXJnZXQuTk9ORTpcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBMaW5rVGFyZ2V0LlNFTEY6XG4gICAgICB0YXJnZXRTdHIgPSBcIl9zZWxmXCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgTGlua1RhcmdldC5CTEFOSzpcbiAgICAgIHRhcmdldFN0ciA9IFwiX2JsYW5rXCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgTGlua1RhcmdldC5QQVJFTlQ6XG4gICAgICB0YXJnZXRTdHIgPSBcIl9wYXJlbnRcIjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBMaW5rVGFyZ2V0LlRPUDpcbiAgICAgIHRhcmdldFN0ciA9IFwiX3RvcFwiO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBsaW5rLnRhcmdldCA9IHRhcmdldFN0cjtcbiAgbGluay5yZWwgPSB0eXBlb2YgcmVsID09PSBcInN0cmluZ1wiID8gcmVsIDogREVGQVVMVF9MSU5LX1JFTDtcbn1cblxuZnVuY3Rpb24gaXNEYXRhU2NoZW1lKHVybCkge1xuICB2YXIgaWkgPSB1cmwubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBpaSAmJiB1cmxbaV0udHJpbSgpID09PSBcIlwiKSB7XG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoaSwgaSArIDUpLnRvTG93ZXJDYXNlKCkgPT09IFwiZGF0YTpcIjtcbn1cblxuZnVuY3Rpb24gaXNQZGZGaWxlKGZpbGVuYW1lKSB7XG4gIHJldHVybiB0eXBlb2YgZmlsZW5hbWUgPT09IFwic3RyaW5nXCIgJiYgL1xcLnBkZiQvaS50ZXN0KGZpbGVuYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0RmlsZW5hbWVGcm9tVXJsKHVybCkge1xuICB2YXIgYW5jaG9yID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICB2YXIgcXVlcnkgPSB1cmwuaW5kZXhPZihcIj9cIik7XG4gIHZhciBlbmQgPSBNYXRoLm1pbihhbmNob3IgPiAwID8gYW5jaG9yIDogdXJsLmxlbmd0aCwgcXVlcnkgPiAwID8gcXVlcnkgOiB1cmwubGVuZ3RoKTtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcodXJsLmxhc3RJbmRleE9mKFwiL1wiLCBlbmQpICsgMSwgZW5kKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGRmRmlsZW5hbWVGcm9tVXJsKHVybCkge1xuICB2YXIgZGVmYXVsdEZpbGVuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcImRvY3VtZW50LnBkZlwiO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRGaWxlbmFtZTtcbiAgfVxuXG4gIGlmIChpc0RhdGFTY2hlbWUodXJsKSkge1xuICAgICgwLCBfdXRpbC53YXJuKSgnZ2V0UGRmRmlsZW5hbWVGcm9tVXJsOiBpZ25vcmUgXCJkYXRhOlwiLVVSTCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4nKTtcbiAgICByZXR1cm4gZGVmYXVsdEZpbGVuYW1lO1xuICB9XG5cbiAgdmFyIHJlVVJJID0gL14oPzooPzpbXjpdKzopP1xcL1xcL1teL10rKT8oW14/I10qKShcXD9bXiNdKik/KCMuKik/JC87XG4gIHZhciByZUZpbGVuYW1lID0gL1teLz8jPV0rXFwucGRmXFxiKD8hLipcXC5wZGZcXGIpL2k7XG4gIHZhciBzcGxpdFVSSSA9IHJlVVJJLmV4ZWModXJsKTtcbiAgdmFyIHN1Z2dlc3RlZEZpbGVuYW1lID0gcmVGaWxlbmFtZS5leGVjKHNwbGl0VVJJWzFdKSB8fCByZUZpbGVuYW1lLmV4ZWMoc3BsaXRVUklbMl0pIHx8IHJlRmlsZW5hbWUuZXhlYyhzcGxpdFVSSVszXSk7XG5cbiAgaWYgKHN1Z2dlc3RlZEZpbGVuYW1lKSB7XG4gICAgc3VnZ2VzdGVkRmlsZW5hbWUgPSBzdWdnZXN0ZWRGaWxlbmFtZVswXTtcblxuICAgIGlmIChzdWdnZXN0ZWRGaWxlbmFtZS5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN1Z2dlc3RlZEZpbGVuYW1lID0gcmVGaWxlbmFtZS5leGVjKGRlY29kZVVSSUNvbXBvbmVudChzdWdnZXN0ZWRGaWxlbmFtZSkpWzBdO1xuICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1Z2dlc3RlZEZpbGVuYW1lIHx8IGRlZmF1bHRGaWxlbmFtZTtcbn1cblxudmFyIFN0YXRUaW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRUaW1lcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdFRpbWVyKTtcblxuICAgIHRoaXMuc3RhcnRlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy50aW1lcyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN0YXRUaW1lciwgW3tcbiAgICBrZXk6IFwidGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lKG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAoMCwgX3V0aWwud2FybikoXCJUaW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcgZm9yIFwiLmNvbmNhdChuYW1lKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhcnRlZFtuYW1lXSA9IERhdGUubm93KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChuYW1lKSB7XG4gICAgICBpZiAoIShuYW1lIGluIHRoaXMuc3RhcnRlZCkpIHtcbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiVGltZXIgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgZm9yIFwiLmNvbmNhdChuYW1lKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudGltZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0ZWRbbmFtZV0sXG4gICAgICAgIGVuZDogRGF0ZS5ub3coKVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgdGhpcy5zdGFydGVkW25hbWVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBvdXRCdWYgPSBbXTtcbiAgICAgIHZhciBsb25nZXN0ID0gMDtcblxuICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMudGltZXMpLFxuICAgICAgICAgIF9zdGVwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciB0aW1lID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgdmFyIG5hbWUgPSB0aW1lLm5hbWU7XG5cbiAgICAgICAgICBpZiAobmFtZS5sZW5ndGggPiBsb25nZXN0KSB7XG4gICAgICAgICAgICBsb25nZXN0ID0gbmFtZS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy50aW1lcyksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBfdGltZSA9IF9zdGVwMi52YWx1ZTtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfdGltZS5lbmQgLSBfdGltZS5zdGFydDtcbiAgICAgICAgICBvdXRCdWYucHVzaChcIlwiLmNvbmNhdChfdGltZS5uYW1lLnBhZEVuZChsb25nZXN0KSwgXCIgXCIpLmNvbmNhdChkdXJhdGlvbiwgXCJtc1xcblwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0QnVmLmpvaW4oXCJcIik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0YXRUaW1lcjtcbn0oKTtcblxuZXhwb3J0cy5TdGF0VGltZXIgPSBTdGF0VGltZXI7XG5cbmZ1bmN0aW9uIGlzRmV0Y2hTdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2YgZmV0Y2ggIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIFJlc3BvbnNlICE9PSBcInVuZGVmaW5lZFwiICYmIFwiYm9keVwiIGluIFJlc3BvbnNlLnByb3RvdHlwZSAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gIT09IFwidW5kZWZpbmVkXCI7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRGZXRjaFVybCh1cmwsIGJhc2VVcmwpIHtcbiAgdHJ5IHtcbiAgICB2YXIgX3JlZjggPSBiYXNlVXJsID8gbmV3IFVSTCh1cmwsIGJhc2VVcmwpIDogbmV3IFVSTCh1cmwpLFxuICAgICAgICBwcm90b2NvbCA9IF9yZWY4LnByb3RvY29sO1xuXG4gICAgcmV0dXJuIHByb3RvY29sID09PSBcImh0dHA6XCIgfHwgcHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRTY3JpcHQoc3JjKSB7XG4gIHZhciByZW1vdmVTY3JpcHRFbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQuc3JjID0gc3JjO1xuXG4gICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGlmIChyZW1vdmVTY3JpcHRFbGVtZW50KSB7XG4gICAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShldnQpO1xuICAgIH07XG5cbiAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCBzY3JpcHQgYXQ6IFwiLmNvbmNhdChzY3JpcHQuc3JjKSkpO1xuICAgIH07XG5cbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKGRldGFpbHMpIHtcbiAgY29uc29sZS5sb2coXCJEZXByZWNhdGVkIEFQSSB1c2FnZTogXCIgKyBkZXRhaWxzKTtcbn1cblxudmFyIHBkZkRhdGVTdHJpbmdSZWdleDtcblxudmFyIFBERkRhdGVTdHJpbmcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQREZEYXRlU3RyaW5nKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRlU3RyaW5nKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZEYXRlU3RyaW5nLCBudWxsLCBbe1xuICAgIGtleTogXCJ0b0RhdGVPYmplY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9EYXRlT2JqZWN0KGlucHV0KSB7XG4gICAgICBpZiAoIWlucHV0IHx8ICEoMCwgX3V0aWwuaXNTdHJpbmcpKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwZGZEYXRlU3RyaW5nUmVnZXgpIHtcbiAgICAgICAgcGRmRGF0ZVN0cmluZ1JlZ2V4ID0gbmV3IFJlZ0V4cChcIl5EOlwiICsgXCIoXFxcXGR7NH0pXCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihbWnwrfC1dKT9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXRjaGVzID0gcGRmRGF0ZVN0cmluZ1JlZ2V4LmV4ZWMoaW5wdXQpO1xuXG4gICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApO1xuICAgICAgdmFyIG1vbnRoID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApO1xuICAgICAgbW9udGggPSBtb250aCA+PSAxICYmIG1vbnRoIDw9IDEyID8gbW9udGggLSAxIDogMDtcbiAgICAgIHZhciBkYXkgPSBwYXJzZUludChtYXRjaGVzWzNdLCAxMCk7XG4gICAgICBkYXkgPSBkYXkgPj0gMSAmJiBkYXkgPD0gMzEgPyBkYXkgOiAxO1xuICAgICAgdmFyIGhvdXIgPSBwYXJzZUludChtYXRjaGVzWzRdLCAxMCk7XG4gICAgICBob3VyID0gaG91ciA+PSAwICYmIGhvdXIgPD0gMjMgPyBob3VyIDogMDtcbiAgICAgIHZhciBtaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMCk7XG4gICAgICBtaW51dGUgPSBtaW51dGUgPj0gMCAmJiBtaW51dGUgPD0gNTkgPyBtaW51dGUgOiAwO1xuICAgICAgdmFyIHNlY29uZCA9IHBhcnNlSW50KG1hdGNoZXNbNl0sIDEwKTtcbiAgICAgIHNlY29uZCA9IHNlY29uZCA+PSAwICYmIHNlY29uZCA8PSA1OSA/IHNlY29uZCA6IDA7XG4gICAgICB2YXIgdW5pdmVyc2FsVGltZVJlbGF0aW9uID0gbWF0Y2hlc1s3XSB8fCBcIlpcIjtcbiAgICAgIHZhciBvZmZzZXRIb3VyID0gcGFyc2VJbnQobWF0Y2hlc1s4XSwgMTApO1xuICAgICAgb2Zmc2V0SG91ciA9IG9mZnNldEhvdXIgPj0gMCAmJiBvZmZzZXRIb3VyIDw9IDIzID8gb2Zmc2V0SG91ciA6IDA7XG4gICAgICB2YXIgb2Zmc2V0TWludXRlID0gcGFyc2VJbnQobWF0Y2hlc1s5XSwgMTApIHx8IDA7XG4gICAgICBvZmZzZXRNaW51dGUgPSBvZmZzZXRNaW51dGUgPj0gMCAmJiBvZmZzZXRNaW51dGUgPD0gNTkgPyBvZmZzZXRNaW51dGUgOiAwO1xuXG4gICAgICBpZiAodW5pdmVyc2FsVGltZVJlbGF0aW9uID09PSBcIi1cIikge1xuICAgICAgICBob3VyICs9IG9mZnNldEhvdXI7XG4gICAgICAgIG1pbnV0ZSArPSBvZmZzZXRNaW51dGU7XG4gICAgICB9IGVsc2UgaWYgKHVuaXZlcnNhbFRpbWVSZWxhdGlvbiA9PT0gXCIrXCIpIHtcbiAgICAgICAgaG91ciAtPSBvZmZzZXRIb3VyO1xuICAgICAgICBtaW51dGUgLT0gb2Zmc2V0TWludXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUERGRGF0ZVN0cmluZztcbn0oKTtcblxuZXhwb3J0cy5QREZEYXRlU3RyaW5nID0gUERGRGF0ZVN0cmluZztcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gX193X3BkZmpzX3JlcXVpcmVfXygzKTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogbW9kdWxlIGRlY29yYXRvciAqLyBtb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fLm5tZChtb2R1bGUpO1xuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIHJ1bnRpbWUgPSBmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7XG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cblxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICBhcmc6IGZuLmNhbGwob2JqLCBhcmcpXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0aHJvd1wiLFxuICAgICAgICBhcmc6IGVyclxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cblxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcblxuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0gR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvciA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8IChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fYXdhaXQ6IGFyZ1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gXCJvYmplY3RcIiAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHVud3JhcHBlZCkge1xuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSwgUHJvbWlzZUltcGwpO1xuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuXG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lID8gR2VuU3RhdGVDb21wbGV0ZWQgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRyeUxvYzogbG9jc1swXVxuICAgIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGtleXMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuXG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcblxuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBkb25lUmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBkb25lOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldChza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJiAodHlwZSA9PT0gXCJicmVha1wiIHx8IHR5cGUgPT09IFwiY29udGludWVcIikgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHwgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG5cbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGV4cG9ydHM7XG59KCggZmFsc2UgPyAwIDogX3R5cGVvZihtb2R1bGUpKSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge30pO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuYXJyYXlCeXRlTGVuZ3RoID0gYXJyYXlCeXRlTGVuZ3RoO1xuZXhwb3J0cy5hcnJheXNUb0J5dGVzID0gYXJyYXlzVG9CeXRlcztcbmV4cG9ydHMuYXNzZXJ0ID0gYXNzZXJ0O1xuZXhwb3J0cy5ieXRlc1RvU3RyaW5nID0gYnl0ZXNUb1N0cmluZztcbmV4cG9ydHMuY3JlYXRlT2JqZWN0VVJMID0gY3JlYXRlT2JqZWN0VVJMO1xuZXhwb3J0cy5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSA9IGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5O1xuZXhwb3J0cy5jcmVhdGVWYWxpZEFic29sdXRlVXJsID0gY3JlYXRlVmFsaWRBYnNvbHV0ZVVybDtcbmV4cG9ydHMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuZXhwb3J0cy5nZXRNb2RpZmljYXRpb25EYXRlID0gZ2V0TW9kaWZpY2F0aW9uRGF0ZTtcbmV4cG9ydHMuZ2V0VmVyYm9zaXR5TGV2ZWwgPSBnZXRWZXJib3NpdHlMZXZlbDtcbmV4cG9ydHMuaW5mbyA9IGluZm87XG5leHBvcnRzLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuZXhwb3J0cy5pc0FycmF5RXF1YWwgPSBpc0FycmF5RXF1YWw7XG5leHBvcnRzLmlzQXNjaWkgPSBpc0FzY2lpO1xuZXhwb3J0cy5pc0Jvb2wgPSBpc0Jvb2w7XG5leHBvcnRzLmlzTnVtID0gaXNOdW07XG5leHBvcnRzLmlzU2FtZU9yaWdpbiA9IGlzU2FtZU9yaWdpbjtcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbmV4cG9ydHMub2JqZWN0RnJvbU1hcCA9IG9iamVjdEZyb21NYXA7XG5leHBvcnRzLm9iamVjdFNpemUgPSBvYmplY3RTaXplO1xuZXhwb3J0cy5yZW1vdmVOdWxsQ2hhcmFjdGVycyA9IHJlbW92ZU51bGxDaGFyYWN0ZXJzO1xuZXhwb3J0cy5zZXRWZXJib3NpdHlMZXZlbCA9IHNldFZlcmJvc2l0eUxldmVsO1xuZXhwb3J0cy5zaGFkb3cgPSBzaGFkb3c7XG5leHBvcnRzLnN0cmluZzMyID0gc3RyaW5nMzI7XG5leHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuZXhwb3J0cy5zdHJpbmdUb1BERlN0cmluZyA9IHN0cmluZ1RvUERGU3RyaW5nO1xuZXhwb3J0cy5zdHJpbmdUb1VURjE2QkVTdHJpbmcgPSBzdHJpbmdUb1VURjE2QkVTdHJpbmc7XG5leHBvcnRzLnN0cmluZ1RvVVRGOFN0cmluZyA9IHN0cmluZ1RvVVRGOFN0cmluZztcbmV4cG9ydHMudW5yZWFjaGFibGUgPSB1bnJlYWNoYWJsZTtcbmV4cG9ydHMudXRmOFN0cmluZ1RvU3RyaW5nID0gdXRmOFN0cmluZ1RvU3RyaW5nO1xuZXhwb3J0cy53YXJuID0gd2FybjtcbmV4cG9ydHMuVmVyYm9zaXR5TGV2ZWwgPSBleHBvcnRzLlV0aWwgPSBleHBvcnRzLlVOU1VQUE9SVEVEX0ZFQVRVUkVTID0gZXhwb3J0cy5Vbmtub3duRXJyb3JFeGNlcHRpb24gPSBleHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IGV4cG9ydHMuVGV4dFJlbmRlcmluZ01vZGUgPSBleHBvcnRzLlN0cmVhbVR5cGUgPSBleHBvcnRzLlBlcm1pc3Npb25GbGFnID0gZXhwb3J0cy5QYXNzd29yZFJlc3BvbnNlcyA9IGV4cG9ydHMuUGFzc3dvcmRFeGNlcHRpb24gPSBleHBvcnRzLlBhZ2VBY3Rpb25FdmVudFR5cGUgPSBleHBvcnRzLk9QUyA9IGV4cG9ydHMuTWlzc2luZ1BERkV4Y2VwdGlvbiA9IGV4cG9ydHMuSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSBleHBvcnRzLklzRXZhbFN1cHBvcnRlZENhY2hlZCA9IGV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IGV4cG9ydHMuSW1hZ2VLaW5kID0gZXhwb3J0cy5JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkZvcm1hdEVycm9yID0gZXhwb3J0cy5Gb250VHlwZSA9IGV4cG9ydHMuRk9OVF9JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkRvY3VtZW50QWN0aW9uRXZlbnRUeXBlID0gZXhwb3J0cy5DTWFwQ29tcHJlc3Npb25UeXBlID0gZXhwb3J0cy5CYXNlRXhjZXB0aW9uID0gZXhwb3J0cy5Bbm5vdGF0aW9uVHlwZSA9IGV4cG9ydHMuQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uUmV2aWV3U3RhdGUgPSBleHBvcnRzLkFubm90YXRpb25SZXBseVR5cGUgPSBleHBvcnRzLkFubm90YXRpb25NYXJrZWRTdGF0ZSA9IGV4cG9ydHMuQW5ub3RhdGlvbkZsYWcgPSBleHBvcnRzLkFubm90YXRpb25GaWVsZEZsYWcgPSBleHBvcnRzLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUgPSBleHBvcnRzLkFubm90YXRpb25BY3Rpb25FdmVudFR5cGUgPSBleHBvcnRzLkFib3J0RXhjZXB0aW9uID0gdm9pZCAwO1xuXG5fX3dfcGRmanNfcmVxdWlyZV9fKDUpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMykgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTM7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgSURFTlRJVFlfTUFUUklYID0gWzEsIDAsIDAsIDEsIDAsIDBdO1xuZXhwb3J0cy5JREVOVElUWV9NQVRSSVggPSBJREVOVElUWV9NQVRSSVg7XG52YXIgRk9OVF9JREVOVElUWV9NQVRSSVggPSBbMC4wMDEsIDAsIDAsIDAuMDAxLCAwLCAwXTtcbmV4cG9ydHMuRk9OVF9JREVOVElUWV9NQVRSSVggPSBGT05UX0lERU5USVRZX01BVFJJWDtcbnZhciBQZXJtaXNzaW9uRmxhZyA9IHtcbiAgUFJJTlQ6IDB4MDQsXG4gIE1PRElGWV9DT05URU5UUzogMHgwOCxcbiAgQ09QWTogMHgxMCxcbiAgTU9ESUZZX0FOTk9UQVRJT05TOiAweDIwLFxuICBGSUxMX0lOVEVSQUNUSVZFX0ZPUk1TOiAweDEwMCxcbiAgQ09QWV9GT1JfQUNDRVNTSUJJTElUWTogMHgyMDAsXG4gIEFTU0VNQkxFOiAweDQwMCxcbiAgUFJJTlRfSElHSF9RVUFMSVRZOiAweDgwMFxufTtcbmV4cG9ydHMuUGVybWlzc2lvbkZsYWcgPSBQZXJtaXNzaW9uRmxhZztcbnZhciBUZXh0UmVuZGVyaW5nTW9kZSA9IHtcbiAgRklMTDogMCxcbiAgU1RST0tFOiAxLFxuICBGSUxMX1NUUk9LRTogMixcbiAgSU5WSVNJQkxFOiAzLFxuICBGSUxMX0FERF9UT19QQVRIOiA0LFxuICBTVFJPS0VfQUREX1RPX1BBVEg6IDUsXG4gIEZJTExfU1RST0tFX0FERF9UT19QQVRIOiA2LFxuICBBRERfVE9fUEFUSDogNyxcbiAgRklMTF9TVFJPS0VfTUFTSzogMyxcbiAgQUREX1RPX1BBVEhfRkxBRzogNFxufTtcbmV4cG9ydHMuVGV4dFJlbmRlcmluZ01vZGUgPSBUZXh0UmVuZGVyaW5nTW9kZTtcbnZhciBJbWFnZUtpbmQgPSB7XG4gIEdSQVlTQ0FMRV8xQlBQOiAxLFxuICBSR0JfMjRCUFA6IDIsXG4gIFJHQkFfMzJCUFA6IDNcbn07XG5leHBvcnRzLkltYWdlS2luZCA9IEltYWdlS2luZDtcbnZhciBBbm5vdGF0aW9uVHlwZSA9IHtcbiAgVEVYVDogMSxcbiAgTElOSzogMixcbiAgRlJFRVRFWFQ6IDMsXG4gIExJTkU6IDQsXG4gIFNRVUFSRTogNSxcbiAgQ0lSQ0xFOiA2LFxuICBQT0xZR09OOiA3LFxuICBQT0xZTElORTogOCxcbiAgSElHSExJR0hUOiA5LFxuICBVTkRFUkxJTkU6IDEwLFxuICBTUVVJR0dMWTogMTEsXG4gIFNUUklLRU9VVDogMTIsXG4gIFNUQU1QOiAxMyxcbiAgQ0FSRVQ6IDE0LFxuICBJTks6IDE1LFxuICBQT1BVUDogMTYsXG4gIEZJTEVBVFRBQ0hNRU5UOiAxNyxcbiAgU09VTkQ6IDE4LFxuICBNT1ZJRTogMTksXG4gIFdJREdFVDogMjAsXG4gIFNDUkVFTjogMjEsXG4gIFBSSU5URVJNQVJLOiAyMixcbiAgVFJBUE5FVDogMjMsXG4gIFdBVEVSTUFSSzogMjQsXG4gIFRIUkVFRDogMjUsXG4gIFJFREFDVDogMjZcbn07XG5leHBvcnRzLkFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGU7XG52YXIgQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0ge1xuICBNQVJLRUQ6IFwiTWFya2VkXCIsXG4gIFJFVklFVzogXCJSZXZpZXdcIlxufTtcbmV4cG9ydHMuQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0gQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlO1xudmFyIEFubm90YXRpb25NYXJrZWRTdGF0ZSA9IHtcbiAgTUFSS0VEOiBcIk1hcmtlZFwiLFxuICBVTk1BUktFRDogXCJVbm1hcmtlZFwiXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uTWFya2VkU3RhdGUgPSBBbm5vdGF0aW9uTWFya2VkU3RhdGU7XG52YXIgQW5ub3RhdGlvblJldmlld1N0YXRlID0ge1xuICBBQ0NFUFRFRDogXCJBY2NlcHRlZFwiLFxuICBSRUpFQ1RFRDogXCJSZWplY3RlZFwiLFxuICBDQU5DRUxMRUQ6IFwiQ2FuY2VsbGVkXCIsXG4gIENPTVBMRVRFRDogXCJDb21wbGV0ZWRcIixcbiAgTk9ORTogXCJOb25lXCJcbn07XG5leHBvcnRzLkFubm90YXRpb25SZXZpZXdTdGF0ZSA9IEFubm90YXRpb25SZXZpZXdTdGF0ZTtcbnZhciBBbm5vdGF0aW9uUmVwbHlUeXBlID0ge1xuICBHUk9VUDogXCJHcm91cFwiLFxuICBSRVBMWTogXCJSXCJcbn07XG5leHBvcnRzLkFubm90YXRpb25SZXBseVR5cGUgPSBBbm5vdGF0aW9uUmVwbHlUeXBlO1xudmFyIEFubm90YXRpb25GbGFnID0ge1xuICBJTlZJU0lCTEU6IDB4MDEsXG4gIEhJRERFTjogMHgwMixcbiAgUFJJTlQ6IDB4MDQsXG4gIE5PWk9PTTogMHgwOCxcbiAgTk9ST1RBVEU6IDB4MTAsXG4gIE5PVklFVzogMHgyMCxcbiAgUkVBRE9OTFk6IDB4NDAsXG4gIExPQ0tFRDogMHg4MCxcbiAgVE9HR0xFTk9WSUVXOiAweDEwMCxcbiAgTE9DS0VEQ09OVEVOVFM6IDB4MjAwXG59O1xuZXhwb3J0cy5Bbm5vdGF0aW9uRmxhZyA9IEFubm90YXRpb25GbGFnO1xudmFyIEFubm90YXRpb25GaWVsZEZsYWcgPSB7XG4gIFJFQURPTkxZOiAweDAwMDAwMDEsXG4gIFJFUVVJUkVEOiAweDAwMDAwMDIsXG4gIE5PRVhQT1JUOiAweDAwMDAwMDQsXG4gIE1VTFRJTElORTogMHgwMDAxMDAwLFxuICBQQVNTV09SRDogMHgwMDAyMDAwLFxuICBOT1RPR0dMRVRPT0ZGOiAweDAwMDQwMDAsXG4gIFJBRElPOiAweDAwMDgwMDAsXG4gIFBVU0hCVVRUT046IDB4MDAxMDAwMCxcbiAgQ09NQk86IDB4MDAyMDAwMCxcbiAgRURJVDogMHgwMDQwMDAwLFxuICBTT1JUOiAweDAwODAwMDAsXG4gIEZJTEVTRUxFQ1Q6IDB4MDEwMDAwMCxcbiAgTVVMVElTRUxFQ1Q6IDB4MDIwMDAwMCxcbiAgRE9OT1RTUEVMTENIRUNLOiAweDA0MDAwMDAsXG4gIERPTk9UU0NST0xMOiAweDA4MDAwMDAsXG4gIENPTUI6IDB4MTAwMDAwMCxcbiAgUklDSFRFWFQ6IDB4MjAwMDAwMCxcbiAgUkFESU9TSU5VTklTT046IDB4MjAwMDAwMCxcbiAgQ09NTUlUT05TRUxDSEFOR0U6IDB4NDAwMDAwMFxufTtcbmV4cG9ydHMuQW5ub3RhdGlvbkZpZWxkRmxhZyA9IEFubm90YXRpb25GaWVsZEZsYWc7XG52YXIgQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSA9IHtcbiAgU09MSUQ6IDEsXG4gIERBU0hFRDogMixcbiAgQkVWRUxFRDogMyxcbiAgSU5TRVQ6IDQsXG4gIFVOREVSTElORTogNVxufTtcbmV4cG9ydHMuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSA9IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGU7XG52YXIgQW5ub3RhdGlvbkFjdGlvbkV2ZW50VHlwZSA9IHtcbiAgRTogXCJNb3VzZSBFbnRlclwiLFxuICBYOiBcIk1vdXNlIEV4aXRcIixcbiAgRDogXCJNb3VzZSBEb3duXCIsXG4gIFU6IFwiTW91c2UgVXBcIixcbiAgRm86IFwiRm9jdXNcIixcbiAgQmw6IFwiQmx1clwiLFxuICBQTzogXCJQYWdlT3BlblwiLFxuICBQQzogXCJQYWdlQ2xvc2VcIixcbiAgUFY6IFwiUGFnZVZpc2libGVcIixcbiAgUEk6IFwiUGFnZUludmlzaWJsZVwiLFxuICBLOiBcIktleXN0cm9rZVwiLFxuICBGOiBcIkZvcm1hdFwiLFxuICBWOiBcIlZhbGlkYXRlXCIsXG4gIEM6IFwiQ2FsY3VsYXRlXCJcbn07XG5leHBvcnRzLkFubm90YXRpb25BY3Rpb25FdmVudFR5cGUgPSBBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlO1xudmFyIERvY3VtZW50QWN0aW9uRXZlbnRUeXBlID0ge1xuICBXQzogXCJXaWxsQ2xvc2VcIixcbiAgV1M6IFwiV2lsbFNhdmVcIixcbiAgRFM6IFwiRGlkU2F2ZVwiLFxuICBXUDogXCJXaWxsUHJpbnRcIixcbiAgRFA6IFwiRGlkUHJpbnRcIlxufTtcbmV4cG9ydHMuRG9jdW1lbnRBY3Rpb25FdmVudFR5cGUgPSBEb2N1bWVudEFjdGlvbkV2ZW50VHlwZTtcbnZhciBQYWdlQWN0aW9uRXZlbnRUeXBlID0ge1xuICBPOiBcIlBhZ2VPcGVuXCIsXG4gIEM6IFwiUGFnZUNsb3NlXCJcbn07XG5leHBvcnRzLlBhZ2VBY3Rpb25FdmVudFR5cGUgPSBQYWdlQWN0aW9uRXZlbnRUeXBlO1xudmFyIFN0cmVhbVR5cGUgPSB7XG4gIFVOS05PV046IFwiVU5LTk9XTlwiLFxuICBGTEFURTogXCJGTEFURVwiLFxuICBMWlc6IFwiTFpXXCIsXG4gIERDVDogXCJEQ1RcIixcbiAgSlBYOiBcIkpQWFwiLFxuICBKQklHOiBcIkpCSUdcIixcbiAgQTg1OiBcIkE4NVwiLFxuICBBSFg6IFwiQUhYXCIsXG4gIENDRjogXCJDQ0ZcIixcbiAgUkxYOiBcIlJMWFwiXG59O1xuZXhwb3J0cy5TdHJlYW1UeXBlID0gU3RyZWFtVHlwZTtcbnZhciBGb250VHlwZSA9IHtcbiAgVU5LTk9XTjogXCJVTktOT1dOXCIsXG4gIFRZUEUxOiBcIlRZUEUxXCIsXG4gIFRZUEUxQzogXCJUWVBFMUNcIixcbiAgQ0lERk9OVFRZUEUwOiBcIkNJREZPTlRUWVBFMFwiLFxuICBDSURGT05UVFlQRTBDOiBcIkNJREZPTlRUWVBFMENcIixcbiAgVFJVRVRZUEU6IFwiVFJVRVRZUEVcIixcbiAgQ0lERk9OVFRZUEUyOiBcIkNJREZPTlRUWVBFMlwiLFxuICBUWVBFMzogXCJUWVBFM1wiLFxuICBPUEVOVFlQRTogXCJPUEVOVFlQRVwiLFxuICBUWVBFMDogXCJUWVBFMFwiLFxuICBNTVRZUEUxOiBcIk1NVFlQRTFcIlxufTtcbmV4cG9ydHMuRm9udFR5cGUgPSBGb250VHlwZTtcbnZhciBWZXJib3NpdHlMZXZlbCA9IHtcbiAgRVJST1JTOiAwLFxuICBXQVJOSU5HUzogMSxcbiAgSU5GT1M6IDVcbn07XG5leHBvcnRzLlZlcmJvc2l0eUxldmVsID0gVmVyYm9zaXR5TGV2ZWw7XG52YXIgQ01hcENvbXByZXNzaW9uVHlwZSA9IHtcbiAgTk9ORTogMCxcbiAgQklOQVJZOiAxLFxuICBTVFJFQU06IDJcbn07XG5leHBvcnRzLkNNYXBDb21wcmVzc2lvblR5cGUgPSBDTWFwQ29tcHJlc3Npb25UeXBlO1xudmFyIE9QUyA9IHtcbiAgZGVwZW5kZW5jeTogMSxcbiAgc2V0TGluZVdpZHRoOiAyLFxuICBzZXRMaW5lQ2FwOiAzLFxuICBzZXRMaW5lSm9pbjogNCxcbiAgc2V0TWl0ZXJMaW1pdDogNSxcbiAgc2V0RGFzaDogNixcbiAgc2V0UmVuZGVyaW5nSW50ZW50OiA3LFxuICBzZXRGbGF0bmVzczogOCxcbiAgc2V0R1N0YXRlOiA5LFxuICBzYXZlOiAxMCxcbiAgcmVzdG9yZTogMTEsXG4gIHRyYW5zZm9ybTogMTIsXG4gIG1vdmVUbzogMTMsXG4gIGxpbmVUbzogMTQsXG4gIGN1cnZlVG86IDE1LFxuICBjdXJ2ZVRvMjogMTYsXG4gIGN1cnZlVG8zOiAxNyxcbiAgY2xvc2VQYXRoOiAxOCxcbiAgcmVjdGFuZ2xlOiAxOSxcbiAgc3Ryb2tlOiAyMCxcbiAgY2xvc2VTdHJva2U6IDIxLFxuICBmaWxsOiAyMixcbiAgZW9GaWxsOiAyMyxcbiAgZmlsbFN0cm9rZTogMjQsXG4gIGVvRmlsbFN0cm9rZTogMjUsXG4gIGNsb3NlRmlsbFN0cm9rZTogMjYsXG4gIGNsb3NlRU9GaWxsU3Ryb2tlOiAyNyxcbiAgZW5kUGF0aDogMjgsXG4gIGNsaXA6IDI5LFxuICBlb0NsaXA6IDMwLFxuICBiZWdpblRleHQ6IDMxLFxuICBlbmRUZXh0OiAzMixcbiAgc2V0Q2hhclNwYWNpbmc6IDMzLFxuICBzZXRXb3JkU3BhY2luZzogMzQsXG4gIHNldEhTY2FsZTogMzUsXG4gIHNldExlYWRpbmc6IDM2LFxuICBzZXRGb250OiAzNyxcbiAgc2V0VGV4dFJlbmRlcmluZ01vZGU6IDM4LFxuICBzZXRUZXh0UmlzZTogMzksXG4gIG1vdmVUZXh0OiA0MCxcbiAgc2V0TGVhZGluZ01vdmVUZXh0OiA0MSxcbiAgc2V0VGV4dE1hdHJpeDogNDIsXG4gIG5leHRMaW5lOiA0MyxcbiAgc2hvd1RleHQ6IDQ0LFxuICBzaG93U3BhY2VkVGV4dDogNDUsXG4gIG5leHRMaW5lU2hvd1RleHQ6IDQ2LFxuICBuZXh0TGluZVNldFNwYWNpbmdTaG93VGV4dDogNDcsXG4gIHNldENoYXJXaWR0aDogNDgsXG4gIHNldENoYXJXaWR0aEFuZEJvdW5kczogNDksXG4gIHNldFN0cm9rZUNvbG9yU3BhY2U6IDUwLFxuICBzZXRGaWxsQ29sb3JTcGFjZTogNTEsXG4gIHNldFN0cm9rZUNvbG9yOiA1MixcbiAgc2V0U3Ryb2tlQ29sb3JOOiA1MyxcbiAgc2V0RmlsbENvbG9yOiA1NCxcbiAgc2V0RmlsbENvbG9yTjogNTUsXG4gIHNldFN0cm9rZUdyYXk6IDU2LFxuICBzZXRGaWxsR3JheTogNTcsXG4gIHNldFN0cm9rZVJHQkNvbG9yOiA1OCxcbiAgc2V0RmlsbFJHQkNvbG9yOiA1OSxcbiAgc2V0U3Ryb2tlQ01ZS0NvbG9yOiA2MCxcbiAgc2V0RmlsbENNWUtDb2xvcjogNjEsXG4gIHNoYWRpbmdGaWxsOiA2MixcbiAgYmVnaW5JbmxpbmVJbWFnZTogNjMsXG4gIGJlZ2luSW1hZ2VEYXRhOiA2NCxcbiAgZW5kSW5saW5lSW1hZ2U6IDY1LFxuICBwYWludFhPYmplY3Q6IDY2LFxuICBtYXJrUG9pbnQ6IDY3LFxuICBtYXJrUG9pbnRQcm9wczogNjgsXG4gIGJlZ2luTWFya2VkQ29udGVudDogNjksXG4gIGJlZ2luTWFya2VkQ29udGVudFByb3BzOiA3MCxcbiAgZW5kTWFya2VkQ29udGVudDogNzEsXG4gIGJlZ2luQ29tcGF0OiA3MixcbiAgZW5kQ29tcGF0OiA3MyxcbiAgcGFpbnRGb3JtWE9iamVjdEJlZ2luOiA3NCxcbiAgcGFpbnRGb3JtWE9iamVjdEVuZDogNzUsXG4gIGJlZ2luR3JvdXA6IDc2LFxuICBlbmRHcm91cDogNzcsXG4gIGJlZ2luQW5ub3RhdGlvbnM6IDc4LFxuICBlbmRBbm5vdGF0aW9uczogNzksXG4gIGJlZ2luQW5ub3RhdGlvbjogODAsXG4gIGVuZEFubm90YXRpb246IDgxLFxuICBwYWludEpwZWdYT2JqZWN0OiA4MixcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0OiA4MyxcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXA6IDg0LFxuICBwYWludEltYWdlWE9iamVjdDogODUsXG4gIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0OiA4NixcbiAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDogODcsXG4gIHBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0OiA4OCxcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0OiA4OSxcbiAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiA5MCxcbiAgY29uc3RydWN0UGF0aDogOTFcbn07XG5leHBvcnRzLk9QUyA9IE9QUztcbnZhciBVTlNVUFBPUlRFRF9GRUFUVVJFUyA9IHtcbiAgdW5rbm93bjogXCJ1bmtub3duXCIsXG4gIGZvcm1zOiBcImZvcm1zXCIsXG4gIGphdmFTY3JpcHQ6IFwiamF2YVNjcmlwdFwiLFxuICBzaWduYXR1cmVzOiBcInNpZ25hdHVyZXNcIixcbiAgc21hc2s6IFwic21hc2tcIixcbiAgc2hhZGluZ1BhdHRlcm46IFwic2hhZGluZ1BhdHRlcm5cIixcbiAgZm9udDogXCJmb250XCIsXG4gIGVycm9yVGlsaW5nUGF0dGVybjogXCJlcnJvclRpbGluZ1BhdHRlcm5cIixcbiAgZXJyb3JFeHRHU3RhdGU6IFwiZXJyb3JFeHRHU3RhdGVcIixcbiAgZXJyb3JYT2JqZWN0OiBcImVycm9yWE9iamVjdFwiLFxuICBlcnJvckZvbnRMb2FkVHlwZTM6IFwiZXJyb3JGb250TG9hZFR5cGUzXCIsXG4gIGVycm9yRm9udFN0YXRlOiBcImVycm9yRm9udFN0YXRlXCIsXG4gIGVycm9yRm9udE1pc3Npbmc6IFwiZXJyb3JGb250TWlzc2luZ1wiLFxuICBlcnJvckZvbnRUcmFuc2xhdGU6IFwiZXJyb3JGb250VHJhbnNsYXRlXCIsXG4gIGVycm9yQ29sb3JTcGFjZTogXCJlcnJvckNvbG9yU3BhY2VcIixcbiAgZXJyb3JPcGVyYXRvckxpc3Q6IFwiZXJyb3JPcGVyYXRvckxpc3RcIixcbiAgZXJyb3JGb250VG9Vbmljb2RlOiBcImVycm9yRm9udFRvVW5pY29kZVwiLFxuICBlcnJvckZvbnRMb2FkTmF0aXZlOiBcImVycm9yRm9udExvYWROYXRpdmVcIixcbiAgZXJyb3JGb250QnVpbGRQYXRoOiBcImVycm9yRm9udEJ1aWxkUGF0aFwiLFxuICBlcnJvckZvbnRHZXRQYXRoOiBcImVycm9yRm9udEdldFBhdGhcIixcbiAgZXJyb3JNYXJrZWRDb250ZW50OiBcImVycm9yTWFya2VkQ29udGVudFwiXG59O1xuZXhwb3J0cy5VTlNVUFBPUlRFRF9GRUFUVVJFUyA9IFVOU1VQUE9SVEVEX0ZFQVRVUkVTO1xudmFyIFBhc3N3b3JkUmVzcG9uc2VzID0ge1xuICBORUVEX1BBU1NXT1JEOiAxLFxuICBJTkNPUlJFQ1RfUEFTU1dPUkQ6IDJcbn07XG5leHBvcnRzLlBhc3N3b3JkUmVzcG9uc2VzID0gUGFzc3dvcmRSZXNwb25zZXM7XG52YXIgdmVyYm9zaXR5ID0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1M7XG5cbmZ1bmN0aW9uIHNldFZlcmJvc2l0eUxldmVsKGxldmVsKSB7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGxldmVsKSkge1xuICAgIHZlcmJvc2l0eSA9IGxldmVsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZlcmJvc2l0eUxldmVsKCkge1xuICByZXR1cm4gdmVyYm9zaXR5O1xufVxuXG5mdW5jdGlvbiBpbmZvKG1zZykge1xuICBpZiAodmVyYm9zaXR5ID49IFZlcmJvc2l0eUxldmVsLklORk9TKSB7XG4gICAgY29uc29sZS5sb2coXCJJbmZvOiBcIi5jb25jYXQobXNnKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgaWYgKHZlcmJvc2l0eSA+PSBWZXJib3NpdHlMZXZlbC5XQVJOSU5HUykge1xuICAgIGNvbnNvbGUubG9nKFwiV2FybmluZzogXCIuY29uY2F0KG1zZykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVucmVhY2hhYmxlKG1zZykge1xuICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmQsIG1zZykge1xuICBpZiAoIWNvbmQpIHtcbiAgICB1bnJlYWNoYWJsZShtc2cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZU9yaWdpbihiYXNlVXJsLCBvdGhlclVybCkge1xuICB2YXIgYmFzZTtcblxuICB0cnkge1xuICAgIGJhc2UgPSBuZXcgVVJMKGJhc2VVcmwpO1xuXG4gICAgaWYgKCFiYXNlLm9yaWdpbiB8fCBiYXNlLm9yaWdpbiA9PT0gXCJudWxsXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgb3RoZXIgPSBuZXcgVVJMKG90aGVyVXJsLCBiYXNlKTtcbiAgcmV0dXJuIGJhc2Uub3JpZ2luID09PSBvdGhlci5vcmlnaW47XG59XG5cbmZ1bmN0aW9uIF9pc1ZhbGlkUHJvdG9jb2wodXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3dpdGNoICh1cmwucHJvdG9jb2wpIHtcbiAgICBjYXNlIFwiaHR0cDpcIjpcbiAgICBjYXNlIFwiaHR0cHM6XCI6XG4gICAgY2FzZSBcImZ0cDpcIjpcbiAgICBjYXNlIFwibWFpbHRvOlwiOlxuICAgIGNhc2UgXCJ0ZWw6XCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCh1cmwsIGJhc2VVcmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGFic29sdXRlVXJsID0gYmFzZVVybCA/IG5ldyBVUkwodXJsLCBiYXNlVXJsKSA6IG5ldyBVUkwodXJsKTtcblxuICAgIGlmIChfaXNWYWxpZFByb3RvY29sKGFic29sdXRlVXJsKSkge1xuICAgICAgcmV0dXJuIGFic29sdXRlVXJsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXgpIHt9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHNoYWRvdyhvYmosIHByb3AsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBCYXNlRXhjZXB0aW9uID0gZnVuY3Rpb24gQmFzZUV4Y2VwdGlvbkNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIEJhc2VFeGNlcHRpb24obWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlRXhjZXB0aW9uKSB7XG4gICAgICB1bnJlYWNoYWJsZShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VFeGNlcHRpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgQmFzZUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbiAgQmFzZUV4Y2VwdGlvbi5jb25zdHJ1Y3RvciA9IEJhc2VFeGNlcHRpb247XG4gIHJldHVybiBCYXNlRXhjZXB0aW9uO1xufSgpO1xuXG5leHBvcnRzLkJhc2VFeGNlcHRpb24gPSBCYXNlRXhjZXB0aW9uO1xuXG52YXIgUGFzc3dvcmRFeGNlcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlRXhjZXB0aW9uKSB7XG4gIF9pbmhlcml0cyhQYXNzd29yZEV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb24pO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGFzc3dvcmRFeGNlcHRpb24pO1xuXG4gIGZ1bmN0aW9uIFBhc3N3b3JkRXhjZXB0aW9uKG1zZywgY29kZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXNzd29yZEV4Y2VwdGlvbik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZyk7XG4gICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFBhc3N3b3JkRXhjZXB0aW9uO1xufShCYXNlRXhjZXB0aW9uKTtcblxuZXhwb3J0cy5QYXNzd29yZEV4Y2VwdGlvbiA9IFBhc3N3b3JkRXhjZXB0aW9uO1xuXG52YXIgVW5rbm93bkVycm9yRXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjIpIHtcbiAgX2luaGVyaXRzKFVua25vd25FcnJvckV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb24yKTtcblxuICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihVbmtub3duRXJyb3JFeGNlcHRpb24pO1xuXG4gIGZ1bmN0aW9uIFVua25vd25FcnJvckV4Y2VwdGlvbihtc2csIGRldGFpbHMpIHtcbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVua25vd25FcnJvckV4Y2VwdGlvbik7XG5cbiAgICBfdGhpczIgPSBfc3VwZXIyLmNhbGwodGhpcywgbXNnKTtcbiAgICBfdGhpczIuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIHJldHVybiBVbmtub3duRXJyb3JFeGNlcHRpb247XG59KEJhc2VFeGNlcHRpb24pO1xuXG5leHBvcnRzLlVua25vd25FcnJvckV4Y2VwdGlvbiA9IFVua25vd25FcnJvckV4Y2VwdGlvbjtcblxudmFyIEludmFsaWRQREZFeGNlcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlRXhjZXB0aW9uMykge1xuICBfaW5oZXJpdHMoSW52YWxpZFBERkV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb24zKTtcblxuICB2YXIgX3N1cGVyMyA9IF9jcmVhdGVTdXBlcihJbnZhbGlkUERGRXhjZXB0aW9uKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkUERGRXhjZXB0aW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnZhbGlkUERGRXhjZXB0aW9uKTtcblxuICAgIHJldHVybiBfc3VwZXIzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gSW52YWxpZFBERkV4Y2VwdGlvbjtcbn0oQmFzZUV4Y2VwdGlvbik7XG5cbmV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IEludmFsaWRQREZFeGNlcHRpb247XG5cbnZhciBNaXNzaW5nUERGRXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjQpIHtcbiAgX2luaGVyaXRzKE1pc3NpbmdQREZFeGNlcHRpb24sIF9CYXNlRXhjZXB0aW9uNCk7XG5cbiAgdmFyIF9zdXBlcjQgPSBfY3JlYXRlU3VwZXIoTWlzc2luZ1BERkV4Y2VwdGlvbik7XG5cbiAgZnVuY3Rpb24gTWlzc2luZ1BERkV4Y2VwdGlvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWlzc2luZ1BERkV4Y2VwdGlvbik7XG5cbiAgICByZXR1cm4gX3N1cGVyNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIE1pc3NpbmdQREZFeGNlcHRpb247XG59KEJhc2VFeGNlcHRpb24pO1xuXG5leHBvcnRzLk1pc3NpbmdQREZFeGNlcHRpb24gPSBNaXNzaW5nUERGRXhjZXB0aW9uO1xuXG52YXIgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjUpIHtcbiAgX2luaGVyaXRzKFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb241KTtcblxuICB2YXIgX3N1cGVyNSA9IF9jcmVhdGVTdXBlcihVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24pO1xuXG4gIGZ1bmN0aW9uIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihtc2csIHN0YXR1cykge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uKTtcblxuICAgIF90aGlzMyA9IF9zdXBlcjUuY2FsbCh0aGlzLCBtc2cpO1xuICAgIF90aGlzMy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHJldHVybiBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb247XG59KEJhc2VFeGNlcHRpb24pO1xuXG5leHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjtcblxudmFyIEZvcm1hdEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjYpIHtcbiAgX2luaGVyaXRzKEZvcm1hdEVycm9yLCBfQmFzZUV4Y2VwdGlvbjYpO1xuXG4gIHZhciBfc3VwZXI2ID0gX2NyZWF0ZVN1cGVyKEZvcm1hdEVycm9yKTtcblxuICBmdW5jdGlvbiBGb3JtYXRFcnJvcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybWF0RXJyb3IpO1xuXG4gICAgcmV0dXJuIF9zdXBlcjYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBGb3JtYXRFcnJvcjtcbn0oQmFzZUV4Y2VwdGlvbik7XG5cbmV4cG9ydHMuRm9ybWF0RXJyb3IgPSBGb3JtYXRFcnJvcjtcblxudmFyIEFib3J0RXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjcpIHtcbiAgX2luaGVyaXRzKEFib3J0RXhjZXB0aW9uLCBfQmFzZUV4Y2VwdGlvbjcpO1xuXG4gIHZhciBfc3VwZXI3ID0gX2NyZWF0ZVN1cGVyKEFib3J0RXhjZXB0aW9uKTtcblxuICBmdW5jdGlvbiBBYm9ydEV4Y2VwdGlvbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJvcnRFeGNlcHRpb24pO1xuXG4gICAgcmV0dXJuIF9zdXBlcjcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBBYm9ydEV4Y2VwdGlvbjtcbn0oQmFzZUV4Y2VwdGlvbik7XG5cbmV4cG9ydHMuQWJvcnRFeGNlcHRpb24gPSBBYm9ydEV4Y2VwdGlvbjtcbnZhciBOdWxsQ2hhcmFjdGVyc1JlZ0V4cCA9IC9cXHgwMC9nO1xuXG5mdW5jdGlvbiByZW1vdmVOdWxsQ2hhcmFjdGVycyhzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICB3YXJuKFwiVGhlIGFyZ3VtZW50IGZvciByZW1vdmVOdWxsQ2hhcmFjdGVycyBtdXN0IGJlIGEgc3RyaW5nLlwiKTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKE51bGxDaGFyYWN0ZXJzUmVnRXhwLCBcIlwiKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlcykge1xuICBhc3NlcnQoYnl0ZXMgIT09IG51bGwgJiYgX3R5cGVvZihieXRlcykgPT09IFwib2JqZWN0XCIgJiYgYnl0ZXMubGVuZ3RoICE9PSB1bmRlZmluZWQsIFwiSW52YWxpZCBhcmd1bWVudCBmb3IgYnl0ZXNUb1N0cmluZ1wiKTtcbiAgdmFyIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcbiAgdmFyIE1BWF9BUkdVTUVOVF9DT1VOVCA9IDgxOTI7XG5cbiAgaWYgKGxlbmd0aCA8IE1BWF9BUkdVTUVOVF9DT1VOVCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ5dGVzKTtcbiAgfVxuXG4gIHZhciBzdHJCdWYgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBNQVhfQVJHVU1FTlRfQ09VTlQpIHtcbiAgICB2YXIgY2h1bmtFbmQgPSBNYXRoLm1pbihpICsgTUFYX0FSR1VNRU5UX0NPVU5ULCBsZW5ndGgpO1xuICAgIHZhciBjaHVuayA9IGJ5dGVzLnN1YmFycmF5KGksIGNodW5rRW5kKTtcbiAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7XG4gIH1cblxuICByZXR1cm4gc3RyQnVmLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIGFzc2VydCh0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiLCBcIkludmFsaWQgYXJndW1lbnQgZm9yIHN0cmluZ1RvQnl0ZXNcIik7XG4gIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBieXRlc1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZnVuY3Rpb24gYXJyYXlCeXRlTGVuZ3RoKGFycikge1xuICBpZiAoYXJyLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyci5sZW5ndGg7XG4gIH1cblxuICBhc3NlcnQoYXJyLmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZCwgXCJhcnJheUJ5dGVMZW5ndGggLSBpbnZhbGlkIGFyZ3VtZW50LlwiKTtcbiAgcmV0dXJuIGFyci5ieXRlTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBhcnJheXNUb0J5dGVzKGFycikge1xuICB2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoID09PSAxICYmIGFyclswXSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gYXJyWzBdO1xuICB9XG5cbiAgdmFyIHJlc3VsdExlbmd0aCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdExlbmd0aCArPSBhcnJheUJ5dGVMZW5ndGgoYXJyW2ldKTtcbiAgfVxuXG4gIHZhciBwb3MgPSAwO1xuICB2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlc3VsdExlbmd0aCk7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbmd0aDsgX2krKykge1xuICAgIHZhciBpdGVtID0gYXJyW19pXTtcblxuICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGl0ZW0gPSBzdHJpbmdUb0J5dGVzKGl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbSA9IG5ldyBVaW50OEFycmF5KGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpdGVtTGVuZ3RoID0gaXRlbS5ieXRlTGVuZ3RoO1xuICAgIGRhdGEuc2V0KGl0ZW0sIHBvcyk7XG4gICAgcG9zICs9IGl0ZW1MZW5ndGg7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nMzIodmFsdWUpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUgPj4gMjQgJiAweGZmLCB2YWx1ZSA+PiAxNiAmIDB4ZmYsIHZhbHVlID4+IDggJiAweGZmLCB2YWx1ZSAmIDB4ZmYpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RTaXplKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG9iamVjdEZyb21NYXAobWFwKSB7XG4gIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihtYXApLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIF9zdGVwJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAudmFsdWUsIDIpLFxuICAgICAgICAgIGtleSA9IF9zdGVwJHZhbHVlWzBdLFxuICAgICAgICAgIHZhbHVlID0gX3N0ZXAkdmFsdWVbMV07XG5cbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBpc0xpdHRsZUVuZGlhbigpIHtcbiAgdmFyIGJ1ZmZlcjggPSBuZXcgVWludDhBcnJheSg0KTtcbiAgYnVmZmVyOFswXSA9IDE7XG4gIHZhciB2aWV3MzIgPSBuZXcgVWludDMyQXJyYXkoYnVmZmVyOC5idWZmZXIsIDAsIDEpO1xuICByZXR1cm4gdmlldzMyWzBdID09PSAxO1xufVxuXG52YXIgSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSB7XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gc2hhZG93KHRoaXMsIFwidmFsdWVcIiwgaXNMaXR0bGVFbmRpYW4oKSk7XG4gIH1cblxufTtcbmV4cG9ydHMuSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSBJc0xpdHRsZUVuZGlhbkNhY2hlZDtcblxuZnVuY3Rpb24gaXNFdmFsU3VwcG9ydGVkKCkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbihcIlwiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG52YXIgSXNFdmFsU3VwcG9ydGVkQ2FjaGVkID0ge1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHNoYWRvdyh0aGlzLCBcInZhbHVlXCIsIGlzRXZhbFN1cHBvcnRlZCgpKTtcbiAgfVxuXG59O1xuZXhwb3J0cy5Jc0V2YWxTdXBwb3J0ZWRDYWNoZWQgPSBJc0V2YWxTdXBwb3J0ZWRDYWNoZWQ7XG5cbnZhciBoZXhOdW1iZXJzID0gX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5KDI1Nikua2V5cygpKS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbn0pO1xuXG52YXIgVXRpbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFV0aWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFV0aWwpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFV0aWwsIG51bGwsIFt7XG4gICAga2V5OiBcIm1ha2VIZXhDb2xvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlSGV4Q29sb3IociwgZywgYikge1xuICAgICAgcmV0dXJuIFwiI1wiLmNvbmNhdChoZXhOdW1iZXJzW3JdKS5jb25jYXQoaGV4TnVtYmVyc1tnXSkuY29uY2F0KGhleE51bWJlcnNbYl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKG0xLCBtMikge1xuICAgICAgcmV0dXJuIFttMVswXSAqIG0yWzBdICsgbTFbMl0gKiBtMlsxXSwgbTFbMV0gKiBtMlswXSArIG0xWzNdICogbTJbMV0sIG0xWzBdICogbTJbMl0gKyBtMVsyXSAqIG0yWzNdLCBtMVsxXSAqIG0yWzJdICsgbTFbM10gKiBtMlszXSwgbTFbMF0gKiBtMls0XSArIG0xWzJdICogbTJbNV0gKyBtMVs0XSwgbTFbMV0gKiBtMls0XSArIG0xWzNdICogbTJbNV0gKyBtMVs1XV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5VHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5VHJhbnNmb3JtKHAsIG0pIHtcbiAgICAgIHZhciB4dCA9IHBbMF0gKiBtWzBdICsgcFsxXSAqIG1bMl0gKyBtWzRdO1xuICAgICAgdmFyIHl0ID0gcFswXSAqIG1bMV0gKyBwWzFdICogbVszXSArIG1bNV07XG4gICAgICByZXR1cm4gW3h0LCB5dF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5SW52ZXJzZVRyYW5zZm9ybVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUludmVyc2VUcmFuc2Zvcm0ocCwgbSkge1xuICAgICAgdmFyIGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdO1xuICAgICAgdmFyIHh0ID0gKHBbMF0gKiBtWzNdIC0gcFsxXSAqIG1bMl0gKyBtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQ7XG4gICAgICB2YXIgeXQgPSAoLXBbMF0gKiBtWzFdICsgcFsxXSAqIG1bMF0gKyBtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGQ7XG4gICAgICByZXR1cm4gW3h0LCB5dF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KHIsIG0pIHtcbiAgICAgIHZhciBwMSA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0ociwgbSk7XG4gICAgICB2YXIgcDIgPSBVdGlsLmFwcGx5VHJhbnNmb3JtKHIuc2xpY2UoMiwgNCksIG0pO1xuICAgICAgdmFyIHAzID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclswXSwgclszXV0sIG0pO1xuICAgICAgdmFyIHA0ID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclsyXSwgclsxXV0sIG0pO1xuICAgICAgcmV0dXJuIFtNYXRoLm1pbihwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksIE1hdGgubWluKHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKSwgTWF0aC5tYXgocDFbMF0sIHAyWzBdLCBwM1swXSwgcDRbMF0pLCBNYXRoLm1heChwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSldO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnZlcnNlVHJhbnNmb3JtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGludmVyc2VUcmFuc2Zvcm0obSkge1xuICAgICAgdmFyIGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdO1xuICAgICAgcmV0dXJuIFttWzNdIC8gZCwgLW1bMV0gLyBkLCAtbVsyXSAvIGQsIG1bMF0gLyBkLCAobVsyXSAqIG1bNV0gLSBtWzRdICogbVszXSkgLyBkLCAobVs0XSAqIG1bMV0gLSBtWzVdICogbVswXSkgLyBkXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwbHkzZFRyYW5zZm9ybVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseTNkVHJhbnNmb3JtKG0sIHYpIHtcbiAgICAgIHJldHVybiBbbVswXSAqIHZbMF0gKyBtWzFdICogdlsxXSArIG1bMl0gKiB2WzJdLCBtWzNdICogdlswXSArIG1bNF0gKiB2WzFdICsgbVs1XSAqIHZbMl0sIG1bNl0gKiB2WzBdICsgbVs3XSAqIHZbMV0gKyBtWzhdICogdlsyXV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG0pIHtcbiAgICAgIHZhciB0cmFuc3Bvc2UgPSBbbVswXSwgbVsyXSwgbVsxXSwgbVszXV07XG4gICAgICB2YXIgYSA9IG1bMF0gKiB0cmFuc3Bvc2VbMF0gKyBtWzFdICogdHJhbnNwb3NlWzJdO1xuICAgICAgdmFyIGIgPSBtWzBdICogdHJhbnNwb3NlWzFdICsgbVsxXSAqIHRyYW5zcG9zZVszXTtcbiAgICAgIHZhciBjID0gbVsyXSAqIHRyYW5zcG9zZVswXSArIG1bM10gKiB0cmFuc3Bvc2VbMl07XG4gICAgICB2YXIgZCA9IG1bMl0gKiB0cmFuc3Bvc2VbMV0gKyBtWzNdICogdHJhbnNwb3NlWzNdO1xuICAgICAgdmFyIGZpcnN0ID0gKGEgKyBkKSAvIDI7XG4gICAgICB2YXIgc2Vjb25kID0gTWF0aC5zcXJ0KE1hdGgucG93KGEgKyBkLCAyKSAtIDQgKiAoYSAqIGQgLSBjICogYikpIC8gMjtcbiAgICAgIHZhciBzeCA9IGZpcnN0ICsgc2Vjb25kIHx8IDE7XG4gICAgICB2YXIgc3kgPSBmaXJzdCAtIHNlY29uZCB8fCAxO1xuICAgICAgcmV0dXJuIFtNYXRoLnNxcnQoc3gpLCBNYXRoLnNxcnQoc3kpXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibm9ybWFsaXplUmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVSZWN0KHJlY3QpIHtcbiAgICAgIHZhciByID0gcmVjdC5zbGljZSgwKTtcblxuICAgICAgaWYgKHJlY3RbMF0gPiByZWN0WzJdKSB7XG4gICAgICAgIHJbMF0gPSByZWN0WzJdO1xuICAgICAgICByWzJdID0gcmVjdFswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY3RbMV0gPiByZWN0WzNdKSB7XG4gICAgICAgIHJbMV0gPSByZWN0WzNdO1xuICAgICAgICByWzNdID0gcmVjdFsxXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImludGVyc2VjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnNlY3QocmVjdDEsIHJlY3QyKSB7XG4gICAgICBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3JkZXJlZFggPSBbcmVjdDFbMF0sIHJlY3QxWzJdLCByZWN0MlswXSwgcmVjdDJbMl1dLnNvcnQoY29tcGFyZSk7XG4gICAgICB2YXIgb3JkZXJlZFkgPSBbcmVjdDFbMV0sIHJlY3QxWzNdLCByZWN0MlsxXSwgcmVjdDJbM11dLnNvcnQoY29tcGFyZSk7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICByZWN0MSA9IFV0aWwubm9ybWFsaXplUmVjdChyZWN0MSk7XG4gICAgICByZWN0MiA9IFV0aWwubm9ybWFsaXplUmVjdChyZWN0Mik7XG5cbiAgICAgIGlmIChvcmRlcmVkWFswXSA9PT0gcmVjdDFbMF0gJiYgb3JkZXJlZFhbMV0gPT09IHJlY3QyWzBdIHx8IG9yZGVyZWRYWzBdID09PSByZWN0MlswXSAmJiBvcmRlcmVkWFsxXSA9PT0gcmVjdDFbMF0pIHtcbiAgICAgICAgcmVzdWx0WzBdID0gb3JkZXJlZFhbMV07XG4gICAgICAgIHJlc3VsdFsyXSA9IG9yZGVyZWRYWzJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcmRlcmVkWVswXSA9PT0gcmVjdDFbMV0gJiYgb3JkZXJlZFlbMV0gPT09IHJlY3QyWzFdIHx8IG9yZGVyZWRZWzBdID09PSByZWN0MlsxXSAmJiBvcmRlcmVkWVsxXSA9PT0gcmVjdDFbMV0pIHtcbiAgICAgICAgcmVzdWx0WzFdID0gb3JkZXJlZFlbMV07XG4gICAgICAgIHJlc3VsdFszXSA9IG9yZGVyZWRZWzJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFV0aWw7XG59KCk7XG5cbmV4cG9ydHMuVXRpbCA9IFV0aWw7XG52YXIgUERGU3RyaW5nVHJhbnNsYXRlVGFibGUgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgyZDgsIDB4MmM3LCAweDJjNiwgMHgyZDksIDB4MmRkLCAweDJkYiwgMHgyZGEsIDB4MmRjLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAweDIwMjIsIDB4MjAyMCwgMHgyMDIxLCAweDIwMjYsIDB4MjAxNCwgMHgyMDEzLCAweDE5MiwgMHgyMDQ0LCAweDIwMzksIDB4MjAzYSwgMHgyMjEyLCAweDIwMzAsIDB4MjAxZSwgMHgyMDFjLCAweDIwMWQsIDB4MjAxOCwgMHgyMDE5LCAweDIwMWEsIDB4MjEyMiwgMHhmYjAxLCAweGZiMDIsIDB4MTQxLCAweDE1MiwgMHgxNjAsIDB4MTc4LCAweDE3ZCwgMHgxMzEsIDB4MTQyLCAweDE1MywgMHgxNjEsIDB4MTdlLCAwLCAweDIwYWNdO1xuXG5mdW5jdGlvbiBzdHJpbmdUb1BERlN0cmluZyhzdHIpIHtcbiAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGgsXG4gICAgICBzdHJCdWYgPSBbXTtcblxuICBpZiAoc3RyWzBdID09PSBcIlxceEZFXCIgJiYgc3RyWzFdID09PSBcIlxceEZGXCIpIHtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KGkpIDw8IDggfCBzdHIuY2hhckNvZGVBdChpICsgMSkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RyWzBdID09PSBcIlxceEZGXCIgJiYgc3RyWzFdID09PSBcIlxceEZFXCIpIHtcbiAgICBmb3IgKHZhciBfaTIgPSAyOyBfaTIgPCBsZW5ndGg7IF9pMiArPSAyKSB7XG4gICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KF9pMiArIDEpIDw8IDggfCBzdHIuY2hhckNvZGVBdChfaTIpKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IGxlbmd0aDsgKytfaTMpIHtcbiAgICAgIHZhciBjb2RlID0gUERGU3RyaW5nVHJhbnNsYXRlVGFibGVbc3RyLmNoYXJDb2RlQXQoX2kzKV07XG4gICAgICBzdHJCdWYucHVzaChjb2RlID8gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSA6IHN0ci5jaGFyQXQoX2kzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0ckJ1Zi5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsoKVxcXFxcXG5cXHJdKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICBpZiAobWF0Y2ggPT09IFwiXFxuXCIpIHtcbiAgICAgIHJldHVybiBcIlxcXFxuXCI7XG4gICAgfSBlbHNlIGlmIChtYXRjaCA9PT0gXCJcXHJcIikge1xuICAgICAgcmV0dXJuIFwiXFxcXHJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcXFxcXCIuY29uY2F0KG1hdGNoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzQXNjaWkoc3RyKSB7XG4gIHJldHVybiAvXltcXHgwMC1cXHg3Rl0qJC8udGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb1VURjE2QkVTdHJpbmcoc3RyKSB7XG4gIHZhciBidWYgPSBbXCJcXHhGRVxceEZGXCJdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBpaSA9IHN0ci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgdmFyIF9jaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBidWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKF9jaGFyID4+IDggJiAweGZmKSwgU3RyaW5nLmZyb21DaGFyQ29kZShfY2hhciAmIDB4ZmYpKTtcbiAgfVxuXG4gIHJldHVybiBidWYuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nVG9VVEY4U3RyaW5nKHN0cikge1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShzdHIpKTtcbn1cblxuZnVuY3Rpb24gdXRmOFN0cmluZ1RvU3RyaW5nKHN0cikge1xuICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2wodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09IFwiYm9vbGVhblwiO1xufVxuXG5mdW5jdGlvbiBpc051bSh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIjtcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09IFwic3RyaW5nXCI7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodikge1xuICByZXR1cm4gX3R5cGVvZih2KSA9PT0gXCJvYmplY3RcIiAmJiB2ICE9PSBudWxsICYmIHYuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikge1xuICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGlpID0gYXJyMS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kaWZpY2F0aW9uRGF0ZSgpIHtcbiAgdmFyIGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBEYXRlKCk7XG4gIHZhciBidWZmZXIgPSBbZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCksIChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENEYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIiksIGRhdGUuZ2V0VVRDSG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENNaW51dGVzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIiksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpXTtcbiAgcmV0dXJuIGJ1ZmZlci5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSgpIHtcbiAgdmFyIGNhcGFiaWxpdHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgaXNTZXR0bGVkID0gZmFsc2U7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYXBhYmlsaXR5LCBcInNldHRsZWRcIiwge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGlzU2V0dGxlZDtcbiAgICB9XG4gIH0pO1xuICBjYXBhYmlsaXR5LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY2FwYWJpbGl0eS5yZXNvbHZlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH07XG5cbiAgICBjYXBhYmlsaXR5LnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICByZWplY3QocmVhc29uKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGNhcGFiaWxpdHk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChkYXRhKSB7XG4gIHZhciBjb250ZW50VHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJcIjtcbiAgdmFyIGZvcmNlRGF0YVNjaGVtYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgaWYgKFVSTC5jcmVhdGVPYmplY3RVUkwgJiYgIWZvcmNlRGF0YVNjaGVtYSkge1xuICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtkYXRhXSwge1xuICAgICAgdHlwZTogY29udGVudFR5cGVcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgZGlnaXRzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICB2YXIgYnVmZmVyID0gXCJkYXRhOlwiLmNvbmNhdChjb250ZW50VHlwZSwgXCI7YmFzZTY0LFwiKTtcblxuICBmb3IgKHZhciBpID0gMCwgaWkgPSBkYXRhLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICB2YXIgYjEgPSBkYXRhW2ldICYgMHhmZjtcbiAgICB2YXIgYjIgPSBkYXRhW2kgKyAxXSAmIDB4ZmY7XG4gICAgdmFyIGIzID0gZGF0YVtpICsgMl0gJiAweGZmO1xuICAgIHZhciBkMSA9IGIxID4+IDIsXG4gICAgICAgIGQyID0gKGIxICYgMykgPDwgNCB8IGIyID4+IDQ7XG4gICAgdmFyIGQzID0gaSArIDEgPCBpaSA/IChiMiAmIDB4ZikgPDwgMiB8IGIzID4+IDYgOiA2NDtcbiAgICB2YXIgZDQgPSBpICsgMiA8IGlpID8gYjMgJiAweDNmIDogNjQ7XG4gICAgYnVmZmVyICs9IGRpZ2l0c1tkMV0gKyBkaWdpdHNbZDJdICsgZGlnaXRzW2QzXSArIGRpZ2l0c1tkNF07XG4gIH1cblxuICByZXR1cm4gYnVmZmVyO1xufVxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYpO1xuXG5pZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwidW5kZWZpbmVkXCIgfHwgIWdsb2JhbFRoaXMuX3BkZmpzQ29tcGF0aWJpbGl0eUNoZWNrZWQpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcInVuZGVmaW5lZFwiIHx8IGdsb2JhbFRoaXMuTWF0aCAhPT0gTWF0aCkge1xuICAgIGdsb2JhbFRoaXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcpO1xuICB9XG5cbiAgZ2xvYmFsVGhpcy5fcGRmanNDb21wYXRpYmlsaXR5Q2hlY2tlZCA9IHRydWU7XG5cbiAgKGZ1bmN0aW9uIGNoZWNrTm9kZUJ0b2EoKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuYnRvYSB8fCAhX2lzX25vZGUuaXNOb2RlSlMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBnbG9iYWxUaGlzLmJ0b2EgPSBmdW5jdGlvbiAoY2hhcnMpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShjaGFycywgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gICAgfTtcbiAgfSkoKTtcblxuICAoZnVuY3Rpb24gY2hlY2tOb2RlQXRvYigpIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5hdG9iIHx8ICFfaXNfbm9kZS5pc05vZGVKUykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGdsb2JhbFRoaXMuYXRvYiA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKTtcbiAgICB9O1xuICB9KSgpO1xuXG4gIChmdW5jdGlvbiBjaGVja09iamVjdEZyb21FbnRyaWVzKCkge1xuICAgIGlmIChPYmplY3QuZnJvbUVudHJpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfX3dfcGRmanNfcmVxdWlyZV9fKDUzKTtcbiAgfSkoKTtcblxuICAoZnVuY3Rpb24gY2hlY2tQcm9taXNlKCkge1xuICAgIGlmIChnbG9iYWxUaGlzLlByb21pc2UuYWxsU2V0dGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGdsb2JhbFRoaXMuUHJvbWlzZSA9IF9fd19wZGZqc19yZXF1aXJlX18oODQpO1xuICB9KSgpO1xuXG4gIChmdW5jdGlvbiBjaGVja1JlYWRhYmxlU3RyZWFtKCkge1xuICAgIHZhciBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEyKS5SZWFkYWJsZVN0cmVhbTtcbiAgfSkoKTtcbn1cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuaXNOb2RlSlMgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIGlzTm9kZUpTID0gKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocHJvY2VzcykpID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MgKyBcIlwiID09PSBcIltvYmplY3QgcHJvY2Vzc11cIiAmJiAhcHJvY2Vzcy52ZXJzaW9ucy5udyAmJiAhKHByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb24gJiYgcHJvY2Vzcy50eXBlICYmIHByb2Nlc3MudHlwZSAhPT0gXCJicm93c2VyXCIpO1xuZXhwb3J0cy5pc05vZGVKUyA9IGlzTm9kZUpTO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuX193X3BkZmpzX3JlcXVpcmVfXyg4KTtcbm1vZHVsZS5leHBvcnRzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXyg5KTtcbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbiQoeyBnbG9iYWw6IHRydWUgfSwgeyBnbG9iYWxUaGlzOiBnbG9iYWwgfSk7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSkuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTtcbnZhciByZWRlZmluZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjkpO1xudmFyIHNldEdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzApO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQwKTtcbnZhciBpc0ZvcmNlZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gaWYgKEdMT0JBTCkge1xuICB0YXJnZXQgPSBnbG9iYWw7XG4gfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuIH0gZWxzZSB7XG4gIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuIH1cbiBpZiAodGFyZ2V0KVxuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgfSBlbHNlXG4gICAgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KVxuICAgICBjb250aW51ZTtcbiAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICB9XG4gICBpZiAob3B0aW9ucy5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICB9XG4gICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcbm1vZHVsZS5leHBvcnRzID0gY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHwgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8IGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8IGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fCBmdW5jdGlvbiAoKSB7XG4gcmV0dXJuIHRoaXM7XG59KCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTYpO1xudmFyIHRvUHJpbWl0aXZlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7XG52YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI0KTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gaWYgKElFOF9ET01fREVGSU5FKVxuICB0cnkge1xuICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gIH1cbiBpZiAoaGFzKE8sIFApKVxuICByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTtcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIDc7XG4gIH1cbiB9KVsxXSAhPSA3O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiB0cnkge1xuICByZXR1cm4gISFleGVjKCk7XG4gfSBjYXRjaCAoZXJyb3IpIHtcbiAgcmV0dXJuIHRydWU7XG4gfVxufTtcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuIHJldHVybiB7XG4gIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gIHZhbHVlOiB2YWx1ZVxuIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBJbmRleGVkT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygxNyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xudmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE4KTtcbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiBpZiAoaXQgPT0gdW5kZWZpbmVkKVxuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiBpZiAoIWlzT2JqZWN0KGlucHV0KSlcbiAgcmV0dXJuIGlucHV0O1xuIHZhciBmbiwgdmFsO1xuIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKVxuICByZXR1cm4gdmFsO1xuIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKVxuICByZXR1cm4gdmFsO1xuIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSlcbiAgcmV0dXJuIHZhbDtcbiB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciB0b09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpO1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbCh0b09iamVjdChpdCksIGtleSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTtcbnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI1KTtcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIDc7XG4gIH1cbiB9KS5hICE9IDc7XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxKTtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUpO1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuIG9iamVjdFtrZXldID0gdmFsdWU7XG4gcmV0dXJuIG9iamVjdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMik7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI0KTtcbnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpO1xudmFyIHRvUHJpbWl0aXZlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gYW5PYmplY3QoTyk7XG4gUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuIGlmIChJRThfRE9NX0RFRklORSlcbiAgdHJ5IHtcbiAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gIH1cbiBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKVxuICB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcylcbiAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gcmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuIH1cbiByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTtcbnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTtcbnZhciBzZXRHbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMwKTtcbnZhciBpbnNwZWN0U291cmNlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMSk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiB2YXIgc3RhdGU7XG4gaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICB9XG4gIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gfVxuIGlmIChPID09PSBnbG9iYWwpIHtcbiAgaWYgKHNpbXBsZSlcbiAgIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlXG4gICBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gIHJldHVybjtcbiB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgZGVsZXRlIE9ba2V5XTtcbiB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgc2ltcGxlID0gdHJ1ZTtcbiB9XG4gaWYgKHNpbXBsZSlcbiAgT1trZXldID0gdmFsdWU7XG4gZWxzZVxuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcblxuLyoqKi8gfSksXG4vKiAzMCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gdHJ5IHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gfSBjYXRjaCAoZXJyb3IpIHtcbiAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiB9XG4gcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgc3RvcmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMyKTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcblxuLyoqKi8gfSksXG4vKiAzMiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgc2V0R2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygzMCk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuXG4vKioqLyB9KSxcbi8qIDMzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBOQVRJVkVfV0VBS19NQVAgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM0KTtcbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjYpO1xudmFyIG9iamVjdEhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpO1xudmFyIHNoYXJlZCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzIpO1xudmFyIHNoYXJlZEtleSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzUpO1xudmFyIGhpZGRlbktleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM5KTtcbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHN0YXRlO1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xuIH07XG59O1xuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgaWYgKHdtaGFzLmNhbGwoc3RvcmUsIGl0KSlcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgcmV0dXJuIG1ldGFkYXRhO1xuIH07XG4gZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gfTtcbiBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiB9O1xufSBlbHNlIHtcbiB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgaWYgKG9iamVjdEhhcyhpdCwgU1RBVEUpKVxuICAgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gIHJldHVybiBtZXRhZGF0YTtcbiB9O1xuIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiB9O1xuIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gfTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuIHNldDogc2V0LFxuIGdldDogZ2V0LFxuIGhhczogaGFzLFxuIGVuZm9yY2U6IGVuZm9yY2UsXG4gZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG5cbi8qKiovIH0pLFxuLyogMzQgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApO1xudmFyIGluc3BlY3RTb3VyY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMxKTtcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcblxuLyoqKi8gfSksXG4vKiAzNSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgc2hhcmVkID0gX193X3BkZmpzX3JlcXVpcmVfXygzNik7XG52YXIgdWlkID0gX193X3BkZmpzX3JlcXVpcmVfXygzOCk7XG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgSVNfUFVSRSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzcpO1xudmFyIHN0b3JlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMik7XG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuIHZlcnNpb246ICczLjEzLjEnLFxuIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG5cbi8qKiovIH0pLFxuLyogMzcgKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzOSAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqKi8gfSksXG4vKiA0MCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7XG52YXIgb3duS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNDEpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygyNyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKVxuICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuIH1cbn07XG5cbi8qKiovIH0pLFxuLyogNDEgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGdldEJ1aWx0SW4gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQyKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXyg0NCk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTtcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQyICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7XG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ1KTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNTApO1xudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQ1ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTtcbnZhciBpbmRleE9mID0gX193X3BkZmpzX3JlcXVpcmVfXyg0NikuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gX193X3BkZmpzX3JlcXVpcmVfXygzOSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiB2YXIgaSA9IDA7XG4gdmFyIHJlc3VsdCA9IFtdO1xuIHZhciBrZXk7XG4gZm9yIChrZXkgaW4gTylcbiAgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpXG4gIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKiovIH0pLFxuLyogNDYgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTYpO1xudmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193X3BkZmpzX3JlcXVpcmVfXyg0OSk7XG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gIHZhciB2YWx1ZTtcbiAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKVxuICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSlcbiAgICAgcmV0dXJuIHRydWU7XG4gICB9XG4gIGVsc2VcbiAgIGZvciAoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKVxuICAgICByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgIH1cbiAgcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiB9O1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcblxuLyoqKi8gfSksXG4vKiA0NyAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgdG9JbnRlZ2VyID0gX193X3BkZmpzX3JlcXVpcmVfXyg0OCk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwO1xufTtcblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDkgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIHRvSW50ZWdlciA9IF9fd19wZGZqc19yZXF1aXJlX18oNDgpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTAgKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICdjb25zdHJ1Y3RvcicsXG4gJ2hhc093blByb3BlcnR5JyxcbiAnaXNQcm90b3R5cGVPZicsXG4gJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAndG9Mb2NhbGVTdHJpbmcnLFxuICd0b1N0cmluZycsXG4gJ3ZhbHVlT2YnXG5dO1xuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKiovIH0pLFxuLyogNTIgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7XG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2UgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pIDogISFkZXRlY3Rpb247XG59O1xudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dfcGRmanNfcmVxdWlyZV9fKDU0KTtcbl9fd19wZGZqc19yZXF1aXJlX18oNzQpO1xudmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QuZnJvbUVudHJpZXM7XG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193X3BkZmpzX3JlcXVpcmVfXyg1NSk7XG52YXIgSXRlcmF0b3JzID0gX193X3BkZmpzX3JlcXVpcmVfXyg2NSk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Nik7XG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksXG4gIGluZGV4OiAwLFxuICBraW5kOiBraW5kXG4gfSk7XG59LCBmdW5jdGlvbiAoKSB7XG4gdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuIHZhciBraW5kID0gc3RhdGUua2luZDtcbiB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICByZXR1cm4ge1xuICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgIGRvbmU6IHRydWVcbiAgfTtcbiB9XG4gaWYgKGtpbmQgPT0gJ2tleXMnKVxuICByZXR1cm4ge1xuICAgdmFsdWU6IGluZGV4LFxuICAgZG9uZTogZmFsc2VcbiAgfTtcbiBpZiAoa2luZCA9PSAndmFsdWVzJylcbiAgcmV0dXJuIHtcbiAgIHZhbHVlOiB0YXJnZXRbaW5kZXhdLFxuICAgZG9uZTogZmFsc2VcbiAgfTtcbiByZXR1cm4ge1xuICB2YWx1ZTogW1xuICAgaW5kZXgsXG4gICB0YXJnZXRbaW5kZXhdXG4gIF0sXG4gIGRvbmU6IGZhbHNlXG4gfTtcbn0sICd2YWx1ZXMnKTtcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLyoqKi8gfSksXG4vKiA1NSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nik7XG52YXIgY3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg2MSk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KTtcbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbnZhciBzaGFyZWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM2KTtcbnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTtcbnZhciB1aWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM4KTtcbnZhciBOQVRJVkVfU1lNQk9MID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYwKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSB7XG4gICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gIH0gZWxzZSB7XG4gICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH1cbiB9XG4gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIFY4X1ZFUlNJT04gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU4KTtcbnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fCAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcblxuLyoqKi8gfSksXG4vKiA1OCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7XG52YXIgdXNlckFnZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXyg1OSk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5pZiAodjgpIHtcbiBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gdmVyc2lvbiA9IG1hdGNoWzBdIDwgNCA/IDEgOiBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICBpZiAobWF0Y2gpXG4gICB2ZXJzaW9uID0gbWF0Y2hbMV07XG4gfVxufVxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuXG4vKioqLyB9KSxcbi8qIDU5ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7XG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgTkFUSVZFX1NZTUJPTCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpO1xubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MICYmICFTeW1ib2wuc2hhbSAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuXG4vKioqLyB9KSxcbi8qIDYxICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYyKTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNTApO1xudmFyIGhpZGRlbktleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM5KTtcbnZhciBodG1sID0gX193X3BkZmpzX3JlcXVpcmVfXyg2NCk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNSk7XG52YXIgc2hhcmVkS2V5ID0gX193X3BkZmpzX3JlcXVpcmVfXygzNSk7XG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbn07XG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7XG4gcmV0dXJuIHRlbXA7XG59O1xudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gdmFyIGlmcmFtZURvY3VtZW50O1xuIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gdHJ5IHtcbiAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuIH0gY2F0Y2ggKGVycm9yKSB7XG4gfVxuIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gd2hpbGUgKGxlbmd0aC0tKVxuICBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuIHZhciByZXN1bHQ7XG4gaWYgKE8gIT09IG51bGwpIHtcbiAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuIH0gZWxzZVxuICByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuLyoqKi8gfSksXG4vKiA2MiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpO1xudmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7XG52YXIgb2JqZWN0S2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNjMpO1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gYW5PYmplY3QoTyk7XG4gdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiB2YXIgaW5kZXggPSAwO1xuIHZhciBrZXk7XG4gd2hpbGUgKGxlbmd0aCA+IGluZGV4KVxuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gcmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ1KTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNTApO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGdldEJ1aWx0SW4gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQyKTtcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG5cbi8qKiovIH0pLFxuLyogNjUgKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKiovIH0pLFxuLyogNjYgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXyg5KTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Nyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDY5KTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd19wZGZqc19yZXF1aXJlX18oNzIpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg3MSk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNik7XG52YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBJU19QVVJFID0gX193X3BkZmpzX3JlcXVpcmVfXygzNyk7XG52YXIgSXRlcmF0b3JzID0gX193X3BkZmpzX3JlcXVpcmVfXyg2NSk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNjgpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkge1xuIHJldHVybiB0aGlzO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcilcbiAgIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKVxuICAgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICBzd2l0Y2ggKEtJTkQpIHtcbiAgY2FzZSBLRVlTOlxuICAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpO1xuICAgfTtcbiAgY2FzZSBWQUxVRVM6XG4gICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTtcbiAgIH07XG4gIGNhc2UgRU5UUklFUzpcbiAgIHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTtcbiAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgfTtcbiB9O1xuIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ10gfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG4gaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gICB9XG4gICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgaWYgKElTX1BVUkUpXG4gICAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgfVxuIH1cbiBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgIHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpO1xuICB9O1xuIH1cbiBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiB9XG4gSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuIGlmIChERUZBVUxUKSB7XG4gIG1ldGhvZHMgPSB7XG4gICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gIH07XG4gIGlmIChGT1JDRUQpXG4gICBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgIH1cbiAgIH1cbiAgZWxzZVxuICAgJCh7XG4gICAgdGFyZ2V0OiBOQU1FLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUVcbiAgIH0sIG1ldGhvZHMpO1xuIH1cbiByZXR1cm4gbWV0aG9kcztcbn07XG5cbi8qKiovIH0pLFxuLyogNjcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNjgpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNjEpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg3MSk7XG52YXIgSXRlcmF0b3JzID0gX193X3BkZmpzX3JlcXVpcmVfXyg2NSk7XG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiByZXR1cm4gdGhpcztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcblxuLyoqKi8gfSksXG4vKiA2OCAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDY5KTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTtcbnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBJU19QVVJFID0gX193X3BkZmpzX3JlcXVpcmVfXygzNyk7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7XG4gcmV0dXJuIHRoaXM7XG59O1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5pZiAoW10ua2V5cykge1xuIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKVxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiBlbHNlIHtcbiAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKVxuICAgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gfVxufVxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuIHZhciB0ZXN0ID0ge307XG4gcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSlcbiBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuXG4vKioqLyB9KSxcbi8qIDY5ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTtcbnZhciB0b09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpO1xudmFyIHNoYXJlZEtleSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzUpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd19wZGZqc19yZXF1aXJlX18oNzApO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gTyA9IHRvT2JqZWN0KE8pO1xuIGlmIChoYXMoTywgSUVfUFJPVE8pKVxuICByZXR1cm4gT1tJRV9QUk9UT107XG4gaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuIH1cbiByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuXG4vKioqLyB9KSxcbi8qIDcwICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuIGZ1bmN0aW9uIEYoKSB7XG4gfVxuIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDcxICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpLmY7XG52YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nik7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7XG4gICBjb25maWd1cmFibGU6IHRydWUsXG4gICB2YWx1ZTogVEFHXG4gIH0pO1xuIH1cbn07XG5cbi8qKiovIH0pLFxuLyogNzIgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3Myk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gdmFyIHRlc3QgPSB7fTtcbiB2YXIgc2V0dGVyO1xuIHRyeSB7XG4gIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiB9IGNhdGNoIChlcnJvcikge1xuIH1cbiByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gIGlmIChDT1JSRUNUX1NFVFRFUilcbiAgIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgZWxzZVxuICAgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgcmV0dXJuIE87XG4gfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG5cbi8qKiovIH0pLFxuLyogNzMgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGlzT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gfVxuIHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogNzQgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oOSk7XG52YXIgaXRlcmF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNzUpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Myk7XG4kKHtcbiB0YXJnZXQ6ICdPYmplY3QnLFxuIHN0YXQ6IHRydWVcbn0sIHtcbiBmcm9tRW50cmllczogZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICByZXR1cm4gb2JqO1xuIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDc1ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNzYpO1xudmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7XG52YXIgYmluZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNzcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193X3BkZmpzX3JlcXVpcmVfXyg3OSk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IF9fd19wZGZqc19yZXF1aXJlX18oODIpO1xudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCwgMSArIEFTX0VOVFJJRVMgKyBJTlRFUlJVUFRFRCk7XG4gdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcbiB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgaWYgKGl0ZXJhdG9yKVxuICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gfTtcbiB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmIChBU19FTlRSSUVTKSB7XG4gICBhbk9iamVjdCh2YWx1ZSk7XG4gICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgfVxuICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gfTtcbiBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiB9IGVsc2Uge1xuICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpXG4gICB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdClcbiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgIH1cbiAgIHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgfVxuICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiB9XG4gbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgdHJ5IHtcbiAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdClcbiAgIHJldHVybiByZXN1bHQ7XG4gfVxuIHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNzYgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTYpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oNjUpO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNzcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGFGdW5jdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNzgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuIGFGdW5jdGlvbihmbik7XG4gaWYgKHRoYXQgPT09IHVuZGVmaW5lZClcbiAgcmV0dXJuIGZuO1xuIHN3aXRjaCAobGVuZ3RoKSB7XG4gY2FzZSAwOlxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gIH07XG4gY2FzZSAxOlxuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICB9O1xuIGNhc2UgMjpcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgfTtcbiBjYXNlIDM6XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gIH07XG4gfVxuIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDc4ICovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiB9XG4gcmV0dXJuIGl0O1xufTtcblxuLyoqKi8gfSksXG4vKiA3OSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgY2xhc3NvZiA9IF9fd19wZGZqc19yZXF1aXJlX18oODApO1xudmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oNjUpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTYpO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiBpZiAoaXQgIT0gdW5kZWZpbmVkKVxuICByZXR1cm4gaXRbSVRFUkFUT1JdIHx8IGl0WydAQGl0ZXJhdG9yJ10gfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbi8qKiovIH0pLFxuLyogODAgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IF9fd19wZGZqc19yZXF1aXJlX18oODEpO1xudmFyIGNsYXNzb2ZSYXcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE4KTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7XG4gcmV0dXJuIGFyZ3VtZW50cztcbn0oKSkgPT0gJ0FyZ3VtZW50cyc7XG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiB0cnkge1xuICByZXR1cm4gaXRba2V5XTtcbiB9IGNhdGNoIChlcnJvcikge1xuIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiB2YXIgTywgdGFnLCByZXN1bHQ7XG4gcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZyA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKSA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiA4MSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nik7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcblxuLyoqKi8gfSksXG4vKiA4MiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgcmV0dXJuIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSkudmFsdWU7XG4gfVxufTtcblxuLyoqKi8gfSksXG4vKiA4MyAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHRvUHJpbWl0aXZlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdClcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiBlbHNlXG4gIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG5cbi8qKiovIH0pLFxuLyogODQgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7XG5fX3dfcGRmanNfcmVxdWlyZV9fKDg2KTtcbl9fd19wZGZqc19yZXF1aXJlX18oODgpO1xuX193X3BkZmpzX3JlcXVpcmVfXygxMDUpO1xuX193X3BkZmpzX3JlcXVpcmVfXygxMDYpO1xuX193X3BkZmpzX3JlcXVpcmVfXygxMDcpO1xuX193X3BkZmpzX3JlcXVpcmVfXygxMDgpO1xuX193X3BkZmpzX3JlcXVpcmVfXygxMTApO1xudmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aC5Qcm9taXNlO1xuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXyg5KTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd19wZGZqc19yZXF1aXJlX18oNjkpO1xudmFyIHNldFByb3RvdHlwZU9mID0gX193X3BkZmpzX3JlcXVpcmVfXyg3Mik7XG52YXIgY3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg2MSk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNik7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxNSk7XG52YXIgaXRlcmF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNzUpO1xudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuIHZhciB0aGF0ID0gdGhpcztcbiBpZiAoISh0aGF0IGluc3RhbmNlb2YgJEFnZ3JlZ2F0ZUVycm9yKSlcbiAgcmV0dXJuIG5ldyAkQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlKTtcbiBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgdGhhdCA9IHNldFByb3RvdHlwZU9mKG5ldyBFcnJvcih1bmRlZmluZWQpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gfVxuIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpXG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnbWVzc2FnZScsIFN0cmluZyhtZXNzYWdlKSk7XG4gdmFyIGVycm9yc0FycmF5ID0gW107XG4gaXRlcmF0ZShlcnJvcnMsIGVycm9yc0FycmF5LnB1c2gsIHsgdGhhdDogZXJyb3JzQXJyYXkgfSk7XG4gY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdlcnJvcnMnLCBlcnJvcnNBcnJheSk7XG4gcmV0dXJuIHRoYXQ7XG59O1xuJEFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZSA9IGNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICRBZ2dyZWdhdGVFcnJvciksXG4gbWVzc2FnZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICcnKSxcbiBuYW1lOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoNSwgJ0FnZ3JlZ2F0ZUVycm9yJylcbn0pO1xuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7IEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3IgfSk7XG5cbi8qKiovIH0pLFxuLyogODYgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gX193X3BkZmpzX3JlcXVpcmVfXyg4MSk7XG52YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTtcbnZhciB0b1N0cmluZyA9IF9fd19wZGZqc19yZXF1aXJlX18oODcpO1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cbi8qKiovIH0pLFxuLyogODcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgxKTtcbnZhciBjbGFzc29mID0gX193X3BkZmpzX3JlcXVpcmVfXyg4MCk7XG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcblxuLyoqKi8gfSksXG4vKiA4OCAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oOSk7XG52YXIgSVNfUFVSRSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzcpO1xudmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApO1xudmFyIGdldEJ1aWx0SW4gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQyKTtcbnZhciBOYXRpdmVQcm9taXNlID0gX193X3BkZmpzX3JlcXVpcmVfXyg4OSk7XG52YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTtcbnZhciByZWRlZmluZUFsbCA9IF9fd19wZGZqc19yZXF1aXJlX18oOTApO1xudmFyIHNldFByb3RvdHlwZU9mID0gX193X3BkZmpzX3JlcXVpcmVfXyg3Mik7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcxKTtcbnZhciBzZXRTcGVjaWVzID0gX193X3BkZmpzX3JlcXVpcmVfXyg5MSk7XG52YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxKTtcbnZhciBhRnVuY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc4KTtcbnZhciBhbkluc3RhbmNlID0gX193X3BkZmpzX3JlcXVpcmVfXyg5Mik7XG52YXIgaW5zcGVjdFNvdXJjZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzEpO1xudmFyIGl0ZXJhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc1KTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkzKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk0KTtcbnZhciB0YXNrID0gX193X3BkZmpzX3JlcXVpcmVfXyg5NSkuc2V0O1xudmFyIG1pY3JvdGFzayA9IF9fd19wZGZqc19yZXF1aXJlX18oOTgpO1xudmFyIHByb21pc2VSZXNvbHZlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDApO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMik7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMSk7XG52YXIgcGVyZm9ybSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTAzKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMyk7XG52YXIgaXNGb3JjZWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUyKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBJU19CUk9XU0VSID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDQpO1xudmFyIElTX05PREUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk3KTtcbnZhciBWOF9WRVJTSU9OID0gX193X3BkZmpzX3JlcXVpcmVfXyg1OCk7XG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlICYmIE5hdGl2ZVByb21pc2UucHJvdG90eXBlO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJztcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpXG4gIHJldHVybiB0cnVlO1xuIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGVbJ2ZpbmFsbHknXSlcbiAgcmV0dXJuIHRydWU7XG4gaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpXG4gIHJldHVybiBmYWxzZTtcbiB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgcmVzb2x2ZSgxKTtcbiB9KTtcbiB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICBleGVjKGZ1bmN0aW9uICgpIHtcbiAgfSwgZnVuY3Rpb24gKCkge1xuICB9KTtcbiB9O1xuIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuIFNVQkNMQVNTSU5HID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuIGlmICghU1VCQ0xBU1NJTkcpXG4gIHJldHVybiB0cnVlO1xuIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHtcbiB9KTtcbn0pO1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiB2YXIgdGhlbjtcbiByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiBpZiAoc3RhdGUubm90aWZpZWQpXG4gIHJldHVybjtcbiBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICB0cnkge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgIGlmICghb2spIHtcbiAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRClcbiAgICAgICBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICB9XG4gICAgIGlmIChoYW5kbGVyID09PSB0cnVlKVxuICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgIGVsc2Uge1xuICAgICAgaWYgKGRvbWFpbilcbiAgICAgICBkb21haW4uZW50ZXIoKTtcbiAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgfVxuICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgIH0gZWxzZVxuICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZVxuICAgICByZWplY3QodmFsdWUpO1xuICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpXG4gICAgIGRvbWFpbi5leGl0KCk7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgIH1cbiAgfVxuICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pXG4gICBvblVuaGFuZGxlZChzdGF0ZSk7XG4gfSk7XG59O1xudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gdmFyIGV2ZW50LCBoYW5kbGVyO1xuIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gfSBlbHNlXG4gIGV2ZW50ID0ge1xuICAgcHJvbWlzZTogcHJvbWlzZSxcbiAgIHJlYXNvbjogcmVhc29uXG4gIH07XG4gaWYgKCFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UICYmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkpXG4gIGhhbmRsZXIoZXZlbnQpO1xuIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pXG4gIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChJU19VTkhBTkRMRUQpIHtcbiAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgIH0gZWxzZVxuICAgICBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgIH0pO1xuICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgaWYgKHJlc3VsdC5lcnJvcilcbiAgICB0aHJvdyByZXN1bHQudmFsdWU7XG4gIH1cbiB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiByZXR1cm4gc3RhdGUucmVqZWN0aW9uICE9PSBIQU5ETEVEICYmICFzdGF0ZS5wYXJlbnQ7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgaWYgKElTX05PREUpIHtcbiAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICB9IGVsc2VcbiAgIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiB9KTtcbn07XG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgc3RhdGUsIHVud3JhcCkge1xuIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgZm4oc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuIH07XG59O1xudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gaWYgKHN0YXRlLmRvbmUpXG4gIHJldHVybjtcbiBzdGF0ZS5kb25lID0gdHJ1ZTtcbiBpZiAodW53cmFwKVxuICBzdGF0ZSA9IHVud3JhcDtcbiBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gbm90aWZ5KHN0YXRlLCB0cnVlKTtcbn07XG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gaWYgKHN0YXRlLmRvbmUpXG4gIHJldHVybjtcbiBzdGF0ZS5kb25lID0gdHJ1ZTtcbiBpZiAodW53cmFwKVxuICBzdGF0ZSA9IHVud3JhcDtcbiB0cnkge1xuICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSlcbiAgIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICBpZiAodGhlbikge1xuICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICB0cnkge1xuICAgICB0aGVuLmNhbGwodmFsdWUsIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHdyYXBwZXIsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgaW50ZXJuYWxSZWplY3Qod3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICB9XG4gICB9KTtcbiAgfSBlbHNlIHtcbiAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICB9XG4gfSBjYXRjaCAoZXJyb3IpIHtcbiAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuIH1cbn07XG5pZiAoRk9SQ0VEKSB7XG4gUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gIGFGdW5jdGlvbihleGVjdXRvcik7XG4gIEludGVybmFsLmNhbGwodGhpcyk7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHRyeSB7XG4gICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgaW50ZXJuYWxSZWplY3Qoc3RhdGUsIGVycm9yKTtcbiAgfVxuIH07XG4gUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICB0eXBlOiBQUk9NSVNFLFxuICAgZG9uZTogZmFsc2UsXG4gICBub3RpZmllZDogZmFsc2UsXG4gICBwYXJlbnQ6IGZhbHNlLFxuICAgcmVhY3Rpb25zOiBbXSxcbiAgIHJlamVjdGlvbjogZmFsc2UsXG4gICBzdGF0ZTogUEVORElORyxcbiAgIHZhbHVlOiB1bmRlZmluZWRcbiAgfSk7XG4gfTtcbiBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUsIHtcbiAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORylcbiAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICB9LFxuICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICB9XG4gfSk7XG4gT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuIH07XG4gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlciA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKSA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiB9O1xuIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGUudGhlbjtcbiAgaWYgKCFTVUJDTEFTU0lORykge1xuICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdjYXRjaCcsIFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICB9IGNhdGNoIChlcnJvcikge1xuICB9XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgfVxuIH1cbn1cbiQoe1xuIGdsb2JhbDogdHJ1ZSxcbiB3cmFwOiB0cnVlLFxuIGZvcmNlZDogRk9SQ0VEXG59LCB7IFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvciB9KTtcbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcbiQoe1xuIHRhcmdldDogUFJPTUlTRSxcbiBzdGF0OiB0cnVlLFxuIGZvcmNlZDogRk9SQ0VEXG59LCB7XG4gcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7XG4gIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gfVxufSk7XG4kKHtcbiB0YXJnZXQ6IFBST01JU0UsXG4gc3RhdDogdHJ1ZSxcbiBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEXG59LCB7XG4gcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gfVxufSk7XG4kKHtcbiB0YXJnZXQ6IFBST01JU0UsXG4gc3RhdDogdHJ1ZSxcbiBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT05cbn0sIHtcbiBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICB2YXIgQyA9IHRoaXM7XG4gIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgIHZhciBjb3VudGVyID0gMDtcbiAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgIHJlbWFpbmluZysrO1xuICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgIGlmIChhbHJlYWR5Q2FsbGVkKVxuICAgICAgcmV0dXJuO1xuICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSwgcmVqZWN0KTtcbiAgIH0pO1xuICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICB9KTtcbiAgaWYgKHJlc3VsdC5lcnJvcilcbiAgIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuIH0sXG4gcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICB2YXIgQyA9IHRoaXM7XG4gIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgIH0pO1xuICB9KTtcbiAgaWYgKHJlc3VsdC5lcnJvcilcbiAgIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG5cbi8qKiovIH0pLFxuLyogOTAgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuIGZvciAodmFyIGtleSBpbiBzcmMpXG4gIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKiovIH0pLFxuLyogOTEgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBERVNDUklQVE9SUyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIpO1xudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gICB9XG4gIH0pO1xuIH1cbn07XG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuIH1cbiByZXR1cm4gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDkzICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU2KTtcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcbnRyeSB7XG4gdmFyIGNhbGxlZCA9IDA7XG4gdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICB9LFxuICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgfVxuIH07XG4gaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG4gfTtcbiBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkge1xuICB0aHJvdyAyO1xuIH0pO1xufSBjYXRjaCAoZXJyb3IpIHtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpXG4gIHJldHVybiBmYWxzZTtcbiB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiB0cnkge1xuICB2YXIgb2JqZWN0ID0ge307XG4gIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICByZXR1cm4ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgfVxuICAgfTtcbiAgfTtcbiAgZXhlYyhvYmplY3QpO1xuIH0gY2F0Y2ggKGVycm9yKSB7XG4gfVxuIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG5cbi8qKiovIH0pLFxuLyogOTQgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7XG52YXIgYUZ1bmN0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXyg3OCk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nik7XG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiB2YXIgUztcbiByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFGdW5jdGlvbihTKTtcbn07XG5cbi8qKiovIH0pLFxuLyogOTUgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApO1xudmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7XG52YXIgYmluZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNzcpO1xudmFyIGh0bWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDY0KTtcbnZhciBjcmVhdGVFbGVtZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNSk7XG52YXIgSVNfSU9TID0gX193X3BkZmpzX3JlcXVpcmVfXyg5Nik7XG52YXIgSVNfTk9ERSA9IF9fd19wZGZqc19yZXF1aXJlX18oOTcpO1xudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIGZuKCk7XG4gfVxufTtcbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICBydW4oaWQpO1xuIH07XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gcnVuKGV2ZW50LmRhdGEpO1xufTtcbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcbmlmICghc2V0IHx8ICFjbGVhcikge1xuIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICB2YXIgYXJncyA9IFtdO1xuICB2YXIgaSA9IDE7XG4gIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSlcbiAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfTtcbiAgZGVmZXIoY291bnRlcik7XG4gIHJldHVybiBjb3VudGVyO1xuIH07XG4gY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICBkZWxldGUgcXVldWVbaWRdO1xuIH07XG4gaWYgKElTX05PREUpIHtcbiAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gIH07XG4gfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgfTtcbiB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmICFmYWlscyhwb3N0KSkge1xuICBkZWZlciA9IHBvc3Q7XG4gIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHJ1bihpZCk7XG4gICB9O1xuICB9O1xuIH0gZWxzZSB7XG4gIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICB9O1xuIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuIHNldDogc2V0LFxuIGNsZWFyOiBjbGVhclxufTtcblxuLyoqKi8gfSksXG4vKiA5NiAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgdXNlckFnZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXyg1OSk7XG5tb2R1bGUuZXhwb3J0cyA9IC8oPzppcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG5cbi8qKiovIH0pLFxuLyogOTcgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE4KTtcbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4vKioqLyB9KSxcbi8qIDk4ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKS5mO1xudmFyIG1hY3JvdGFzayA9IF9fd19wZGZqc19yZXF1aXJlX18oOTUpLnNldDtcbnZhciBJU19JT1MgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk2KTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk5KTtcbnZhciBJU19OT0RFID0gX193X3BkZmpzX3JlcXVpcmVfXyg5Nyk7XG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhcmVudCwgZm47XG4gIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpXG4gICBwYXJlbnQuZXhpdCgpO1xuICB3aGlsZSAoaGVhZCkge1xuICAgZm4gPSBoZWFkLmZuO1xuICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgIHRyeSB7XG4gICAgZm4oKTtcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGhlYWQpXG4gICAgIG5vdGlmeSgpO1xuICAgIGVsc2VcbiAgICAgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICB0aHJvdyBlcnJvcjtcbiAgIH1cbiAgfVxuICBsYXN0ID0gdW5kZWZpbmVkO1xuICBpZiAocGFyZW50KVxuICAgcGFyZW50LmVudGVyKCk7XG4gfTtcbiBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgdG9nZ2xlID0gdHJ1ZTtcbiAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICB9O1xuIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgfTtcbiB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG4gfSBlbHNlIHtcbiAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gIH07XG4gfVxufVxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiB2YXIgdGFzayA9IHtcbiAgZm46IGZuLFxuICBuZXh0OiB1bmRlZmluZWRcbiB9O1xuIGlmIChsYXN0KVxuICBsYXN0Lm5leHQgPSB0YXNrO1xuIGlmICghaGVhZCkge1xuICBoZWFkID0gdGFzaztcbiAgbm90aWZ5KCk7XG4gfVxuIGxhc3QgPSB0YXNrO1xufTtcblxuLyoqKi8gfSksXG4vKiA5OSAqL1xuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG52YXIgdXNlckFnZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXyg1OSk7XG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcblxuLyoqKi8gfSksXG4vKiAxMDAgKi9cbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7XG52YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTAxKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiBhbk9iamVjdChDKTtcbiBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQylcbiAgcmV0dXJuIHg7XG4gdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gcmVzb2x2ZSh4KTtcbiByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYUZ1bmN0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXyg3OCk7XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuIHZhciByZXNvbHZlLCByZWplY3Q7XG4gdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZClcbiAgIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gfSk7XG4gdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTAzICovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gdHJ5IHtcbiAgcmV0dXJuIHtcbiAgIGVycm9yOiBmYWxzZSxcbiAgIHZhbHVlOiBleGVjKClcbiAgfTtcbiB9IGNhdGNoIChlcnJvcikge1xuICByZXR1cm4ge1xuICAgZXJyb3I6IHRydWUsXG4gICB2YWx1ZTogZXJyb3JcbiAgfTtcbiB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDEwNCAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnO1xuXG4vKioqLyB9KSxcbi8qIDEwNSAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oOSk7XG52YXIgYUZ1bmN0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXyg3OCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMSk7XG52YXIgcGVyZm9ybSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTAzKTtcbnZhciBpdGVyYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3NSk7XG4kKHtcbiB0YXJnZXQ6ICdQcm9taXNlJyxcbiBzdGF0OiB0cnVlXG59LCB7XG4gYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICB2YXIgQyA9IHRoaXM7XG4gIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICB2YXIgdmFsdWVzID0gW107XG4gICB2YXIgY291bnRlciA9IDA7XG4gICB2YXIgcmVtYWluaW5nID0gMTtcbiAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICByZW1haW5pbmcrKztcbiAgICBwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgIGlmIChhbHJlYWR5Q2FsbGVkKVxuICAgICAgcmV0dXJuO1xuICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgdmFsdWVzW2luZGV4XSA9IHtcbiAgICAgIHN0YXR1czogJ2Z1bGZpbGxlZCcsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICAgfTtcbiAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICBpZiAoYWxyZWFkeUNhbGxlZClcbiAgICAgIHJldHVybjtcbiAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgIHZhbHVlc1tpbmRleF0gPSB7XG4gICAgICBzdGF0dXM6ICdyZWplY3RlZCcsXG4gICAgICByZWFzb246IGVycm9yXG4gICAgIH07XG4gICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgIH0pO1xuICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICB9KTtcbiAgaWYgKHJlc3VsdC5lcnJvcilcbiAgIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDEwNiAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oOSk7XG52YXIgYUZ1bmN0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXyg3OCk7XG52YXIgZ2V0QnVpbHRJbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNDIpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDEpO1xudmFyIHBlcmZvcm0gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMyk7XG52YXIgaXRlcmF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNzUpO1xudmFyIFBST01JU0VfQU5ZX0VSUk9SID0gJ05vIG9uZSBwcm9taXNlIHJlc29sdmVkJztcbiQoe1xuIHRhcmdldDogJ1Byb21pc2UnLFxuIHN0YXQ6IHRydWVcbn0sIHtcbiBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICB2YXIgQyA9IHRoaXM7XG4gIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICB2YXIgZXJyb3JzID0gW107XG4gICB2YXIgY291bnRlciA9IDA7XG4gICB2YXIgcmVtYWluaW5nID0gMTtcbiAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICBlcnJvcnMucHVzaCh1bmRlZmluZWQpO1xuICAgIHJlbWFpbmluZysrO1xuICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpXG4gICAgICByZXR1cm47XG4gICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZClcbiAgICAgIHJldHVybjtcbiAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgZXJyb3JzW2luZGV4XSA9IGVycm9yO1xuICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IChnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpKShlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgfSk7XG4gICB9KTtcbiAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgKGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJykpKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgfSk7XG4gIGlmIChyZXN1bHQuZXJyb3IpXG4gICByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxMDcgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkpO1xudmFyIElTX1BVUkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM3KTtcbnZhciBOYXRpdmVQcm9taXNlID0gX193X3BkZmpzX3JlcXVpcmVfXyg4OSk7XG52YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTtcbnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXyg5NCk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMCk7XG52YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTtcbnZhciBOT05fR0VORVJJQyA9ICEhTmF0aXZlUHJvbWlzZSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHtcbiAgdGhlbjogZnVuY3Rpb24gKCkge1xuICB9XG4gfSwgZnVuY3Rpb24gKCkge1xuIH0pO1xufSk7XG4kKHtcbiB0YXJnZXQ6ICdQcm9taXNlJyxcbiBwcm90bzogdHJ1ZSxcbiByZWFsOiB0cnVlLFxuIGZvcmNlZDogTk9OX0dFTkVSSUNcbn0sIHtcbiAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB4O1xuICAgfSk7XG4gIH0gOiBvbkZpbmFsbHksIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlO1xuICAgfSk7XG4gIH0gOiBvbkZpbmFsbHkpO1xuIH1cbn0pO1xuaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuIGlmIChOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddICE9PSBtZXRob2QpIHtcbiAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiB9XG59XG5cbi8qKiovIH0pLFxuLyogMTA4ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjaGFyQXQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwOSkuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMzKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oNjYpO1xudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgaW5kZXg6IDBcbiB9KTtcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuIHZhciBwb2ludDtcbiBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aClcbiAgcmV0dXJuIHtcbiAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICBkb25lOiB0cnVlXG4gIH07XG4gcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuIHJldHVybiB7XG4gIHZhbHVlOiBwb2ludCxcbiAgZG9uZTogZmFsc2VcbiB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTA5ICovXG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ4KTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7XG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gIHZhciBzaXplID0gUy5sZW5ndGg7XG4gIHZhciBmaXJzdCwgc2Vjb25kO1xuICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpXG4gICByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdCA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gfTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG5cbi8qKiovIH0pLFxuLyogMTEwICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxudmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApO1xudmFyIERPTUl0ZXJhYmxlcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTExKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IF9fd19wZGZqc19yZXF1aXJlX18oNTQpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjYpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTYpO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcylcbiAgIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICB9XG4gIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gIH1cbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKVxuICAgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSlcbiAgICAgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICB9XG4gICB9XG4gfVxufVxuXG4vKioqLyB9KSxcbi8qIDExMSAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gQ1NTUnVsZUxpc3Q6IDAsXG4gQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiBDU1NWYWx1ZUxpc3Q6IDAsXG4gQ2xpZW50UmVjdExpc3Q6IDAsXG4gRE9NUmVjdExpc3Q6IDAsXG4gRE9NU3RyaW5nTGlzdDogMCxcbiBET01Ub2tlbkxpc3Q6IDEsXG4gRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gRmlsZUxpc3Q6IDAsXG4gSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gSFRNTENvbGxlY3Rpb246IDAsXG4gSFRNTEZvcm1FbGVtZW50OiAwLFxuIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuIE1lZGlhTGlzdDogMCxcbiBNaW1lVHlwZUFycmF5OiAwLFxuIE5hbWVkTm9kZU1hcDogMCxcbiBOb2RlTGlzdDogMSxcbiBQYWludFJlcXVlc3RMaXN0OiAwLFxuIFBsdWdpbjogMCxcbiBQbHVnaW5BcnJheTogMCxcbiBTVkdMZW5ndGhMaXN0OiAwLFxuIFNWR051bWJlckxpc3Q6IDAsXG4gU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gU1ZHUG9pbnRMaXN0OiAwLFxuIFNWR1N0cmluZ0xpc3Q6IDAsXG4gU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuIFN0eWxlU2hlZXRMaXN0OiAwLFxuIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gVGV4dFRyYWNrTGlzdDogMCxcbiBUb3VjaExpc3Q6IDBcbn07XG5cbi8qKiovIH0pLFxuLyogMTEyICovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHJ1ZSA/IGZhY3RvcnkoZXhwb3J0cykgOiAwO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICd1c2Ugc3RyaWN0JztcbiB2YXIgU3ltYm9sUG9seWZpbGwgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnID8gU3ltYm9sIDogZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiBcIlN5bWJvbChcIiArIGRlc2NyaXB0aW9uICsgXCIpXCI7XG4gfTtcbiBmdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gdW5kZWZpbmVkO1xuIH1cbiBmdW5jdGlvbiBnZXRHbG9iYWxzKCkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgcmV0dXJuIGdsb2JhbDtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xuIH1cbiB2YXIgZ2xvYmFscyA9IGdldEdsb2JhbHMoKTtcbiBmdW5jdGlvbiB0eXBlSXNPYmplY3QoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGwgfHwgdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG4gfVxuIHZhciByZXRocm93QXNzZXJ0aW9uRXJyb3JSZWplY3Rpb24gPSBub29wO1xuIHZhciBvcmlnaW5hbFByb21pc2UgPSBQcm9taXNlO1xuIHZhciBvcmlnaW5hbFByb21pc2VUaGVuID0gUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcbiB2YXIgb3JpZ2luYWxQcm9taXNlUmVzb2x2ZSA9IFByb21pc2UucmVzb2x2ZS5iaW5kKG9yaWdpbmFsUHJvbWlzZSk7XG4gdmFyIG9yaWdpbmFsUHJvbWlzZVJlamVjdCA9IFByb21pc2UucmVqZWN0LmJpbmQob3JpZ2luYWxQcm9taXNlKTtcbiBmdW5jdGlvbiBuZXdQcm9taXNlKGV4ZWN1dG9yKSB7XG4gIHJldHVybiBuZXcgb3JpZ2luYWxQcm9taXNlKGV4ZWN1dG9yKTtcbiB9XG4gZnVuY3Rpb24gcHJvbWlzZVJlc29sdmVkV2l0aCh2YWx1ZSkge1xuICByZXR1cm4gb3JpZ2luYWxQcm9taXNlUmVzb2x2ZSh2YWx1ZSk7XG4gfVxuIGZ1bmN0aW9uIHByb21pc2VSZWplY3RlZFdpdGgocmVhc29uKSB7XG4gIHJldHVybiBvcmlnaW5hbFByb21pc2VSZWplY3QocmVhc29uKTtcbiB9XG4gZnVuY3Rpb24gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHJldHVybiBvcmlnaW5hbFByb21pc2VUaGVuLmNhbGwocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuIH1cbiBmdW5jdGlvbiB1cG9uUHJvbWlzZShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICBQZXJmb3JtUHJvbWlzZVRoZW4oUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSwgdW5kZWZpbmVkLCByZXRocm93QXNzZXJ0aW9uRXJyb3JSZWplY3Rpb24pO1xuIH1cbiBmdW5jdGlvbiB1cG9uRnVsZmlsbG1lbnQocHJvbWlzZSwgb25GdWxmaWxsZWQpIHtcbiAgdXBvblByb21pc2UocHJvbWlzZSwgb25GdWxmaWxsZWQpO1xuIH1cbiBmdW5jdGlvbiB1cG9uUmVqZWN0aW9uKHByb21pc2UsIG9uUmVqZWN0ZWQpIHtcbiAgdXBvblByb21pc2UocHJvbWlzZSwgdW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiB9XG4gZnVuY3Rpb24gdHJhbnNmb3JtUHJvbWlzZVdpdGgocHJvbWlzZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHJldHVybiBQZXJmb3JtUHJvbWlzZVRoZW4ocHJvbWlzZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiB9XG4gZnVuY3Rpb24gc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKSB7XG4gIFBlcmZvcm1Qcm9taXNlVGhlbihwcm9taXNlLCB1bmRlZmluZWQsIHJldGhyb3dBc3NlcnRpb25FcnJvclJlamVjdGlvbik7XG4gfVxuIHZhciBxdWV1ZU1pY3JvdGFzayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGdsb2JhbFF1ZXVlTWljcm90YXNrID0gZ2xvYmFscyAmJiBnbG9iYWxzLnF1ZXVlTWljcm90YXNrO1xuICBpZiAodHlwZW9mIGdsb2JhbFF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICByZXR1cm4gZ2xvYmFsUXVldWVNaWNyb3Rhc2s7XG4gIH1cbiAgdmFyIHJlc29sdmVkUHJvbWlzZSA9IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgcmV0dXJuIFBlcmZvcm1Qcm9taXNlVGhlbihyZXNvbHZlZFByb21pc2UsIGZuKTtcbiAgfTtcbiB9KCk7XG4gZnVuY3Rpb24gcmVmbGVjdENhbGwoRiwgViwgYXJncykge1xuICBpZiAodHlwZW9mIEYgIT09ICdmdW5jdGlvbicpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKEYsIFYsIGFyZ3MpO1xuIH1cbiBmdW5jdGlvbiBwcm9taXNlQ2FsbChGLCBWLCBhcmdzKSB7XG4gIHRyeSB7XG4gICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aChyZWZsZWN0Q2FsbChGLCBWLCBhcmdzKSk7XG4gIH0gY2F0Y2ggKHZhbHVlKSB7XG4gICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aCh2YWx1ZSk7XG4gIH1cbiB9XG4gdmFyIFFVRVVFX01BWF9BUlJBWV9TSVpFID0gMTYzODQ7XG4gdmFyIFNpbXBsZVF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVRdWV1ZSgpIHtcbiAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICB0aGlzLl9zaXplID0gMDtcbiAgIHRoaXMuX2Zyb250ID0ge1xuICAgIF9lbGVtZW50czogW10sXG4gICAgX25leHQ6IHVuZGVmaW5lZFxuICAgfTtcbiAgIHRoaXMuX2JhY2sgPSB0aGlzLl9mcm9udDtcbiAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICB0aGlzLl9zaXplID0gMDtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2ltcGxlUXVldWUucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgU2ltcGxlUXVldWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgdmFyIG9sZEJhY2sgPSB0aGlzLl9iYWNrO1xuICAgdmFyIG5ld0JhY2sgPSBvbGRCYWNrO1xuICAgaWYgKG9sZEJhY2suX2VsZW1lbnRzLmxlbmd0aCA9PT0gUVVFVUVfTUFYX0FSUkFZX1NJWkUgLSAxKSB7XG4gICAgbmV3QmFjayA9IHtcbiAgICAgX2VsZW1lbnRzOiBbXSxcbiAgICAgX25leHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICB9XG4gICBvbGRCYWNrLl9lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgaWYgKG5ld0JhY2sgIT09IG9sZEJhY2spIHtcbiAgICB0aGlzLl9iYWNrID0gbmV3QmFjaztcbiAgICBvbGRCYWNrLl9uZXh0ID0gbmV3QmFjaztcbiAgIH1cbiAgICsrdGhpcy5fc2l6ZTtcbiAgfTtcbiAgU2ltcGxlUXVldWUucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgdmFyIG9sZEZyb250ID0gdGhpcy5fZnJvbnQ7XG4gICB2YXIgbmV3RnJvbnQgPSBvbGRGcm9udDtcbiAgIHZhciBvbGRDdXJzb3IgPSB0aGlzLl9jdXJzb3I7XG4gICB2YXIgbmV3Q3Vyc29yID0gb2xkQ3Vyc29yICsgMTtcbiAgIHZhciBlbGVtZW50cyA9IG9sZEZyb250Ll9lbGVtZW50cztcbiAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbb2xkQ3Vyc29yXTtcbiAgIGlmIChuZXdDdXJzb3IgPT09IFFVRVVFX01BWF9BUlJBWV9TSVpFKSB7XG4gICAgbmV3RnJvbnQgPSBvbGRGcm9udC5fbmV4dDtcbiAgICBuZXdDdXJzb3IgPSAwO1xuICAgfVxuICAgLS10aGlzLl9zaXplO1xuICAgdGhpcy5fY3Vyc29yID0gbmV3Q3Vyc29yO1xuICAgaWYgKG9sZEZyb250ICE9PSBuZXdGcm9udCkge1xuICAgIHRoaXMuX2Zyb250ID0gbmV3RnJvbnQ7XG4gICB9XG4gICBlbGVtZW50c1tvbGRDdXJzb3JdID0gdW5kZWZpbmVkO1xuICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG4gIFNpbXBsZVF1ZXVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICB2YXIgaSA9IHRoaXMuX2N1cnNvcjtcbiAgIHZhciBub2RlID0gdGhpcy5fZnJvbnQ7XG4gICB2YXIgZWxlbWVudHMgPSBub2RlLl9lbGVtZW50cztcbiAgIHdoaWxlIChpICE9PSBlbGVtZW50cy5sZW5ndGggfHwgbm9kZS5fbmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGkgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICBub2RlID0gbm9kZS5fbmV4dDtcbiAgICAgZWxlbWVudHMgPSBub2RlLl9lbGVtZW50cztcbiAgICAgaSA9IDA7XG4gICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgICB9XG4gICAgfVxuICAgIGNhbGxiYWNrKGVsZW1lbnRzW2ldKTtcbiAgICArK2k7XG4gICB9XG4gIH07XG4gIFNpbXBsZVF1ZXVlLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgdmFyIGZyb250ID0gdGhpcy5fZnJvbnQ7XG4gICB2YXIgY3Vyc29yID0gdGhpcy5fY3Vyc29yO1xuICAgcmV0dXJuIGZyb250Ll9lbGVtZW50c1tjdXJzb3JdO1xuICB9O1xuICByZXR1cm4gU2ltcGxlUXVldWU7XG4gfSgpO1xuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemUocmVhZGVyLCBzdHJlYW0pIHtcbiAgcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtID0gc3RyZWFtO1xuICBzdHJlYW0uX3JlYWRlciA9IHJlYWRlcjtcbiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdyZWFkYWJsZScpIHtcbiAgIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZShyZWFkZXIpO1xuICB9IGVsc2UgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHJlYWRlcik7XG4gIH0gZWxzZSB7XG4gICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHJlYWRlciwgc3RyZWFtLl9zdG9yZWRFcnJvcik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljQ2FuY2VsKHJlYWRlciwgcmVhc29uKSB7XG4gIHZhciBzdHJlYW0gPSByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW07XG4gIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbChzdHJlYW0sIHJlYXNvbik7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKSB7XG4gIGlmIChyZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW0uX3N0YXRlID09PSAncmVhZGFibGUnKSB7XG4gICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIG5ldyBUeXBlRXJyb3IoXCJSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc1wiKSk7XG4gIH0gZWxzZSB7XG4gICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZChyZWFkZXIsIG5ldyBUeXBlRXJyb3IoXCJSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc1wiKSk7XG4gIH1cbiAgcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtLl9yZWFkZXIgPSB1bmRlZmluZWQ7XG4gIHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbSA9IHVuZGVmaW5lZDtcbiB9XG4gZnVuY3Rpb24gcmVhZGVyTG9ja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdDYW5ub3QgJyArIG5hbWUgKyAnIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgcmVhZGVyJyk7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZShyZWFkZXIpIHtcbiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICByZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICByZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiB9XG4gZnVuY3Rpb24gZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZChyZWFkZXIsIHJlYXNvbikge1xuICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUocmVhZGVyKTtcbiAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZWplY3QocmVhZGVyLCByZWFzb24pO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHJlYWRlcikge1xuICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUocmVhZGVyKTtcbiAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNvbHZlKHJlYWRlcik7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVqZWN0KHJlYWRlciwgcmVhc29uKSB7XG4gIGlmIChyZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybjtcbiAgfVxuICBzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlKHJlYWRlci5fY2xvc2VkUHJvbWlzZSk7XG4gIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QocmVhc29uKTtcbiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG4gIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVzZXRUb1JlamVjdGVkKHJlYWRlciwgcmVhc29uKSB7XG4gIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQocmVhZGVyLCByZWFzb24pO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUocmVhZGVyKSB7XG4gIGlmIChyZWFkZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICByZXR1cm47XG4gIH1cbiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUodW5kZWZpbmVkKTtcbiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG4gIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7XG4gfVxuIHZhciBBYm9ydFN0ZXBzID0gU3ltYm9sUG9seWZpbGwoJ1tbQWJvcnRTdGVwc11dJyk7XG4gdmFyIEVycm9yU3RlcHMgPSBTeW1ib2xQb2x5ZmlsbCgnW1tFcnJvclN0ZXBzXV0nKTtcbiB2YXIgQ2FuY2VsU3RlcHMgPSBTeW1ib2xQb2x5ZmlsbCgnW1tDYW5jZWxTdGVwc11dJyk7XG4gdmFyIFB1bGxTdGVwcyA9IFN5bWJvbFBvbHlmaWxsKCdbW1B1bGxTdGVwc11dJyk7XG4gdmFyIE51bWJlcklzRmluaXRlID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoeCk7XG4gfTtcbiB2YXIgTWF0aFRydW5jID0gTWF0aC50cnVuYyB8fCBmdW5jdGlvbiAodikge1xuICByZXR1cm4gdiA8IDAgPyBNYXRoLmNlaWwodikgOiBNYXRoLmZsb29yKHYpO1xuIH07XG4gZnVuY3Rpb24gaXNEaWN0aW9uYXJ5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbiB9XG4gZnVuY3Rpb24gYXNzZXJ0RGljdGlvbmFyeShvYmosIGNvbnRleHQpIHtcbiAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkICYmICFpc0RpY3Rpb25hcnkob2JqKSkge1xuICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb250ZXh0ICsgXCIgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb24oeCwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIHggIT09ICdmdW5jdGlvbicpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29udGV4dCArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCB8fCB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbiB9XG4gZnVuY3Rpb24gYXNzZXJ0T2JqZWN0KHgsIGNvbnRleHQpIHtcbiAgaWYgKCFpc09iamVjdCh4KSkge1xuICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb250ZXh0ICsgXCIgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gYXNzZXJ0UmVxdWlyZWRBcmd1bWVudCh4LCBwb3NpdGlvbiwgY29udGV4dCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyIFwiICsgcG9zaXRpb24gKyBcIiBpcyByZXF1aXJlZCBpbiAnXCIgKyBjb250ZXh0ICsgXCInLlwiKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBhc3NlcnRSZXF1aXJlZEZpZWxkKHgsIGZpZWxkLCBjb250ZXh0KSB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoZmllbGQgKyBcIiBpcyByZXF1aXJlZCBpbiAnXCIgKyBjb250ZXh0ICsgXCInLlwiKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBjb252ZXJ0VW5yZXN0cmljdGVkRG91YmxlKHZhbHVlKSB7XG4gIHJldHVybiBOdW1iZXIodmFsdWUpO1xuIH1cbiBmdW5jdGlvbiBjZW5zb3JOZWdhdGl2ZVplcm8oeCkge1xuICByZXR1cm4geCA9PT0gMCA/IDAgOiB4O1xuIH1cbiBmdW5jdGlvbiBpbnRlZ2VyUGFydCh4KSB7XG4gIHJldHVybiBjZW5zb3JOZWdhdGl2ZVplcm8oTWF0aFRydW5jKHgpKTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFVuc2lnbmVkTG9uZ0xvbmdXaXRoRW5mb3JjZVJhbmdlKHZhbHVlLCBjb250ZXh0KSB7XG4gIHZhciBsb3dlckJvdW5kID0gMDtcbiAgdmFyIHVwcGVyQm91bmQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICB4ID0gY2Vuc29yTmVnYXRpdmVaZXJvKHgpO1xuICBpZiAoIU51bWJlcklzRmluaXRlKHgpKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYSBmaW5pdGUgbnVtYmVyXCIpO1xuICB9XG4gIHggPSBpbnRlZ2VyUGFydCh4KTtcbiAgaWYgKHggPCBsb3dlckJvdW5kIHx8IHggPiB1cHBlckJvdW5kKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBvdXRzaWRlIHRoZSBhY2NlcHRlZCByYW5nZSBvZiBcIiArIGxvd2VyQm91bmQgKyBcIiB0byBcIiArIHVwcGVyQm91bmQgKyBcIiwgaW5jbHVzaXZlXCIpO1xuICB9XG4gIGlmICghTnVtYmVySXNGaW5pdGUoeCkgfHwgeCA9PT0gMCkge1xuICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHg7XG4gfVxuIGZ1bmN0aW9uIGFzc2VydFJlYWRhYmxlU3RyZWFtKHgsIGNvbnRleHQpIHtcbiAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHgpKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYSBSZWFkYWJsZVN0cmVhbS5cIik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0pIHtcbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1BZGRSZWFkUmVxdWVzdChzdHJlYW0sIHJlYWRSZXF1ZXN0KSB7XG4gIHN0cmVhbS5fcmVhZGVyLl9yZWFkUmVxdWVzdHMucHVzaChyZWFkUmVxdWVzdCk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRSZXF1ZXN0KHN0cmVhbSwgY2h1bmssIGRvbmUpIHtcbiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyO1xuICB2YXIgcmVhZFJlcXVlc3QgPSByZWFkZXIuX3JlYWRSZXF1ZXN0cy5zaGlmdCgpO1xuICBpZiAoZG9uZSkge1xuICAgcmVhZFJlcXVlc3QuX2Nsb3NlU3RlcHMoKTtcbiAgfSBlbHNlIHtcbiAgIHJlYWRSZXF1ZXN0Ll9jaHVua1N0ZXBzKGNodW5rKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5fcmVhZGVyLl9yZWFkUmVxdWVzdHMubGVuZ3RoO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIoc3RyZWFtKSB7XG4gIHZhciByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcbiAgaWYgKHJlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihyZWFkZXIpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gfVxuIHZhciBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0pIHtcbiAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQoc3RyZWFtLCAxLCAnUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyJyk7XG4gICBhc3NlcnRSZWFkYWJsZVN0cmVhbShzdHJlYW0sICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGxvY2tlZCBmb3IgZXhjbHVzaXZlIHJlYWRpbmcgYnkgYW5vdGhlciByZWFkZXInKTtcbiAgIH1cbiAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemUodGhpcywgc3RyZWFtKTtcbiAgIHRoaXMuX3JlYWRSZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLCBcImNsb3NlZFwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMpKSB7XG4gICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZWQnKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbG9zZWRQcm9taXNlO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIGlmIChyZWFzb24gPT09IHZvaWQgMCkge1xuICAgIHJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIodGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2FuY2VsJykpO1xuICAgfVxuICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ2NhbmNlbCcpKTtcbiAgIH1cbiAgIHJldHVybiBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNDYW5jZWwodGhpcywgcmVhc29uKTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdyZWFkJykpO1xuICAgfVxuICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ3JlYWQgZnJvbScpKTtcbiAgIH1cbiAgIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgIHZhciByZWplY3RQcm9taXNlO1xuICAgdmFyIHByb21pc2UgPSBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgcmVqZWN0UHJvbWlzZSA9IHJlamVjdDtcbiAgIH0pO1xuICAgdmFyIHJlYWRSZXF1ZXN0ID0ge1xuICAgIF9jaHVua1N0ZXBzOiBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKHtcbiAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgIH0pO1xuICAgIH0sXG4gICAgX2Nsb3NlU3RlcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBkb25lOiB0cnVlXG4gICAgIH0pO1xuICAgIH0sXG4gICAgX2Vycm9yU3RlcHM6IGZ1bmN0aW9uIChlKSB7XG4gICAgIHJldHVybiByZWplY3RQcm9taXNlKGUpO1xuICAgIH1cbiAgIH07XG4gICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkKHRoaXMsIHJlYWRSZXF1ZXN0KTtcbiAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLnJlbGVhc2VMb2NrID0gZnVuY3Rpb24gKCkge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKSkge1xuICAgIHRocm93IGRlZmF1bHRSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdyZWxlYXNlTG9jaycpO1xuICAgfVxuICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgIH1cbiAgIGlmICh0aGlzLl9yZWFkUmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RyaWVkIHRvIHJlbGVhc2UgYSByZWFkZXIgbG9jayB3aGVuIHRoYXQgcmVhZGVyIGhhcyBwZW5kaW5nIHJlYWQoKSBjYWxscyB1bi1zZXR0bGVkJyk7XG4gICB9XG4gICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHRoaXMpO1xuICB9O1xuICByZXR1cm4gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyO1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLCB7XG4gIGNhbmNlbDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHJlYWQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICByZWxlYXNlTG9jazogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGNsb3NlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcbiAgIHZhbHVlOiAnUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyJyxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiB9XG4gZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfcmVhZFJlcXVlc3RzJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIsIHJlYWRSZXF1ZXN0KSB7XG4gIHZhciBzdHJlYW0gPSByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW07XG4gIHN0cmVhbS5fZGlzdHVyYmVkID0gdHJ1ZTtcbiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICByZWFkUmVxdWVzdC5fY2xvc2VTdGVwcygpO1xuICB9IGVsc2UgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdlcnJvcmVkJykge1xuICAgcmVhZFJlcXVlc3QuX2Vycm9yU3RlcHMoc3RyZWFtLl9zdG9yZWRFcnJvcik7XG4gIH0gZWxzZSB7XG4gICBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltQdWxsU3RlcHNdKHJlYWRSZXF1ZXN0KTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyXCIpO1xuIH1cbiB2YXIgX2E7XG4gdmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGU7XG4gaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC5hc3luY0l0ZXJhdG9yID09PSAnc3ltYm9sJykge1xuICBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gKF9hID0ge30sIF9hW1N5bWJvbFBvbHlmaWxsLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXM7XG4gIH0sIF9hKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLmFzeW5jSXRlcmF0b3IsIHsgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gfVxuIHZhciBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsKHJlYWRlciwgcHJldmVudENhbmNlbCkge1xuICAgdGhpcy5fb25nb2luZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICB0aGlzLl9pc0ZpbmlzaGVkID0gZmFsc2U7XG4gICB0aGlzLl9yZWFkZXIgPSByZWFkZXI7XG4gICB0aGlzLl9wcmV2ZW50Q2FuY2VsID0gcHJldmVudENhbmNlbDtcbiAgfVxuICBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgdmFyIF90aGlzID0gdGhpcztcbiAgIHZhciBuZXh0U3RlcHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzLl9uZXh0U3RlcHMoKTtcbiAgIH07XG4gICB0aGlzLl9vbmdvaW5nUHJvbWlzZSA9IHRoaXMuX29uZ29pbmdQcm9taXNlID8gdHJhbnNmb3JtUHJvbWlzZVdpdGgodGhpcy5fb25nb2luZ1Byb21pc2UsIG5leHRTdGVwcywgbmV4dFN0ZXBzKSA6IG5leHRTdGVwcygpO1xuICAgcmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICB2YXIgcmV0dXJuU3RlcHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzLl9yZXR1cm5TdGVwcyh2YWx1ZSk7XG4gICB9O1xuICAgcmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlID8gdHJhbnNmb3JtUHJvbWlzZVdpdGgodGhpcy5fb25nb2luZ1Byb21pc2UsIHJldHVyblN0ZXBzLCByZXR1cm5TdGVwcykgOiByZXR1cm5TdGVwcygpO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsLnByb3RvdHlwZS5fbmV4dFN0ZXBzID0gZnVuY3Rpb24gKCkge1xuICAgdmFyIF90aGlzID0gdGhpcztcbiAgIGlmICh0aGlzLl9pc0ZpbmlzaGVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgIGRvbmU6IHRydWVcbiAgICB9KTtcbiAgIH1cbiAgIHZhciByZWFkZXIgPSB0aGlzLl9yZWFkZXI7XG4gICBpZiAocmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdpdGVyYXRlJykpO1xuICAgfVxuICAgdmFyIHJlc29sdmVQcm9taXNlO1xuICAgdmFyIHJlamVjdFByb21pc2U7XG4gICB2YXIgcHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICByZWplY3RQcm9taXNlID0gcmVqZWN0O1xuICAgfSk7XG4gICB2YXIgcmVhZFJlcXVlc3QgPSB7XG4gICAgX2NodW5rU3RlcHM6IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICBfdGhpcy5fb25nb2luZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgIHF1ZXVlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSh7XG4gICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgfSk7XG4gICAgfSxcbiAgICBfY2xvc2VTdGVwczogZnVuY3Rpb24gKCkge1xuICAgICBfdGhpcy5fb25nb2luZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgIF90aGlzLl9pc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpO1xuICAgICByZXNvbHZlUHJvbWlzZSh7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZG9uZTogdHJ1ZVxuICAgICB9KTtcbiAgICB9LFxuICAgIF9lcnJvclN0ZXBzOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgIF90aGlzLl9vbmdvaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgX3RoaXMuX2lzRmluaXNoZWQgPSB0cnVlO1xuICAgICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHJlYWRlcik7XG4gICAgIHJlamVjdFByb21pc2UocmVhc29uKTtcbiAgICB9XG4gICB9O1xuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIsIHJlYWRSZXF1ZXN0KTtcbiAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsLnByb3RvdHlwZS5fcmV0dXJuU3RlcHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgIGlmICh0aGlzLl9pc0ZpbmlzaGVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgZG9uZTogdHJ1ZVxuICAgIH0pO1xuICAgfVxuICAgdGhpcy5faXNGaW5pc2hlZCA9IHRydWU7XG4gICB2YXIgcmVhZGVyID0gdGhpcy5fcmVhZGVyO1xuICAgaWYgKHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgocmVhZGVyTG9ja0V4Y2VwdGlvbignZmluaXNoIGl0ZXJhdGluZycpKTtcbiAgIH1cbiAgIGlmICghdGhpcy5fcHJldmVudENhbmNlbCkge1xuICAgIHZhciByZXN1bHQgPSBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNDYW5jZWwocmVhZGVyLCB2YWx1ZSk7XG4gICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZShyZWFkZXIpO1xuICAgIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aChyZXN1bHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGRvbmU6IHRydWVcbiAgICAgfTtcbiAgICB9KTtcbiAgIH1cbiAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZG9uZTogdHJ1ZVxuICAgfSk7XG4gIH07XG4gIHJldHVybiBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JJbXBsO1xuIH0oKTtcbiB2YXIgUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlID0ge1xuICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICBpZiAoIUlzUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQXN5bmNJdGVyYXRvckJyYW5kQ2hlY2tFeGNlcHRpb24oJ25leHQnKSk7XG4gICB9XG4gICByZXR1cm4gdGhpcy5fYXN5bmNJdGVyYXRvckltcGwubmV4dCgpO1xuICB9LFxuICByZXR1cm46IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbUFzeW5jSXRlcmF0b3JCcmFuZENoZWNrRXhjZXB0aW9uKCdyZXR1cm4nKSk7XG4gICB9XG4gICByZXR1cm4gdGhpcy5fYXN5bmNJdGVyYXRvckltcGwucmV0dXJuKHZhbHVlKTtcbiAgfVxuIH07XG4gaWYgKEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgIT09IHVuZGVmaW5lZCkge1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcbiB9XG4gZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0sIHByZXZlbnRDYW5jZWwpIHtcbiAgdmFyIHJlYWRlciA9IEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTtcbiAgdmFyIGltcGwgPSBuZXcgUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9ySW1wbChyZWFkZXIsIHByZXZlbnRDYW5jZWwpO1xuICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7XG4gIGl0ZXJhdG9yLl9hc3luY0l0ZXJhdG9ySW1wbCA9IGltcGw7XG4gIHJldHVybiBpdGVyYXRvcjtcbiB9XG4gZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfYXN5bmNJdGVyYXRvckltcGwnKSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBzdHJlYW1Bc3luY0l0ZXJhdG9yQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yLlwiICsgbmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0ZWFtQXN5bmNJdGVyYXRvclwiKTtcbiB9XG4gdmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uICh4KSB7XG4gIHJldHVybiB4ICE9PSB4O1xuIH07XG4gZnVuY3Rpb24gSXNGaW5pdGVOb25OZWdhdGl2ZU51bWJlcih2KSB7XG4gIGlmICghSXNOb25OZWdhdGl2ZU51bWJlcih2KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2ID09PSBJbmZpbml0eSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBJc05vbk5lZ2F0aXZlTnVtYmVyKHYpIHtcbiAgaWYgKHR5cGVvZiB2ICE9PSAnbnVtYmVyJykge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChOdW1iZXJJc05hTih2KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2IDwgMCkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBEZXF1ZXVlVmFsdWUoY29udGFpbmVyKSB7XG4gIHZhciBwYWlyID0gY29udGFpbmVyLl9xdWV1ZS5zaGlmdCgpO1xuICBjb250YWluZXIuX3F1ZXVlVG90YWxTaXplIC09IHBhaXIuc2l6ZTtcbiAgaWYgKGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPCAwKSB7XG4gICBjb250YWluZXIuX3F1ZXVlVG90YWxTaXplID0gMDtcbiAgfVxuICByZXR1cm4gcGFpci52YWx1ZTtcbiB9XG4gZnVuY3Rpb24gRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udGFpbmVyLCB2YWx1ZSwgc2l6ZSkge1xuICBzaXplID0gTnVtYmVyKHNpemUpO1xuICBpZiAoIUlzRmluaXRlTm9uTmVnYXRpdmVOdW1iZXIoc2l6ZSkpIHtcbiAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdTaXplIG11c3QgYmUgYSBmaW5pdGUsIG5vbi1OYU4sIG5vbi1uZWdhdGl2ZSBudW1iZXIuJyk7XG4gIH1cbiAgY29udGFpbmVyLl9xdWV1ZS5wdXNoKHtcbiAgIHZhbHVlOiB2YWx1ZSxcbiAgIHNpemU6IHNpemVcbiAgfSk7XG4gIGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgKz0gc2l6ZTtcbiB9XG4gZnVuY3Rpb24gUGVla1F1ZXVlVmFsdWUoY29udGFpbmVyKSB7XG4gIHZhciBwYWlyID0gY29udGFpbmVyLl9xdWV1ZS5wZWVrKCk7XG4gIHJldHVybiBwYWlyLnZhbHVlO1xuIH1cbiBmdW5jdGlvbiBSZXNldFF1ZXVlKGNvbnRhaW5lcikge1xuICBjb250YWluZXIuX3F1ZXVlID0gbmV3IFNpbXBsZVF1ZXVlKCk7XG4gIGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPSAwO1xuIH1cbiBmdW5jdGlvbiBDcmVhdGVBcnJheUZyb21MaXN0KGVsZW1lbnRzKSB7XG4gIHJldHVybiBlbGVtZW50cy5zbGljZSgpO1xuIH1cbiBmdW5jdGlvbiBDb3B5RGF0YUJsb2NrQnl0ZXMoZGVzdCwgZGVzdE9mZnNldCwgc3JjLCBzcmNPZmZzZXQsIG4pIHtcbiAgbmV3IFVpbnQ4QXJyYXkoZGVzdCkuc2V0KG5ldyBVaW50OEFycmF5KHNyYywgc3JjT2Zmc2V0LCBuKSwgZGVzdE9mZnNldCk7XG4gfVxuIGZ1bmN0aW9uIFRyYW5zZmVyQXJyYXlCdWZmZXIoTykge1xuICByZXR1cm4gTztcbiB9XG4gZnVuY3Rpb24gSXNEZXRhY2hlZEJ1ZmZlcihPKSB7XG4gIHJldHVybiBmYWxzZTtcbiB9XG4gdmFyIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QoKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIGNvbnN0cnVjdG9yJyk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QucHJvdG90eXBlLCBcInZpZXdcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QodGhpcykpIHtcbiAgICAgdGhyb3cgYnlvYlJlcXVlc3RCcmFuZENoZWNrRXhjZXB0aW9uKCd2aWV3Jyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl92aWV3O1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZS5yZXNwb25kID0gZnVuY3Rpb24gKGJ5dGVzV3JpdHRlbikge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QodGhpcykpIHtcbiAgICB0aHJvdyBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24oJ3Jlc3BvbmQnKTtcbiAgIH1cbiAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQoYnl0ZXNXcml0dGVuLCAxLCAncmVzcG9uZCcpO1xuICAgYnl0ZXNXcml0dGVuID0gY29udmVydFVuc2lnbmVkTG9uZ0xvbmdXaXRoRW5mb3JjZVJhbmdlKGJ5dGVzV3JpdHRlbiwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuICAgaWYgKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZCcpO1xuICAgfVxuICAgaWYgKElzRGV0YWNoZWRCdWZmZXIodGhpcy5fdmlldy5idWZmZXIpKTtcbiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLCBieXRlc1dyaXR0ZW4pO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZS5yZXNwb25kV2l0aE5ld1ZpZXcgPSBmdW5jdGlvbiAodmlldykge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QodGhpcykpIHtcbiAgICB0aHJvdyBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24oJ3Jlc3BvbmRXaXRoTmV3VmlldycpO1xuICAgfVxuICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudCh2aWV3LCAxLCAncmVzcG9uZFdpdGhOZXdWaWV3Jyk7XG4gICBpZiAoIUFycmF5QnVmZmVyLmlzVmlldyh2aWV3KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBjYW4gb25seSByZXNwb25kIHdpdGggYXJyYXkgYnVmZmVyIHZpZXdzJyk7XG4gICB9XG4gICBpZiAodmlldy5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2h1bmsgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGgnKTtcbiAgIH1cbiAgIGlmICh2aWV3LmJ1ZmZlci5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNodW5rJ3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoXCIpO1xuICAgfVxuICAgaWYgKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZCcpO1xuICAgfVxuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRXaXRoTmV3Vmlldyh0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciwgdmlldyk7XG4gIH07XG4gIHJldHVybiBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0O1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZSwge1xuICByZXNwb25kOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgcmVzcG9uZFdpdGhOZXdWaWV3OiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgdmlldzogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG4gICB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QnLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiB2YXIgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcigpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgY29uc3RydWN0b3InKTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUsIFwiYnlvYlJlcXVlc3RcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykpIHtcbiAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdieW9iUmVxdWVzdCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYnlvYlJlcXVlc3QgPT09IG51bGwgJiYgdGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG4gICAgIHZhciBmaXJzdERlc2NyaXB0b3IgPSB0aGlzLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtcbiAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShmaXJzdERlc2NyaXB0b3IuYnVmZmVyLCBmaXJzdERlc2NyaXB0b3IuYnl0ZU9mZnNldCArIGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCwgZmlyc3REZXNjcmlwdG9yLmJ5dGVMZW5ndGggLSBmaXJzdERlc2NyaXB0b3IuYnl0ZXNGaWxsZWQpO1xuICAgICB2YXIgYnlvYlJlcXVlc3QgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QucHJvdG90eXBlKTtcbiAgICAgU2V0VXBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0KGJ5b2JSZXF1ZXN0LCB0aGlzLCB2aWV3KTtcbiAgICAgdGhpcy5fYnlvYlJlcXVlc3QgPSBieW9iUmVxdWVzdDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2J5b2JSZXF1ZXN0O1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUsIFwiZGVzaXJlZFNpemVcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykpIHtcbiAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKHRoaXMpO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgIGlmICghSXNSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHRoaXMpKSB7XG4gICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZScpO1xuICAgfVxuICAgaWYgKHRoaXMuX2Nsb3NlUmVxdWVzdGVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZDsgZG8gbm90IGNsb3NlIGl0IGFnYWluIScpO1xuICAgfVxuICAgdmFyIHN0YXRlID0gdGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7XG4gICBpZiAoc3RhdGUgIT09ICdyZWFkYWJsZScpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIHN0cmVhbSAoaW4gXCIgKyBzdGF0ZSArIFwiIHN0YXRlKSBpcyBub3QgaW4gdGhlIHJlYWRhYmxlIHN0YXRlIGFuZCBjYW5ub3QgYmUgY2xvc2VkXCIpO1xuICAgfVxuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsb3NlKHRoaXMpO1xuICB9O1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICBpZiAoIUlzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcih0aGlzKSkge1xuICAgIHRocm93IGJ5dGVTdHJlYW1Db250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZW5xdWV1ZScpO1xuICAgfVxuICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudChjaHVuaywgMSwgJ2VucXVldWUnKTtcbiAgIGlmICghQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NodW5rIG11c3QgYmUgYW4gYXJyYXkgYnVmZmVyIHZpZXcnKTtcbiAgIH1cbiAgIGlmIChjaHVuay5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2h1bmsgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGgnKTtcbiAgIH1cbiAgIGlmIChjaHVuay5idWZmZXIuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjaHVuaydzIGJ1ZmZlciBtdXN0IGhhdmUgbm9uLXplcm8gYnl0ZUxlbmd0aFwiKTtcbiAgIH1cbiAgIGlmICh0aGlzLl9jbG9zZVJlcXVlc3RlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3N0cmVhbSBpcyBjbG9zZWQgb3IgZHJhaW5pbmcnKTtcbiAgIH1cbiAgIHZhciBzdGF0ZSA9IHRoaXMuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlO1xuICAgaWYgKHN0YXRlICE9PSAncmVhZGFibGUnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBzdHJlYW0gKGluIFwiICsgc3RhdGUgKyBcIiBzdGF0ZSkgaXMgbm90IGluIHRoZSByZWFkYWJsZSBzdGF0ZSBhbmQgY2Fubm90IGJlIGVucXVldWVkIHRvXCIpO1xuICAgfVxuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWUodGhpcywgY2h1bmspO1xuICB9O1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICBpZiAoZSA9PT0gdm9pZCAwKSB7XG4gICAgZSA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHRoaXMpKSB7XG4gICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdlcnJvcicpO1xuICAgfVxuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKHRoaXMsIGUpO1xuICB9O1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZVtDYW5jZWxTdGVwc10gPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICBpZiAodGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGZpcnN0RGVzY3JpcHRvciA9IHRoaXMuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO1xuICAgIGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCA9IDA7XG4gICB9XG4gICBSZXNldFF1ZXVlKHRoaXMpO1xuICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NhbmNlbEFsZ29yaXRobShyZWFzb24pO1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTtcbiAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlW1B1bGxTdGVwc10gPSBmdW5jdGlvbiAocmVhZFJlcXVlc3QpIHtcbiAgIHZhciBzdHJlYW0gPSB0aGlzLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuICAgaWYgKHRoaXMuX3F1ZXVlVG90YWxTaXplID4gMCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XG4gICAgdGhpcy5fcXVldWVUb3RhbFNpemUgLT0gZW50cnkuYnl0ZUxlbmd0aDtcbiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbih0aGlzKTtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVudHJ5LmJ1ZmZlciwgZW50cnkuYnl0ZU9mZnNldCwgZW50cnkuYnl0ZUxlbmd0aCk7XG4gICAgcmVhZFJlcXVlc3QuX2NodW5rU3RlcHModmlldyk7XG4gICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9IHRoaXMuX2F1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcbiAgIGlmIChhdXRvQWxsb2NhdGVDaHVua1NpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBidWZmZXIgPSB2b2lkIDA7XG4gICAgdHJ5IHtcbiAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSk7XG4gICAgfSBjYXRjaCAoYnVmZmVyRSkge1xuICAgICByZWFkUmVxdWVzdC5fZXJyb3JTdGVwcyhidWZmZXJFKTtcbiAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcHVsbEludG9EZXNjcmlwdG9yID0ge1xuICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgYnl0ZU9mZnNldDogMCxcbiAgICAgYnl0ZUxlbmd0aDogYXV0b0FsbG9jYXRlQ2h1bmtTaXplLFxuICAgICBieXRlc0ZpbGxlZDogMCxcbiAgICAgZWxlbWVudFNpemU6IDEsXG4gICAgIHZpZXdDb25zdHJ1Y3RvcjogVWludDhBcnJheSxcbiAgICAgcmVhZGVyVHlwZTogJ2RlZmF1bHQnXG4gICAgfTtcbiAgICB0aGlzLl9wZW5kaW5nUHVsbEludG9zLnB1c2gocHVsbEludG9EZXNjcmlwdG9yKTtcbiAgIH1cbiAgIFJlYWRhYmxlU3RyZWFtQWRkUmVhZFJlcXVlc3Qoc3RyZWFtLCByZWFkUmVxdWVzdCk7XG4gICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTtcbiAgfTtcbiAgcmV0dXJuIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXI7XG4gfSgpO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLCB7XG4gIGNsb3NlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgZW5xdWV1ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGVycm9yOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgYnlvYlJlcXVlc3Q6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBkZXNpcmVkU2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG4gICB2YWx1ZTogJ1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXInLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbScpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gfVxuIGZ1bmN0aW9uIElzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh4KSB7XG4gIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcicpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpIHtcbiAgdmFyIHNob3VsZFB1bGwgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hvdWxkQ2FsbFB1bGwoY29udHJvbGxlcik7XG4gIGlmICghc2hvdWxkUHVsbCkge1xuICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb250cm9sbGVyLl9wdWxsaW5nKSB7XG4gICBjb250cm9sbGVyLl9wdWxsQWdhaW4gPSB0cnVlO1xuICAgcmV0dXJuO1xuICB9XG4gIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSB0cnVlO1xuICB2YXIgcHVsbFByb21pc2UgPSBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtKCk7XG4gIHVwb25Qcm9taXNlKHB1bGxQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICBjb250cm9sbGVyLl9wdWxsaW5nID0gZmFsc2U7XG4gICBpZiAoY29udHJvbGxlci5fcHVsbEFnYWluKSB7XG4gICAgY29udHJvbGxlci5fcHVsbEFnYWluID0gZmFsc2U7XG4gICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG4gICB9XG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJQZW5kaW5nUHVsbEludG9zKGNvbnRyb2xsZXIpIHtcbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckludmFsaWRhdGVCWU9CUmVxdWVzdChjb250cm9sbGVyKTtcbiAgY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29tbWl0UHVsbEludG9EZXNjcmlwdG9yKHN0cmVhbSwgcHVsbEludG9EZXNjcmlwdG9yKSB7XG4gIHZhciBkb25lID0gZmFsc2U7XG4gIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykge1xuICAgZG9uZSA9IHRydWU7XG4gIH1cbiAgdmFyIGZpbGxlZFZpZXcgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpO1xuICBpZiAocHVsbEludG9EZXNjcmlwdG9yLnJlYWRlclR5cGUgPT09ICdkZWZhdWx0Jykge1xuICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCBmaWxsZWRWaWV3LCBkb25lKTtcbiAgfSBlbHNlIHtcbiAgIFJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRJbnRvUmVxdWVzdChzdHJlYW0sIGZpbGxlZFZpZXcsIGRvbmUpO1xuICB9XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb252ZXJ0UHVsbEludG9EZXNjcmlwdG9yKHB1bGxJbnRvRGVzY3JpcHRvcikge1xuICB2YXIgYnl0ZXNGaWxsZWQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQ7XG4gIHZhciBlbGVtZW50U2l6ZSA9IHB1bGxJbnRvRGVzY3JpcHRvci5lbGVtZW50U2l6ZTtcbiAgcmV0dXJuIG5ldyBwdWxsSW50b0Rlc2NyaXB0b3Iudmlld0NvbnN0cnVjdG9yKHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIsIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlT2Zmc2V0LCBieXRlc0ZpbGxlZCAvIGVsZW1lbnRTaXplKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGNvbnRyb2xsZXIuX3F1ZXVlLnB1c2goe1xuICAgYnVmZmVyOiBidWZmZXIsXG4gICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICB9KTtcbiAgY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgKz0gYnl0ZUxlbmd0aDtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWUoY29udHJvbGxlciwgcHVsbEludG9EZXNjcmlwdG9yKSB7XG4gIHZhciBlbGVtZW50U2l6ZSA9IHB1bGxJbnRvRGVzY3JpcHRvci5lbGVtZW50U2l6ZTtcbiAgdmFyIGN1cnJlbnRBbGlnbmVkQnl0ZXMgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgLSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgJSBlbGVtZW50U2l6ZTtcbiAgdmFyIG1heEJ5dGVzVG9Db3B5ID0gTWF0aC5taW4oY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUsIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlTGVuZ3RoIC0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkKTtcbiAgdmFyIG1heEJ5dGVzRmlsbGVkID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICsgbWF4Qnl0ZXNUb0NvcHk7XG4gIHZhciBtYXhBbGlnbmVkQnl0ZXMgPSBtYXhCeXRlc0ZpbGxlZCAtIG1heEJ5dGVzRmlsbGVkICUgZWxlbWVudFNpemU7XG4gIHZhciB0b3RhbEJ5dGVzVG9Db3B5UmVtYWluaW5nID0gbWF4Qnl0ZXNUb0NvcHk7XG4gIHZhciByZWFkeSA9IGZhbHNlO1xuICBpZiAobWF4QWxpZ25lZEJ5dGVzID4gY3VycmVudEFsaWduZWRCeXRlcykge1xuICAgdG90YWxCeXRlc1RvQ29weVJlbWFpbmluZyA9IG1heEFsaWduZWRCeXRlcyAtIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZDtcbiAgIHJlYWR5ID0gdHJ1ZTtcbiAgfVxuICB2YXIgcXVldWUgPSBjb250cm9sbGVyLl9xdWV1ZTtcbiAgd2hpbGUgKHRvdGFsQnl0ZXNUb0NvcHlSZW1haW5pbmcgPiAwKSB7XG4gICB2YXIgaGVhZE9mUXVldWUgPSBxdWV1ZS5wZWVrKCk7XG4gICB2YXIgYnl0ZXNUb0NvcHkgPSBNYXRoLm1pbih0b3RhbEJ5dGVzVG9Db3B5UmVtYWluaW5nLCBoZWFkT2ZRdWV1ZS5ieXRlTGVuZ3RoKTtcbiAgIHZhciBkZXN0U3RhcnQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZU9mZnNldCArIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZDtcbiAgIENvcHlEYXRhQmxvY2tCeXRlcyhwdWxsSW50b0Rlc2NyaXB0b3IuYnVmZmVyLCBkZXN0U3RhcnQsIGhlYWRPZlF1ZXVlLmJ1ZmZlciwgaGVhZE9mUXVldWUuYnl0ZU9mZnNldCwgYnl0ZXNUb0NvcHkpO1xuICAgaWYgKGhlYWRPZlF1ZXVlLmJ5dGVMZW5ndGggPT09IGJ5dGVzVG9Db3B5KSB7XG4gICAgcXVldWUuc2hpZnQoKTtcbiAgIH0gZWxzZSB7XG4gICAgaGVhZE9mUXVldWUuYnl0ZU9mZnNldCArPSBieXRlc1RvQ29weTtcbiAgICBoZWFkT2ZRdWV1ZS5ieXRlTGVuZ3RoIC09IGJ5dGVzVG9Db3B5O1xuICAgfVxuICAgY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgLT0gYnl0ZXNUb0NvcHk7XG4gICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgYnl0ZXNUb0NvcHksIHB1bGxJbnRvRGVzY3JpcHRvcik7XG4gICB0b3RhbEJ5dGVzVG9Db3B5UmVtYWluaW5nIC09IGJ5dGVzVG9Db3B5O1xuICB9XG4gIHJldHVybiByZWFkeTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxIZWFkUHVsbEludG9EZXNjcmlwdG9yKGNvbnRyb2xsZXIsIHNpemUsIHB1bGxJbnRvRGVzY3JpcHRvcikge1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpO1xuICBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgKz0gc2l6ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckhhbmRsZVF1ZXVlRHJhaW4oY29udHJvbGxlcikge1xuICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPT09IDAgJiYgY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQpIHtcbiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG4gICBSZWFkYWJsZVN0cmVhbUNsb3NlKGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckludmFsaWRhdGVCWU9CUmVxdWVzdChjb250cm9sbGVyKSB7XG4gIGlmIChjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9PT0gbnVsbCkge1xuICAgcmV0dXJuO1xuICB9XG4gIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0Ll9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcbiAgY29udHJvbGxlci5fYnlvYlJlcXVlc3QuX3ZpZXcgPSBudWxsO1xuICBjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9IG51bGw7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJQcm9jZXNzUHVsbEludG9EZXNjcmlwdG9yc1VzaW5nUXVldWUoY29udHJvbGxlcikge1xuICB3aGlsZSAoY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG4gICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPT09IDApIHtcbiAgICByZXR1cm47XG4gICB9XG4gICB2YXIgcHVsbEludG9EZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG4gICBpZiAoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWUoY29udHJvbGxlciwgcHVsbEludG9EZXNjcmlwdG9yKSkge1xuICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJTaGlmdFBlbmRpbmdQdWxsSW50byhjb250cm9sbGVyKTtcbiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29tbWl0UHVsbEludG9EZXNjcmlwdG9yKGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcik7XG4gICB9XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclB1bGxJbnRvKGNvbnRyb2xsZXIsIHZpZXcsIHJlYWRJbnRvUmVxdWVzdCkge1xuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtcbiAgdmFyIGVsZW1lbnRTaXplID0gMTtcbiAgaWYgKHZpZXcuY29uc3RydWN0b3IgIT09IERhdGFWaWV3KSB7XG4gICBlbGVtZW50U2l6ZSA9IHZpZXcuY29uc3RydWN0b3IuQllURVNfUEVSX0VMRU1FTlQ7XG4gIH1cbiAgdmFyIGN0b3IgPSB2aWV3LmNvbnN0cnVjdG9yO1xuICB2YXIgYnVmZmVyID0gVHJhbnNmZXJBcnJheUJ1ZmZlcih2aWV3LmJ1ZmZlcik7XG4gIHZhciBwdWxsSW50b0Rlc2NyaXB0b3IgPSB7XG4gICBidWZmZXI6IGJ1ZmZlcixcbiAgIGJ5dGVPZmZzZXQ6IHZpZXcuYnl0ZU9mZnNldCxcbiAgIGJ5dGVMZW5ndGg6IHZpZXcuYnl0ZUxlbmd0aCxcbiAgIGJ5dGVzRmlsbGVkOiAwLFxuICAgZWxlbWVudFNpemU6IGVsZW1lbnRTaXplLFxuICAgdmlld0NvbnN0cnVjdG9yOiBjdG9yLFxuICAgcmVhZGVyVHlwZTogJ2J5b2InXG4gIH07XG4gIGlmIChjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aCA+IDApIHtcbiAgIGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucHVzaChwdWxsSW50b0Rlc2NyaXB0b3IpO1xuICAgUmVhZGFibGVTdHJlYW1BZGRSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCByZWFkSW50b1JlcXVlc3QpO1xuICAgcmV0dXJuO1xuICB9XG4gIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykge1xuICAgdmFyIGVtcHR5VmlldyA9IG5ldyBjdG9yKHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIsIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlT2Zmc2V0LCAwKTtcbiAgIHJlYWRJbnRvUmVxdWVzdC5fY2xvc2VTdGVwcyhlbXB0eVZpZXcpO1xuICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA+IDApIHtcbiAgIGlmIChSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbFB1bGxJbnRvRGVzY3JpcHRvckZyb21RdWV1ZShjb250cm9sbGVyLCBwdWxsSW50b0Rlc2NyaXB0b3IpKSB7XG4gICAgdmFyIGZpbGxlZFZpZXcgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpO1xuICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJIYW5kbGVRdWV1ZURyYWluKGNvbnRyb2xsZXIpO1xuICAgIHJlYWRJbnRvUmVxdWVzdC5fY2h1bmtTdGVwcyhmaWxsZWRWaWV3KTtcbiAgICByZXR1cm47XG4gICB9XG4gICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQpIHtcbiAgICB2YXIgZSA9IG5ldyBUeXBlRXJyb3IoJ0luc3VmZmljaWVudCBieXRlcyB0byBmaWxsIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBidWZmZXInKTtcbiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG4gICAgcmVhZEludG9SZXF1ZXN0Ll9lcnJvclN0ZXBzKGUpO1xuICAgIHJldHVybjtcbiAgIH1cbiAgfVxuICBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLnB1c2gocHVsbEludG9EZXNjcmlwdG9yKTtcbiAgUmVhZGFibGVTdHJlYW1BZGRSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCByZWFkSW50b1JlcXVlc3QpO1xuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbkNsb3NlZFN0YXRlKGNvbnRyb2xsZXIsIGZpcnN0RGVzY3JpcHRvcikge1xuICBmaXJzdERlc2NyaXB0b3IuYnVmZmVyID0gVHJhbnNmZXJBcnJheUJ1ZmZlcihmaXJzdERlc2NyaXB0b3IuYnVmZmVyKTtcbiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07XG4gIGlmIChSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSkge1xuICAgd2hpbGUgKFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZEludG9SZXF1ZXN0cyhzdHJlYW0pID4gMCkge1xuICAgIHZhciBwdWxsSW50b0Rlc2NyaXB0b3IgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7XG4gICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihzdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcik7XG4gICB9XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJblJlYWRhYmxlU3RhdGUoY29udHJvbGxlciwgYnl0ZXNXcml0dGVuLCBwdWxsSW50b0Rlc2NyaXB0b3IpIHtcbiAgaWYgKHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCArIGJ5dGVzV3JpdHRlbiA+IHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlTGVuZ3RoKSB7XG4gICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnl0ZXNXcml0dGVuIG91dCBvZiByYW5nZScpO1xuICB9XG4gIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsSGVhZFB1bGxJbnRvRGVzY3JpcHRvcihjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4sIHB1bGxJbnRvRGVzY3JpcHRvcik7XG4gIGlmIChwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgPCBwdWxsSW50b0Rlc2NyaXB0b3IuZWxlbWVudFNpemUpIHtcbiAgIHJldHVybjtcbiAgfVxuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7XG4gIHZhciByZW1haW5kZXJTaXplID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICUgcHVsbEludG9EZXNjcmlwdG9yLmVsZW1lbnRTaXplO1xuICBpZiAocmVtYWluZGVyU2l6ZSA+IDApIHtcbiAgIHZhciBlbmQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZU9mZnNldCArIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZDtcbiAgIHZhciByZW1haW5kZXIgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnVmZmVyLnNsaWNlKGVuZCAtIHJlbWFpbmRlclNpemUsIGVuZCk7XG4gICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZUNodW5rVG9RdWV1ZShjb250cm9sbGVyLCByZW1haW5kZXIsIDAsIHJlbWFpbmRlci5ieXRlTGVuZ3RoKTtcbiAgfVxuICBwdWxsSW50b0Rlc2NyaXB0b3IuYnVmZmVyID0gVHJhbnNmZXJBcnJheUJ1ZmZlcihwdWxsSW50b0Rlc2NyaXB0b3IuYnVmZmVyKTtcbiAgcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkIC09IHJlbWFpbmRlclNpemU7XG4gIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb21taXRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSwgcHVsbEludG9EZXNjcmlwdG9yKTtcbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NQdWxsSW50b0Rlc2NyaXB0b3JzVXNpbmdRdWV1ZShjb250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbChjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4pIHtcbiAgdmFyIGZpcnN0RGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO1xuICB2YXIgc3RhdGUgPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtcbiAgaWYgKHN0YXRlID09PSAnY2xvc2VkJykge1xuICAgaWYgKGJ5dGVzV3JpdHRlbiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2J5dGVzV3JpdHRlbiBtdXN0IGJlIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmQoKSBvbiBhIGNsb3NlZCBzdHJlYW0nKTtcbiAgIH1cbiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW5DbG9zZWRTdGF0ZShjb250cm9sbGVyLCBmaXJzdERlc2NyaXB0b3IpO1xuICB9IGVsc2Uge1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJblJlYWRhYmxlU3RhdGUoY29udHJvbGxlciwgYnl0ZXNXcml0dGVuLCBmaXJzdERlc2NyaXB0b3IpO1xuICB9XG4gIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcikge1xuICB2YXIgZGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3Muc2hpZnQoKTtcbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckludmFsaWRhdGVCWU9CUmVxdWVzdChjb250cm9sbGVyKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJTaG91bGRDYWxsUHVsbChjb250cm9sbGVyKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuICBpZiAoc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghY29udHJvbGxlci5fc3RhcnRlZCkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIoc3RyZWFtKSAmJiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pID4gMCkge1xuICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKFJlYWRhYmxlU3RyZWFtSGFzQllPQlJlYWRlcihzdHJlYW0pICYmIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZEludG9SZXF1ZXN0cyhzdHJlYW0pID4gMCkge1xuICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGRlc2lyZWRTaXplID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpO1xuICBpZiAoZGVzaXJlZFNpemUgPiAwKSB7XG4gICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikge1xuICBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuICBjb250cm9sbGVyLl9jYW5jZWxBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgfHwgc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA+IDApIHtcbiAgIGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID0gdHJ1ZTtcbiAgIHJldHVybjtcbiAgfVxuICBpZiAoY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7XG4gICB2YXIgZmlyc3RQZW5kaW5nUHVsbEludG8gPSBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtcbiAgIGlmIChmaXJzdFBlbmRpbmdQdWxsSW50by5ieXRlc0ZpbGxlZCA+IDApIHtcbiAgICB2YXIgZSA9IG5ldyBUeXBlRXJyb3IoJ0luc3VmZmljaWVudCBieXRlcyB0byBmaWxsIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBidWZmZXInKTtcbiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSk7XG4gICAgdGhyb3cgZTtcbiAgIH1cbiAgfVxuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpO1xuICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlKGNvbnRyb2xsZXIsIGNodW5rKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO1xuICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgfHwgc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykge1xuICAgcmV0dXJuO1xuICB9XG4gIHZhciBidWZmZXIgPSBjaHVuay5idWZmZXI7XG4gIHZhciBieXRlT2Zmc2V0ID0gY2h1bmsuYnl0ZU9mZnNldDtcbiAgdmFyIGJ5dGVMZW5ndGggPSBjaHVuay5ieXRlTGVuZ3RoO1xuICB2YXIgdHJhbnNmZXJyZWRCdWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKGJ1ZmZlcik7XG4gIGlmIChSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIoc3RyZWFtKSkge1xuICAgaWYgKFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkgPT09IDApIHtcbiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZUNodW5rVG9RdWV1ZShjb250cm9sbGVyLCB0cmFuc2ZlcnJlZEJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICB9IGVsc2Uge1xuICAgIHZhciB0cmFuc2ZlcnJlZFZpZXcgPSBuZXcgVWludDhBcnJheSh0cmFuc2ZlcnJlZEJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCB0cmFuc2ZlcnJlZFZpZXcsIGZhbHNlKTtcbiAgIH1cbiAgfSBlbHNlIGlmIChSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSkge1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgdHJhbnNmZXJyZWRCdWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NQdWxsSW50b0Rlc2NyaXB0b3JzVXNpbmdRdWV1ZShjb250cm9sbGVyKTtcbiAgfSBlbHNlIHtcbiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlKGNvbnRyb2xsZXIsIHRyYW5zZmVycmVkQnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgfVxuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHtcbiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07XG4gIGlmIChzdHJlYW0uX3N0YXRlICE9PSAncmVhZGFibGUnKSB7XG4gICByZXR1cm47XG4gIH1cbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyUGVuZGluZ1B1bGxJbnRvcyhjb250cm9sbGVyKTtcbiAgUmVzZXRRdWV1ZShjb250cm9sbGVyKTtcbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTtcbiAgUmVhZGFibGVTdHJlYW1FcnJvcihzdHJlYW0sIGUpO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0RGVzaXJlZFNpemUoY29udHJvbGxlcikge1xuICB2YXIgc3RhdGUgPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtcbiAgaWYgKHN0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBjb250cm9sbGVyLl9zdHJhdGVneUhXTSAtIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZChjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4pIHtcbiAgYnl0ZXNXcml0dGVuID0gTnVtYmVyKGJ5dGVzV3JpdHRlbik7XG4gIGlmICghSXNGaW5pdGVOb25OZWdhdGl2ZU51bWJlcihieXRlc1dyaXR0ZW4pKSB7XG4gICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnl0ZXNXcml0dGVuIG11c3QgYmUgYSBmaW5pdGUnKTtcbiAgfVxuICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEludGVybmFsKGNvbnRyb2xsZXIsIGJ5dGVzV3JpdHRlbik7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kV2l0aE5ld1ZpZXcoY29udHJvbGxlciwgdmlldykge1xuICB2YXIgZmlyc3REZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7XG4gIGlmIChmaXJzdERlc2NyaXB0b3IuYnl0ZU9mZnNldCArIGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAhPT0gdmlldy5ieXRlT2Zmc2V0KSB7XG4gICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHJlZ2lvbiBzcGVjaWZpZWQgYnkgdmlldyBkb2VzIG5vdCBtYXRjaCBieW9iUmVxdWVzdCcpO1xuICB9XG4gIGlmIChmaXJzdERlc2NyaXB0b3IuYnl0ZUxlbmd0aCAhPT0gdmlldy5ieXRlTGVuZ3RoKSB7XG4gICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIGJ1ZmZlciBvZiB2aWV3IGhhcyBkaWZmZXJlbnQgY2FwYWNpdHkgdGhhbiBieW9iUmVxdWVzdCcpO1xuICB9XG4gIGZpcnN0RGVzY3JpcHRvci5idWZmZXIgPSB2aWV3LmJ1ZmZlcjtcbiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbChjb250cm9sbGVyLCB2aWV3LmJ5dGVMZW5ndGgpO1xuIH1cbiBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBhdXRvQWxsb2NhdGVDaHVua1NpemUpIHtcbiAgY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSA9IHN0cmVhbTtcbiAgY29udHJvbGxlci5fcHVsbEFnYWluID0gZmFsc2U7XG4gIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTtcbiAgY29udHJvbGxlci5fYnlvYlJlcXVlc3QgPSBudWxsO1xuICBjb250cm9sbGVyLl9xdWV1ZSA9IGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplID0gdW5kZWZpbmVkO1xuICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IGZhbHNlO1xuICBjb250cm9sbGVyLl9zdGFydGVkID0gZmFsc2U7XG4gIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNID0gaGlnaFdhdGVyTWFyaztcbiAgY29udHJvbGxlci5fcHVsbEFsZ29yaXRobSA9IHB1bGxBbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX2NhbmNlbEFsZ29yaXRobSA9IGNhbmNlbEFsZ29yaXRobTtcbiAgY29udHJvbGxlci5fYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gYXV0b0FsbG9jYXRlQ2h1bmtTaXplO1xuICBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zID0gbmV3IFNpbXBsZVF1ZXVlKCk7XG4gIHN0cmVhbS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgdmFyIHN0YXJ0UmVzdWx0ID0gc3RhcnRBbGdvcml0aG0oKTtcbiAgdXBvblByb21pc2UocHJvbWlzZVJlc29sdmVkV2l0aChzdGFydFJlc3VsdCksIGZ1bmN0aW9uICgpIHtcbiAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7XG4gIH0sIGZ1bmN0aW9uIChyKSB7XG4gICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgcik7XG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZShzdHJlYW0sIHVuZGVybHlpbmdCeXRlU291cmNlLCBoaWdoV2F0ZXJNYXJrKSB7XG4gIHZhciBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSk7XG4gIHZhciBzdGFydEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG4gIHZhciBwdWxsQWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgfTtcbiAgdmFyIGNhbmNlbEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH07XG4gIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICBzdGFydEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZXJseWluZ0J5dGVTb3VyY2Uuc3RhcnQoY29udHJvbGxlcik7XG4gICB9O1xuICB9XG4gIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5wdWxsICE9PSB1bmRlZmluZWQpIHtcbiAgIHB1bGxBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuZGVybHlpbmdCeXRlU291cmNlLnB1bGwoY29udHJvbGxlcik7XG4gICB9O1xuICB9XG4gIGlmICh1bmRlcmx5aW5nQnl0ZVNvdXJjZS5jYW5jZWwgIT09IHVuZGVmaW5lZCkge1xuICAgY2FuY2VsQWxnb3JpdGhtID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiB1bmRlcmx5aW5nQnl0ZVNvdXJjZS5jYW5jZWwocmVhc29uKTtcbiAgIH07XG4gIH1cbiAgdmFyIGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9IHVuZGVybHlpbmdCeXRlU291cmNlLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcbiAgaWYgKGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9PT0gMCkge1xuICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXV0b0FsbG9jYXRlQ2h1bmtTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgfVxuICBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBhdXRvQWxsb2NhdGVDaHVua1NpemUpO1xuIH1cbiBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QocmVxdWVzdCwgY29udHJvbGxlciwgdmlldykge1xuICByZXF1ZXN0Ll9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gIHJlcXVlc3QuX3ZpZXcgPSB2aWV3O1xuIH1cbiBmdW5jdGlvbiBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QucHJvdG90eXBlLlwiICsgbmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0XCIpO1xuIH1cbiBmdW5jdGlvbiBieXRlU3RyZWFtQ29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLlwiICsgbmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyXCIpO1xuIH1cbiBmdW5jdGlvbiBBY3F1aXJlUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHN0cmVhbSkge1xuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihzdHJlYW0pO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUFkZFJlYWRJbnRvUmVxdWVzdChzdHJlYW0sIHJlYWRJbnRvUmVxdWVzdCkge1xuICBzdHJlYW0uX3JlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5wdXNoKHJlYWRJbnRvUmVxdWVzdCk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRnVsZmlsbFJlYWRJbnRvUmVxdWVzdChzdHJlYW0sIGNodW5rLCBkb25lKSB7XG4gIHZhciByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcbiAgdmFyIHJlYWRJbnRvUmVxdWVzdCA9IHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5zaGlmdCgpO1xuICBpZiAoZG9uZSkge1xuICAgcmVhZEludG9SZXF1ZXN0Ll9jbG9zZVN0ZXBzKGNodW5rKTtcbiAgfSBlbHNlIHtcbiAgIHJlYWRJbnRvUmVxdWVzdC5fY2h1bmtTdGVwcyhjaHVuayk7XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkSW50b1JlcXVlc3RzKHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMubGVuZ3RoO1xuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSB7XG4gIHZhciByZWFkZXIgPSBzdHJlYW0uX3JlYWRlcjtcbiAgaWYgKHJlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihyZWFkZXIpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gfVxuIHZhciBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihzdHJlYW0pIHtcbiAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQoc3RyZWFtLCAxLCAnUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyJyk7XG4gICBhc3NlcnRSZWFkYWJsZVN0cmVhbShzdHJlYW0sICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGxvY2tlZCBmb3IgZXhjbHVzaXZlIHJlYWRpbmcgYnkgYW5vdGhlciByZWFkZXInKTtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgYSBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIgZm9yIGEgc3RyZWFtIG5vdCBjb25zdHJ1Y3RlZCB3aXRoIGEgYnl0ZSAnICsgJ3NvdXJjZScpO1xuICAgfVxuICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljSW5pdGlhbGl6ZSh0aGlzLCBzdHJlYW0pO1xuICAgdGhpcy5fcmVhZEludG9SZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLCBcImNsb3NlZFwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHRoaXMpKSB7XG4gICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGJ5b2JSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZWQnKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbG9zZWRQcm9taXNlO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIGlmIChyZWFzb24gPT09IHZvaWQgMCkge1xuICAgIHJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2FuY2VsJykpO1xuICAgfVxuICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ2NhbmNlbCcpKTtcbiAgIH1cbiAgIHJldHVybiBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNDYW5jZWwodGhpcywgcmVhc29uKTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZCcpKTtcbiAgIH1cbiAgIGlmICghQXJyYXlCdWZmZXIuaXNWaWV3KHZpZXcpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcigndmlldyBtdXN0IGJlIGFuIGFycmF5IGJ1ZmZlciB2aWV3JykpO1xuICAgfVxuICAgaWYgKHZpZXcuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ3ZpZXcgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGgnKSk7XG4gICB9XG4gICBpZiAodmlldy5idWZmZXIuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoXCJ2aWV3J3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoXCIpKTtcbiAgIH1cbiAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdyZWFkIGZyb20nKSk7XG4gICB9XG4gICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gICB2YXIgcmVqZWN0UHJvbWlzZTtcbiAgIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIHJlamVjdFByb21pc2UgPSByZWplY3Q7XG4gICB9KTtcbiAgIHZhciByZWFkSW50b1JlcXVlc3QgPSB7XG4gICAgX2NodW5rU3RlcHM6IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICByZXR1cm4gcmVzb2x2ZVByb21pc2Uoe1xuICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICAgfSk7XG4gICAgfSxcbiAgICBfY2xvc2VTdGVwczogZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSh7XG4gICAgICB2YWx1ZTogY2h1bmssXG4gICAgICBkb25lOiB0cnVlXG4gICAgIH0pO1xuICAgIH0sXG4gICAgX2Vycm9yU3RlcHM6IGZ1bmN0aW9uIChlKSB7XG4gICAgIHJldHVybiByZWplY3RQcm9taXNlKGUpO1xuICAgIH1cbiAgIH07XG4gICBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJSZWFkKHRoaXMsIHZpZXcsIHJlYWRJbnRvUmVxdWVzdCk7XG4gICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5yZWxlYXNlTG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcykpIHtcbiAgICB0aHJvdyBieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVsZWFzZUxvY2snKTtcbiAgIH1cbiAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gICB9XG4gICBpZiAodGhpcy5fcmVhZEludG9SZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHJpZWQgdG8gcmVsZWFzZSBhIHJlYWRlciBsb2NrIHdoZW4gdGhhdCByZWFkZXIgaGFzIHBlbmRpbmcgcmVhZCgpIGNhbGxzIHVuLXNldHRsZWQnKTtcbiAgIH1cbiAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UodGhpcyk7XG4gIH07XG4gIHJldHVybiBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXI7XG4gfSgpO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlci5wcm90b3R5cGUsIHtcbiAgY2FuY2VsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgcmVhZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHJlbGVhc2VMb2NrOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgY2xvc2VkOiB7IGVudW1lcmFibGU6IHRydWUgfVxuIH0pO1xuIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuICAgdmFsdWU6ICdSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXInLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih4KSB7XG4gIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19yZWFkSW50b1JlcXVlc3RzJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyUmVhZChyZWFkZXIsIHZpZXcsIHJlYWRJbnRvUmVxdWVzdCkge1xuICB2YXIgc3RyZWFtID0gcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtO1xuICBzdHJlYW0uX2Rpc3R1cmJlZCA9IHRydWU7XG4gIGlmIChzdHJlYW0uX3N0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgIHJlYWRJbnRvUmVxdWVzdC5fZXJyb3JTdGVwcyhzdHJlYW0uX3N0b3JlZEVycm9yKTtcbiAgfSBlbHNlIHtcbiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJQdWxsSW50byhzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgdmlldywgcmVhZEludG9SZXF1ZXN0KTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyXCIpO1xuIH1cbiBmdW5jdGlvbiBFeHRyYWN0SGlnaFdhdGVyTWFyayhzdHJhdGVneSwgZGVmYXVsdEhXTSkge1xuICB2YXIgaGlnaFdhdGVyTWFyayA9IHN0cmF0ZWd5LmhpZ2hXYXRlck1hcms7XG4gIGlmIChoaWdoV2F0ZXJNYXJrID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybiBkZWZhdWx0SFdNO1xuICB9XG4gIGlmIChOdW1iZXJJc05hTihoaWdoV2F0ZXJNYXJrKSB8fCBoaWdoV2F0ZXJNYXJrIDwgMCkge1xuICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgaGlnaFdhdGVyTWFyaycpO1xuICB9XG4gIHJldHVybiBoaWdoV2F0ZXJNYXJrO1xuIH1cbiBmdW5jdGlvbiBFeHRyYWN0U2l6ZUFsZ29yaXRobShzdHJhdGVneSkge1xuICB2YXIgc2l6ZSA9IHN0cmF0ZWd5LnNpemU7XG4gIGlmICghc2l6ZSkge1xuICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMTtcbiAgIH07XG4gIH1cbiAgcmV0dXJuIHNpemU7XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3koaW5pdCwgY29udGV4dCkge1xuICBhc3NlcnREaWN0aW9uYXJ5KGluaXQsIGNvbnRleHQpO1xuICB2YXIgaGlnaFdhdGVyTWFyayA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgc2l6ZSA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5zaXplO1xuICByZXR1cm4ge1xuICAgaGlnaFdhdGVyTWFyazogaGlnaFdhdGVyTWFyayA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY29udmVydFVucmVzdHJpY3RlZERvdWJsZShoaWdoV2F0ZXJNYXJrKSxcbiAgIHNpemU6IHNpemUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplKHNpemUsIGNvbnRleHQgKyBcIiBoYXMgbWVtYmVyICdzaXplJyB0aGF0XCIpXG4gIH07XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplKGZuLCBjb250ZXh0KSB7XG4gIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChjaHVuaykge1xuICAgcmV0dXJuIGNvbnZlcnRVbnJlc3RyaWN0ZWREb3VibGUoZm4oY2h1bmspKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTaW5rKG9yaWdpbmFsLCBjb250ZXh0KSB7XG4gIGFzc2VydERpY3Rpb25hcnkob3JpZ2luYWwsIGNvbnRleHQpO1xuICB2YXIgYWJvcnQgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwuYWJvcnQ7XG4gIHZhciBjbG9zZSA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5jbG9zZTtcbiAgdmFyIHN0YXJ0ID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLnN0YXJ0O1xuICB2YXIgdHlwZSA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC50eXBlO1xuICB2YXIgd3JpdGUgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwud3JpdGU7XG4gIHJldHVybiB7XG4gICBhYm9ydDogYWJvcnQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU2lua0Fib3J0Q2FsbGJhY2soYWJvcnQsIG9yaWdpbmFsLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnYWJvcnQnIHRoYXRcIiksXG4gICBjbG9zZTogY2xvc2UgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU2lua0Nsb3NlQ2FsbGJhY2soY2xvc2UsIG9yaWdpbmFsLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnY2xvc2UnIHRoYXRcIiksXG4gICBzdGFydDogc3RhcnQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU2lua1N0YXJ0Q2FsbGJhY2soc3RhcnQsIG9yaWdpbmFsLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnc3RhcnQnIHRoYXRcIiksXG4gICB3cml0ZTogd3JpdGUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU2lua1dyaXRlQ2FsbGJhY2sod3JpdGUsIG9yaWdpbmFsLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnd3JpdGUnIHRoYXRcIiksXG4gICB0eXBlOiB0eXBlXG4gIH07XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nU2lua0Fib3J0Q2FsbGJhY2soZm4sIG9yaWdpbmFsLCBjb250ZXh0KSB7XG4gIGFzc2VydEZ1bmN0aW9uKGZuLCBjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIHJldHVybiBwcm9taXNlQ2FsbChmbiwgb3JpZ2luYWwsIFtyZWFzb25dKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTaW5rQ2xvc2VDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcbiAgYXNzZXJ0RnVuY3Rpb24oZm4sIGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW10pO1xuICB9O1xuIH1cbiBmdW5jdGlvbiBjb252ZXJ0VW5kZXJseWluZ1NpbmtTdGFydENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgcmV0dXJuIHJlZmxlY3RDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTaW5rV3JpdGVDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcbiAgYXNzZXJ0RnVuY3Rpb24oZm4sIGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICByZXR1cm4gcHJvbWlzZUNhbGwoZm4sIG9yaWdpbmFsLCBbXG4gICAgY2h1bmssXG4gICAgY29udHJvbGxlclxuICAgXSk7XG4gIH07XG4gfVxuIGZ1bmN0aW9uIGFzc2VydFdyaXRhYmxlU3RyZWFtKHgsIGNvbnRleHQpIHtcbiAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtKHgpKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYSBXcml0YWJsZVN0cmVhbS5cIik7XG4gIH1cbiB9XG4gdmFyIFdyaXRhYmxlU3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbShyYXdVbmRlcmx5aW5nU2luaywgcmF3U3RyYXRlZ3kpIHtcbiAgIGlmIChyYXdVbmRlcmx5aW5nU2luayA9PT0gdm9pZCAwKSB7XG4gICAgcmF3VW5kZXJseWluZ1NpbmsgPSB7fTtcbiAgIH1cbiAgIGlmIChyYXdTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgcmF3U3RyYXRlZ3kgPSB7fTtcbiAgIH1cbiAgIGlmIChyYXdVbmRlcmx5aW5nU2luayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmF3VW5kZXJseWluZ1NpbmsgPSBudWxsO1xuICAgfSBlbHNlIHtcbiAgICBhc3NlcnRPYmplY3QocmF3VW5kZXJseWluZ1NpbmssICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIH1cbiAgIHZhciBzdHJhdGVneSA9IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3kocmF3U3RyYXRlZ3ksICdTZWNvbmQgcGFyYW1ldGVyJyk7XG4gICB2YXIgdW5kZXJseWluZ1NpbmsgPSBjb252ZXJ0VW5kZXJseWluZ1NpbmsocmF3VW5kZXJseWluZ1NpbmssICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbSh0aGlzKTtcbiAgIHZhciB0eXBlID0gdW5kZXJseWluZ1NpbmsudHlwZTtcbiAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlIGlzIHNwZWNpZmllZCcpO1xuICAgfVxuICAgdmFyIHNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobShzdHJhdGVneSk7XG4gICB2YXIgaGlnaFdhdGVyTWFyayA9IEV4dHJhY3RIaWdoV2F0ZXJNYXJrKHN0cmF0ZWd5LCAxKTtcbiAgIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU2luayh0aGlzLCB1bmRlcmx5aW5nU2luaywgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZSwgXCJsb2NrZWRcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtKHRoaXMpKSB7XG4gICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMignbG9ja2VkJyk7XG4gICAgfVxuICAgIHJldHVybiBJc1dyaXRhYmxlU3RyZWFtTG9ja2VkKHRoaXMpO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICBpZiAocmVhc29uID09PSB2b2lkIDApIHtcbiAgICByZWFzb24gPSB1bmRlZmluZWQ7XG4gICB9XG4gICBpZiAoIUlzV3JpdGFibGVTdHJlYW0odGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDIoJ2Fib3J0JykpO1xuICAgfVxuICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQodGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdDYW5ub3QgYWJvcnQgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHdyaXRlcicpKTtcbiAgIH1cbiAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KHRoaXMsIHJlYXNvbik7XG4gIH07XG4gIFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgIGlmICghSXNXcml0YWJsZVN0cmVhbSh0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMignY2xvc2UnKSk7XG4gICB9XG4gICBpZiAoSXNXcml0YWJsZVN0cmVhbUxvY2tlZCh0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjbG9zZSBhIHN0cmVhbSB0aGF0IGFscmVhZHkgaGFzIGEgd3JpdGVyJykpO1xuICAgfVxuICAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHRoaXMpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGNsb3NlIGFuIGFscmVhZHktY2xvc2luZyBzdHJlYW0nKSk7XG4gICB9XG4gICByZXR1cm4gV3JpdGFibGVTdHJlYW1DbG9zZSh0aGlzKTtcbiAgfTtcbiAgV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLmdldFdyaXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgIGlmICghSXNXcml0YWJsZVN0cmVhbSh0aGlzKSkge1xuICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMignZ2V0V3JpdGVyJyk7XG4gICB9XG4gICByZXR1cm4gQWNxdWlyZVdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKTtcbiAgfTtcbiAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtO1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUsIHtcbiAgYWJvcnQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBjbG9zZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGdldFdyaXRlcjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGxvY2tlZDogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuICAgdmFsdWU6ICdXcml0YWJsZVN0cmVhbScsXG4gICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIEFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoc3RyZWFtKSB7XG4gIHJldHVybiBuZXcgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHN0cmVhbSk7XG4gfVxuIGZ1bmN0aW9uIENyZWF0ZVdyaXRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7XG4gIGlmIChoaWdoV2F0ZXJNYXJrID09PSB2b2lkIDApIHtcbiAgIGhpZ2hXYXRlck1hcmsgPSAxO1xuICB9XG4gIGlmIChzaXplQWxnb3JpdGhtID09PSB2b2lkIDApIHtcbiAgIHNpemVBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDE7XG4gICB9O1xuICB9XG4gIHZhciBzdHJlYW0gPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZSk7XG4gIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbShzdHJlYW0pO1xuICB2YXIgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuICBTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgd3JpdGVBbGdvcml0aG0sIGNsb3NlQWxnb3JpdGhtLCBhYm9ydEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7XG4gIHJldHVybiBzdHJlYW07XG4gfVxuIGZ1bmN0aW9uIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgc3RyZWFtLl9zdGF0ZSA9ICd3cml0YWJsZSc7XG4gIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fd3JpdGVyID0gdW5kZWZpbmVkO1xuICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcbiAgc3RyZWFtLl93cml0ZVJlcXVlc3RzID0gbmV3IFNpbXBsZVF1ZXVlKCk7XG4gIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fYmFja3ByZXNzdXJlID0gZmFsc2U7XG4gfVxuIGZ1bmN0aW9uIElzV3JpdGFibGVTdHJlYW0oeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfd3JpdGFibGVTdHJlYW1Db250cm9sbGVyJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gSXNXcml0YWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbS5fd3JpdGVyID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1BYm9ydChzdHJlYW0sIHJlYXNvbikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnIHx8IHN0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH1cbiAgaWYgKHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICByZXR1cm4gc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0Ll9wcm9taXNlO1xuICB9XG4gIHZhciB3YXNBbHJlYWR5RXJyb3JpbmcgPSBmYWxzZTtcbiAgaWYgKHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG4gICB3YXNBbHJlYWR5RXJyb3JpbmcgPSB0cnVlO1xuICAgcmVhc29uID0gdW5kZWZpbmVkO1xuICB9XG4gIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB7XG4gICAgX3Byb21pc2U6IHVuZGVmaW5lZCxcbiAgICBfcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBfcmVqZWN0OiByZWplY3QsXG4gICAgX3JlYXNvbjogcmVhc29uLFxuICAgIF93YXNBbHJlYWR5RXJyb3Jpbmc6IHdhc0FscmVhZHlFcnJvcmluZ1xuICAgfTtcbiAgfSk7XG4gIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZSA9IHByb21pc2U7XG4gIGlmICghd2FzQWxyZWFkeUVycm9yaW5nKSB7XG4gICBXcml0YWJsZVN0cmVhbVN0YXJ0RXJyb3Jpbmcoc3RyZWFtLCByZWFzb24pO1xuICB9XG4gIHJldHVybiBwcm9taXNlO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUNsb3NlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnIHx8IHN0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIChpbiBcIiArIHN0YXRlICsgXCIgc3RhdGUpIGlzIG5vdCBpbiB0aGUgd3JpdGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBjbG9zZWRcIikpO1xuICB9XG4gIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICB2YXIgY2xvc2VSZXF1ZXN0ID0ge1xuICAgIF9yZXNvbHZlOiByZXNvbHZlLFxuICAgIF9yZWplY3Q6IHJlamVjdFxuICAgfTtcbiAgIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gY2xvc2VSZXF1ZXN0O1xuICB9KTtcbiAgdmFyIHdyaXRlciA9IHN0cmVhbS5fd3JpdGVyO1xuICBpZiAod3JpdGVyICE9PSB1bmRlZmluZWQgJiYgc3RyZWFtLl9iYWNrcHJlc3N1cmUgJiYgc3RhdGUgPT09ICd3cml0YWJsZScpIHtcbiAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNvbHZlKHdyaXRlcik7XG4gIH1cbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyKTtcbiAgcmV0dXJuIHByb21pc2U7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtQWRkV3JpdGVSZXF1ZXN0KHN0cmVhbSkge1xuICB2YXIgcHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgdmFyIHdyaXRlUmVxdWVzdCA9IHtcbiAgICBfcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBfcmVqZWN0OiByZWplY3RcbiAgIH07XG4gICBzdHJlYW0uX3dyaXRlUmVxdWVzdHMucHVzaCh3cml0ZVJlcXVlc3QpO1xuICB9KTtcbiAgcmV0dXJuIHByb21pc2U7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVhbFdpdGhSZWplY3Rpb24oc3RyZWFtLCBlcnJvcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlO1xuICBpZiAoc3RhdGUgPT09ICd3cml0YWJsZScpIHtcbiAgIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIGVycm9yKTtcbiAgIHJldHVybjtcbiAgfVxuICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIHJlYXNvbikge1xuICB2YXIgY29udHJvbGxlciA9IHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyO1xuICBzdHJlYW0uX3N0YXRlID0gJ2Vycm9yaW5nJztcbiAgc3RyZWFtLl9zdG9yZWRFcnJvciA9IHJlYXNvbjtcbiAgdmFyIHdyaXRlciA9IHN0cmVhbS5fd3JpdGVyO1xuICBpZiAod3JpdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZVJlYWR5UHJvbWlzZVJlamVjdGVkKHdyaXRlciwgcmVhc29uKTtcbiAgfVxuICBpZiAoIVdyaXRhYmxlU3RyZWFtSGFzT3BlcmF0aW9uTWFya2VkSW5GbGlnaHQoc3RyZWFtKSAmJiBjb250cm9sbGVyLl9zdGFydGVkKSB7XG4gICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7XG4gIH1cbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hFcnJvcmluZyhzdHJlYW0pIHtcbiAgc3RyZWFtLl9zdGF0ZSA9ICdlcnJvcmVkJztcbiAgc3RyZWFtLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXJbRXJyb3JTdGVwc10oKTtcbiAgdmFyIHN0b3JlZEVycm9yID0gc3RyZWFtLl9zdG9yZWRFcnJvcjtcbiAgc3RyZWFtLl93cml0ZVJlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHdyaXRlUmVxdWVzdCkge1xuICAgd3JpdGVSZXF1ZXN0Ll9yZWplY3Qoc3RvcmVkRXJyb3IpO1xuICB9KTtcbiAgc3RyZWFtLl93cml0ZVJlcXVlc3RzID0gbmV3IFNpbXBsZVF1ZXVlKCk7XG4gIGlmIChzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuICAgcmV0dXJuO1xuICB9XG4gIHZhciBhYm9ydFJlcXVlc3QgPSBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3Q7XG4gIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgaWYgKGFib3J0UmVxdWVzdC5fd2FzQWxyZWFkeUVycm9yaW5nKSB7XG4gICBhYm9ydFJlcXVlc3QuX3JlamVjdChzdG9yZWRFcnJvcik7XG4gICBXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkKHN0cmVhbSk7XG4gICByZXR1cm47XG4gIH1cbiAgdmFyIHByb21pc2UgPSBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcltBYm9ydFN0ZXBzXShhYm9ydFJlcXVlc3QuX3JlYXNvbik7XG4gIHVwb25Qcm9taXNlKHByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgIGFib3J0UmVxdWVzdC5fcmVzb2x2ZSgpO1xuICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICBhYm9ydFJlcXVlc3QuX3JlamVjdChyZWFzb24pO1xuICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pO1xuICB9KTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlKHN0cmVhbSkge1xuICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0Ll9yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRXcml0ZVdpdGhFcnJvcihzdHJlYW0sIGVycm9yKSB7XG4gIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QuX3JlamVjdChlcnJvcik7XG4gIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gIFdyaXRhYmxlU3RyZWFtRGVhbFdpdGhSZWplY3Rpb24oc3RyZWFtLCBlcnJvcik7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZShzdHJlYW0pIHtcbiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVzb2x2ZSh1bmRlZmluZWQpO1xuICBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHtcbiAgIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG4gICBpZiAoc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3Jlc29sdmUoKTtcbiAgICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gICB9XG4gIH1cbiAgc3RyZWFtLl9zdGF0ZSA9ICdjbG9zZWQnO1xuICB2YXIgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7XG4gIGlmICh3cml0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNvbHZlKHdyaXRlcik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlV2l0aEVycm9yKHN0cmVhbSwgZXJyb3IpIHtcbiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVqZWN0KGVycm9yKTtcbiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgaWYgKHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3JlamVjdChlcnJvcik7XG4gICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgPSB1bmRlZmluZWQ7XG4gIH1cbiAgV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIGVycm9yKTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9PT0gdW5kZWZpbmVkICYmIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUhhc09wZXJhdGlvbk1hcmtlZEluRmxpZ2h0KHN0cmVhbSkge1xuICBpZiAoc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdCA9PT0gdW5kZWZpbmVkICYmIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbU1hcmtDbG9zZVJlcXVlc3RJbkZsaWdodChzdHJlYW0pIHtcbiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdCA9IHN0cmVhbS5fY2xvc2VSZXF1ZXN0O1xuICBzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1NYXJrRmlyc3RXcml0ZVJlcXVlc3RJbkZsaWdodChzdHJlYW0pIHtcbiAgc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdCA9IHN0cmVhbS5fd3JpdGVSZXF1ZXN0cy5zaGlmdCgpO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtLl9jbG9zZVJlcXVlc3QgIT09IHVuZGVmaW5lZCkge1xuICAgc3RyZWFtLl9jbG9zZVJlcXVlc3QuX3JlamVjdChzdHJlYW0uX3N0b3JlZEVycm9yKTtcbiAgIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICB9XG4gIHZhciB3cml0ZXIgPSBzdHJlYW0uX3dyaXRlcjtcbiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlamVjdCh3cml0ZXIsIHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuICB9XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtVXBkYXRlQmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKSB7XG4gIHZhciB3cml0ZXIgPSBzdHJlYW0uX3dyaXRlcjtcbiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkICYmIGJhY2twcmVzc3VyZSAhPT0gc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHtcbiAgIGlmIChiYWNrcHJlc3N1cmUpIHtcbiAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzZXQod3JpdGVyKTtcbiAgIH0gZWxzZSB7XG4gICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUod3JpdGVyKTtcbiAgIH1cbiAgfVxuICBzdHJlYW0uX2JhY2twcmVzc3VyZSA9IGJhY2twcmVzc3VyZTtcbiB9XG4gdmFyIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHN0cmVhbSkge1xuICAgYXNzZXJ0UmVxdWlyZWRBcmd1bWVudChzdHJlYW0sIDEsICdXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXInKTtcbiAgIGFzc2VydFdyaXRhYmxlU3RyZWFtKHN0cmVhbSwgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gbG9ja2VkIGZvciBleGNsdXNpdmUgd3JpdGluZyBieSBhbm90aGVyIHdyaXRlcicpO1xuICAgfVxuICAgdGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSA9IHN0cmVhbTtcbiAgIHN0cmVhbS5fd3JpdGVyID0gdGhpcztcbiAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG4gICBpZiAoc3RhdGUgPT09ICd3cml0YWJsZScpIHtcbiAgICBpZiAoIVdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgJiYgc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHtcbiAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHRoaXMpO1xuICAgIH1cbiAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUodGhpcyk7XG4gICB9IGVsc2UgaWYgKHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG4gICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHRoaXMsIHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh0aGlzKTtcbiAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHRoaXMpO1xuICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQodGhpcyk7XG4gICB9IGVsc2Uge1xuICAgIHZhciBzdG9yZWRFcnJvciA9IHN0cmVhbS5fc3RvcmVkRXJyb3I7XG4gICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHRoaXMsIHN0b3JlZEVycm9yKTtcbiAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHRoaXMsIHN0b3JlZEVycm9yKTtcbiAgIH1cbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSwgXCJjbG9zZWRcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xvc2VkUHJvbWlzZTtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlci5wcm90b3R5cGUsIFwiZGVzaXJlZFNpemVcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuICAgICB0aHJvdyBkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZGVzaXJlZFNpemUnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICB0aHJvdyBkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignZGVzaXJlZFNpemUnKTtcbiAgICB9XG4gICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckdldERlc2lyZWRTaXplKHRoaXMpO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSwgXCJyZWFkeVwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpKSB7XG4gICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdyZWFkeScpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWR5UHJvbWlzZTtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIGlmIChyZWFzb24gPT09IHZvaWQgMCkge1xuICAgIHJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIodGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignYWJvcnQnKSk7XG4gICB9XG4gICBpZiAodGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ2Fib3J0JykpO1xuICAgfVxuICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckFib3J0KHRoaXMsIHJlYXNvbik7XG4gIH07XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2Nsb3NlJykpO1xuICAgfVxuICAgdmFyIHN0cmVhbSA9IHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW07XG4gICBpZiAoc3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignY2xvc2UnKSk7XG4gICB9XG4gICBpZiAoV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjbG9zZSBhbiBhbHJlYWR5LWNsb3Npbmcgc3RyZWFtJykpO1xuICAgfVxuICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHRoaXMpO1xuICB9O1xuICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLnJlbGVhc2VMb2NrID0gZnVuY3Rpb24gKCkge1xuICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuICAgIHRocm93IGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdyZWxlYXNlTG9jaycpO1xuICAgfVxuICAgdmFyIHN0cmVhbSA9IHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW07XG4gICBpZiAoc3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gICB9XG4gICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJSZWxlYXNlKHRoaXMpO1xuICB9O1xuICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICBpZiAoY2h1bmsgPT09IHZvaWQgMCkge1xuICAgIGNodW5rID0gdW5kZWZpbmVkO1xuICAgfVxuICAgaWYgKCFJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCd3cml0ZScpKTtcbiAgIH1cbiAgIGlmICh0aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignd3JpdGUgdG8nKSk7XG4gICB9XG4gICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUodGhpcywgY2h1bmspO1xuICB9O1xuICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyO1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLCB7XG4gIGFib3J0OiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgY2xvc2U6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICByZWxlYXNlTG9jazogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHdyaXRlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgY2xvc2VkOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgZGVzaXJlZFNpemU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICByZWFkeTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcbiAgIHZhbHVlOiAnV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyJyxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiB9XG4gZnVuY3Rpb24gSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfb3duZXJXcml0YWJsZVN0cmVhbScpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckFib3J0KHdyaXRlciwgcmVhc29uKSB7XG4gIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG4gIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KHN0cmVhbSwgcmVhc29uKTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQ2xvc2Uod3JpdGVyKSB7XG4gIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG4gIHJldHVybiBXcml0YWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlV2l0aEVycm9yUHJvcGFnYXRpb24od3JpdGVyKSB7XG4gIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG4gIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pIHx8IHN0YXRlID09PSAnY2xvc2VkJykge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgfVxuICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJykge1xuICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtLl9zdG9yZWRFcnJvcik7XG4gIH1cbiAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHdyaXRlcik7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZUNsb3NlZFByb21pc2VSZWplY3RlZCh3cml0ZXIsIGVycm9yKSB7XG4gIGlmICh3cml0ZXIuX2Nsb3NlZFByb21pc2VTdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG4gICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlamVjdCh3cml0ZXIsIGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzZXRUb1JlamVjdGVkKHdyaXRlciwgZXJyb3IpO1xuICB9XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZVJlYWR5UHJvbWlzZVJlamVjdGVkKHdyaXRlciwgZXJyb3IpIHtcbiAgaWYgKHdyaXRlci5fcmVhZHlQcm9taXNlU3RhdGUgPT09ICdwZW5kaW5nJykge1xuICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWQod3JpdGVyLCBlcnJvcik7XG4gIH1cbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyR2V0RGVzaXJlZFNpemUod3JpdGVyKSB7XG4gIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG4gIGlmIChzdGF0ZSA9PT0gJ2Vycm9yZWQnIHx8IHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG4gICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZSh3cml0ZXIpIHtcbiAgdmFyIHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTtcbiAgdmFyIHJlbGVhc2VkRXJyb3IgPSBuZXcgVHlwZUVycm9yKFwiV3JpdGVyIHdhcyByZWxlYXNlZCBhbmQgY2FuIG5vIGxvbmdlciBiZSB1c2VkIHRvIG1vbml0b3IgdGhlIHN0cmVhbSdzIGNsb3NlZG5lc3NcIik7XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZVJlYWR5UHJvbWlzZVJlamVjdGVkKHdyaXRlciwgcmVsZWFzZWRFcnJvcik7XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZUNsb3NlZFByb21pc2VSZWplY3RlZCh3cml0ZXIsIHJlbGVhc2VkRXJyb3IpO1xuICBzdHJlYW0uX3dyaXRlciA9IHVuZGVmaW5lZDtcbiAgd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtID0gdW5kZWZpbmVkO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJXcml0ZSh3cml0ZXIsIGNodW5rKSB7XG4gIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07XG4gIHZhciBjb250cm9sbGVyID0gc3RyZWFtLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXI7XG4gIHZhciBjaHVua1NpemUgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0Q2h1bmtTaXplKGNvbnRyb2xsZXIsIGNodW5rKTtcbiAgaWYgKHN0cmVhbSAhPT0gd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtKSB7XG4gICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignd3JpdGUgdG8nKSk7XG4gIH1cbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcbiAgaWYgKHN0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuICB9XG4gIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pIHx8IHN0YXRlID09PSAnY2xvc2VkJykge1xuICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBjbG9zaW5nIG9yIGNsb3NlZCBhbmQgY2Fubm90IGJlIHdyaXR0ZW4gdG8nKSk7XG4gIH1cbiAgaWYgKHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG4gICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW0uX3N0b3JlZEVycm9yKTtcbiAgfVxuICB2YXIgcHJvbWlzZSA9IFdyaXRhYmxlU3RyZWFtQWRkV3JpdGVSZXF1ZXN0KHN0cmVhbSk7XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJXcml0ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKTtcbiAgcmV0dXJuIHByb21pc2U7XG4gfVxuIHZhciBjbG9zZVNlbnRpbmVsID0ge307XG4gdmFyIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIGNvbnN0cnVjdG9yJyk7XG4gIH1cbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgaWYgKGUgPT09IHZvaWQgMCkge1xuICAgIGUgPSB1bmRlZmluZWQ7XG4gICB9XG4gICBpZiAoIUlzV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVycm9yIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyJyk7XG4gICB9XG4gICB2YXIgc3RhdGUgPSB0aGlzLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW0uX3N0YXRlO1xuICAgaWYgKHN0YXRlICE9PSAnd3JpdGFibGUnKSB7XG4gICAgcmV0dXJuO1xuICAgfVxuICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKHRoaXMsIGUpO1xuICB9O1xuICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZVtBYm9ydFN0ZXBzXSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIHZhciByZXN1bHQgPSB0aGlzLl9hYm9ydEFsZ29yaXRobShyZWFzb24pO1xuICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTtcbiAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlW0Vycm9yU3RlcHNdID0gZnVuY3Rpb24gKCkge1xuICAgUmVzZXRRdWV1ZSh0aGlzKTtcbiAgfTtcbiAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI7XG4gfSgpO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCB7IGVycm9yOiB7IGVudW1lcmFibGU6IHRydWUgfSB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG4gICB2YWx1ZTogJ1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXInLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gU2V0VXBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHdyaXRlQWxnb3JpdGhtLCBjbG9zZUFsZ29yaXRobSwgYWJvcnRBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pIHtcbiAgY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtID0gc3RyZWFtO1xuICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gIGNvbnRyb2xsZXIuX3F1ZXVlID0gdW5kZWZpbmVkO1xuICBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgUmVzZXRRdWV1ZShjb250cm9sbGVyKTtcbiAgY29udHJvbGxlci5fc3RhcnRlZCA9IGZhbHNlO1xuICBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0gPSBzaXplQWxnb3JpdGhtO1xuICBjb250cm9sbGVyLl9zdHJhdGVneUhXTSA9IGhpZ2hXYXRlck1hcms7XG4gIGNvbnRyb2xsZXIuX3dyaXRlQWxnb3JpdGhtID0gd3JpdGVBbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX2Nsb3NlQWxnb3JpdGhtID0gY2xvc2VBbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX2Fib3J0QWxnb3JpdGhtID0gYWJvcnRBbGdvcml0aG07XG4gIHZhciBiYWNrcHJlc3N1cmUgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0QmFja3ByZXNzdXJlKGNvbnRyb2xsZXIpO1xuICBXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSk7XG4gIHZhciBzdGFydFJlc3VsdCA9IHN0YXJ0QWxnb3JpdGhtKCk7XG4gIHZhciBzdGFydFByb21pc2UgPSBwcm9taXNlUmVzb2x2ZWRXaXRoKHN0YXJ0UmVzdWx0KTtcbiAgdXBvblByb21pc2Uoc3RhcnRQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICBjb250cm9sbGVyLl9zdGFydGVkID0gdHJ1ZTtcbiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJBZHZhbmNlUXVldWVJZk5lZWRlZChjb250cm9sbGVyKTtcbiAgfSwgZnVuY3Rpb24gKHIpIHtcbiAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIHIpO1xuICB9KTtcbiB9XG4gZnVuY3Rpb24gU2V0VXBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVVuZGVybHlpbmdTaW5rKHN0cmVhbSwgdW5kZXJseWluZ1NpbmssIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pIHtcbiAgdmFyIGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlKTtcbiAgdmFyIHN0YXJ0QWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbiAgdmFyIHdyaXRlQWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgfTtcbiAgdmFyIGNsb3NlQWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgfTtcbiAgdmFyIGFib3J0QWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgfTtcbiAgaWYgKHVuZGVybHlpbmdTaW5rLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgIHN0YXJ0QWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlcmx5aW5nU2luay5zdGFydChjb250cm9sbGVyKTtcbiAgIH07XG4gIH1cbiAgaWYgKHVuZGVybHlpbmdTaW5rLndyaXRlICE9PSB1bmRlZmluZWQpIHtcbiAgIHdyaXRlQWxnb3JpdGhtID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgcmV0dXJuIHVuZGVybHlpbmdTaW5rLndyaXRlKGNodW5rLCBjb250cm9sbGVyKTtcbiAgIH07XG4gIH1cbiAgaWYgKHVuZGVybHlpbmdTaW5rLmNsb3NlICE9PSB1bmRlZmluZWQpIHtcbiAgIGNsb3NlQWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlcmx5aW5nU2luay5jbG9zZSgpO1xuICAgfTtcbiAgfVxuICBpZiAodW5kZXJseWluZ1NpbmsuYWJvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgYWJvcnRBbGdvcml0aG0gPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIHVuZGVybHlpbmdTaW5rLmFib3J0KHJlYXNvbik7XG4gICB9O1xuICB9XG4gIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKSB7XG4gIGNvbnRyb2xsZXIuX3dyaXRlQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuICBjb250cm9sbGVyLl9jbG9zZUFsZ29yaXRobSA9IHVuZGVmaW5lZDtcbiAgY29udHJvbGxlci5fYWJvcnRBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG4gIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHVuZGVmaW5lZDtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKGNvbnRyb2xsZXIpIHtcbiAgRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udHJvbGxlciwgY2xvc2VTZW50aW5lbCwgMCk7XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJBZHZhbmNlUXVldWVJZk5lZWRlZChjb250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldENodW5rU2l6ZShjb250cm9sbGVyLCBjaHVuaykge1xuICB0cnkge1xuICAgcmV0dXJuIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobShjaHVuayk7XG4gIH0gY2F0Y2ggKGNodW5rU2l6ZUUpIHtcbiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcklmTmVlZGVkKGNvbnRyb2xsZXIsIGNodW5rU2l6ZUUpO1xuICAgcmV0dXJuIDE7XG4gIH1cbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpIHtcbiAgcmV0dXJuIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNIC0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemU7XG4gfVxuIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJXcml0ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKSB7XG4gIHRyeSB7XG4gICBFbnF1ZXVlVmFsdWVXaXRoU2l6ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKTtcbiAgfSBjYXRjaCAoZW5xdWV1ZUUpIHtcbiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcklmTmVlZGVkKGNvbnRyb2xsZXIsIGVucXVldWVFKTtcbiAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtO1xuICBpZiAoIVdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgJiYgc3RyZWFtLl9zdGF0ZSA9PT0gJ3dyaXRhYmxlJykge1xuICAgdmFyIGJhY2twcmVzc3VyZSA9IFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXRCYWNrcHJlc3N1cmUoY29udHJvbGxlcik7XG4gICBXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSk7XG4gIH1cbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcikge1xuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtO1xuICBpZiAoIWNvbnRyb2xsZXIuX3N0YXJ0ZWQpIHtcbiAgIHJldHVybjtcbiAgfVxuICBpZiAoc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9zdGF0ZTtcbiAgaWYgKHN0YXRlID09PSAnZXJyb3JpbmcnKSB7XG4gICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7XG4gICByZXR1cm47XG4gIH1cbiAgaWYgKGNvbnRyb2xsZXIuX3F1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IFBlZWtRdWV1ZVZhbHVlKGNvbnRyb2xsZXIpO1xuICBpZiAodmFsdWUgPT09IGNsb3NlU2VudGluZWwpIHtcbiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJQcm9jZXNzQ2xvc2UoY29udHJvbGxlcik7XG4gIH0gZWxzZSB7XG4gICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc1dyaXRlKGNvbnRyb2xsZXIsIHZhbHVlKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JJZk5lZWRlZChjb250cm9sbGVyLCBlcnJvcikge1xuICBpZiAoY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtLl9zdGF0ZSA9PT0gJ3dyaXRhYmxlJykge1xuICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVycm9yKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc0Nsb3NlKGNvbnRyb2xsZXIpIHtcbiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtcbiAgV3JpdGFibGVTdHJlYW1NYXJrQ2xvc2VSZXF1ZXN0SW5GbGlnaHQoc3RyZWFtKTtcbiAgRGVxdWV1ZVZhbHVlKGNvbnRyb2xsZXIpO1xuICB2YXIgc2lua0Nsb3NlUHJvbWlzZSA9IGNvbnRyb2xsZXIuX2Nsb3NlQWxnb3JpdGhtKCk7XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG4gIHVwb25Qcm9taXNlKHNpbmtDbG9zZVByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZShzdHJlYW0pO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0Q2xvc2VXaXRoRXJyb3Ioc3RyZWFtLCByZWFzb24pO1xuICB9KTtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NXcml0ZShjb250cm9sbGVyLCBjaHVuaykge1xuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtO1xuICBXcml0YWJsZVN0cmVhbU1hcmtGaXJzdFdyaXRlUmVxdWVzdEluRmxpZ2h0KHN0cmVhbSk7XG4gIHZhciBzaW5rV3JpdGVQcm9taXNlID0gY29udHJvbGxlci5fd3JpdGVBbGdvcml0aG0oY2h1bmspO1xuICB1cG9uUHJvbWlzZShzaW5rV3JpdGVQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0V3JpdGUoc3RyZWFtKTtcbiAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7XG4gICBEZXF1ZXVlVmFsdWUoY29udHJvbGxlcik7XG4gICBpZiAoIVdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgJiYgc3RhdGUgPT09ICd3cml0YWJsZScpIHtcbiAgICB2YXIgYmFja3ByZXNzdXJlID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKTtcbiAgICBXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSk7XG4gICB9XG4gICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcik7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAnd3JpdGFibGUnKSB7XG4gICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTtcbiAgIH1cbiAgIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRXcml0ZVdpdGhFcnJvcihzdHJlYW0sIHJlYXNvbik7XG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0QmFja3ByZXNzdXJlKGNvbnRyb2xsZXIpIHtcbiAgdmFyIGRlc2lyZWRTaXplID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpO1xuICByZXR1cm4gZGVzaXJlZFNpemUgPD0gMDtcbiB9XG4gZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVycm9yKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07XG4gIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG4gIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIGVycm9yKTtcbiB9XG4gZnVuY3Rpb24gc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQyKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUuXCIgKyBuYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtXCIpO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyXCIpO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdDYW5ub3QgJyArIG5hbWUgKyAnIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgd3JpdGVyJyk7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpIHtcbiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gcmVqZWN0O1xuICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncGVuZGluZyc7XG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKSB7XG4gIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpO1xuICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbik7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQod3JpdGVyKSB7XG4gIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpO1xuICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUod3JpdGVyKTtcbiB9XG4gZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3Qod3JpdGVyLCByZWFzb24pIHtcbiAgaWYgKHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgcmV0dXJuO1xuICB9XG4gIHNldFByb21pc2VJc0hhbmRsZWRUb1RydWUod3JpdGVyLl9jbG9zZWRQcm9taXNlKTtcbiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdChyZWFzb24pO1xuICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSA9IHVuZGVmaW5lZDtcbiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDtcbiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncmVqZWN0ZWQnO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZCh3cml0ZXIsIHJlYXNvbikge1xuICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKTtcbiB9XG4gZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNvbHZlKHdyaXRlcikge1xuICBpZiAod3JpdGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPT09IHVuZGVmaW5lZCkge1xuICAgcmV0dXJuO1xuICB9XG4gIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkO1xuICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gdW5kZWZpbmVkO1xuICB3cml0ZXIuX2Nsb3NlZFByb21pc2VTdGF0ZSA9ICdyZXNvbHZlZCc7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplKHdyaXRlcikge1xuICB3cml0ZXIuX3JlYWR5UHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICB3cml0ZXIuX3JlYWR5UHJvbWlzZVN0YXRlID0gJ3BlbmRpbmcnO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pIHtcbiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTtcbiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbik7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZCh3cml0ZXIpIHtcbiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTtcbiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUod3JpdGVyKTtcbiB9XG4gZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbikge1xuICBpZiAod3JpdGVyLl9yZWFkeVByb21pc2VfcmVqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybjtcbiAgfVxuICBzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlKHdyaXRlci5fcmVhZHlQcm9taXNlKTtcbiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVqZWN0KHJlYXNvbik7XG4gIHdyaXRlci5fcmVhZHlQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG4gIHdyaXRlci5fcmVhZHlQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDtcbiAgd3JpdGVyLl9yZWFkeVByb21pc2VTdGF0ZSA9ICdyZWplY3RlZCc7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldCh3cml0ZXIpIHtcbiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTtcbiB9XG4gZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc2V0VG9SZWplY3RlZCh3cml0ZXIsIHJlYXNvbikge1xuICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzb2x2ZSh3cml0ZXIpIHtcbiAgaWYgKHdyaXRlci5fcmVhZHlQcm9taXNlX3Jlc29sdmUgPT09IHVuZGVmaW5lZCkge1xuICAgcmV0dXJuO1xuICB9XG4gIHdyaXRlci5fcmVhZHlQcm9taXNlX3Jlc29sdmUodW5kZWZpbmVkKTtcbiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9IHVuZGVmaW5lZDtcbiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVqZWN0ID0gdW5kZWZpbmVkO1xuICB3cml0ZXIuX3JlYWR5UHJvbWlzZVN0YXRlID0gJ2Z1bGZpbGxlZCc7XG4gfVxuIGZ1bmN0aW9uIGlzQWJvcnRTaWduYWwodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5hYm9ydGVkID09PSAnYm9vbGVhbic7XG4gIH0gY2F0Y2ggKF9hKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiB9XG4gdmFyIE5hdGl2ZURPTUV4Y2VwdGlvbiA9IHR5cGVvZiBET01FeGNlcHRpb24gIT09ICd1bmRlZmluZWQnID8gRE9NRXhjZXB0aW9uIDogdW5kZWZpbmVkO1xuIGZ1bmN0aW9uIGlzRE9NRXhjZXB0aW9uQ29uc3RydWN0b3IoY3Rvcikge1xuICBpZiAoISh0eXBlb2YgY3RvciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgY3RvciA9PT0gJ29iamVjdCcpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgIG5ldyBjdG9yKCk7XG4gICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoX2EpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBjcmVhdGVET01FeGNlcHRpb25Qb2x5ZmlsbCgpIHtcbiAgdmFyIGN0b3IgPSBmdW5jdGlvbiBET01FeGNlcHRpb24obWVzc2FnZSwgbmFtZSkge1xuICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCAnJztcbiAgIHRoaXMubmFtZSA9IG5hbWUgfHwgJ0Vycm9yJztcbiAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgfVxuICB9O1xuICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG4gICB2YWx1ZTogY3RvcixcbiAgIHdyaXRhYmxlOiB0cnVlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gY3RvcjtcbiB9XG4gdmFyIERPTUV4Y2VwdGlvbiQxID0gaXNET01FeGNlcHRpb25Db25zdHJ1Y3RvcihOYXRpdmVET01FeGNlcHRpb24pID8gTmF0aXZlRE9NRXhjZXB0aW9uIDogY3JlYXRlRE9NRXhjZXB0aW9uUG9seWZpbGwoKTtcbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVBpcGVUbyhzb3VyY2UsIGRlc3QsIHByZXZlbnRDbG9zZSwgcHJldmVudEFib3J0LCBwcmV2ZW50Q2FuY2VsLCBzaWduYWwpIHtcbiAgdmFyIHJlYWRlciA9IEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc291cmNlKTtcbiAgdmFyIHdyaXRlciA9IEFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoZGVzdCk7XG4gIHNvdXJjZS5fZGlzdHVyYmVkID0gdHJ1ZTtcbiAgdmFyIHNodXR0aW5nRG93biA9IGZhbHNlO1xuICB2YXIgY3VycmVudFdyaXRlID0gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuICByZXR1cm4gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICB2YXIgYWJvcnRBbGdvcml0aG07XG4gICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICBhYm9ydEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgdmFyIGVycm9yID0gbmV3IERPTUV4Y2VwdGlvbiQxKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKTtcbiAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgaWYgKCFwcmV2ZW50QWJvcnQpIHtcbiAgICAgIGFjdGlvbnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgaWYgKGRlc3QuX3N0YXRlID09PSAnd3JpdGFibGUnKSB7XG4gICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KGRlc3QsIGVycm9yKTtcbiAgICAgICB9XG4gICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiAgICAgIH0pO1xuICAgICB9XG4gICAgIGlmICghcHJldmVudENhbmNlbCkge1xuICAgICAgYWN0aW9ucy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICBpZiAoc291cmNlLl9zdGF0ZSA9PT0gJ3JlYWRhYmxlJykge1xuICAgICAgICByZXR1cm4gUmVhZGFibGVTdHJlYW1DYW5jZWwoc291cmNlLCBlcnJvcik7XG4gICAgICAgfVxuICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gICAgICB9KTtcbiAgICAgfVxuICAgICBzaHV0ZG93bldpdGhBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGFjdGlvbnMubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICByZXR1cm4gYWN0aW9uKCk7XG4gICAgICB9KSk7XG4gICAgIH0sIHRydWUsIGVycm9yKTtcbiAgICB9O1xuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICBhYm9ydEFsZ29yaXRobSgpO1xuICAgICByZXR1cm47XG4gICAgfVxuICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QWxnb3JpdGhtKTtcbiAgIH1cbiAgIGZ1bmN0aW9uIHBpcGVMb29wKCkge1xuICAgIHJldHVybiBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlTG9vcCwgcmVqZWN0TG9vcCkge1xuICAgICBmdW5jdGlvbiBuZXh0KGRvbmUpIHtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgcmVzb2x2ZUxvb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgUGVyZm9ybVByb21pc2VUaGVuKHBpcGVTdGVwKCksIG5leHQsIHJlamVjdExvb3ApO1xuICAgICAgfVxuICAgICB9XG4gICAgIG5leHQoZmFsc2UpO1xuICAgIH0pO1xuICAgfVxuICAgZnVuY3Rpb24gcGlwZVN0ZXAoKSB7XG4gICAgaWYgKHNodXR0aW5nRG93bikge1xuICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIFBlcmZvcm1Qcm9taXNlVGhlbih3cml0ZXIuX3JlYWR5UHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgICByZXR1cm4gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZVJlYWQsIHJlamVjdFJlYWQpIHtcbiAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQocmVhZGVyLCB7XG4gICAgICAgX2NodW5rU3RlcHM6IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBjdXJyZW50V3JpdGUgPSBQZXJmb3JtUHJvbWlzZVRoZW4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyV3JpdGUod3JpdGVyLCBjaHVuayksIHVuZGVmaW5lZCwgbm9vcCk7XG4gICAgICAgIHJlc29sdmVSZWFkKGZhbHNlKTtcbiAgICAgICB9LFxuICAgICAgIF9jbG9zZVN0ZXBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlUmVhZCh0cnVlKTtcbiAgICAgICB9LFxuICAgICAgIF9lcnJvclN0ZXBzOiByZWplY3RSZWFkXG4gICAgICB9KTtcbiAgICAgfSk7XG4gICAgfSk7XG4gICB9XG4gICBpc09yQmVjb21lc0Vycm9yZWQoc291cmNlLCByZWFkZXIuX2Nsb3NlZFByb21pc2UsIGZ1bmN0aW9uIChzdG9yZWRFcnJvcikge1xuICAgIGlmICghcHJldmVudEFib3J0KSB7XG4gICAgIHNodXRkb3duV2l0aEFjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gV3JpdGFibGVTdHJlYW1BYm9ydChkZXN0LCBzdG9yZWRFcnJvcik7XG4gICAgIH0sIHRydWUsIHN0b3JlZEVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICBzaHV0ZG93bih0cnVlLCBzdG9yZWRFcnJvcik7XG4gICAgfVxuICAgfSk7XG4gICBpc09yQmVjb21lc0Vycm9yZWQoZGVzdCwgd3JpdGVyLl9jbG9zZWRQcm9taXNlLCBmdW5jdGlvbiAoc3RvcmVkRXJyb3IpIHtcbiAgICBpZiAoIXByZXZlbnRDYW5jZWwpIHtcbiAgICAgc2h1dGRvd25XaXRoQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbChzb3VyY2UsIHN0b3JlZEVycm9yKTtcbiAgICAgfSwgdHJ1ZSwgc3RvcmVkRXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgIHNodXRkb3duKHRydWUsIHN0b3JlZEVycm9yKTtcbiAgICB9XG4gICB9KTtcbiAgIGlzT3JCZWNvbWVzQ2xvc2VkKHNvdXJjZSwgcmVhZGVyLl9jbG9zZWRQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwcmV2ZW50Q2xvc2UpIHtcbiAgICAgc2h1dGRvd25XaXRoQWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJDbG9zZVdpdGhFcnJvclByb3BhZ2F0aW9uKHdyaXRlcik7XG4gICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgIHNodXRkb3duKCk7XG4gICAgfVxuICAgfSk7XG4gICBpZiAoV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoZGVzdCkgfHwgZGVzdC5fc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgdmFyIGRlc3RDbG9zZWRfMSA9IG5ldyBUeXBlRXJyb3IoJ3RoZSBkZXN0aW5hdGlvbiB3cml0YWJsZSBzdHJlYW0gY2xvc2VkIGJlZm9yZSBhbGwgZGF0YSBjb3VsZCBiZSBwaXBlZCB0byBpdCcpO1xuICAgIGlmICghcHJldmVudENhbmNlbCkge1xuICAgICBzaHV0ZG93bldpdGhBY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHNvdXJjZSwgZGVzdENsb3NlZF8xKTtcbiAgICAgfSwgdHJ1ZSwgZGVzdENsb3NlZF8xKTtcbiAgICB9IGVsc2Uge1xuICAgICBzaHV0ZG93bih0cnVlLCBkZXN0Q2xvc2VkXzEpO1xuICAgIH1cbiAgIH1cbiAgIHNldFByb21pc2VJc0hhbmRsZWRUb1RydWUocGlwZUxvb3AoKSk7XG4gICBmdW5jdGlvbiB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSB7XG4gICAgdmFyIG9sZEN1cnJlbnRXcml0ZSA9IGN1cnJlbnRXcml0ZTtcbiAgICByZXR1cm4gUGVyZm9ybVByb21pc2VUaGVuKGN1cnJlbnRXcml0ZSwgZnVuY3Rpb24gKCkge1xuICAgICByZXR1cm4gb2xkQ3VycmVudFdyaXRlICE9PSBjdXJyZW50V3JpdGUgPyB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSA6IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgIH1cbiAgIGZ1bmN0aW9uIGlzT3JCZWNvbWVzRXJyb3JlZChzdHJlYW0sIHByb21pc2UsIGFjdGlvbikge1xuICAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgICAgYWN0aW9uKHN0cmVhbS5fc3RvcmVkRXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgIHVwb25SZWplY3Rpb24ocHJvbWlzZSwgYWN0aW9uKTtcbiAgICB9XG4gICB9XG4gICBmdW5jdGlvbiBpc09yQmVjb21lc0Nsb3NlZChzdHJlYW0sIHByb21pc2UsIGFjdGlvbikge1xuICAgIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykge1xuICAgICBhY3Rpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICB1cG9uRnVsZmlsbG1lbnQocHJvbWlzZSwgYWN0aW9uKTtcbiAgICB9XG4gICB9XG4gICBmdW5jdGlvbiBzaHV0ZG93bldpdGhBY3Rpb24oYWN0aW9uLCBvcmlnaW5hbElzRXJyb3IsIG9yaWdpbmFsRXJyb3IpIHtcbiAgICBpZiAoc2h1dHRpbmdEb3duKSB7XG4gICAgIHJldHVybjtcbiAgICB9XG4gICAgc2h1dHRpbmdEb3duID0gdHJ1ZTtcbiAgICBpZiAoZGVzdC5fc3RhdGUgPT09ICd3cml0YWJsZScgJiYgIVdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KGRlc3QpKSB7XG4gICAgIHVwb25GdWxmaWxsbWVudCh3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSwgZG9UaGVSZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICBkb1RoZVJlc3QoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZG9UaGVSZXN0KCkge1xuICAgICB1cG9uUHJvbWlzZShhY3Rpb24oKSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZpbmFsaXplKG9yaWdpbmFsSXNFcnJvciwgb3JpZ2luYWxFcnJvcik7XG4gICAgIH0sIGZ1bmN0aW9uIChuZXdFcnJvcikge1xuICAgICAgcmV0dXJuIGZpbmFsaXplKHRydWUsIG5ld0Vycm9yKTtcbiAgICAgfSk7XG4gICAgfVxuICAgfVxuICAgZnVuY3Rpb24gc2h1dGRvd24oaXNFcnJvciwgZXJyb3IpIHtcbiAgICBpZiAoc2h1dHRpbmdEb3duKSB7XG4gICAgIHJldHVybjtcbiAgICB9XG4gICAgc2h1dHRpbmdEb3duID0gdHJ1ZTtcbiAgICBpZiAoZGVzdC5fc3RhdGUgPT09ICd3cml0YWJsZScgJiYgIVdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KGRlc3QpKSB7XG4gICAgIHVwb25GdWxmaWxsbWVudCh3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKTtcbiAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgZmluYWxpemUoaXNFcnJvciwgZXJyb3IpO1xuICAgIH1cbiAgIH1cbiAgIGZ1bmN0aW9uIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKSB7XG4gICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZSh3cml0ZXIpO1xuICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTtcbiAgICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbGdvcml0aG0pO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcikge1xuICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB9XG4gICB9XG4gIH0pO1xuIH1cbiB2YXIgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcigpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgY29uc3RydWN0b3InKTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIFwiZGVzaXJlZFNpemVcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcbiAgICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2Rlc2lyZWRTaXplJyk7XG4gICAgfVxuICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUodGhpcyk7XG4gICB9LFxuICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcbiAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnY2xvc2UnKTtcbiAgIH1cbiAgIGlmICghUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKHRoaXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBub3QgaW4gYSBzdGF0ZSB0aGF0IHBlcm1pdHMgY2xvc2UnKTtcbiAgIH1cbiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZSh0aGlzKTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgaWYgKGNodW5rID09PSB2b2lkIDApIHtcbiAgICBjaHVuayA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpKSB7XG4gICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2VucXVldWUnKTtcbiAgIH1cbiAgIGlmICghUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKHRoaXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBub3QgaW4gYSBzdGF0ZSB0aGF0IHBlcm1pdHMgZW5xdWV1ZScpO1xuICAgfVxuICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKHRoaXMsIGNodW5rKTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgaWYgKGUgPT09IHZvaWQgMCkge1xuICAgIGUgPSB1bmRlZmluZWQ7XG4gICB9XG4gICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdlcnJvcicpO1xuICAgfVxuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKHRoaXMsIGUpO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZVtDYW5jZWxTdGVwc10gPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICBSZXNldFF1ZXVlKHRoaXMpO1xuICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NhbmNlbEFsZ29yaXRobShyZWFzb24pO1xuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTtcbiAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlW1B1bGxTdGVwc10gPSBmdW5jdGlvbiAocmVhZFJlcXVlc3QpIHtcbiAgIHZhciBzdHJlYW0gPSB0aGlzLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07XG4gICBpZiAodGhpcy5fcXVldWUubGVuZ3RoID4gMCkge1xuICAgIHZhciBjaHVuayA9IERlcXVldWVWYWx1ZSh0aGlzKTtcbiAgICBpZiAodGhpcy5fY2xvc2VSZXF1ZXN0ZWQgJiYgdGhpcy5fcXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXModGhpcyk7XG4gICAgIFJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKTtcbiAgICB9IGVsc2Uge1xuICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTtcbiAgICB9XG4gICAgcmVhZFJlcXVlc3QuX2NodW5rU3RlcHMoY2h1bmspO1xuICAgfSBlbHNlIHtcbiAgICBSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0KHN0cmVhbSwgcmVhZFJlcXVlc3QpO1xuICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKHRoaXMpO1xuICAgfVxuICB9O1xuICByZXR1cm4gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjtcbiB9KCk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgY2xvc2U6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBlbnF1ZXVlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgZXJyb3I6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBkZXNpcmVkU2l6ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbiB9KTtcbiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG4gICB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXInLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcikge1xuICB2YXIgc2hvdWxkUHVsbCA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJTaG91bGRDYWxsUHVsbChjb250cm9sbGVyKTtcbiAgaWYgKCFzaG91bGRQdWxsKSB7XG4gICByZXR1cm47XG4gIH1cbiAgaWYgKGNvbnRyb2xsZXIuX3B1bGxpbmcpIHtcbiAgIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IHRydWU7XG4gICByZXR1cm47XG4gIH1cbiAgY29udHJvbGxlci5fcHVsbGluZyA9IHRydWU7XG4gIHZhciBwdWxsUHJvbWlzZSA9IGNvbnRyb2xsZXIuX3B1bGxBbGdvcml0aG0oKTtcbiAgdXBvblByb21pc2UocHVsbFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTtcbiAgIGlmIChjb250cm9sbGVyLl9wdWxsQWdhaW4pIHtcbiAgICBjb250cm9sbGVyLl9wdWxsQWdhaW4gPSBmYWxzZTtcbiAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcbiAgIH1cbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKTtcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJTaG91bGRDYWxsUHVsbChjb250cm9sbGVyKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07XG4gIGlmICghUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKGNvbnRyb2xsZXIpKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFjb250cm9sbGVyLl9zdGFydGVkKSB7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSAmJiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pID4gMCkge1xuICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGRlc2lyZWRTaXplID0gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpO1xuICBpZiAoZGVzaXJlZFNpemUgPiAwKSB7XG4gICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikge1xuICBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuICBjb250cm9sbGVyLl9jYW5jZWxBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG4gIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHVuZGVmaW5lZDtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKGNvbnRyb2xsZXIpIHtcbiAgaWYgKCFSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikpIHtcbiAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO1xuICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IHRydWU7XG4gIGlmIChjb250cm9sbGVyLl9xdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7XG4gICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7XG4gIH1cbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspIHtcbiAgaWYgKCFSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikpIHtcbiAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO1xuICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pICYmIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkgPiAwKSB7XG4gICBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkUmVxdWVzdChzdHJlYW0sIGNodW5rLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICB2YXIgY2h1bmtTaXplID0gdm9pZCAwO1xuICAgdHJ5IHtcbiAgICBjaHVua1NpemUgPSBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0oY2h1bmspO1xuICAgfSBjYXRjaCAoY2h1bmtTaXplRSkge1xuICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBjaHVua1NpemVFKTtcbiAgICB0aHJvdyBjaHVua1NpemVFO1xuICAgfVxuICAgdHJ5IHtcbiAgICBFbnF1ZXVlVmFsdWVXaXRoU2l6ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKTtcbiAgIH0gY2F0Y2ggKGVucXVldWVFKSB7XG4gICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVucXVldWVFKTtcbiAgICB0aHJvdyBlbnF1ZXVlRTtcbiAgIH1cbiAgfVxuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHtcbiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTtcbiAgaWYgKHN0cmVhbS5fc3RhdGUgIT09ICdyZWFkYWJsZScpIHtcbiAgIHJldHVybjtcbiAgfVxuICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpO1xuICBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKSB7XG4gIHZhciBzdGF0ZSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbS5fc3RhdGU7XG4gIGlmIChzdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG4gICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gY29udHJvbGxlci5fc3RyYXRlZ3lIV00gLSBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckhhc0JhY2twcmVzc3VyZShjb250cm9sbGVyKSB7XG4gIGlmIChSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyU2hvdWxkQ2FsbFB1bGwoY29udHJvbGxlcikpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKGNvbnRyb2xsZXIpIHtcbiAgdmFyIHN0YXRlID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtLl9zdGF0ZTtcbiAgaWYgKCFjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCAmJiBzdGF0ZSA9PT0gJ3JlYWRhYmxlJykge1xuICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xuIH1cbiBmdW5jdGlvbiBTZXRVcFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7XG4gIGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbSA9IHN0cmVhbTtcbiAgY29udHJvbGxlci5fcXVldWUgPSB1bmRlZmluZWQ7XG4gIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplID0gdW5kZWZpbmVkO1xuICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpO1xuICBjb250cm9sbGVyLl9zdGFydGVkID0gZmFsc2U7XG4gIGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID0gZmFsc2U7XG4gIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IGZhbHNlO1xuICBjb250cm9sbGVyLl9wdWxsaW5nID0gZmFsc2U7XG4gIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHNpemVBbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNID0gaGlnaFdhdGVyTWFyaztcbiAgY29udHJvbGxlci5fcHVsbEFsZ29yaXRobSA9IHB1bGxBbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX2NhbmNlbEFsZ29yaXRobSA9IGNhbmNlbEFsZ29yaXRobTtcbiAgc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICB2YXIgc3RhcnRSZXN1bHQgPSBzdGFydEFsZ29yaXRobSgpO1xuICB1cG9uUHJvbWlzZShwcm9taXNlUmVzb2x2ZWRXaXRoKHN0YXJ0UmVzdWx0KSwgZnVuY3Rpb24gKCkge1xuICAgY29udHJvbGxlci5fc3RhcnRlZCA9IHRydWU7XG4gICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTtcbiAgfSwgZnVuY3Rpb24gKHIpIHtcbiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCByKTtcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlKHN0cmVhbSwgdW5kZXJseWluZ1NvdXJjZSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkge1xuICB2YXIgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuICB2YXIgc3RhcnRBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG4gICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuICB2YXIgcHVsbEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH07XG4gIHZhciBjYW5jZWxBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG4gICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpO1xuICB9O1xuICBpZiAodW5kZXJseWluZ1NvdXJjZS5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICBzdGFydEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZXJseWluZ1NvdXJjZS5zdGFydChjb250cm9sbGVyKTtcbiAgIH07XG4gIH1cbiAgaWYgKHVuZGVybHlpbmdTb3VyY2UucHVsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICBwdWxsQWxnb3JpdGhtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlcmx5aW5nU291cmNlLnB1bGwoY29udHJvbGxlcik7XG4gICB9O1xuICB9XG4gIGlmICh1bmRlcmx5aW5nU291cmNlLmNhbmNlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICBjYW5jZWxBbGdvcml0aG0gPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIHVuZGVybHlpbmdTb3VyY2UuY2FuY2VsKHJlYXNvbik7XG4gICB9O1xuICB9XG4gIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pO1xuIH1cbiBmdW5jdGlvbiBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMShuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuXCIgKyBuYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIik7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtVGVlKHN0cmVhbSwgY2xvbmVGb3JCcmFuY2gyKSB7XG4gIHZhciByZWFkZXIgPSBBY3F1aXJlUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHN0cmVhbSk7XG4gIHZhciByZWFkaW5nID0gZmFsc2U7XG4gIHZhciBjYW5jZWxlZDEgPSBmYWxzZTtcbiAgdmFyIGNhbmNlbGVkMiA9IGZhbHNlO1xuICB2YXIgcmVhc29uMTtcbiAgdmFyIHJlYXNvbjI7XG4gIHZhciBicmFuY2gxO1xuICB2YXIgYnJhbmNoMjtcbiAgdmFyIHJlc29sdmVDYW5jZWxQcm9taXNlO1xuICB2YXIgY2FuY2VsUHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgIHJlc29sdmVDYW5jZWxQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG4gIGZ1bmN0aW9uIHB1bGxBbGdvcml0aG0oKSB7XG4gICBpZiAocmVhZGluZykge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gICB9XG4gICByZWFkaW5nID0gdHJ1ZTtcbiAgIHZhciByZWFkUmVxdWVzdCA9IHtcbiAgICBfY2h1bmtTdGVwczogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgIHF1ZXVlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlYWRpbmcgPSBmYWxzZTtcbiAgICAgIHZhciB2YWx1ZTEgPSB2YWx1ZTtcbiAgICAgIHZhciB2YWx1ZTIgPSB2YWx1ZTtcbiAgICAgIGlmICghY2FuY2VsZWQxKSB7XG4gICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoYnJhbmNoMS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCB2YWx1ZTEpO1xuICAgICAgfVxuICAgICAgaWYgKCFjYW5jZWxlZDIpIHtcbiAgICAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIHZhbHVlMik7XG4gICAgICB9XG4gICAgIH0pO1xuICAgIH0sXG4gICAgX2Nsb3NlU3RlcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgcmVhZGluZyA9IGZhbHNlO1xuICAgICBpZiAoIWNhbmNlbGVkMSkge1xuICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7XG4gICAgIH1cbiAgICAgaWYgKCFjYW5jZWxlZDIpIHtcbiAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpO1xuICAgICB9XG4gICAgIGlmICghY2FuY2VsZWQxIHx8ICFjYW5jZWxlZDIpIHtcbiAgICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKHVuZGVmaW5lZCk7XG4gICAgIH1cbiAgICB9LFxuICAgIF9lcnJvclN0ZXBzOiBmdW5jdGlvbiAoKSB7XG4gICAgIHJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gICB9O1xuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIsIHJlYWRSZXF1ZXN0KTtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsMUFsZ29yaXRobShyZWFzb24pIHtcbiAgIGNhbmNlbGVkMSA9IHRydWU7XG4gICByZWFzb24xID0gcmVhc29uO1xuICAgaWYgKGNhbmNlbGVkMikge1xuICAgIHZhciBjb21wb3NpdGVSZWFzb24gPSBDcmVhdGVBcnJheUZyb21MaXN0KFtcbiAgICAgcmVhc29uMSxcbiAgICAgcmVhc29uMlxuICAgIF0pO1xuICAgIHZhciBjYW5jZWxSZXN1bHQgPSBSZWFkYWJsZVN0cmVhbUNhbmNlbChzdHJlYW0sIGNvbXBvc2l0ZVJlYXNvbik7XG4gICAgcmVzb2x2ZUNhbmNlbFByb21pc2UoY2FuY2VsUmVzdWx0KTtcbiAgIH1cbiAgIHJldHVybiBjYW5jZWxQcm9taXNlO1xuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbDJBbGdvcml0aG0ocmVhc29uKSB7XG4gICBjYW5jZWxlZDIgPSB0cnVlO1xuICAgcmVhc29uMiA9IHJlYXNvbjtcbiAgIGlmIChjYW5jZWxlZDEpIHtcbiAgICB2YXIgY29tcG9zaXRlUmVhc29uID0gQ3JlYXRlQXJyYXlGcm9tTGlzdChbXG4gICAgIHJlYXNvbjEsXG4gICAgIHJlYXNvbjJcbiAgICBdKTtcbiAgICB2YXIgY2FuY2VsUmVzdWx0ID0gUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCBjb21wb3NpdGVSZWFzb24pO1xuICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKGNhbmNlbFJlc3VsdCk7XG4gICB9XG4gICByZXR1cm4gY2FuY2VsUHJvbWlzZTtcbiAgfVxuICBmdW5jdGlvbiBzdGFydEFsZ29yaXRobSgpIHtcbiAgfVxuICBicmFuY2gxID0gQ3JlYXRlUmVhZGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbDFBbGdvcml0aG0pO1xuICBicmFuY2gyID0gQ3JlYXRlUmVhZGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbDJBbGdvcml0aG0pO1xuICB1cG9uUmVqZWN0aW9uKHJlYWRlci5fY2xvc2VkUHJvbWlzZSwgZnVuY3Rpb24gKHIpIHtcbiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihicmFuY2gxLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIHIpO1xuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGJyYW5jaDIuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgcik7XG4gICBpZiAoIWNhbmNlbGVkMSB8fCAhY2FuY2VsZWQyKSB7XG4gICAgcmVzb2x2ZUNhbmNlbFByb21pc2UodW5kZWZpbmVkKTtcbiAgIH1cbiAgfSk7XG4gIHJldHVybiBbXG4gICBicmFuY2gxLFxuICAgYnJhbmNoMlxuICBdO1xuIH1cbiBmdW5jdGlvbiBjb252ZXJ0VW5kZXJseWluZ0RlZmF1bHRPckJ5dGVTb3VyY2Uoc291cmNlLCBjb250ZXh0KSB7XG4gIGFzc2VydERpY3Rpb25hcnkoc291cmNlLCBjb250ZXh0KTtcbiAgdmFyIG9yaWdpbmFsID0gc291cmNlO1xuICB2YXIgYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZTtcbiAgdmFyIGNhbmNlbCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5jYW5jZWw7XG4gIHZhciBwdWxsID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLnB1bGw7XG4gIHZhciBzdGFydCA9IG9yaWdpbmFsID09PSBudWxsIHx8IG9yaWdpbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbC5zdGFydDtcbiAgdmFyIHR5cGUgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwudHlwZTtcbiAgcmV0dXJuIHtcbiAgIGF1dG9BbGxvY2F0ZUNodW5rU2l6ZTogYXV0b0FsbG9jYXRlQ2h1bmtTaXplID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjb252ZXJ0VW5zaWduZWRMb25nTG9uZ1dpdGhFbmZvcmNlUmFuZ2UoYXV0b0FsbG9jYXRlQ2h1bmtTaXplLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnYXV0b0FsbG9jYXRlQ2h1bmtTaXplJyB0aGF0XCIpLFxuICAgY2FuY2VsOiBjYW5jZWwgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU291cmNlQ2FuY2VsQ2FsbGJhY2soY2FuY2VsLCBvcmlnaW5hbCwgY29udGV4dCArIFwiIGhhcyBtZW1iZXIgJ2NhbmNlbCcgdGhhdFwiKSxcbiAgIHB1bGw6IHB1bGwgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRVbmRlcmx5aW5nU291cmNlUHVsbENhbGxiYWNrKHB1bGwsIG9yaWdpbmFsLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAncHVsbCcgdGhhdFwiKSxcbiAgIHN0YXJ0OiBzdGFydCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY29udmVydFVuZGVybHlpbmdTb3VyY2VTdGFydENhbGxiYWNrKHN0YXJ0LCBvcmlnaW5hbCwgY29udGV4dCArIFwiIGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0XCIpLFxuICAgdHlwZTogdHlwZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY29udmVydFJlYWRhYmxlU3RyZWFtVHlwZSh0eXBlLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAndHlwZScgdGhhdFwiKVxuICB9O1xuIH1cbiBmdW5jdGlvbiBjb252ZXJ0VW5kZXJseWluZ1NvdXJjZUNhbmNlbENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICByZXR1cm4gcHJvbWlzZUNhbGwoZm4sIG9yaWdpbmFsLCBbcmVhc29uXSk7XG4gIH07XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRVbmRlcmx5aW5nU291cmNlUHVsbENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgcmV0dXJuIHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFVuZGVybHlpbmdTb3VyY2VTdGFydENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgcmV0dXJuIHJlZmxlY3RDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFJlYWRhYmxlU3RyZWFtVHlwZSh0eXBlLCBjb250ZXh0KSB7XG4gIHR5cGUgPSBcIlwiICsgdHlwZTtcbiAgaWYgKHR5cGUgIT09ICdieXRlcycpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29udGV4dCArIFwiICdcIiArIHR5cGUgKyBcIicgaXMgbm90IGEgdmFsaWQgZW51bWVyYXRpb24gdmFsdWUgZm9yIFJlYWRhYmxlU3RyZWFtVHlwZVwiKTtcbiAgfVxuICByZXR1cm4gdHlwZTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFJlYWRlck9wdGlvbnMob3B0aW9ucywgY29udGV4dCkge1xuICBhc3NlcnREaWN0aW9uYXJ5KG9wdGlvbnMsIGNvbnRleHQpO1xuICB2YXIgbW9kZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tb2RlO1xuICByZXR1cm4geyBtb2RlOiBtb2RlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjb252ZXJ0UmVhZGFibGVTdHJlYW1SZWFkZXJNb2RlKG1vZGUsIGNvbnRleHQgKyBcIiBoYXMgbWVtYmVyICdtb2RlJyB0aGF0XCIpIH07XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRSZWFkYWJsZVN0cmVhbVJlYWRlck1vZGUobW9kZSwgY29udGV4dCkge1xuICBtb2RlID0gXCJcIiArIG1vZGU7XG4gIGlmIChtb2RlICE9PSAnYnlvYicpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29udGV4dCArIFwiICdcIiArIG1vZGUgKyBcIicgaXMgbm90IGEgdmFsaWQgZW51bWVyYXRpb24gdmFsdWUgZm9yIFJlYWRhYmxlU3RyZWFtUmVhZGVyTW9kZVwiKTtcbiAgfVxuICByZXR1cm4gbW9kZTtcbiB9XG4gZnVuY3Rpb24gY29udmVydEl0ZXJhdG9yT3B0aW9ucyhvcHRpb25zLCBjb250ZXh0KSB7XG4gIGFzc2VydERpY3Rpb25hcnkob3B0aW9ucywgY29udGV4dCk7XG4gIHZhciBwcmV2ZW50Q2FuY2VsID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZXZlbnRDYW5jZWw7XG4gIHJldHVybiB7IHByZXZlbnRDYW5jZWw6IEJvb2xlYW4ocHJldmVudENhbmNlbCkgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFBpcGVPcHRpb25zKG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgYXNzZXJ0RGljdGlvbmFyeShvcHRpb25zLCBjb250ZXh0KTtcbiAgdmFyIHByZXZlbnRBYm9ydCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wcmV2ZW50QWJvcnQ7XG4gIHZhciBwcmV2ZW50Q2FuY2VsID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZXZlbnRDYW5jZWw7XG4gIHZhciBwcmV2ZW50Q2xvc2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucHJldmVudENsb3NlO1xuICB2YXIgc2lnbmFsID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbDtcbiAgaWYgKHNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICBhc3NlcnRBYm9ydFNpZ25hbChzaWduYWwsIGNvbnRleHQgKyBcIiBoYXMgbWVtYmVyICdzaWduYWwnIHRoYXRcIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgIHByZXZlbnRBYm9ydDogQm9vbGVhbihwcmV2ZW50QWJvcnQpLFxuICAgcHJldmVudENhbmNlbDogQm9vbGVhbihwcmV2ZW50Q2FuY2VsKSxcbiAgIHByZXZlbnRDbG9zZTogQm9vbGVhbihwcmV2ZW50Q2xvc2UpLFxuICAgc2lnbmFsOiBzaWduYWxcbiAgfTtcbiB9XG4gZnVuY3Rpb24gYXNzZXJ0QWJvcnRTaWduYWwoc2lnbmFsLCBjb250ZXh0KSB7XG4gIGlmICghaXNBYm9ydFNpZ25hbChzaWduYWwpKSB7XG4gICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYW4gQWJvcnRTaWduYWwuXCIpO1xuICB9XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRSZWFkYWJsZVdyaXRhYmxlUGFpcihwYWlyLCBjb250ZXh0KSB7XG4gIGFzc2VydERpY3Rpb25hcnkocGFpciwgY29udGV4dCk7XG4gIHZhciByZWFkYWJsZSA9IHBhaXIgPT09IG51bGwgfHwgcGFpciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFpci5yZWFkYWJsZTtcbiAgYXNzZXJ0UmVxdWlyZWRGaWVsZChyZWFkYWJsZSwgJ3JlYWRhYmxlJywgJ1JlYWRhYmxlV3JpdGFibGVQYWlyJyk7XG4gIGFzc2VydFJlYWRhYmxlU3RyZWFtKHJlYWRhYmxlLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAncmVhZGFibGUnIHRoYXRcIik7XG4gIHZhciB3cml0YWJsZSA9IHBhaXIgPT09IG51bGwgfHwgcGFpciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFpci53cml0YWJsZTtcbiAgYXNzZXJ0UmVxdWlyZWRGaWVsZCh3cml0YWJsZSwgJ3dyaXRhYmxlJywgJ1JlYWRhYmxlV3JpdGFibGVQYWlyJyk7XG4gIGFzc2VydFdyaXRhYmxlU3RyZWFtKHdyaXRhYmxlLCBjb250ZXh0ICsgXCIgaGFzIG1lbWJlciAnd3JpdGFibGUnIHRoYXRcIik7XG4gIHJldHVybiB7XG4gICByZWFkYWJsZTogcmVhZGFibGUsXG4gICB3cml0YWJsZTogd3JpdGFibGVcbiAgfTtcbiB9XG4gdmFyIFJlYWRhYmxlU3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbShyYXdVbmRlcmx5aW5nU291cmNlLCByYXdTdHJhdGVneSkge1xuICAgaWYgKHJhd1VuZGVybHlpbmdTb3VyY2UgPT09IHZvaWQgMCkge1xuICAgIHJhd1VuZGVybHlpbmdTb3VyY2UgPSB7fTtcbiAgIH1cbiAgIGlmIChyYXdTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgcmF3U3RyYXRlZ3kgPSB7fTtcbiAgIH1cbiAgIGlmIChyYXdVbmRlcmx5aW5nU291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICByYXdVbmRlcmx5aW5nU291cmNlID0gbnVsbDtcbiAgIH0gZWxzZSB7XG4gICAgYXNzZXJ0T2JqZWN0KHJhd1VuZGVybHlpbmdTb3VyY2UsICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIH1cbiAgIHZhciBzdHJhdGVneSA9IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3kocmF3U3RyYXRlZ3ksICdTZWNvbmQgcGFyYW1ldGVyJyk7XG4gICB2YXIgdW5kZXJseWluZ1NvdXJjZSA9IGNvbnZlcnRVbmRlcmx5aW5nRGVmYXVsdE9yQnl0ZVNvdXJjZShyYXdVbmRlcmx5aW5nU291cmNlLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG4gICBJbml0aWFsaXplUmVhZGFibGVTdHJlYW0odGhpcyk7XG4gICBpZiAodW5kZXJseWluZ1NvdXJjZS50eXBlID09PSAnYnl0ZXMnKSB7XG4gICAgaWYgKHN0cmF0ZWd5LnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHN0cmF0ZWd5IGZvciBhIGJ5dGUgc3RyZWFtIGNhbm5vdCBoYXZlIGEgc2l6ZSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgaGlnaFdhdGVyTWFyayA9IEV4dHJhY3RIaWdoV2F0ZXJNYXJrKHN0cmF0ZWd5LCAwKTtcbiAgICBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZSh0aGlzLCB1bmRlcmx5aW5nU291cmNlLCBoaWdoV2F0ZXJNYXJrKTtcbiAgIH0gZWxzZSB7XG4gICAgdmFyIHNpemVBbGdvcml0aG0gPSBFeHRyYWN0U2l6ZUFsZ29yaXRobShzdHJhdGVneSk7XG4gICAgdmFyIGhpZ2hXYXRlck1hcmsgPSBFeHRyYWN0SGlnaFdhdGVyTWFyayhzdHJhdGVneSwgMSk7XG4gICAgU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVVuZGVybHlpbmdTb3VyY2UodGhpcywgdW5kZXJseWluZ1NvdXJjZSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7XG4gICB9XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZSwgXCJsb2NrZWRcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHRoaXMpKSB7XG4gICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnbG9ja2VkJyk7XG4gICAgfVxuICAgIHJldHVybiBJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHRoaXMpO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgaWYgKHJlYXNvbiA9PT0gdm9pZCAwKSB7XG4gICAgcmVhc29uID0gdW5kZWZpbmVkO1xuICAgfVxuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHRoaXMpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdjYW5jZWwnKSk7XG4gICB9XG4gICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZCh0aGlzKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYW5jZWwgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHJlYWRlcicpKTtcbiAgIH1cbiAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbCh0aGlzLCByZWFzb24pO1xuICB9O1xuICBSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUuZ2V0UmVhZGVyID0gZnVuY3Rpb24gKHJhd09wdGlvbnMpIHtcbiAgIGlmIChyYXdPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICByYXdPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgfVxuICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtKHRoaXMpKSB7XG4gICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdnZXRSZWFkZXInKTtcbiAgIH1cbiAgIHZhciBvcHRpb25zID0gY29udmVydFJlYWRlck9wdGlvbnMocmF3T3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuICAgaWYgKG9wdGlvbnMubW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIodGhpcyk7XG4gICB9XG4gICByZXR1cm4gQWNxdWlyZVJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih0aGlzKTtcbiAgfTtcbiAgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUaHJvdWdoID0gZnVuY3Rpb24gKHJhd1RyYW5zZm9ybSwgcmF3T3B0aW9ucykge1xuICAgaWYgKHJhd09wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIHJhd09wdGlvbnMgPSB7fTtcbiAgIH1cbiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbSh0aGlzKSkge1xuICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgncGlwZVRocm91Z2gnKTtcbiAgIH1cbiAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQocmF3VHJhbnNmb3JtLCAxLCAncGlwZVRocm91Z2gnKTtcbiAgIHZhciB0cmFuc2Zvcm0gPSBjb252ZXJ0UmVhZGFibGVXcml0YWJsZVBhaXIocmF3VHJhbnNmb3JtLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG4gICB2YXIgb3B0aW9ucyA9IGNvbnZlcnRQaXBlT3B0aW9ucyhyYXdPcHRpb25zLCAnU2Vjb25kIHBhcmFtZXRlcicpO1xuICAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQodGhpcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRocm91Z2ggY2Fubm90IGJlIHVzZWQgb24gYSBsb2NrZWQgUmVhZGFibGVTdHJlYW0nKTtcbiAgIH1cbiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtTG9ja2VkKHRyYW5zZm9ybS53cml0YWJsZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRocm91Z2ggY2Fubm90IGJlIHVzZWQgb24gYSBsb2NrZWQgV3JpdGFibGVTdHJlYW0nKTtcbiAgIH1cbiAgIHZhciBwcm9taXNlID0gUmVhZGFibGVTdHJlYW1QaXBlVG8odGhpcywgdHJhbnNmb3JtLndyaXRhYmxlLCBvcHRpb25zLnByZXZlbnRDbG9zZSwgb3B0aW9ucy5wcmV2ZW50QWJvcnQsIG9wdGlvbnMucHJldmVudENhbmNlbCwgb3B0aW9ucy5zaWduYWwpO1xuICAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKTtcbiAgIHJldHVybiB0cmFuc2Zvcm0ucmVhZGFibGU7XG4gIH07XG4gIFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVG8gPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHJhd09wdGlvbnMpIHtcbiAgIGlmIChyYXdPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICByYXdPcHRpb25zID0ge307XG4gICB9XG4gICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ3BpcGVUbycpKTtcbiAgIH1cbiAgIGlmIChkZXN0aW5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoXCJQYXJhbWV0ZXIgMSBpcyByZXF1aXJlZCBpbiAncGlwZVRvJy5cIik7XG4gICB9XG4gICBpZiAoIUlzV3JpdGFibGVTdHJlYW0oZGVzdGluYXRpb24pKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVG8ncyBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgV3JpdGFibGVTdHJlYW1cIikpO1xuICAgfVxuICAgdmFyIG9wdGlvbnM7XG4gICB0cnkge1xuICAgIG9wdGlvbnMgPSBjb252ZXJ0UGlwZU9wdGlvbnMocmF3T3B0aW9ucywgJ1NlY29uZCBwYXJhbWV0ZXInKTtcbiAgIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChlKTtcbiAgIH1cbiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHRoaXMpKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbScpKTtcbiAgIH1cbiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtTG9ja2VkKGRlc3RpbmF0aW9uKSkge1xuICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVG8gY2Fubm90IGJlIHVzZWQgb24gYSBsb2NrZWQgV3JpdGFibGVTdHJlYW0nKSk7XG4gICB9XG4gICByZXR1cm4gUmVhZGFibGVTdHJlYW1QaXBlVG8odGhpcywgZGVzdGluYXRpb24sIG9wdGlvbnMucHJldmVudENsb3NlLCBvcHRpb25zLnByZXZlbnRBYm9ydCwgb3B0aW9ucy5wcmV2ZW50Q2FuY2VsLCBvcHRpb25zLnNpZ25hbCk7XG4gIH07XG4gIFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS50ZWUgPSBmdW5jdGlvbiAoKSB7XG4gICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcbiAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ3RlZScpO1xuICAgfVxuICAgdmFyIGJyYW5jaGVzID0gUmVhZGFibGVTdHJlYW1UZWUodGhpcyk7XG4gICByZXR1cm4gQ3JlYXRlQXJyYXlGcm9tTGlzdChicmFuY2hlcyk7XG4gIH07XG4gIFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAocmF3T3B0aW9ucykge1xuICAgaWYgKHJhd09wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIHJhd09wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICB9XG4gICBpZiAoIUlzUmVhZGFibGVTdHJlYW0odGhpcykpIHtcbiAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ3ZhbHVlcycpO1xuICAgfVxuICAgdmFyIG9wdGlvbnMgPSBjb252ZXJ0SXRlcmF0b3JPcHRpb25zKHJhd09wdGlvbnMsICdGaXJzdCBwYXJhbWV0ZXInKTtcbiAgIHJldHVybiBBY3F1aXJlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMsIG9wdGlvbnMucHJldmVudENhbmNlbCk7XG4gIH07XG4gIHJldHVybiBSZWFkYWJsZVN0cmVhbTtcbiB9KCk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLCB7XG4gIGNhbmNlbDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGdldFJlYWRlcjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHBpcGVUaHJvdWdoOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgcGlwZVRvOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgdGVlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgdmFsdWVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgbG9ja2VkOiB7IGVudW1lcmFibGU6IHRydWUgfVxuIH0pO1xuIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCB7XG4gICB2YWx1ZTogJ1JlYWRhYmxlU3RyZWFtJyxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiB9XG4gaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC5hc3luY0l0ZXJhdG9yID09PSAnc3ltYm9sJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC5hc3luY0l0ZXJhdG9yLCB7XG4gICB2YWx1ZTogUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnZhbHVlcyxcbiAgIHdyaXRhYmxlOiB0cnVlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7XG4gIGlmIChoaWdoV2F0ZXJNYXJrID09PSB2b2lkIDApIHtcbiAgIGhpZ2hXYXRlck1hcmsgPSAxO1xuICB9XG4gIGlmIChzaXplQWxnb3JpdGhtID09PSB2b2lkIDApIHtcbiAgIHNpemVBbGdvcml0aG0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDE7XG4gICB9O1xuICB9XG4gIHZhciBzdHJlYW0gPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZSk7XG4gIEluaXRpYWxpemVSZWFkYWJsZVN0cmVhbShzdHJlYW0pO1xuICB2YXIgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO1xuICBTZXRVcFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKTtcbiAgcmV0dXJuIHN0cmVhbTtcbiB9XG4gZnVuY3Rpb24gSW5pdGlhbGl6ZVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICBzdHJlYW0uX3N0YXRlID0gJ3JlYWRhYmxlJztcbiAgc3RyZWFtLl9yZWFkZXIgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fZGlzdHVyYmVkID0gZmFsc2U7XG4gfVxuIGZ1bmN0aW9uIElzUmVhZGFibGVTdHJlYW0oeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfcmVhZGFibGVTdHJlYW1Db250cm9sbGVyJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbS5fcmVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1DYW5jZWwoc3RyZWFtLCByZWFzb24pIHtcbiAgc3RyZWFtLl9kaXN0dXJiZWQgPSB0cnVlO1xuICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH1cbiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdlcnJvcmVkJykge1xuICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtLl9zdG9yZWRFcnJvcik7XG4gIH1cbiAgUmVhZGFibGVTdHJlYW1DbG9zZShzdHJlYW0pO1xuICB2YXIgc291cmNlQ2FuY2VsUHJvbWlzZSA9IHN0cmVhbS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyW0NhbmNlbFN0ZXBzXShyZWFzb24pO1xuICByZXR1cm4gdHJhbnNmb3JtUHJvbWlzZVdpdGgoc291cmNlQ2FuY2VsUHJvbWlzZSwgbm9vcCk7XG4gfVxuIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKSB7XG4gIHN0cmVhbS5fc3RhdGUgPSAnY2xvc2VkJztcbiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyO1xuICBpZiAocmVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybjtcbiAgfVxuICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmUocmVhZGVyKTtcbiAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHJlYWRlcikpIHtcbiAgIHJlYWRlci5fcmVhZFJlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRSZXF1ZXN0KSB7XG4gICAgcmVhZFJlcXVlc3QuX2Nsb3NlU3RlcHMoKTtcbiAgIH0pO1xuICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSkge1xuICBzdHJlYW0uX3N0YXRlID0gJ2Vycm9yZWQnO1xuICBzdHJlYW0uX3N0b3JlZEVycm9yID0gZTtcbiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyO1xuICBpZiAocmVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgIHJldHVybjtcbiAgfVxuICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIGUpO1xuICBpZiAoSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIocmVhZGVyKSkge1xuICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVhZFJlcXVlc3QpIHtcbiAgICByZWFkUmVxdWVzdC5fZXJyb3JTdGVwcyhlKTtcbiAgIH0pO1xuICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTtcbiAgfSBlbHNlIHtcbiAgIHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZWFkSW50b1JlcXVlc3QpIHtcbiAgICByZWFkSW50b1JlcXVlc3QuX2Vycm9yU3RlcHMoZSk7XG4gICB9KTtcbiAgIHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpO1xuICB9XG4gfVxuIGZ1bmN0aW9uIHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMShuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLlwiICsgbmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbVwiKTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFF1ZXVpbmdTdHJhdGVneUluaXQoaW5pdCwgY29udGV4dCkge1xuICBhc3NlcnREaWN0aW9uYXJ5KGluaXQsIGNvbnRleHQpO1xuICB2YXIgaGlnaFdhdGVyTWFyayA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oaWdoV2F0ZXJNYXJrO1xuICBhc3NlcnRSZXF1aXJlZEZpZWxkKGhpZ2hXYXRlck1hcmssICdoaWdoV2F0ZXJNYXJrJywgJ1F1ZXVpbmdTdHJhdGVneUluaXQnKTtcbiAgcmV0dXJuIHsgaGlnaFdhdGVyTWFyazogY29udmVydFVucmVzdHJpY3RlZERvdWJsZShoaWdoV2F0ZXJNYXJrKSB9O1xuIH1cbiB2YXIgYnl0ZUxlbmd0aFNpemVGdW5jdGlvbiA9IGZ1bmN0aW9uIHNpemUoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLmJ5dGVMZW5ndGg7XG4gfTtcbiB2YXIgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneShvcHRpb25zKSB7XG4gICBhc3NlcnRSZXF1aXJlZEFyZ3VtZW50KG9wdGlvbnMsIDEsICdCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5Jyk7XG4gICBvcHRpb25zID0gY29udmVydFF1ZXVpbmdTdHJhdGVneUluaXQob3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuICAgdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmsgPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLCBcImhpZ2hXYXRlck1hcmtcIiwge1xuICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFJc0J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kodGhpcykpIHtcbiAgICAgdGhyb3cgYnl0ZUxlbmd0aEJyYW5kQ2hlY2tFeGNlcHRpb24oJ2hpZ2hXYXRlck1hcmsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSh0aGlzKSkge1xuICAgICB0aHJvdyBieXRlTGVuZ3RoQnJhbmRDaGVja0V4Y2VwdGlvbignc2l6ZScpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZUxlbmd0aFNpemVGdW5jdGlvbjtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3k7XG4gfSgpO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLCB7XG4gIGhpZ2hXYXRlck1hcms6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICBzaXplOiB7IGVudW1lcmFibGU6IHRydWUgfVxuIH0pO1xuIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcbiAgIHZhbHVlOiAnQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneScsXG4gICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIGJ5dGVMZW5ndGhCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneVwiKTtcbiB9XG4gZnVuY3Rpb24gSXNCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5KHgpIHtcbiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gdmFyIGNvdW50U2l6ZUZ1bmN0aW9uID0gZnVuY3Rpb24gc2l6ZSgpIHtcbiAgcmV0dXJuIDE7XG4gfTtcbiB2YXIgQ291bnRRdWV1aW5nU3RyYXRlZ3kgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvdW50UXVldWluZ1N0cmF0ZWd5KG9wdGlvbnMpIHtcbiAgIGFzc2VydFJlcXVpcmVkQXJndW1lbnQob3B0aW9ucywgMSwgJ0NvdW50UXVldWluZ1N0cmF0ZWd5Jyk7XG4gICBvcHRpb25zID0gY29udmVydFF1ZXVpbmdTdHJhdGVneUluaXQob3B0aW9ucywgJ0ZpcnN0IHBhcmFtZXRlcicpO1xuICAgdGhpcy5fY291bnRRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsIFwiaGlnaFdhdGVyTWFya1wiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzQ291bnRRdWV1aW5nU3RyYXRlZ3kodGhpcykpIHtcbiAgICAgdGhyb3cgY291bnRCcmFuZENoZWNrRXhjZXB0aW9uKCdoaWdoV2F0ZXJNYXJrJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb3VudFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcms7XG4gICB9LFxuICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzQ291bnRRdWV1aW5nU3RyYXRlZ3kodGhpcykpIHtcbiAgICAgdGhyb3cgY291bnRCcmFuZENoZWNrRXhjZXB0aW9uKCdzaXplJyk7XG4gICAgfVxuICAgIHJldHVybiBjb3VudFNpemVGdW5jdGlvbjtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIENvdW50UXVldWluZ1N0cmF0ZWd5O1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsIHtcbiAgaGlnaFdhdGVyTWFyazogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHNpemU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG4gfSk7XG4gaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvdW50UXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcbiAgIHZhbHVlOiAnQ291bnRRdWV1aW5nU3RyYXRlZ3knLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBjb3VudEJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIkNvdW50UXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgQ291bnRRdWV1aW5nU3RyYXRlZ3lcIik7XG4gfVxuIGZ1bmN0aW9uIElzQ291bnRRdWV1aW5nU3RyYXRlZ3koeCkge1xuICBpZiAoIXR5cGVJc09iamVjdCh4KSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfY291bnRRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrJykpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFRyYW5zZm9ybWVyKG9yaWdpbmFsLCBjb250ZXh0KSB7XG4gIGFzc2VydERpY3Rpb25hcnkob3JpZ2luYWwsIGNvbnRleHQpO1xuICB2YXIgZmx1c2ggPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwuZmx1c2g7XG4gIHZhciByZWFkYWJsZVR5cGUgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwucmVhZGFibGVUeXBlO1xuICB2YXIgc3RhcnQgPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwuc3RhcnQ7XG4gIHZhciB0cmFuc2Zvcm0gPSBvcmlnaW5hbCA9PT0gbnVsbCB8fCBvcmlnaW5hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWwudHJhbnNmb3JtO1xuICB2YXIgd3JpdGFibGVUeXBlID0gb3JpZ2luYWwgPT09IG51bGwgfHwgb3JpZ2luYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsLndyaXRhYmxlVHlwZTtcbiAgcmV0dXJuIHtcbiAgIGZsdXNoOiBmbHVzaCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY29udmVydFRyYW5zZm9ybWVyRmx1c2hDYWxsYmFjayhmbHVzaCwgb3JpZ2luYWwsIGNvbnRleHQgKyBcIiBoYXMgbWVtYmVyICdmbHVzaCcgdGhhdFwiKSxcbiAgIHJlYWRhYmxlVHlwZTogcmVhZGFibGVUeXBlLFxuICAgc3RhcnQ6IHN0YXJ0ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjb252ZXJ0VHJhbnNmb3JtZXJTdGFydENhbGxiYWNrKHN0YXJ0LCBvcmlnaW5hbCwgY29udGV4dCArIFwiIGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0XCIpLFxuICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvbnZlcnRUcmFuc2Zvcm1lclRyYW5zZm9ybUNhbGxiYWNrKHRyYW5zZm9ybSwgb3JpZ2luYWwsIGNvbnRleHQgKyBcIiBoYXMgbWVtYmVyICd0cmFuc2Zvcm0nIHRoYXRcIiksXG4gICB3cml0YWJsZVR5cGU6IHdyaXRhYmxlVHlwZVxuICB9O1xuIH1cbiBmdW5jdGlvbiBjb252ZXJ0VHJhbnNmb3JtZXJGbHVzaENhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgcmV0dXJuIHByb21pc2VDYWxsKGZuLCBvcmlnaW5hbCwgW2NvbnRyb2xsZXJdKTtcbiAgfTtcbiB9XG4gZnVuY3Rpb24gY29udmVydFRyYW5zZm9ybWVyU3RhcnRDYWxsYmFjayhmbiwgb3JpZ2luYWwsIGNvbnRleHQpIHtcbiAgYXNzZXJ0RnVuY3Rpb24oZm4sIGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgIHJldHVybiByZWZsZWN0Q2FsbChmbiwgb3JpZ2luYWwsIFtjb250cm9sbGVyXSk7XG4gIH07XG4gfVxuIGZ1bmN0aW9uIGNvbnZlcnRUcmFuc2Zvcm1lclRyYW5zZm9ybUNhbGxiYWNrKGZuLCBvcmlnaW5hbCwgY29udGV4dCkge1xuICBhc3NlcnRGdW5jdGlvbihmbiwgY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiAoY2h1bmssIGNvbnRyb2xsZXIpIHtcbiAgIHJldHVybiBwcm9taXNlQ2FsbChmbiwgb3JpZ2luYWwsIFtcbiAgICBjaHVuayxcbiAgICBjb250cm9sbGVyXG4gICBdKTtcbiAgfTtcbiB9XG4gdmFyIFRyYW5zZm9ybVN0cmVhbSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtKHJhd1RyYW5zZm9ybWVyLCByYXdXcml0YWJsZVN0cmF0ZWd5LCByYXdSZWFkYWJsZVN0cmF0ZWd5KSB7XG4gICBpZiAocmF3VHJhbnNmb3JtZXIgPT09IHZvaWQgMCkge1xuICAgIHJhd1RyYW5zZm9ybWVyID0ge307XG4gICB9XG4gICBpZiAocmF3V3JpdGFibGVTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgcmF3V3JpdGFibGVTdHJhdGVneSA9IHt9O1xuICAgfVxuICAgaWYgKHJhd1JlYWRhYmxlU3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIHJhd1JlYWRhYmxlU3RyYXRlZ3kgPSB7fTtcbiAgIH1cbiAgIGlmIChyYXdUcmFuc2Zvcm1lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmF3VHJhbnNmb3JtZXIgPSBudWxsO1xuICAgfVxuICAgdmFyIHdyaXRhYmxlU3RyYXRlZ3kgPSBjb252ZXJ0UXVldWluZ1N0cmF0ZWd5KHJhd1dyaXRhYmxlU3RyYXRlZ3ksICdTZWNvbmQgcGFyYW1ldGVyJyk7XG4gICB2YXIgcmVhZGFibGVTdHJhdGVneSA9IGNvbnZlcnRRdWV1aW5nU3RyYXRlZ3kocmF3UmVhZGFibGVTdHJhdGVneSwgJ1RoaXJkIHBhcmFtZXRlcicpO1xuICAgdmFyIHRyYW5zZm9ybWVyID0gY29udmVydFRyYW5zZm9ybWVyKHJhd1RyYW5zZm9ybWVyLCAnRmlyc3QgcGFyYW1ldGVyJyk7XG4gICBpZiAodHJhbnNmb3JtZXIucmVhZGFibGVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCByZWFkYWJsZVR5cGUgc3BlY2lmaWVkJyk7XG4gICB9XG4gICBpZiAodHJhbnNmb3JtZXIud3JpdGFibGVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB3cml0YWJsZVR5cGUgc3BlY2lmaWVkJyk7XG4gICB9XG4gICB2YXIgcmVhZGFibGVIaWdoV2F0ZXJNYXJrID0gRXh0cmFjdEhpZ2hXYXRlck1hcmsocmVhZGFibGVTdHJhdGVneSwgMCk7XG4gICB2YXIgcmVhZGFibGVTaXplQWxnb3JpdGhtID0gRXh0cmFjdFNpemVBbGdvcml0aG0ocmVhZGFibGVTdHJhdGVneSk7XG4gICB2YXIgd3JpdGFibGVIaWdoV2F0ZXJNYXJrID0gRXh0cmFjdEhpZ2hXYXRlck1hcmsod3JpdGFibGVTdHJhdGVneSwgMSk7XG4gICB2YXIgd3JpdGFibGVTaXplQWxnb3JpdGhtID0gRXh0cmFjdFNpemVBbGdvcml0aG0od3JpdGFibGVTdHJhdGVneSk7XG4gICB2YXIgc3RhcnRQcm9taXNlX3Jlc29sdmU7XG4gICB2YXIgc3RhcnRQcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHN0YXJ0UHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgIH0pO1xuICAgSW5pdGlhbGl6ZVRyYW5zZm9ybVN0cmVhbSh0aGlzLCBzdGFydFByb21pc2UsIHdyaXRhYmxlSGlnaFdhdGVyTWFyaywgd3JpdGFibGVTaXplQWxnb3JpdGhtLCByZWFkYWJsZUhpZ2hXYXRlck1hcmssIHJlYWRhYmxlU2l6ZUFsZ29yaXRobSk7XG4gICBTZXRVcFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVRyYW5zZm9ybWVyKHRoaXMsIHRyYW5zZm9ybWVyKTtcbiAgIGlmICh0cmFuc2Zvcm1lci5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnRQcm9taXNlX3Jlc29sdmUodHJhbnNmb3JtZXIuc3RhcnQodGhpcy5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcikpO1xuICAgfSBlbHNlIHtcbiAgICBzdGFydFByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgfVxuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLCBcInJlYWRhYmxlXCIsIHtcbiAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW0odGhpcykpIHtcbiAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZGFibGUnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlO1xuICAgfSxcbiAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZSwgXCJ3cml0YWJsZVwiLCB7XG4gICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUlzVHJhbnNmb3JtU3RyZWFtKHRoaXMpKSB7XG4gICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24oJ3dyaXRhYmxlJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZTtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbTtcbiB9KCk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZSwge1xuICByZWFkYWJsZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIHdyaXRhYmxlOiB7IGVudW1lcmFibGU6IHRydWUgfVxuIH0pO1xuIGlmICh0eXBlb2YgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywge1xuICAgdmFsdWU6ICdUcmFuc2Zvcm1TdHJlYW0nLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJbml0aWFsaXplVHJhbnNmb3JtU3RyZWFtKHN0cmVhbSwgc3RhcnRQcm9taXNlLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSwgcmVhZGFibGVIaWdoV2F0ZXJNYXJrLCByZWFkYWJsZVNpemVBbGdvcml0aG0pIHtcbiAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7XG4gICByZXR1cm4gc3RhcnRQcm9taXNlO1xuICB9XG4gIGZ1bmN0aW9uIHdyaXRlQWxnb3JpdGhtKGNodW5rKSB7XG4gICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtXcml0ZUFsZ29yaXRobShzdHJlYW0sIGNodW5rKTtcbiAgfVxuICBmdW5jdGlvbiBhYm9ydEFsZ29yaXRobShyZWFzb24pIHtcbiAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Fib3J0QWxnb3JpdGhtKHN0cmVhbSwgcmVhc29uKTtcbiAgfVxuICBmdW5jdGlvbiBjbG9zZUFsZ29yaXRobSgpIHtcbiAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Nsb3NlQWxnb3JpdGhtKHN0cmVhbSk7XG4gIH1cbiAgc3RyZWFtLl93cml0YWJsZSA9IENyZWF0ZVdyaXRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSk7XG4gIGZ1bmN0aW9uIHB1bGxBbGdvcml0aG0oKSB7XG4gICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNvdXJjZVB1bGxBbGdvcml0aG0oc3RyZWFtKTtcbiAgfVxuICBmdW5jdGlvbiBjYW5jZWxBbGdvcml0aG0ocmVhc29uKSB7XG4gICBUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlKHN0cmVhbSwgcmVhc29uKTtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH1cbiAgc3RyZWFtLl9yZWFkYWJsZSA9IENyZWF0ZVJlYWRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0sIHJlYWRhYmxlSGlnaFdhdGVyTWFyaywgcmVhZGFibGVTaXplQWxnb3JpdGhtKTtcbiAgc3RyZWFtLl9iYWNrcHJlc3N1cmUgPSB1bmRlZmluZWQ7XG4gIHN0cmVhbS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7XG4gIFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZShzdHJlYW0sIHRydWUpO1xuICBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gfVxuIGZ1bmN0aW9uIElzVHJhbnNmb3JtU3RyZWFtKHgpIHtcbiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXInKSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1FcnJvcihzdHJlYW0sIGUpIHtcbiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKHN0cmVhbS5fcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgZSk7XG4gIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCBlKTtcbiB9XG4gZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRXJyb3JXcml0YWJsZUFuZFVuYmxvY2tXcml0ZShzdHJlYW0sIGUpIHtcbiAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoc3RyZWFtLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKTtcbiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWQoc3RyZWFtLl93cml0YWJsZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLCBlKTtcbiAgaWYgKHN0cmVhbS5fYmFja3ByZXNzdXJlKSB7XG4gICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCBmYWxzZSk7XG4gIH1cbiB9XG4gZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKSB7XG4gIGlmIChzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UgIT09IHVuZGVmaW5lZCkge1xuICAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUoKTtcbiAgfVxuICBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UgPSBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gIH0pO1xuICBzdHJlYW0uX2JhY2twcmVzc3VyZSA9IGJhY2twcmVzc3VyZTtcbiB9XG4gdmFyIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcigpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgY29uc3RydWN0b3InKTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLCBcImRlc2lyZWRTaXplXCIsIHtcbiAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuICAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2Rlc2lyZWRTaXplJyk7XG4gICAgfVxuICAgIHZhciByZWFkYWJsZUNvbnRyb2xsZXIgPSB0aGlzLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyO1xuICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUocmVhZGFibGVDb250cm9sbGVyKTtcbiAgIH0sXG4gICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgIGlmIChjaHVuayA9PT0gdm9pZCAwKSB7XG4gICAgY2h1bmsgPSB1bmRlZmluZWQ7XG4gICB9XG4gICBpZiAoIUlzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykpIHtcbiAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2VucXVldWUnKTtcbiAgIH1cbiAgIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZSh0aGlzLCBjaHVuayk7XG4gIH07XG4gIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgIGlmIChyZWFzb24gPT09IHZvaWQgMCkge1xuICAgIHJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgIH1cbiAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZXJyb3InKTtcbiAgIH1cbiAgIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IodGhpcywgcmVhc29uKTtcbiAgfTtcbiAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgIGlmICghSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSkge1xuICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbigndGVybWluYXRlJyk7XG4gICB9XG4gICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclRlcm1pbmF0ZSh0aGlzKTtcbiAgfTtcbiAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuIH0oKTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgZW5xdWV1ZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gIGVycm9yOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgdGVybWluYXRlOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgZGVzaXJlZFNpemU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG4gfSk7XG4gaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsIHtcbiAgIHZhbHVlOiAnVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXInLFxuICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBJc1RyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHgpIHtcbiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHtcbiAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW0nKSkge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xuIH1cbiBmdW5jdGlvbiBTZXRVcFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgdHJhbnNmb3JtQWxnb3JpdGhtLCBmbHVzaEFsZ29yaXRobSkge1xuICBjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtID0gc3RyZWFtO1xuICBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICBjb250cm9sbGVyLl90cmFuc2Zvcm1BbGdvcml0aG0gPSB0cmFuc2Zvcm1BbGdvcml0aG07XG4gIGNvbnRyb2xsZXIuX2ZsdXNoQWxnb3JpdGhtID0gZmx1c2hBbGdvcml0aG07XG4gfVxuIGZ1bmN0aW9uIFNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVHJhbnNmb3JtZXIoc3RyZWFtLCB0cmFuc2Zvcm1lcikge1xuICB2YXIgY29udHJvbGxlciA9IE9iamVjdC5jcmVhdGUoVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlKTtcbiAgdmFyIHRyYW5zZm9ybUFsZ29yaXRobSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgdHJ5IHtcbiAgICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspO1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gICB9IGNhdGNoICh0cmFuc2Zvcm1SZXN1bHRFKSB7XG4gICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgodHJhbnNmb3JtUmVzdWx0RSk7XG4gICB9XG4gIH07XG4gIHZhciBmbHVzaEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7XG4gIH07XG4gIGlmICh0cmFuc2Zvcm1lci50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgdHJhbnNmb3JtQWxnb3JpdGhtID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyLnRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcik7XG4gICB9O1xuICB9XG4gIGlmICh0cmFuc2Zvcm1lci5mbHVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICBmbHVzaEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZXIuZmx1c2goY29udHJvbGxlcik7XG4gICB9O1xuICB9XG4gIFNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCB0cmFuc2Zvcm1BbGdvcml0aG0sIGZsdXNoQWxnb3JpdGhtKTtcbiB9XG4gZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikge1xuICBjb250cm9sbGVyLl90cmFuc2Zvcm1BbGdvcml0aG0gPSB1bmRlZmluZWQ7XG4gIGNvbnRyb2xsZXIuX2ZsdXNoQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xuIH1cbiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspIHtcbiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW07XG4gIHZhciByZWFkYWJsZUNvbnRyb2xsZXIgPSBzdHJlYW0uX3JlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI7XG4gIGlmICghUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlKHJlYWRhYmxlQ29udHJvbGxlcikpIHtcbiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlIHNpZGUgaXMgbm90IGluIGEgc3RhdGUgdGhhdCBwZXJtaXRzIGVucXVldWUnKTtcbiAgfVxuICB0cnkge1xuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUocmVhZGFibGVDb250cm9sbGVyLCBjaHVuayk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgIFRyYW5zZm9ybVN0cmVhbUVycm9yV3JpdGFibGVBbmRVbmJsb2NrV3JpdGUoc3RyZWFtLCBlKTtcbiAgIHRocm93IHN0cmVhbS5fcmVhZGFibGUuX3N0b3JlZEVycm9yO1xuICB9XG4gIHZhciBiYWNrcHJlc3N1cmUgPSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVySGFzQmFja3ByZXNzdXJlKHJlYWRhYmxlQ29udHJvbGxlcik7XG4gIGlmIChiYWNrcHJlc3N1cmUgIT09IHN0cmVhbS5fYmFja3ByZXNzdXJlKSB7XG4gICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCB0cnVlKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHtcbiAgVHJhbnNmb3JtU3RyZWFtRXJyb3IoY29udHJvbGxlci5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbSwgZSk7XG4gfVxuIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyUGVyZm9ybVRyYW5zZm9ybShjb250cm9sbGVyLCBjaHVuaykge1xuICB2YXIgdHJhbnNmb3JtUHJvbWlzZSA9IGNvbnRyb2xsZXIuX3RyYW5zZm9ybUFsZ29yaXRobShjaHVuayk7XG4gIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aCh0cmFuc2Zvcm1Qcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChyKSB7XG4gICBUcmFuc2Zvcm1TdHJlYW1FcnJvcihjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLCByKTtcbiAgIHRocm93IHI7XG4gIH0pO1xuIH1cbiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclRlcm1pbmF0ZShjb250cm9sbGVyKSB7XG4gIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtO1xuICB2YXIgcmVhZGFibGVDb250cm9sbGVyID0gc3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyO1xuICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UocmVhZGFibGVDb250cm9sbGVyKTtcbiAgdmFyIGVycm9yID0gbmV3IFR5cGVFcnJvcignVHJhbnNmb3JtU3RyZWFtIHRlcm1pbmF0ZWQnKTtcbiAgVHJhbnNmb3JtU3RyZWFtRXJyb3JXcml0YWJsZUFuZFVuYmxvY2tXcml0ZShzdHJlYW0sIGVycm9yKTtcbiB9XG4gZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtXcml0ZUFsZ29yaXRobShzdHJlYW0sIGNodW5rKSB7XG4gIHZhciBjb250cm9sbGVyID0gc3RyZWFtLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyO1xuICBpZiAoc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHtcbiAgIHZhciBiYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlID0gc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlO1xuICAgcmV0dXJuIHRyYW5zZm9ybVByb21pc2VXaXRoKGJhY2twcmVzc3VyZUNoYW5nZVByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd3JpdGFibGUgPSBzdHJlYW0uX3dyaXRhYmxlO1xuICAgIHZhciBzdGF0ZSA9IHdyaXRhYmxlLl9zdGF0ZTtcbiAgICBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHtcbiAgICAgdGhyb3cgd3JpdGFibGUuX3N0b3JlZEVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJQZXJmb3JtVHJhbnNmb3JtKGNvbnRyb2xsZXIsIGNodW5rKTtcbiAgIH0pO1xuICB9XG4gIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm0oY29udHJvbGxlciwgY2h1bmspO1xuIH1cbiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Fib3J0QWxnb3JpdGhtKHN0cmVhbSwgcmVhc29uKSB7XG4gIFRyYW5zZm9ybVN0cmVhbUVycm9yKHN0cmVhbSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTtcbiB9XG4gZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtDbG9zZUFsZ29yaXRobShzdHJlYW0pIHtcbiAgdmFyIHJlYWRhYmxlID0gc3RyZWFtLl9yZWFkYWJsZTtcbiAgdmFyIGNvbnRyb2xsZXIgPSBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI7XG4gIHZhciBmbHVzaFByb21pc2UgPSBjb250cm9sbGVyLl9mbHVzaEFsZ29yaXRobSgpO1xuICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTtcbiAgcmV0dXJuIHRyYW5zZm9ybVByb21pc2VXaXRoKGZsdXNoUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgaWYgKHJlYWRhYmxlLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7XG4gICAgdGhyb3cgcmVhZGFibGUuX3N0b3JlZEVycm9yO1xuICAgfVxuICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKHJlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpO1xuICB9LCBmdW5jdGlvbiAocikge1xuICAgVHJhbnNmb3JtU3RyZWFtRXJyb3Ioc3RyZWFtLCByKTtcbiAgIHRocm93IHJlYWRhYmxlLl9zdG9yZWRFcnJvcjtcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTb3VyY2VQdWxsQWxnb3JpdGhtKHN0cmVhbSkge1xuICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCBmYWxzZSk7XG4gIHJldHVybiBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2U7XG4gfVxuIGZ1bmN0aW9uIGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLlwiICsgbmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiKTtcbiB9XG4gZnVuY3Rpb24gc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZS5cIiArIG5hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgVHJhbnNmb3JtU3RyZWFtXCIpO1xuIH1cbiBleHBvcnRzLkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kgPSBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5O1xuIGV4cG9ydHMuQ291bnRRdWV1aW5nU3RyYXRlZ3kgPSBDb3VudFF1ZXVpbmdTdHJhdGVneTtcbiBleHBvcnRzLlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIgPSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyO1xuIGV4cG9ydHMuUmVhZGFibGVTdHJlYW0gPSBSZWFkYWJsZVN0cmVhbTtcbiBleHBvcnRzLlJlYWRhYmxlU3RyZWFtQllPQlJlYWRlciA9IFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcjtcbiBleHBvcnRzLlJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QgPSBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0O1xuIGV4cG9ydHMuUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI7XG4gZXhwb3J0cy5SZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIgPSBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXI7XG4gZXhwb3J0cy5UcmFuc2Zvcm1TdHJlYW0gPSBUcmFuc2Zvcm1TdHJlYW07XG4gZXhwb3J0cy5UcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuIGV4cG9ydHMuV3JpdGFibGVTdHJlYW0gPSBXcml0YWJsZVN0cmVhbTtcbiBleHBvcnRzLldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuIGV4cG9ydHMuV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59KSk7XG5cbi8qKiovIH0pLFxuLyogMTEzICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuZ2V0RG9jdW1lbnQgPSBnZXREb2N1bWVudDtcbmV4cG9ydHMuc2V0UERGTmV0d29ya1N0cmVhbUZhY3RvcnkgPSBzZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeTtcbmV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMuUERGV29ya2VyID0gZXhwb3J0cy5QREZQYWdlUHJveHkgPSBleHBvcnRzLlBERkRvY3VtZW50UHJveHkgPSBleHBvcnRzLlBERkRhdGFSYW5nZVRyYW5zcG9ydCA9IGV4cG9ydHMuTG9vcGJhY2tQb3J0ID0gZXhwb3J0cy5EZWZhdWx0Q01hcFJlYWRlckZhY3RvcnkgPSBleHBvcnRzLkRlZmF1bHRDYW52YXNGYWN0b3J5ID0gZXhwb3J0cy5idWlsZCA9IHZvaWQgMDtcblxudmFyIF9yZWdlbmVyYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193X3BkZmpzX3JlcXVpcmVfXygyKSk7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbnZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbnZhciBfZm9udF9sb2FkZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExNCk7XG5cbnZhciBfbm9kZV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTE1KTtcblxudmFyIF9hbm5vdGF0aW9uX3N0b3JhZ2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExNik7XG5cbnZhciBfYXBpX2NvbXBhdGliaWxpdHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExNyk7XG5cbnZhciBfY2FudmFzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTgpO1xuXG52YXIgX3dvcmtlcl9vcHRpb25zID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjApO1xuXG52YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYpO1xuXG52YXIgX21lc3NhZ2VfaGFuZGxlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIxKTtcblxudmFyIF9tZXRhZGF0YSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIyKTtcblxudmFyIF9vcHRpb25hbF9jb250ZW50X2NvbmZpZyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIzKTtcblxudmFyIF90cmFuc3BvcnRfc3RyZWFtID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgdGhyb3cgX2UyOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UzKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMzsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRSA9IDY1NTM2O1xudmFyIFJFTkRFUklOR19DQU5DRUxMRURfVElNRU9VVCA9IDEwMDtcbnZhciBEZWZhdWx0Q2FudmFzRmFjdG9yeSA9IF9pc19ub2RlLmlzTm9kZUpTID8gX25vZGVfdXRpbHMuTm9kZUNhbnZhc0ZhY3RvcnkgOiBfZGlzcGxheV91dGlscy5ET01DYW52YXNGYWN0b3J5O1xuZXhwb3J0cy5EZWZhdWx0Q2FudmFzRmFjdG9yeSA9IERlZmF1bHRDYW52YXNGYWN0b3J5O1xudmFyIERlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSA9IF9pc19ub2RlLmlzTm9kZUpTID8gX25vZGVfdXRpbHMuTm9kZUNNYXBSZWFkZXJGYWN0b3J5IDogX2Rpc3BsYXlfdXRpbHMuRE9NQ01hcFJlYWRlckZhY3Rvcnk7XG5leHBvcnRzLkRlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSA9IERlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeTtcbnZhciBjcmVhdGVQREZOZXR3b3JrU3RyZWFtO1xuXG5mdW5jdGlvbiBzZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeShwZGZOZXR3b3JrU3RyZWFtRmFjdG9yeSkge1xuICBjcmVhdGVQREZOZXR3b3JrU3RyZWFtID0gcGRmTmV0d29ya1N0cmVhbUZhY3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50KHNyYykge1xuICB2YXIgdGFzayA9IG5ldyBQREZEb2N1bWVudExvYWRpbmdUYXNrKCk7XG4gIHZhciBzb3VyY2U7XG5cbiAgaWYgKHR5cGVvZiBzcmMgPT09IFwic3RyaW5nXCIgfHwgc3JjIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgc291cmNlID0ge1xuICAgICAgdXJsOiBzcmNcbiAgICB9O1xuICB9IGVsc2UgaWYgKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKShzcmMpKSB7XG4gICAgc291cmNlID0ge1xuICAgICAgZGF0YTogc3JjXG4gICAgfTtcbiAgfSBlbHNlIGlmIChzcmMgaW5zdGFuY2VvZiBQREZEYXRhUmFuZ2VUcmFuc3BvcnQpIHtcbiAgICBzb3VyY2UgPSB7XG4gICAgICByYW5nZTogc3JjXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoX3R5cGVvZihzcmMpICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtZXRlciBpbiBnZXREb2N1bWVudCwgXCIgKyBcIm5lZWQgZWl0aGVyIHN0cmluZywgVVJMLCBVaW50OEFycmF5LCBvciBwYXJhbWV0ZXIgb2JqZWN0LlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXNyYy51cmwgJiYgIXNyYy5kYXRhICYmICFzcmMucmFuZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW1ldGVyIG9iamVjdDogbmVlZCBlaXRoZXIgLmRhdGEsIC5yYW5nZSBvciAudXJsXCIpO1xuICAgIH1cblxuICAgIHNvdXJjZSA9IHNyYztcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcmFuZ2VUcmFuc3BvcnQgPSBudWxsLFxuICAgICAgd29ya2VyID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJhbXNba2V5XSA9IG5ldyBVUkwodmFsdWUsIHdpbmRvdy5sb2NhdGlvbikuaHJlZjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJDYW5ub3QgY3JlYXRlIHZhbGlkIFVSTDogXFxcIlwiLmNvbmNhdChleCwgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgUERGIHVybCBkYXRhOiBcIiArIFwiZWl0aGVyIHN0cmluZyBvciBVUkwtb2JqZWN0IGlzIGV4cGVjdGVkIGluIHRoZSB1cmwgcHJvcGVydHkuXCIpO1xuXG4gICAgICBjYXNlIFwicmFuZ2VcIjpcbiAgICAgICAgcmFuZ2VUcmFuc3BvcnQgPSB2YWx1ZTtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgICAgd29ya2VyID0gdmFsdWU7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIFwiZGF0YVwiOlxuICAgICAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMgJiYgdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKHZhbHVlKSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhaXNOYU4odmFsdWUubGVuZ3RoKSkge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKSh2YWx1ZSkpIHtcbiAgICAgICAgICBwYXJhbXNba2V5XSA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFBERiBiaW5hcnkgZGF0YTogZWl0aGVyIHR5cGVkIGFycmF5LCBcIiArIFwic3RyaW5nLCBvciBhcnJheS1saWtlIG9iamVjdCBpcyBleHBlY3RlZCBpbiB0aGUgZGF0YSBwcm9wZXJ0eS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcGFyYW1zLnJhbmdlQ2h1bmtTaXplID0gcGFyYW1zLnJhbmdlQ2h1bmtTaXplIHx8IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRTtcbiAgcGFyYW1zLkNNYXBSZWFkZXJGYWN0b3J5ID0gcGFyYW1zLkNNYXBSZWFkZXJGYWN0b3J5IHx8IERlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeTtcbiAgcGFyYW1zLmlnbm9yZUVycm9ycyA9IHBhcmFtcy5zdG9wQXRFcnJvcnMgIT09IHRydWU7XG4gIHBhcmFtcy5mb250RXh0cmFQcm9wZXJ0aWVzID0gcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgPT09IHRydWU7XG4gIHBhcmFtcy5wZGZCdWcgPSBwYXJhbXMucGRmQnVnID09PSB0cnVlO1xuICBwYXJhbXMuZW5hYmxlWGZhID0gcGFyYW1zLmVuYWJsZVhmYSA9PT0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIHBhcmFtcy5kb2NCYXNlVXJsICE9PSBcInN0cmluZ1wiIHx8ICgwLCBfZGlzcGxheV91dGlscy5pc0RhdGFTY2hlbWUpKHBhcmFtcy5kb2NCYXNlVXJsKSkge1xuICAgIHBhcmFtcy5kb2NCYXNlVXJsID0gbnVsbDtcbiAgfVxuXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYXJhbXMubWF4SW1hZ2VTaXplKSkge1xuICAgIHBhcmFtcy5tYXhJbWFnZVNpemUgPSAtMTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGFyYW1zLmlzRXZhbFN1cHBvcnRlZCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwYXJhbXMuaXNFdmFsU3VwcG9ydGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGFyYW1zLmRpc2FibGVGb250RmFjZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwYXJhbXMuZGlzYWJsZUZvbnRGYWNlID0gX2FwaV9jb21wYXRpYmlsaXR5LmFwaUNvbXBhdGliaWxpdHlQYXJhbXMuZGlzYWJsZUZvbnRGYWNlIHx8IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXJhbXMub3duZXJEb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHBhcmFtcy5vd25lckRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGFyYW1zLmRpc2FibGVSYW5nZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwYXJhbXMuZGlzYWJsZVJhbmdlID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlU3RyZWFtICE9PSBcImJvb2xlYW5cIikge1xuICAgIHBhcmFtcy5kaXNhYmxlU3RyZWFtID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlQXV0b0ZldGNoICE9PSBcImJvb2xlYW5cIikge1xuICAgIHBhcmFtcy5kaXNhYmxlQXV0b0ZldGNoID0gZmFsc2U7XG4gIH1cblxuICAoMCwgX3V0aWwuc2V0VmVyYm9zaXR5TGV2ZWwpKHBhcmFtcy52ZXJib3NpdHkpO1xuXG4gIGlmICghd29ya2VyKSB7XG4gICAgdmFyIHdvcmtlclBhcmFtcyA9IHtcbiAgICAgIHZlcmJvc2l0eTogcGFyYW1zLnZlcmJvc2l0eSxcbiAgICAgIHBvcnQ6IF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnRcbiAgICB9O1xuICAgIHdvcmtlciA9IHdvcmtlclBhcmFtcy5wb3J0ID8gUERGV29ya2VyLmZyb21Qb3J0KHdvcmtlclBhcmFtcykgOiBuZXcgUERGV29ya2VyKHdvcmtlclBhcmFtcyk7XG4gICAgdGFzay5fd29ya2VyID0gd29ya2VyO1xuICB9XG5cbiAgdmFyIGRvY0lkID0gdGFzay5kb2NJZDtcbiAgd29ya2VyLnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRhc2suZGVzdHJveWVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkaW5nIGFib3J0ZWRcIik7XG4gICAgfVxuXG4gICAgdmFyIHdvcmtlcklkUHJvbWlzZSA9IF9mZXRjaERvY3VtZW50KHdvcmtlciwgcGFyYW1zLCByYW5nZVRyYW5zcG9ydCwgZG9jSWQpO1xuXG4gICAgdmFyIG5ldHdvcmtTdHJlYW1Qcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBuZXR3b3JrU3RyZWFtO1xuXG4gICAgICBpZiAocmFuZ2VUcmFuc3BvcnQpIHtcbiAgICAgICAgbmV0d29ya1N0cmVhbSA9IG5ldyBfdHJhbnNwb3J0X3N0cmVhbS5QREZEYXRhVHJhbnNwb3J0U3RyZWFtKHtcbiAgICAgICAgICBsZW5ndGg6IHBhcmFtcy5sZW5ndGgsXG4gICAgICAgICAgaW5pdGlhbERhdGE6IHBhcmFtcy5pbml0aWFsRGF0YSxcbiAgICAgICAgICBwcm9ncmVzc2l2ZURvbmU6IHBhcmFtcy5wcm9ncmVzc2l2ZURvbmUsXG4gICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWU6IHBhcmFtcy5jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSxcbiAgICAgICAgICBkaXNhYmxlUmFuZ2U6IHBhcmFtcy5kaXNhYmxlUmFuZ2UsXG4gICAgICAgICAgZGlzYWJsZVN0cmVhbTogcGFyYW1zLmRpc2FibGVTdHJlYW1cbiAgICAgICAgfSwgcmFuZ2VUcmFuc3BvcnQpO1xuICAgICAgfSBlbHNlIGlmICghcGFyYW1zLmRhdGEpIHtcbiAgICAgICAgbmV0d29ya1N0cmVhbSA9IGNyZWF0ZVBERk5ldHdvcmtTdHJlYW0oe1xuICAgICAgICAgIHVybDogcGFyYW1zLnVybCxcbiAgICAgICAgICBsZW5ndGg6IHBhcmFtcy5sZW5ndGgsXG4gICAgICAgICAgaHR0cEhlYWRlcnM6IHBhcmFtcy5odHRwSGVhZGVycyxcbiAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHBhcmFtcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgcmFuZ2VDaHVua1NpemU6IHBhcmFtcy5yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgICBkaXNhYmxlUmFuZ2U6IHBhcmFtcy5kaXNhYmxlUmFuZ2UsXG4gICAgICAgICAgZGlzYWJsZVN0cmVhbTogcGFyYW1zLmRpc2FibGVTdHJlYW1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUobmV0d29ya1N0cmVhbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt3b3JrZXJJZFByb21pc2UsIG5ldHdvcmtTdHJlYW1Qcm9taXNlXSkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgd29ya2VySWQgPSBfcmVmMlswXSxcbiAgICAgICAgICBuZXR3b3JrU3RyZWFtID0gX3JlZjJbMV07XG5cbiAgICAgIGlmICh0YXNrLmRlc3Ryb3llZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkaW5nIGFib3J0ZWRcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBtZXNzYWdlSGFuZGxlciA9IG5ldyBfbWVzc2FnZV9oYW5kbGVyLk1lc3NhZ2VIYW5kbGVyKGRvY0lkLCB3b3JrZXJJZCwgd29ya2VyLnBvcnQpO1xuICAgICAgbWVzc2FnZUhhbmRsZXIucG9zdE1lc3NhZ2VUcmFuc2ZlcnMgPSB3b3JrZXIucG9zdE1lc3NhZ2VUcmFuc2ZlcnM7XG4gICAgICB2YXIgdHJhbnNwb3J0ID0gbmV3IFdvcmtlclRyYW5zcG9ydChtZXNzYWdlSGFuZGxlciwgdGFzaywgbmV0d29ya1N0cmVhbSwgcGFyYW1zKTtcbiAgICAgIHRhc2suX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJSZWFkeVwiLCBudWxsKTtcbiAgICB9KTtcbiAgfSlbXCJjYXRjaFwiXSh0YXNrLl9jYXBhYmlsaXR5LnJlamVjdCk7XG4gIHJldHVybiB0YXNrO1xufVxuXG5mdW5jdGlvbiBfZmV0Y2hEb2N1bWVudCh3b3JrZXIsIHNvdXJjZSwgcGRmRGF0YVJhbmdlVHJhbnNwb3J0LCBkb2NJZCkge1xuICBpZiAod29ya2VyLmRlc3Ryb3llZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKSk7XG4gIH1cblxuICBpZiAocGRmRGF0YVJhbmdlVHJhbnNwb3J0KSB7XG4gICAgc291cmNlLmxlbmd0aCA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydC5sZW5ndGg7XG4gICAgc291cmNlLmluaXRpYWxEYXRhID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmluaXRpYWxEYXRhO1xuICAgIHNvdXJjZS5wcm9ncmVzc2l2ZURvbmUgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQucHJvZ3Jlc3NpdmVEb25lO1xuICAgIHNvdXJjZS5jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydC5jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTtcbiAgfVxuXG4gIHJldHVybiB3b3JrZXIubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0RG9jUmVxdWVzdFwiLCB7XG4gICAgZG9jSWQ6IGRvY0lkLFxuICAgIGFwaVZlcnNpb246ICcyLjkuMzU5JyxcbiAgICBzb3VyY2U6IHtcbiAgICAgIGRhdGE6IHNvdXJjZS5kYXRhLFxuICAgICAgdXJsOiBzb3VyY2UudXJsLFxuICAgICAgcGFzc3dvcmQ6IHNvdXJjZS5wYXNzd29yZCxcbiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IHNvdXJjZS5kaXNhYmxlQXV0b0ZldGNoLFxuICAgICAgcmFuZ2VDaHVua1NpemU6IHNvdXJjZS5yYW5nZUNodW5rU2l6ZSxcbiAgICAgIGxlbmd0aDogc291cmNlLmxlbmd0aFxuICAgIH0sXG4gICAgbWF4SW1hZ2VTaXplOiBzb3VyY2UubWF4SW1hZ2VTaXplLFxuICAgIGRpc2FibGVGb250RmFjZTogc291cmNlLmRpc2FibGVGb250RmFjZSxcbiAgICBwb3N0TWVzc2FnZVRyYW5zZmVyczogd29ya2VyLnBvc3RNZXNzYWdlVHJhbnNmZXJzLFxuICAgIGRvY0Jhc2VVcmw6IHNvdXJjZS5kb2NCYXNlVXJsLFxuICAgIGlnbm9yZUVycm9yczogc291cmNlLmlnbm9yZUVycm9ycyxcbiAgICBpc0V2YWxTdXBwb3J0ZWQ6IHNvdXJjZS5pc0V2YWxTdXBwb3J0ZWQsXG4gICAgZm9udEV4dHJhUHJvcGVydGllczogc291cmNlLmZvbnRFeHRyYVByb3BlcnRpZXMsXG4gICAgZW5hYmxlWGZhOiBzb3VyY2UuZW5hYmxlWGZhXG4gIH0pLnRoZW4oZnVuY3Rpb24gKHdvcmtlcklkKSB7XG4gICAgaWYgKHdvcmtlci5kZXN0cm95ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JrZXJJZDtcbiAgfSk7XG59XG5cbnZhciBQREZEb2N1bWVudExvYWRpbmdUYXNrID0gZnVuY3Rpb24gUERGRG9jdW1lbnRMb2FkaW5nVGFza0Nsb3N1cmUoKSB7XG4gIHZhciBuZXh0RG9jdW1lbnRJZCA9IDA7XG5cbiAgdmFyIFBERkRvY3VtZW50TG9hZGluZ1Rhc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERkRvY3VtZW50TG9hZGluZ1Rhc2soKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRG9jdW1lbnRMb2FkaW5nVGFzayk7XG5cbiAgICAgIHRoaXMuX2NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgIHRoaXMuZG9jSWQgPSBcImRcIiArIG5leHREb2N1bWVudElkKys7XG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vblBhc3N3b3JkID0gbnVsbDtcbiAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICB0aGlzLm9uVW5zdXBwb3J0ZWRGZWF0dXJlID0gbnVsbDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUERGRG9jdW1lbnRMb2FkaW5nVGFzaywgW3tcbiAgICAgIGtleTogXCJwcm9taXNlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdHJhbnNwb3J0RGVzdHJveWVkID0gIXRoaXMuX3RyYW5zcG9ydCA/IFByb21pc2UucmVzb2x2ZSgpIDogdGhpcy5fdHJhbnNwb3J0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydERlc3Ryb3llZC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fdHJhbnNwb3J0ID0gbnVsbDtcblxuICAgICAgICAgIGlmIChfdGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICBfdGhpcy5fd29ya2VyLmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgX3RoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUERGRG9jdW1lbnRMb2FkaW5nVGFzaztcbiAgfSgpO1xuXG4gIHJldHVybiBQREZEb2N1bWVudExvYWRpbmdUYXNrO1xufSgpO1xuXG52YXIgUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGRGF0YVJhbmdlVHJhbnNwb3J0KGxlbmd0aCwgaW5pdGlhbERhdGEpIHtcbiAgICB2YXIgcHJvZ3Jlc3NpdmVEb25lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICB2YXIgY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRGF0YVJhbmdlVHJhbnNwb3J0KTtcblxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMuaW5pdGlhbERhdGEgPSBpbml0aWFsRGF0YTtcbiAgICB0aGlzLnByb2dyZXNzaXZlRG9uZSA9IHByb2dyZXNzaXZlRG9uZTtcbiAgICB0aGlzLmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lID0gY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWU7XG4gICAgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9wcm9ncmVzc0xpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuX3Byb2dyZXNzaXZlUmVhZExpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuX3Byb2dyZXNzaXZlRG9uZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZEYXRhUmFuZ2VUcmFuc3BvcnQsIFt7XG4gICAga2V5OiBcImFkZFJhbmdlTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFByb2dyZXNzTGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgdGhpcy5fcHJvZ3Jlc3NMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFByb2dyZXNzaXZlUmVhZExpc3RlbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFByb2dyZXNzaXZlUmVhZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICB0aGlzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFByb2dyZXNzaXZlRG9uZUxpc3RlbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFByb2dyZXNzaXZlRG9uZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uRGF0YVJhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGF0YVJhbmdlKGJlZ2luLCBjaHVuaykge1xuICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX3JhbmdlTGlzdGVuZXJzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICBsaXN0ZW5lcihiZWdpbiwgY2h1bmspO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uRGF0YVByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGF0YVByb2dyZXNzKGxvYWRlZCwgdG90YWwpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfdGhpczIuX3Byb2dyZXNzTGlzdGVuZXJzKSxcbiAgICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgICAgICBsaXN0ZW5lcihsb2FkZWQsIHRvdGFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25EYXRhUHJvZ3Jlc3NpdmVSZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGF0YVByb2dyZXNzaXZlUmVhZChjaHVuaykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKF90aGlzMy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzKSxcbiAgICAgICAgICAgIF9zdGVwMztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgICBsaXN0ZW5lcihjaHVuayk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uRGF0YVByb2dyZXNzaXZlRG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkRhdGFQcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXM0Ll9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMpLFxuICAgICAgICAgICAgX3N0ZXA0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9zdGVwNC52YWx1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYW5zcG9ydFJlYWR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zcG9ydFJlYWR5KCkge1xuICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVxdWVzdERhdGFSYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0RGF0YVJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgUERGRGF0YVJhbmdlVHJhbnNwb3J0LnJlcXVlc3REYXRhUmFuZ2VcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFib3J0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge31cbiAgfV0pO1xuXG4gIHJldHVybiBQREZEYXRhUmFuZ2VUcmFuc3BvcnQ7XG59KCk7XG5cbmV4cG9ydHMuUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuXG52YXIgUERGRG9jdW1lbnRQcm94eSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBERkRvY3VtZW50UHJveHkocGRmSW5mbywgdHJhbnNwb3J0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkRvY3VtZW50UHJveHkpO1xuXG4gICAgdGhpcy5fcGRmSW5mbyA9IHBkZkluZm87XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBERkRvY3VtZW50UHJveHksIFt7XG4gICAga2V5OiBcImFubm90YXRpb25TdG9yYWdlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmFubm90YXRpb25TdG9yYWdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJudW1QYWdlc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BkZkluZm8ubnVtUGFnZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbmdlcnByaW50XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGRmSW5mby5maW5nZXJwcmludDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNQdXJlWGZhXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGRmSW5mby5pc1B1cmVYZmE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZShwYWdlTnVtYmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2UocGFnZU51bWJlcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VJbmRleFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlSW5kZXgocmVmKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VJbmRleChyZWYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREZXN0aW5hdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzdGluYXRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREZXN0aW5hdGlvbnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGVzdGluYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzdGluYXRpb24oaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0RGVzdGluYXRpb24oaWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRQYWdlTGFiZWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VMYWJlbHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYWJlbHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGFnZUxheW91dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlTGF5b3V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlTGF5b3V0KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VNb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VNb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlTW9kZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaWV3ZXJQcmVmZXJlbmNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWV3ZXJQcmVmZXJlbmNlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T3BlbkFjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcGVuQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPcGVuQWN0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEF0dGFjaG1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dGFjaG1lbnRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRBdHRhY2htZW50cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRKYXZhU2NyaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEphdmFTY3JpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldEphdmFTY3JpcHQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0SlNBY3Rpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEpTQWN0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0RG9jSlNBY3Rpb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE91dGxpbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3V0bGluZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0T3V0bGluZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRPcHRpb25hbENvbnRlbnRDb25maWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPcHRpb25hbENvbnRlbnRDb25maWcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGVybWlzc2lvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBlcm1pc3Npb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE1ldGFkYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRNZXRhZGF0YSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRNYXJrSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXJrSW5mbygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0TWFya0luZm8oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREYXRhKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERvd25sb2FkSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREb3dubG9hZEluZm8oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmRvd25sb2FkSW5mb0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U3RhdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFN0YXRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFudXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHZhciBrZWVwTG9hZGVkRm9udHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5zdGFydENsZWFudXAoa2VlcExvYWRlZEZvbnRzIHx8IHRoaXMuaXNQdXJlWGZhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgcmV0dXJuIHRoaXMubG9hZGluZ1Rhc2suZGVzdHJveSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkaW5nUGFyYW1zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmxvYWRpbmdQYXJhbXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRpbmdUYXNrXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmxvYWRpbmdUYXNrO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYXZlRG9jdW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZURvY3VtZW50KCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKShcInNhdmVEb2N1bWVudCBubyBsb25nZXIgYWNjZXB0cyBhbnkgb3B0aW9ucy5cIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuYW5ub3RhdGlvblN0b3JhZ2Uuc2l6ZSA8PSAwKSB7XG4gICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKShcInNhdmVEb2N1bWVudCBjYWxsZWQgd2hpbGUgYGFubm90YXRpb25TdG9yYWdlYCBpcyBlbXB0eSwgXCIgKyBcInBsZWFzZSB1c2UgdGhlIGdldERhdGEtbWV0aG9kIGluc3RlYWQuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LnNhdmVEb2N1bWVudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGaWVsZE9iamVjdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmllbGRPYmplY3RzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRGaWVsZE9iamVjdHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzSlNBY3Rpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0pTQWN0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuaGFzSlNBY3Rpb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENhbGN1bGF0aW9uT3JkZXJJZHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FsY3VsYXRpb25PcmRlcklkcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Q2FsY3VsYXRpb25PcmRlcklkcygpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZEb2N1bWVudFByb3h5O1xufSgpO1xuXG5leHBvcnRzLlBERkRvY3VtZW50UHJveHkgPSBQREZEb2N1bWVudFByb3h5O1xuXG52YXIgUERGUGFnZVByb3h5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGUGFnZVByb3h5KHBhZ2VJbmRleCwgcGFnZUluZm8sIHRyYW5zcG9ydCwgb3duZXJEb2N1bWVudCkge1xuICAgIHZhciBwZGZCdWcgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERlBhZ2VQcm94eSk7XG5cbiAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgdGhpcy5fcGFnZUluZm8gPSBwYWdlSW5mbztcbiAgICB0aGlzLl9vd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgdGhpcy5fc3RhdHMgPSBwZGZCdWcgPyBuZXcgX2Rpc3BsYXlfdXRpbHMuU3RhdFRpbWVyKCkgOiBudWxsO1xuICAgIHRoaXMuX3BkZkJ1ZyA9IHBkZkJ1ZztcbiAgICB0aGlzLmNvbW1vbk9ianMgPSB0cmFuc3BvcnQuY29tbW9uT2JqcztcbiAgICB0aGlzLm9ianMgPSBuZXcgUERGT2JqZWN0cygpO1xuICAgIHRoaXMuY2xlYW51cEFmdGVyUmVuZGVyID0gZmFsc2U7XG4gICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgIHRoaXMuX2ludGVudFN0YXRlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBERlBhZ2VQcm94eSwgW3tcbiAgICBrZXk6IFwicGFnZU51bWJlclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmRleCArIDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJvdGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmZvLnJvdGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVmXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucmVmO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1c2VyVW5pdFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmZvLnVzZXJVbml0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2aWV3XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8udmlldztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Vmlld3BvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vmlld3BvcnQoKSB7XG4gICAgICB2YXIgX3JlZjMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICAgIHNjYWxlID0gX3JlZjMuc2NhbGUsXG4gICAgICAgICAgX3JlZjMkcm90YXRpb24gPSBfcmVmMy5yb3RhdGlvbixcbiAgICAgICAgICByb3RhdGlvbiA9IF9yZWYzJHJvdGF0aW9uID09PSB2b2lkIDAgPyB0aGlzLnJvdGF0ZSA6IF9yZWYzJHJvdGF0aW9uLFxuICAgICAgICAgIF9yZWYzJG9mZnNldFggPSBfcmVmMy5vZmZzZXRYLFxuICAgICAgICAgIG9mZnNldFggPSBfcmVmMyRvZmZzZXRYID09PSB2b2lkIDAgPyAwIDogX3JlZjMkb2Zmc2V0WCxcbiAgICAgICAgICBfcmVmMyRvZmZzZXRZID0gX3JlZjMub2Zmc2V0WSxcbiAgICAgICAgICBvZmZzZXRZID0gX3JlZjMkb2Zmc2V0WSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJG9mZnNldFksXG4gICAgICAgICAgX3JlZjMkZG9udEZsaXAgPSBfcmVmMy5kb250RmxpcCxcbiAgICAgICAgICBkb250RmxpcCA9IF9yZWYzJGRvbnRGbGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzJGRvbnRGbGlwO1xuXG4gICAgICByZXR1cm4gbmV3IF9kaXNwbGF5X3V0aWxzLlBhZ2VWaWV3cG9ydCh7XG4gICAgICAgIHZpZXdCb3g6IHRoaXMudmlldyxcbiAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICByb3RhdGlvbjogcm90YXRpb24sXG4gICAgICAgIG9mZnNldFg6IG9mZnNldFgsXG4gICAgICAgIG9mZnNldFk6IG9mZnNldFksXG4gICAgICAgIGRvbnRGbGlwOiBkb250RmxpcFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEFubm90YXRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFubm90YXRpb25zKCkge1xuICAgICAgdmFyIF9yZWY0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICBfcmVmNCRpbnRlbnQgPSBfcmVmNC5pbnRlbnQsXG4gICAgICAgICAgaW50ZW50ID0gX3JlZjQkaW50ZW50ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjQkaW50ZW50O1xuXG4gICAgICBpZiAoIXRoaXMuX2Fubm90YXRpb25zUHJvbWlzZSB8fCB0aGlzLl9hbm5vdGF0aW9uc0ludGVudCAhPT0gaW50ZW50KSB7XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zUHJvbWlzZSA9IHRoaXMuX3RyYW5zcG9ydC5nZXRBbm5vdGF0aW9ucyh0aGlzLl9wYWdlSW5kZXgsIGludGVudCk7XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zSW50ZW50ID0gaW50ZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fYW5ub3RhdGlvbnNQcm9taXNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRKU0FjdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SlNBY3Rpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzQWN0aW9uc1Byb21pc2UgfHwgKHRoaXMuX2pzQWN0aW9uc1Byb21pc2UgPSB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZUpTQWN0aW9ucyh0aGlzLl9wYWdlSW5kZXgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0WGZhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFhmYSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl94ZmFQcm9taXNlIHx8ICh0aGlzLl94ZmFQcm9taXNlID0gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VYZmEodGhpcy5fcGFnZUluZGV4KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoX3JlZjUpIHtcbiAgICAgIHZhciBfYXJndW1lbnRzJCxcbiAgICAgICAgICBfdGhpczUgPSB0aGlzLFxuICAgICAgICAgIF9pbnRlbnRTdGF0ZTtcblxuICAgICAgdmFyIGNhbnZhc0NvbnRleHQgPSBfcmVmNS5jYW52YXNDb250ZXh0LFxuICAgICAgICAgIHZpZXdwb3J0ID0gX3JlZjUudmlld3BvcnQsXG4gICAgICAgICAgX3JlZjUkaW50ZW50ID0gX3JlZjUuaW50ZW50LFxuICAgICAgICAgIGludGVudCA9IF9yZWY1JGludGVudCA9PT0gdm9pZCAwID8gXCJkaXNwbGF5XCIgOiBfcmVmNSRpbnRlbnQsXG4gICAgICAgICAgX3JlZjUkcmVuZGVySW50ZXJhY3RpID0gX3JlZjUucmVuZGVySW50ZXJhY3RpdmVGb3JtcyxcbiAgICAgICAgICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zID0gX3JlZjUkcmVuZGVySW50ZXJhY3RpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1JHJlbmRlckludGVyYWN0aSxcbiAgICAgICAgICBfcmVmNSR0cmFuc2Zvcm0gPSBfcmVmNS50cmFuc2Zvcm0sXG4gICAgICAgICAgdHJhbnNmb3JtID0gX3JlZjUkdHJhbnNmb3JtID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjUkdHJhbnNmb3JtLFxuICAgICAgICAgIF9yZWY1JGltYWdlTGF5ZXIgPSBfcmVmNS5pbWFnZUxheWVyLFxuICAgICAgICAgIGltYWdlTGF5ZXIgPSBfcmVmNSRpbWFnZUxheWVyID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjUkaW1hZ2VMYXllcixcbiAgICAgICAgICBfcmVmNSRjYW52YXNGYWN0b3J5ID0gX3JlZjUuY2FudmFzRmFjdG9yeSxcbiAgICAgICAgICBjYW52YXNGYWN0b3J5ID0gX3JlZjUkY2FudmFzRmFjdG9yeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1JGNhbnZhc0ZhY3RvcnksXG4gICAgICAgICAgX3JlZjUkYmFja2dyb3VuZCA9IF9yZWY1LmJhY2tncm91bmQsXG4gICAgICAgICAgYmFja2dyb3VuZCA9IF9yZWY1JGJhY2tncm91bmQgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNSRiYWNrZ3JvdW5kLFxuICAgICAgICAgIF9yZWY1JGluY2x1ZGVBbm5vdGF0aSA9IF9yZWY1LmluY2x1ZGVBbm5vdGF0aW9uU3RvcmFnZSxcbiAgICAgICAgICBpbmNsdWRlQW5ub3RhdGlvblN0b3JhZ2UgPSBfcmVmNSRpbmNsdWRlQW5ub3RhdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUkaW5jbHVkZUFubm90YXRpLFxuICAgICAgICAgIF9yZWY1JG9wdGlvbmFsQ29udGVudCA9IF9yZWY1Lm9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UsXG4gICAgICAgICAgb3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZSA9IF9yZWY1JG9wdGlvbmFsQ29udGVudCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1JG9wdGlvbmFsQ29udGVudDtcblxuICAgICAgaWYgKCgoX2FyZ3VtZW50cyQgPSBhcmd1bWVudHNbMF0pID09PSBudWxsIHx8IF9hcmd1bWVudHMkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXJndW1lbnRzJC5hbm5vdGF0aW9uU3RvcmFnZSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuZGVwcmVjYXRlZCkoXCJyZW5kZXIgbm8gbG9uZ2VyIGFjY2VwdHMgYW4gYGFubm90YXRpb25TdG9yYWdlYCBvcHRpb24sIFwiICsgXCJwbGVhc2UgdXNlIHRoZSBgaW5jbHVkZUFubm90YXRpb25TdG9yYWdlYC1ib29sZWFuIGluc3RlYWQuXCIpO1xuICAgICAgICBpbmNsdWRlQW5ub3RhdGlvblN0b3JhZ2UgfHwgKGluY2x1ZGVBbm5vdGF0aW9uU3RvcmFnZSA9ICEhYXJndW1lbnRzWzBdLmFubm90YXRpb25TdG9yYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoXCJPdmVyYWxsXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVuZGVyaW5nSW50ZW50ID0gaW50ZW50ID09PSBcInByaW50XCIgPyBcInByaW50XCIgOiBcImRpc3BsYXlcIjtcbiAgICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSBmYWxzZTtcblxuICAgICAgaWYgKCFvcHRpb25hbENvbnRlbnRDb25maWdQcm9taXNlKSB7XG4gICAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UgPSB0aGlzLl90cmFuc3BvcnQuZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQocmVuZGVyaW5nSW50ZW50KTtcblxuICAgICAgaWYgKCFpbnRlbnRTdGF0ZSkge1xuICAgICAgICBpbnRlbnRTdGF0ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgdGhpcy5faW50ZW50U3RhdGVzLnNldChyZW5kZXJpbmdJbnRlbnQsIGludGVudFN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQpO1xuICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbnZhc0ZhY3RvcnlJbnN0YW5jZSA9IGNhbnZhc0ZhY3RvcnkgfHwgbmV3IERlZmF1bHRDYW52YXNGYWN0b3J5KHtcbiAgICAgICAgb3duZXJEb2N1bWVudDogdGhpcy5fb3duZXJEb2N1bWVudFxuICAgICAgfSk7XG4gICAgICB2YXIgYW5ub3RhdGlvblN0b3JhZ2UgPSBpbmNsdWRlQW5ub3RhdGlvblN0b3JhZ2UgPyB0aGlzLl90cmFuc3BvcnQuYW5ub3RhdGlvblN0b3JhZ2Uuc2VyaWFsaXphYmxlIDogbnVsbDtcblxuICAgICAgaWYgKCFpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCA9IHtcbiAgICAgICAgICBmbkFycmF5OiBbXSxcbiAgICAgICAgICBhcmdzQXJyYXk6IFtdLFxuICAgICAgICAgIGxhc3RDaHVuazogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5fc3RhdHMpIHtcbiAgICAgICAgICB0aGlzLl9zdGF0cy50aW1lKFwiUGFnZSBSZXF1ZXN0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHVtcE9wZXJhdG9yTGlzdCh7XG4gICAgICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICAgICAgaW50ZW50OiByZW5kZXJpbmdJbnRlbnQsXG4gICAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogcmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9PT0gdHJ1ZSxcbiAgICAgICAgICBhbm5vdGF0aW9uU3RvcmFnZTogYW5ub3RhdGlvblN0b3JhZ2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKGVycm9yKSB7XG4gICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzW1wiZGVsZXRlXCJdKGludGVybmFsUmVuZGVyVGFzayk7XG5cbiAgICAgICAgaWYgKF90aGlzNS5jbGVhbnVwQWZ0ZXJSZW5kZXIgfHwgcmVuZGVyaW5nSW50ZW50ID09PSBcInByaW50XCIpIHtcbiAgICAgICAgICBfdGhpczUucGVuZGluZ0NsZWFudXAgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1Ll90cnlDbGVhbnVwKCk7XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLmNhcGFiaWxpdHkucmVqZWN0KGVycm9yKTtcblxuICAgICAgICAgIF90aGlzNS5fYWJvcnRPcGVyYXRvckxpc3Qoe1xuICAgICAgICAgICAgaW50ZW50U3RhdGU6IGludGVudFN0YXRlLFxuICAgICAgICAgICAgcmVhc29uOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpczUuX3N0YXRzKSB7XG4gICAgICAgICAgX3RoaXM1Ll9zdGF0cy50aW1lRW5kKFwiUmVuZGVyaW5nXCIpO1xuXG4gICAgICAgICAgX3RoaXM1Ll9zdGF0cy50aW1lRW5kKFwiT3ZlcmFsbFwiKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGludGVybmFsUmVuZGVyVGFzayA9IG5ldyBJbnRlcm5hbFJlbmRlclRhc2soe1xuICAgICAgICBjYWxsYmFjazogY29tcGxldGUsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNhbnZhc0NvbnRleHQ6IGNhbnZhc0NvbnRleHQsXG4gICAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgIGltYWdlTGF5ZXI6IGltYWdlTGF5ZXIsXG4gICAgICAgICAgYmFja2dyb3VuZDogYmFja2dyb3VuZFxuICAgICAgICB9LFxuICAgICAgICBvYmpzOiB0aGlzLm9ianMsXG4gICAgICAgIGNvbW1vbk9ianM6IHRoaXMuY29tbW9uT2JqcyxcbiAgICAgICAgb3BlcmF0b3JMaXN0OiBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QsXG4gICAgICAgIHBhZ2VJbmRleDogdGhpcy5fcGFnZUluZGV4LFxuICAgICAgICBjYW52YXNGYWN0b3J5OiBjYW52YXNGYWN0b3J5SW5zdGFuY2UsXG4gICAgICAgIHVzZVJlcXVlc3RBbmltYXRpb25GcmFtZTogcmVuZGVyaW5nSW50ZW50ICE9PSBcInByaW50XCIsXG4gICAgICAgIHBkZkJ1ZzogdGhpcy5fcGRmQnVnXG4gICAgICB9KTtcbiAgICAgICgoX2ludGVudFN0YXRlID0gaW50ZW50U3RhdGUpLnJlbmRlclRhc2tzIHx8IChfaW50ZW50U3RhdGUucmVuZGVyVGFza3MgPSBuZXcgU2V0KCkpKS5hZGQoaW50ZXJuYWxSZW5kZXJUYXNrKTtcbiAgICAgIHZhciByZW5kZXJUYXNrID0gaW50ZXJuYWxSZW5kZXJUYXNrLnRhc2s7XG4gICAgICBQcm9taXNlLmFsbChbaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLCBvcHRpb25hbENvbnRlbnRDb25maWdQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgICAgdmFyIF9yZWY3ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjYsIDIpLFxuICAgICAgICAgICAgdHJhbnNwYXJlbmN5ID0gX3JlZjdbMF0sXG4gICAgICAgICAgICBvcHRpb25hbENvbnRlbnRDb25maWcgPSBfcmVmN1sxXTtcblxuICAgICAgICBpZiAoX3RoaXM1LnBlbmRpbmdDbGVhbnVwKSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXM1Ll9zdGF0cykge1xuICAgICAgICAgIF90aGlzNS5fc3RhdHMudGltZShcIlJlbmRlcmluZ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVybmFsUmVuZGVyVGFzay5pbml0aWFsaXplR3JhcGhpY3Moe1xuICAgICAgICAgIHRyYW5zcGFyZW5jeTogdHJhbnNwYXJlbmN5LFxuICAgICAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZzogb3B0aW9uYWxDb250ZW50Q29uZmlnXG4gICAgICAgIH0pO1xuICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCgpO1xuICAgICAgfSlbXCJjYXRjaFwiXShjb21wbGV0ZSk7XG4gICAgICByZXR1cm4gcmVuZGVyVGFzaztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T3BlcmF0b3JMaXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wZXJhdG9yTGlzdCgpIHtcbiAgICAgIGZ1bmN0aW9uIG9wZXJhdG9yTGlzdENoYW5nZWQoKSB7XG4gICAgICAgIGlmIChpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rKSB7XG4gICAgICAgICAgaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkucmVzb2x2ZShpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QpO1xuICAgICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzW1wiZGVsZXRlXCJdKG9wTGlzdFRhc2spO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZW5kZXJpbmdJbnRlbnQgPSBcIm9wbGlzdFwiO1xuXG4gICAgICB2YXIgaW50ZW50U3RhdGUgPSB0aGlzLl9pbnRlbnRTdGF0ZXMuZ2V0KHJlbmRlcmluZ0ludGVudCk7XG5cbiAgICAgIGlmICghaW50ZW50U3RhdGUpIHtcbiAgICAgICAgaW50ZW50U3RhdGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgIHRoaXMuX2ludGVudFN0YXRlcy5zZXQocmVuZGVyaW5nSW50ZW50LCBpbnRlbnRTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcExpc3RUYXNrO1xuXG4gICAgICBpZiAoIWludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5KSB7XG4gICAgICAgIHZhciBfaW50ZW50U3RhdGUyO1xuXG4gICAgICAgIG9wTGlzdFRhc2sgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBvcExpc3RUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQgPSBvcGVyYXRvckxpc3RDaGFuZ2VkO1xuICAgICAgICBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgKChfaW50ZW50U3RhdGUyID0gaW50ZW50U3RhdGUpLnJlbmRlclRhc2tzIHx8IChfaW50ZW50U3RhdGUyLnJlbmRlclRhc2tzID0gbmV3IFNldCgpKSkuYWRkKG9wTGlzdFRhc2spO1xuICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QgPSB7XG4gICAgICAgICAgZm5BcnJheTogW10sXG4gICAgICAgICAgYXJnc0FycmF5OiBbXSxcbiAgICAgICAgICBsYXN0Q2h1bms6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgICAgdGhpcy5fc3RhdHMudGltZShcIlBhZ2UgUmVxdWVzdFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3B1bXBPcGVyYXRvckxpc3Qoe1xuICAgICAgICAgIHBhZ2VJbmRleDogdGhpcy5fcGFnZUluZGV4LFxuICAgICAgICAgIGludGVudDogcmVuZGVyaW5nSW50ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RyZWFtVGV4dENvbnRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RyZWFtVGV4dENvbnRlbnQoKSB7XG4gICAgICB2YXIgX3JlZjggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICAgIF9yZWY4JG5vcm1hbGl6ZVdoaXRlcyA9IF9yZWY4Lm5vcm1hbGl6ZVdoaXRlc3BhY2UsXG4gICAgICAgICAgbm9ybWFsaXplV2hpdGVzcGFjZSA9IF9yZWY4JG5vcm1hbGl6ZVdoaXRlcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmOCRub3JtYWxpemVXaGl0ZXMsXG4gICAgICAgICAgX3JlZjgkZGlzYWJsZUNvbWJpbmVUID0gX3JlZjguZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMsXG4gICAgICAgICAgZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMgPSBfcmVmOCRkaXNhYmxlQ29tYmluZVQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjgkZGlzYWJsZUNvbWJpbmVULFxuICAgICAgICAgIF9yZWY4JGluY2x1ZGVNYXJrZWRDbyA9IF9yZWY4LmluY2x1ZGVNYXJrZWRDb250ZW50LFxuICAgICAgICAgIGluY2x1ZGVNYXJrZWRDb250ZW50ID0gX3JlZjgkaW5jbHVkZU1hcmtlZENvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY4JGluY2x1ZGVNYXJrZWRDbztcblxuICAgICAgdmFyIFRFWFRfQ09OVEVOVF9DSFVOS19TSVpFID0gMTAwO1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFN0cmVhbShcIkdldFRleHRDb250ZW50XCIsIHtcbiAgICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICAgIG5vcm1hbGl6ZVdoaXRlc3BhY2U6IG5vcm1hbGl6ZVdoaXRlc3BhY2UgPT09IHRydWUsXG4gICAgICAgIGNvbWJpbmVUZXh0SXRlbXM6IGRpc2FibGVDb21iaW5lVGV4dEl0ZW1zICE9PSB0cnVlLFxuICAgICAgICBpbmNsdWRlTWFya2VkQ29udGVudDogaW5jbHVkZU1hcmtlZENvbnRlbnQgPT09IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgaGlnaFdhdGVyTWFyazogVEVYVF9DT05URU5UX0NIVU5LX1NJWkUsXG4gICAgICAgIHNpemU6IGZ1bmN0aW9uIHNpemUodGV4dENvbnRlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VGV4dENvbnRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciByZWFkYWJsZVN0cmVhbSA9IHRoaXMuc3RyZWFtVGV4dENvbnRlbnQocGFyYW1zKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIHB1bXAoKSB7XG4gICAgICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmOSkge1xuICAgICAgICAgICAgdmFyIF90ZXh0Q29udGVudCRpdGVtcztcblxuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjkudmFsdWUsXG4gICAgICAgICAgICAgICAgZG9uZSA9IF9yZWY5LmRvbmU7XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUodGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGV4dENvbnRlbnQuc3R5bGVzLCB2YWx1ZS5zdHlsZXMpO1xuXG4gICAgICAgICAgICAoX3RleHRDb250ZW50JGl0ZW1zID0gdGV4dENvbnRlbnQuaXRlbXMpLnB1c2guYXBwbHkoX3RleHRDb250ZW50JGl0ZW1zLCBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWUuaXRlbXMpKTtcblxuICAgICAgICAgICAgcHVtcCgpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIHZhciB0ZXh0Q29udGVudCA9IHtcbiAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgc3R5bGVzOiBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgICAgIH07XG4gICAgICAgIHB1bXAoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTdHJ1Y3RUcmVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0cnVjdFRyZWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RydWN0VHJlZVByb21pc2UgfHwgKHRoaXMuX3N0cnVjdFRyZWVQcm9taXNlID0gdGhpcy5fdHJhbnNwb3J0LmdldFN0cnVjdFRyZWUodGhpcy5fcGFnZUluZGV4KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fdHJhbnNwb3J0LnBhZ2VDYWNoZVt0aGlzLl9wYWdlSW5kZXhdID0gbnVsbDtcbiAgICAgIHZhciB3YWl0T24gPSBbXTtcblxuICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9pbnRlbnRTdGF0ZXMpLFxuICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgX3N0ZXA1JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA1LnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgaW50ZW50ID0gX3N0ZXA1JHZhbHVlWzBdLFxuICAgICAgICAgICAgICBpbnRlbnRTdGF0ZSA9IF9zdGVwNSR2YWx1ZVsxXTtcblxuICAgICAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICAgIGludGVudFN0YXRlOiBpbnRlbnRTdGF0ZSxcbiAgICAgICAgICAgIHJlYXNvbjogbmV3IEVycm9yKFwiUGFnZSB3YXMgZGVzdHJveWVkLlwiKSxcbiAgICAgICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoaW50ZW50ID09PSBcIm9wbGlzdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGludGVudFN0YXRlLnJlbmRlclRhc2tzKSxcbiAgICAgICAgICAgICAgX3N0ZXA2O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBpbnRlcm5hbFJlbmRlclRhc2sgPSBfc3RlcDYudmFsdWU7XG4gICAgICAgICAgICAgIHdhaXRPbi5wdXNoKGludGVybmFsUmVuZGVyVGFzay5jb21wbGV0ZWQpO1xuICAgICAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNi5mKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vYmpzLmNsZWFyKCk7XG4gICAgICB0aGlzLl9hbm5vdGF0aW9uc1Byb21pc2UgPSBudWxsO1xuICAgICAgdGhpcy5fanNBY3Rpb25zUHJvbWlzZSA9IG51bGw7XG4gICAgICB0aGlzLl94ZmFQcm9taXNlID0gbnVsbDtcbiAgICAgIHRoaXMuX3N0cnVjdFRyZWVQcm9taXNlID0gbnVsbDtcbiAgICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSBmYWxzZTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh3YWl0T24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhbnVwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICB2YXIgcmVzZXRTdGF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLl90cnlDbGVhbnVwKHJlc2V0U3RhdHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfdHJ5Q2xlYW51cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdHJ5Q2xlYW51cCgpIHtcbiAgICAgIHZhciByZXNldFN0YXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGVhbnVwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjcgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9pbnRlbnRTdGF0ZXMudmFsdWVzKCkpLFxuICAgICAgICAgIF9zdGVwNztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgX3N0ZXA3JHZhbHVlID0gX3N0ZXA3LnZhbHVlLFxuICAgICAgICAgICAgICByZW5kZXJUYXNrcyA9IF9zdGVwNyR2YWx1ZS5yZW5kZXJUYXNrcyxcbiAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0ID0gX3N0ZXA3JHZhbHVlLm9wZXJhdG9yTGlzdDtcblxuICAgICAgICAgIGlmIChyZW5kZXJUYXNrcy5zaXplID4gMCB8fCAhb3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjcuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yNy5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ludGVudFN0YXRlcy5jbGVhcigpO1xuXG4gICAgICB0aGlzLm9ianMuY2xlYXIoKTtcbiAgICAgIHRoaXMuX2Fubm90YXRpb25zUHJvbWlzZSA9IG51bGw7XG4gICAgICB0aGlzLl9qc0FjdGlvbnNQcm9taXNlID0gbnVsbDtcbiAgICAgIHRoaXMuX3hmYVByb21pc2UgPSBudWxsO1xuICAgICAgdGhpcy5fc3RydWN0VHJlZVByb21pc2UgPSBudWxsO1xuXG4gICAgICBpZiAocmVzZXRTdGF0cyAmJiB0aGlzLl9zdGF0cykge1xuICAgICAgICB0aGlzLl9zdGF0cyA9IG5ldyBfZGlzcGxheV91dGlscy5TdGF0VGltZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zdGFydFJlbmRlclBhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0UmVuZGVyUGFnZSh0cmFuc3BhcmVuY3ksIGludGVudCkge1xuICAgICAgdmFyIGludGVudFN0YXRlID0gdGhpcy5faW50ZW50U3RhdGVzLmdldChpbnRlbnQpO1xuXG4gICAgICBpZiAoIWludGVudFN0YXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgIHRoaXMuX3N0YXRzLnRpbWVFbmQoXCJQYWdlIFJlcXVlc3RcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSh0cmFuc3BhcmVuY3kpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVuZGVyUGFnZUNodW5rXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXJQYWdlQ2h1bmsob3BlcmF0b3JMaXN0Q2h1bmssIGludGVudFN0YXRlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBvcGVyYXRvckxpc3RDaHVuay5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5mbkFycmF5LnB1c2gob3BlcmF0b3JMaXN0Q2h1bmsuZm5BcnJheVtpXSk7XG4gICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5hcmdzQXJyYXkucHVzaChvcGVyYXRvckxpc3RDaHVuay5hcmdzQXJyYXlbaV0pO1xuICAgICAgfVxuXG4gICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rID0gb3BlcmF0b3JMaXN0Q2h1bmsubGFzdENodW5rO1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGludGVudFN0YXRlLnJlbmRlclRhc2tzKSxcbiAgICAgICAgICBfc3RlcDg7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yOC5zKCk7ICEoX3N0ZXA4ID0gX2l0ZXJhdG9yOC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGludGVybmFsUmVuZGVyVGFzayA9IF9zdGVwOC52YWx1ZTtcbiAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I4LmYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdG9yTGlzdENodW5rLmxhc3RDaHVuaykge1xuICAgICAgICB0aGlzLl90cnlDbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wdW1wT3BlcmF0b3JMaXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wdW1wT3BlcmF0b3JMaXN0KGFyZ3MpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KShhcmdzLmludGVudCwgJ1BERlBhZ2VQcm94eS5fcHVtcE9wZXJhdG9yTGlzdDogRXhwZWN0ZWQgXCJpbnRlbnRcIiBhcmd1bWVudC4nKTtcblxuICAgICAgdmFyIHJlYWRhYmxlU3RyZWFtID0gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKFwiR2V0T3BlcmF0b3JMaXN0XCIsIGFyZ3MpO1xuXG4gICAgICB2YXIgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG5cbiAgICAgIHZhciBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoYXJncy5pbnRlbnQpO1xuXG4gICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSByZWFkZXI7XG5cbiAgICAgIHZhciBwdW1wID0gZnVuY3Rpb24gcHVtcCgpIHtcbiAgICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmMTApIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMTAudmFsdWUsXG4gICAgICAgICAgICAgIGRvbmUgPSBfcmVmMTAuZG9uZTtcblxuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfdGhpczYuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczYuX3JlbmRlclBhZ2VDaHVuayh2YWx1ZSwgaW50ZW50U3RhdGUpO1xuXG4gICAgICAgICAgcHVtcCgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcblxuICAgICAgICAgIGlmIChfdGhpczYuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0KSB7XG4gICAgICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjkgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyksXG4gICAgICAgICAgICAgICAgX3N0ZXA5O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjkucygpOyAhKF9zdGVwOSA9IF9pdGVyYXRvcjkubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcm5hbFJlbmRlclRhc2sgPSBfc3RlcDkudmFsdWU7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjkuZShlcnIpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yOS5mKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzNi5fdHJ5Q2xlYW51cCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICAgICAgICBpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHB1bXAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2Fib3J0T3BlcmF0b3JMaXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hYm9ydE9wZXJhdG9yTGlzdChfcmVmMTEpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgaW50ZW50U3RhdGUgPSBfcmVmMTEuaW50ZW50U3RhdGUsXG4gICAgICAgICAgcmVhc29uID0gX3JlZjExLnJlYXNvbixcbiAgICAgICAgICBfcmVmMTEkZm9yY2UgPSBfcmVmMTEuZm9yY2UsXG4gICAgICAgICAgZm9yY2UgPSBfcmVmMTEkZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjExJGZvcmNlO1xuICAgICAgKDAsIF91dGlsLmFzc2VydCkocmVhc29uIGluc3RhbmNlb2YgRXJyb3IgfHwgX3R5cGVvZihyZWFzb24pID09PSBcIm9iamVjdFwiICYmIHJlYXNvbiAhPT0gbnVsbCwgJ1BERlBhZ2VQcm94eS5fYWJvcnRPcGVyYXRvckxpc3Q6IEV4cGVjdGVkIFwicmVhc29uXCIgYXJndW1lbnQuJyk7XG5cbiAgICAgIGlmICghaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3JjZSkge1xuICAgICAgICBpZiAoaW50ZW50U3RhdGUucmVuZGVyVGFza3Muc2l6ZSA+IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgX2Rpc3BsYXlfdXRpbHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uKSB7XG4gICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM3Ll9hYm9ydE9wZXJhdG9yTGlzdCh7XG4gICAgICAgICAgICAgIGludGVudFN0YXRlOiBpbnRlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgfSwgUkVOREVSSU5HX0NBTkNFTExFRF9USU1FT1VUKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyLmNhbmNlbChuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24ocmVhc29uID09PSBudWxsIHx8IHJlYXNvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVhc29uLm1lc3NhZ2UpKTtcbiAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjEwID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5faW50ZW50U3RhdGVzKSxcbiAgICAgICAgICBfc3RlcDEwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjEwLnMoKTsgIShfc3RlcDEwID0gX2l0ZXJhdG9yMTAubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBfc3RlcDEwJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAxMC52YWx1ZSwgMiksXG4gICAgICAgICAgICAgIGludGVudCA9IF9zdGVwMTAkdmFsdWVbMF0sXG4gICAgICAgICAgICAgIGN1ckludGVudFN0YXRlID0gX3N0ZXAxMCR2YWx1ZVsxXTtcblxuICAgICAgICAgIGlmIChjdXJJbnRlbnRTdGF0ZSA9PT0gaW50ZW50U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVudFN0YXRlc1tcImRlbGV0ZVwiXShpbnRlbnQpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxMC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxMC5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGF0c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZQYWdlUHJveHk7XG59KCk7XG5cbmV4cG9ydHMuUERGUGFnZVByb3h5ID0gUERGUGFnZVByb3h5O1xuXG52YXIgTG9vcGJhY2tQb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTG9vcGJhY2tQb3J0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb29wYmFja1BvcnQpO1xuXG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fZGVmZXJyZWQgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb29wYmFja1BvcnQsIFt7XG4gICAga2V5OiBcInBvc3RNZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKG9iaiwgdHJhbnNmZXJzKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gY2xvbmVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoX3R5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xvbmVkLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVkLmdldCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYnVmZmVyLCByZXN1bHQ7XG5cbiAgICAgICAgaWYgKChidWZmZXIgPSB2YWx1ZS5idWZmZXIpICYmICgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKShidWZmZXIpKSB7XG4gICAgICAgICAgaWYgKHRyYW5zZmVycyAhPT0gbnVsbCAmJiB0cmFuc2ZlcnMgIT09IHZvaWQgMCAmJiB0cmFuc2ZlcnMuaW5jbHVkZXMoYnVmZmVyKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IHZhbHVlLmNvbnN0cnVjdG9yKGJ1ZmZlciwgdmFsdWUuYnl0ZU9mZnNldCwgdmFsdWUuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyB2YWx1ZS5jb25zdHJ1Y3Rvcih2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2xvbmVkLnNldCh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IE1hcCgpO1xuICAgICAgICAgIGNsb25lZC5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMTEgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih2YWx1ZSksXG4gICAgICAgICAgICAgIF9zdGVwMTE7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgdmFyIF9zdGVwMTEkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDExLnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgICAgIGtleSA9IF9zdGVwMTEkdmFsdWVbMF0sXG4gICAgICAgICAgICAgICAgICB2YWwgPSBfc3RlcDExJHZhbHVlWzFdO1xuXG4gICAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBjbG9uZVZhbHVlKHZhbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMTEuZShlcnIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IxMS5mKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICBjbG9uZWQuc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjEyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodmFsdWUpLFxuICAgICAgICAgICAgICBfc3RlcDEyO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTIucygpOyAhKF9zdGVwMTIgPSBfaXRlcmF0b3IxMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBfdmFsID0gX3N0ZXAxMi52YWx1ZTtcbiAgICAgICAgICAgICAgcmVzdWx0LmFkZChjbG9uZVZhbHVlKF92YWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjEyLmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMTIuZigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb29wYmFja1BvcnQucG9zdE1lc3NhZ2UgLSBjYW5ub3QgY2xvbmU6IFwiLmNvbmNhdCh2YWx1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNsb25lZC5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSBpbiB2YWx1ZSkge1xuICAgICAgICAgIHZhciBkZXNjID0gdm9pZCAwLFxuICAgICAgICAgICAgICBwID0gdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoIShkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwLCBpKSkpIHtcbiAgICAgICAgICAgIHAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGRlc2MudmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIF92YWx1ZSRoYXNPd25Qcm9wZXJ0eTtcblxuICAgICAgICAgICAgaWYgKChfdmFsdWUkaGFzT3duUHJvcGVydHkgPSB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSkgIT09IG51bGwgJiYgX3ZhbHVlJGhhc093blByb3BlcnR5ICE9PSB2b2lkIDAgJiYgX3ZhbHVlJGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGkpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvb3BiYWNrUG9ydC5wb3N0TWVzc2FnZSAtIGNhbm5vdCBjbG9uZTogXCIuY29uY2F0KHZhbHVlW2ldKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc3VsdFtpXSA9IGNsb25lVmFsdWUoZGVzYy52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xvbmVkID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgZGF0YTogY2xvbmVWYWx1ZShvYmopXG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9kZWZlcnJlZC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjEzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXM4Ll9saXN0ZW5lcnMpLFxuICAgICAgICAgICAgX3N0ZXAxMztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTMucygpOyAhKF9zdGVwMTMgPSBfaXRlcmF0b3IxMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcDEzLnZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIuY2FsbChfdGhpczgsIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjEzLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IxMy5mKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRFdmVudExpc3RlbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcblxuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGVybWluYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRlcm1pbmF0ZSgpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb29wYmFja1BvcnQ7XG59KCk7XG5cbmV4cG9ydHMuTG9vcGJhY2tQb3J0ID0gTG9vcGJhY2tQb3J0O1xuXG52YXIgUERGV29ya2VyID0gZnVuY3Rpb24gUERGV29ya2VyQ2xvc3VyZSgpIHtcbiAgdmFyIHBkZldvcmtlclBvcnRzID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIGlzV29ya2VyRGlzYWJsZWQgPSBmYWxzZTtcbiAgdmFyIGZhbGxiYWNrV29ya2VyU3JjO1xuICB2YXIgbmV4dEZha2VXb3JrZXJJZCA9IDA7XG4gIHZhciBmYWtlV29ya2VyQ2FwYWJpbGl0eTtcblxuICBpZiAoX2lzX25vZGUuaXNOb2RlSlMgJiYgdHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGlzV29ya2VyRGlzYWJsZWQgPSB0cnVlO1xuICAgIGZhbGxiYWNrV29ya2VyU3JjID0gXCIuL3BkZi53b3JrZXIuanNcIjtcbiAgfSBlbHNlIGlmICgodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gXCJvYmplY3RcIiAmJiBcImN1cnJlbnRTY3JpcHRcIiBpbiBkb2N1bWVudCkge1xuICAgIHZhciBfZG9jdW1lbnQkY3VycmVudFNjcmk7XG5cbiAgICB2YXIgcGRmanNGaWxlUGF0aCA9IChfZG9jdW1lbnQkY3VycmVudFNjcmkgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0KSA9PT0gbnVsbCB8fCBfZG9jdW1lbnQkY3VycmVudFNjcmkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kb2N1bWVudCRjdXJyZW50U2NyaS5zcmM7XG5cbiAgICBpZiAocGRmanNGaWxlUGF0aCkge1xuICAgICAgZmFsbGJhY2tXb3JrZXJTcmMgPSBwZGZqc0ZpbGVQYXRoLnJlcGxhY2UoLyhcXC4oPzptaW5cXC4pP2pzKShcXD8uKik/JC9pLCBcIi53b3JrZXIkMSQyXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRXb3JrZXJTcmMoKSB7XG4gICAgaWYgKF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYykge1xuICAgICAgcmV0dXJuIF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrV29ya2VyU3JjICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoIV9pc19ub2RlLmlzTm9kZUpTKSB7XG4gICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKSgnTm8gXCJHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyY1wiIHNwZWNpZmllZC4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbGxiYWNrV29ya2VyU3JjO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignTm8gXCJHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyY1wiIHNwZWNpZmllZC4nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1haW5UaHJlYWRXb3JrZXJNZXNzYWdlSGFuZGxlcigpIHtcbiAgICB2YXIgbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBfZ2xvYmFsVGhpcyRwZGZqc1dvcms7XG5cbiAgICAgIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciA9IChfZ2xvYmFsVGhpcyRwZGZqc1dvcmsgPSBnbG9iYWxUaGlzLnBkZmpzV29ya2VyKSA9PT0gbnVsbCB8fCBfZ2xvYmFsVGhpcyRwZGZqc1dvcmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nbG9iYWxUaGlzJHBkZmpzV29yay5Xb3JrZXJNZXNzYWdlSGFuZGxlcjtcbiAgICB9IGNhdGNoIChleCkge31cblxuICAgIHJldHVybiBtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHVwRmFrZVdvcmtlckdsb2JhbCgpIHtcbiAgICBpZiAoZmFrZVdvcmtlckNhcGFiaWxpdHkpIHtcbiAgICAgIHJldHVybiBmYWtlV29ya2VyQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cblxuICAgIGZha2VXb3JrZXJDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgdmFyIGxvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjEyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciwgd29ya2VyO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciA9IGdldE1haW5UaHJlYWRXb3JrZXJNZXNzYWdlSGFuZGxlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoIShfaXNfbm9kZS5pc05vZGVKUyAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXIgPSBldmFsKFwicmVxdWlyZVwiKShfZ2V0V29ya2VyU3JjKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgd29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyKTtcblxuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfZGlzcGxheV91dGlscy5sb2FkU2NyaXB0KShfZ2V0V29ya2VyU3JjKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHdpbmRvdy5wZGZqc1dvcmtlci5Xb3JrZXJNZXNzYWdlSGFuZGxlcik7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUpO1xuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbG9hZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlZjEyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGxvYWRlcigpLnRoZW4oZmFrZVdvcmtlckNhcGFiaWxpdHkucmVzb2x2ZSwgZmFrZVdvcmtlckNhcGFiaWxpdHkucmVqZWN0KTtcbiAgICByZXR1cm4gZmFrZVdvcmtlckNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNETldyYXBwZXIodXJsKSB7XG4gICAgdmFyIHdyYXBwZXIgPSBcImltcG9ydFNjcmlwdHMoJ1wiICsgdXJsICsgXCInKTtcIjtcbiAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbd3JhcHBlcl0pKTtcbiAgfVxuXG4gIHZhciBQREZXb3JrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBERldvcmtlcigpIHtcbiAgICAgIHZhciBfcmVmMTMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICAgIF9yZWYxMyRuYW1lID0gX3JlZjEzLm5hbWUsXG4gICAgICAgICAgbmFtZSA9IF9yZWYxMyRuYW1lID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjEzJG5hbWUsXG4gICAgICAgICAgX3JlZjEzJHBvcnQgPSBfcmVmMTMucG9ydCxcbiAgICAgICAgICBwb3J0ID0gX3JlZjEzJHBvcnQgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMTMkcG9ydCxcbiAgICAgICAgICBfcmVmMTMkdmVyYm9zaXR5ID0gX3JlZjEzLnZlcmJvc2l0eSxcbiAgICAgICAgICB2ZXJib3NpdHkgPSBfcmVmMTMkdmVyYm9zaXR5ID09PSB2b2lkIDAgPyAoMCwgX3V0aWwuZ2V0VmVyYm9zaXR5TGV2ZWwpKCkgOiBfcmVmMTMkdmVyYm9zaXR5O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGV29ya2VyKTtcblxuICAgICAgaWYgKHBvcnQgJiYgcGRmV29ya2VyUG9ydHMuaGFzKHBvcnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSBQREZXb3JrZXIgcGVyIHBvcnRcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7XG4gICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHRoaXMuX3BvcnQgPSBudWxsO1xuICAgICAgdGhpcy5fd2ViV29ya2VyID0gbnVsbDtcbiAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbnVsbDtcblxuICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgcGRmV29ya2VyUG9ydHMuc2V0KHBvcnQsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVGcm9tUG9ydChwb3J0KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUERGV29ya2VyLCBbe1xuICAgICAga2V5OiBcInByb21pc2VcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBvcnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9ydDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWVzc2FnZUhhbmRsZXJcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVzc2FnZUhhbmRsZXI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pbml0aWFsaXplRnJvbVBvcnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZUZyb21Qb3J0KHBvcnQpIHtcbiAgICAgICAgdGhpcy5fcG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoXCJtYWluXCIsIFwid29ya2VyXCIsIHBvcnQpO1xuXG4gICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLm9uKFwicmVhZHlcIiwgZnVuY3Rpb24gKCkge30pO1xuXG4gICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pbml0aWFsaXplXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgV29ya2VyICE9PSBcInVuZGVmaW5lZFwiICYmICFpc1dvcmtlckRpc2FibGVkICYmICFnZXRNYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIoKSkge1xuICAgICAgICAgIHZhciB3b3JrZXJTcmMgPSBfZ2V0V29ya2VyU3JjKCk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCEoMCwgX3V0aWwuaXNTYW1lT3JpZ2luKSh3aW5kb3cubG9jYXRpb24uaHJlZiwgd29ya2VyU3JjKSkge1xuICAgICAgICAgICAgICB3b3JrZXJTcmMgPSBjcmVhdGVDRE5XcmFwcGVyKG5ldyBVUkwod29ya2VyU3JjLCB3aW5kb3cubG9jYXRpb24pLmhyZWYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJTcmMpO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoXCJtYWluXCIsIFwid29ya2VyXCIsIHdvcmtlcik7XG5cbiAgICAgICAgICAgIHZhciB0ZXJtaW5hdGVFYXJseSA9IGZ1bmN0aW9uIHRlcm1pbmF0ZUVhcmx5KCkge1xuICAgICAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uV29ya2VyRXJyb3IpO1xuICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcblxuICAgICAgICAgICAgICBpZiAoX3RoaXM5LmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIF90aGlzOS5fcmVhZHlDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXM5Ll9zZXR1cEZha2VXb3JrZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG9uV29ya2VyRXJyb3IgPSBmdW5jdGlvbiBvbldvcmtlckVycm9yKCkge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzOS5fd2ViV29ya2VyKSB7XG4gICAgICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgd29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbldvcmtlckVycm9yKTtcbiAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwidGVzdFwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uV29ya2VyRXJyb3IpO1xuXG4gICAgICAgICAgICAgIGlmIChfdGhpczkuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzOS5fbWVzc2FnZUhhbmRsZXIgPSBtZXNzYWdlSGFuZGxlcjtcbiAgICAgICAgICAgICAgICBfdGhpczkuX3BvcnQgPSB3b3JrZXI7XG4gICAgICAgICAgICAgICAgX3RoaXM5Ll93ZWJXb3JrZXIgPSB3b3JrZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEuc3VwcG9ydFRyYW5zZmVycykge1xuICAgICAgICAgICAgICAgICAgX3RoaXM5LnBvc3RNZXNzYWdlVHJhbnNmZXJzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXM5Ll9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcImNvbmZpZ3VyZVwiLCB7XG4gICAgICAgICAgICAgICAgICB2ZXJib3NpdHk6IF90aGlzOS52ZXJib3NpdHlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpczkuX3NldHVwRmFrZVdvcmtlcigpO1xuXG4gICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcInJlYWR5XCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG5cbiAgICAgICAgICAgICAgaWYgKF90aGlzOS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVFYXJseSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc2VuZFRlc3QoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzOS5fc2V0dXBGYWtlV29ya2VyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgc2VuZFRlc3QgPSBmdW5jdGlvbiBzZW5kVGVzdCgpIHtcbiAgICAgICAgICAgICAgdmFyIHRlc3RPYmogPSBuZXcgVWludDhBcnJheShbX3RoaXM5LnBvc3RNZXNzYWdlVHJhbnNmZXJzID8gMjU1IDogMF0pO1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcInRlc3RcIiwgdGVzdE9iaiwgW3Rlc3RPYmouYnVmZmVyXSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiQ2Fubm90IHVzZSBwb3N0TWVzc2FnZSB0cmFuc2ZlcnMuXCIpO1xuICAgICAgICAgICAgICAgIHRlc3RPYmpbMF0gPSAwO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJ0ZXN0XCIsIHRlc3RPYmopO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZW5kVGVzdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICgwLCBfdXRpbC5pbmZvKShcIlRoZSB3b3JrZXIgaGFzIGJlZW4gZGlzYWJsZWQuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0dXBGYWtlV29ya2VyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwRmFrZVdvcmtlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICAgIGlmICghaXNXb3JrZXJEaXNhYmxlZCkge1xuICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlNldHRpbmcgdXAgZmFrZSB3b3JrZXIuXCIpO1xuICAgICAgICAgIGlzV29ya2VyRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dXBGYWtlV29ya2VyR2xvYmFsKCkudGhlbihmdW5jdGlvbiAoV29ya2VyTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoX3RoaXMxMC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIF90aGlzMTAuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIikpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHBvcnQgPSBuZXcgTG9vcGJhY2tQb3J0KCk7XG4gICAgICAgICAgX3RoaXMxMC5fcG9ydCA9IHBvcnQ7XG4gICAgICAgICAgdmFyIGlkID0gXCJmYWtlXCIgKyBuZXh0RmFrZVdvcmtlcklkKys7XG4gICAgICAgICAgdmFyIHdvcmtlckhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihpZCArIFwiX3dvcmtlclwiLCBpZCwgcG9ydCk7XG4gICAgICAgICAgV29ya2VyTWVzc2FnZUhhbmRsZXIuc2V0dXAod29ya2VySGFuZGxlciwgcG9ydCk7XG4gICAgICAgICAgdmFyIG1lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoaWQsIGlkICsgXCJfd29ya2VyXCIsIHBvcnQpO1xuICAgICAgICAgIF90aGlzMTAuX21lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG5cbiAgICAgICAgICBfdGhpczEwLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcImNvbmZpZ3VyZVwiLCB7XG4gICAgICAgICAgICB2ZXJib3NpdHk6IF90aGlzMTAudmVyYm9zaXR5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIF90aGlzMTAuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiU2V0dGluZyB1cCBmYWtlIHdvcmtlciBmYWlsZWQ6IFxcXCJcIi5jb25jYXQocmVhc29uLm1lc3NhZ2UsIFwiXFxcIi5cIikpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlYldvcmtlcikge1xuICAgICAgICAgIHRoaXMuX3dlYldvcmtlci50ZXJtaW5hdGUoKTtcblxuICAgICAgICAgIHRoaXMuX3dlYldvcmtlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwZGZXb3JrZXJQb3J0c1tcImRlbGV0ZVwiXSh0aGlzLl9wb3J0KTtcbiAgICAgICAgdGhpcy5fcG9ydCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX21lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIuZGVzdHJveSgpO1xuXG4gICAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiZnJvbVBvcnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tUG9ydChwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy5wb3J0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUERGV29ya2VyLmZyb21Qb3J0IC0gaW52YWxpZCBtZXRob2Qgc2lnbmF0dXJlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwZGZXb3JrZXJQb3J0cy5oYXMocGFyYW1zLnBvcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIHBkZldvcmtlclBvcnRzLmdldChwYXJhbXMucG9ydCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFBERldvcmtlcihwYXJhbXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRXb3JrZXJTcmNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXb3JrZXJTcmMoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0V29ya2VyU3JjKCk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBERldvcmtlcjtcbiAgfSgpO1xuXG4gIHJldHVybiBQREZXb3JrZXI7XG59KCk7XG5cbmV4cG9ydHMuUERGV29ya2VyID0gUERGV29ya2VyO1xuXG52YXIgV29ya2VyVHJhbnNwb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gV29ya2VyVHJhbnNwb3J0KG1lc3NhZ2VIYW5kbGVyLCBsb2FkaW5nVGFzaywgbmV0d29ya1N0cmVhbSwgcGFyYW1zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdvcmtlclRyYW5zcG9ydCk7XG5cbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgdGhpcy5sb2FkaW5nVGFzayA9IGxvYWRpbmdUYXNrO1xuICAgIHRoaXMuY29tbW9uT2JqcyA9IG5ldyBQREZPYmplY3RzKCk7XG4gICAgdGhpcy5mb250TG9hZGVyID0gbmV3IF9mb250X2xvYWRlci5Gb250TG9hZGVyKHtcbiAgICAgIGRvY0lkOiBsb2FkaW5nVGFzay5kb2NJZCxcbiAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlOiB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZS5iaW5kKHRoaXMpLFxuICAgICAgb3duZXJEb2N1bWVudDogcGFyYW1zLm93bmVyRG9jdW1lbnRcbiAgICB9KTtcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy5DTWFwUmVhZGVyRmFjdG9yeSA9IG5ldyBwYXJhbXMuQ01hcFJlYWRlckZhY3Rvcnkoe1xuICAgICAgYmFzZVVybDogcGFyYW1zLmNNYXBVcmwsXG4gICAgICBpc0NvbXByZXNzZWQ6IHBhcmFtcy5jTWFwUGFja2VkXG4gICAgfSk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5ID0gbnVsbDtcbiAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkgPSBudWxsO1xuICAgIHRoaXMuX25ldHdvcmtTdHJlYW0gPSBuZXR3b3JrU3RyZWFtO1xuICAgIHRoaXMuX2Z1bGxSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RQcm9ncmVzcyA9IG51bGw7XG4gICAgdGhpcy5wYWdlQ2FjaGUgPSBbXTtcbiAgICB0aGlzLnBhZ2VQcm9taXNlcyA9IFtdO1xuICAgIHRoaXMuZG93bmxvYWRJbmZvQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLnNldHVwTWVzc2FnZUhhbmRsZXIoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXb3JrZXJUcmFuc3BvcnQsIFt7XG4gICAga2V5OiBcImFubm90YXRpb25TdG9yYWdlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJhbm5vdGF0aW9uU3RvcmFnZVwiLCBuZXcgX2Fubm90YXRpb25fc3RvcmFnZS5Bbm5vdGF0aW9uU3RvcmFnZSgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5kZXN0cm95Q2FwYWJpbGl0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICBpZiAodGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5KSB7XG4gICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWQgZHVyaW5nIG9uUGFzc3dvcmQgY2FsbGJhY2tcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2FpdE9uID0gW107XG5cbiAgICAgIHZhciBfaXRlcmF0b3IxNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMucGFnZUNhY2hlKSxcbiAgICAgICAgICBfc3RlcDE0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjE0LnMoKTsgIShfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBwYWdlID0gX3N0ZXAxNC52YWx1ZTtcblxuICAgICAgICAgIGlmIChwYWdlKSB7XG4gICAgICAgICAgICB3YWl0T24ucHVzaChwYWdlLl9kZXN0cm95KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE0LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE0LmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYWdlQ2FjaGUubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMucGFnZVByb21pc2VzLmxlbmd0aCA9IDA7XG5cbiAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwiYW5ub3RhdGlvblN0b3JhZ2VcIikpIHtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5yZXNldE1vZGlmaWVkKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXJtaW5hdGVkID0gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJUZXJtaW5hdGVcIiwgbnVsbCk7XG4gICAgICB3YWl0T24ucHVzaCh0ZXJtaW5hdGVkKTtcbiAgICAgIFByb21pc2UuYWxsKHdhaXRPbikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMTEuY29tbW9uT2Jqcy5jbGVhcigpO1xuXG4gICAgICAgIF90aGlzMTEuZm9udExvYWRlci5jbGVhcigpO1xuXG4gICAgICAgIF90aGlzMTEuX2hhc0pTQWN0aW9uc1Byb21pc2UgPSBudWxsO1xuXG4gICAgICAgIGlmIChfdGhpczExLl9uZXR3b3JrU3RyZWFtKSB7XG4gICAgICAgICAgX3RoaXMxMS5fbmV0d29ya1N0cmVhbS5jYW5jZWxBbGxSZXF1ZXN0cyhuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oXCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQuXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpczExLm1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgX3RoaXMxMS5tZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG5cbiAgICAgICAgICBfdGhpczExLm1lc3NhZ2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMTEuZGVzdHJveUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgfSwgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0dXBNZXNzYWdlSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cE1lc3NhZ2VIYW5kbGVyKCkge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgICB2YXIgbWVzc2FnZUhhbmRsZXIgPSB0aGlzLm1lc3NhZ2VIYW5kbGVyLFxuICAgICAgICAgIGxvYWRpbmdUYXNrID0gdGhpcy5sb2FkaW5nVGFzaztcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmVhZGVyXCIsIGZ1bmN0aW9uIChkYXRhLCBzaW5rKSB7XG4gICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKF90aGlzMTIuX25ldHdvcmtTdHJlYW0sIFwiR2V0UmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS5cIik7XG4gICAgICAgIF90aGlzMTIuX2Z1bGxSZWFkZXIgPSBfdGhpczEyLl9uZXR3b3JrU3RyZWFtLmdldEZ1bGxSZWFkZXIoKTtcblxuICAgICAgICBfdGhpczEyLl9mdWxsUmVhZGVyLm9uUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgX3RoaXMxMi5fbGFzdFByb2dyZXNzID0ge1xuICAgICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkLFxuICAgICAgICAgICAgdG90YWw6IGV2dC50b3RhbFxuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgc2luay5vblB1bGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMxMi5fZnVsbFJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoX3JlZjE0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMTQudmFsdWUsXG4gICAgICAgICAgICAgICAgZG9uZSA9IF9yZWYxNC5kb25lO1xuXG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKHZhbHVlKSwgXCJHZXRSZWFkZXIgLSBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlci5cIik7XG4gICAgICAgICAgICBzaW5rLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCAxLCBbdmFsdWVdKTtcbiAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IocmVhc29uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzaW5rLm9uQ2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIF90aGlzMTIuX2Z1bGxSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG5cbiAgICAgICAgICBzaW5rLnJlYWR5W1wiY2F0Y2hcIl0oZnVuY3Rpb24gKHJlYWR5UmVhc29uKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMxMi5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyByZWFkeVJlYXNvbjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJSZWFkZXJIZWFkZXJzUmVhZHlcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGhlYWRlcnNDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICB2YXIgZnVsbFJlYWRlciA9IF90aGlzMTIuX2Z1bGxSZWFkZXI7XG4gICAgICAgIGZ1bGxSZWFkZXIuaGVhZGVyc1JlYWR5LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghZnVsbFJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCB8fCAhZnVsbFJlYWRlci5pc1JhbmdlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMxMi5fbGFzdFByb2dyZXNzICYmIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcyhfdGhpczEyLl9sYXN0UHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdWxsUmVhZGVyLm9uUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcyh7XG4gICAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgICAgICAgICAgICB0b3RhbDogZXZ0LnRvdGFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGVhZGVyc0NhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICBpc1N0cmVhbWluZ1N1cHBvcnRlZDogZnVsbFJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCxcbiAgICAgICAgICAgIGlzUmFuZ2VTdXBwb3J0ZWQ6IGZ1bGxSZWFkZXIuaXNSYW5nZVN1cHBvcnRlZCxcbiAgICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IGZ1bGxSZWFkZXIuY29udGVudExlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBoZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgICByZXR1cm4gaGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJHZXRSYW5nZVJlYWRlclwiLCBmdW5jdGlvbiAoZGF0YSwgc2luaykge1xuICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShfdGhpczEyLl9uZXR3b3JrU3RyZWFtLCBcIkdldFJhbmdlUmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS5cIik7XG5cbiAgICAgICAgdmFyIHJhbmdlUmVhZGVyID0gX3RoaXMxMi5fbmV0d29ya1N0cmVhbS5nZXRSYW5nZVJlYWRlcihkYXRhLmJlZ2luLCBkYXRhLmVuZCk7XG5cbiAgICAgICAgaWYgKCFyYW5nZVJlYWRlcikge1xuICAgICAgICAgIHNpbmsuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzaW5rLm9uUHVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByYW5nZVJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoX3JlZjE1KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMTUudmFsdWUsXG4gICAgICAgICAgICAgICAgZG9uZSA9IF9yZWYxNS5kb25lO1xuXG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKHZhbHVlKSwgXCJHZXRSYW5nZVJlYWRlciAtIGV4cGVjdGVkIGFuIEFycmF5QnVmZmVyLlwiKTtcbiAgICAgICAgICAgIHNpbmsuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSksIDEsIFt2YWx1ZV0pO1xuICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgc2luay5lcnJvcihyZWFzb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNpbmsub25DYW5jZWwgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgcmFuZ2VSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgICAgc2luay5yZWFkeVtcImNhdGNoXCJdKGZ1bmN0aW9uIChyZWFkeVJlYXNvbikge1xuICAgICAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgcmVhZHlSZWFzb247XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0RG9jXCIsIGZ1bmN0aW9uIChfcmVmMTYpIHtcbiAgICAgICAgdmFyIHBkZkluZm8gPSBfcmVmMTYucGRmSW5mbztcbiAgICAgICAgX3RoaXMxMi5fbnVtUGFnZXMgPSBwZGZJbmZvLm51bVBhZ2VzO1xuXG4gICAgICAgIGxvYWRpbmdUYXNrLl9jYXBhYmlsaXR5LnJlc29sdmUobmV3IFBERkRvY3VtZW50UHJveHkocGRmSW5mbywgX3RoaXMxMikpO1xuICAgICAgfSk7XG4gICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRvY0V4Y2VwdGlvblwiLCBmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgdmFyIHJlYXNvbjtcblxuICAgICAgICBzd2l0Y2ggKGV4Lm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwiUGFzc3dvcmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHJlYXNvbiA9IG5ldyBfdXRpbC5QYXNzd29yZEV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5jb2RlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIkludmFsaWRQREZFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHJlYXNvbiA9IG5ldyBfdXRpbC5JbnZhbGlkUERGRXhjZXB0aW9uKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwiTWlzc2luZ1BERkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oZXgubWVzc2FnZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHJlYXNvbiA9IG5ldyBfdXRpbC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24oZXgubWVzc2FnZSwgZXguc3RhdHVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIlVua25vd25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlVua25vd25FcnJvckV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5kZXRhaWxzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEocmVhc29uIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiRG9jRXhjZXB0aW9uIC0gZXhwZWN0ZWQgYSB2YWxpZCBFcnJvci5cIjtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikobXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRpbmdUYXNrLl9jYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgICBtZXNzYWdlSGFuZGxlci5vbihcIlBhc3N3b3JkUmVxdWVzdFwiLCBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgICAgIF90aGlzMTIuX3Bhc3N3b3JkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcblxuICAgICAgICBpZiAobG9hZGluZ1Rhc2sub25QYXNzd29yZCkge1xuICAgICAgICAgIHZhciB1cGRhdGVQYXNzd29yZCA9IGZ1bmN0aW9uIHVwZGF0ZVBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBfdGhpczEyLl9wYXNzd29yZENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2FkaW5nVGFzay5vblBhc3N3b3JkKHVwZGF0ZVBhc3N3b3JkLCBleGNlcHRpb24uY29kZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIF90aGlzMTIuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczEyLl9wYXNzd29yZENhcGFiaWxpdHkucmVqZWN0KG5ldyBfdXRpbC5QYXNzd29yZEV4Y2VwdGlvbihleGNlcHRpb24ubWVzc2FnZSwgZXhjZXB0aW9uLmNvZGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczEyLl9wYXNzd29yZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJEYXRhTG9hZGVkXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7XG4gICAgICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcyh7XG4gICAgICAgICAgICBsb2FkZWQ6IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczEyLmRvd25sb2FkSW5mb0NhcGFiaWxpdHkucmVzb2x2ZShkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJTdGFydFJlbmRlclBhZ2VcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhZ2UgPSBfdGhpczEyLnBhZ2VDYWNoZVtkYXRhLnBhZ2VJbmRleF07XG5cbiAgICAgICAgcGFnZS5fc3RhcnRSZW5kZXJQYWdlKGRhdGEudHJhbnNwYXJlbmN5LCBkYXRhLmludGVudCk7XG4gICAgICB9KTtcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiY29tbW9ub2JqXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBfZ2xvYmFsVGhpcyRGb250SW5zcGU7XG5cbiAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9kYXRhID0gX3NsaWNlZFRvQXJyYXkoZGF0YSwgMyksXG4gICAgICAgICAgICBpZCA9IF9kYXRhWzBdLFxuICAgICAgICAgICAgdHlwZSA9IF9kYXRhWzFdLFxuICAgICAgICAgICAgZXhwb3J0ZWREYXRhID0gX2RhdGFbMl07XG5cbiAgICAgICAgaWYgKF90aGlzMTIuY29tbW9uT2Jqcy5oYXMoaWQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBcIkZvbnRcIjpcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfdGhpczEyLl9wYXJhbXM7XG5cbiAgICAgICAgICAgIGlmIChcImVycm9yXCIgaW4gZXhwb3J0ZWREYXRhKSB7XG4gICAgICAgICAgICAgIHZhciBleHBvcnRlZEVycm9yID0gZXhwb3J0ZWREYXRhLmVycm9yO1xuICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJFcnJvciBkdXJpbmcgZm9udCBsb2FkaW5nOiBcIi5jb25jYXQoZXhwb3J0ZWRFcnJvcikpO1xuXG4gICAgICAgICAgICAgIF90aGlzMTIuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBleHBvcnRlZEVycm9yKTtcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGZvbnRSZWdpc3RyeSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChwYXJhbXMucGRmQnVnICYmIChfZ2xvYmFsVGhpcyRGb250SW5zcGUgPSBnbG9iYWxUaGlzLkZvbnRJbnNwZWN0b3IpICE9PSBudWxsICYmIF9nbG9iYWxUaGlzJEZvbnRJbnNwZSAhPT0gdm9pZCAwICYmIF9nbG9iYWxUaGlzJEZvbnRJbnNwZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgIGZvbnRSZWdpc3RyeSA9IHtcbiAgICAgICAgICAgICAgICByZWdpc3RlckZvbnQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRm9udChmb250LCB1cmwpIHtcbiAgICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuRm9udEluc3BlY3Rvci5mb250QWRkZWQoZm9udCwgdXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmb250ID0gbmV3IF9mb250X2xvYWRlci5Gb250RmFjZU9iamVjdChleHBvcnRlZERhdGEsIHtcbiAgICAgICAgICAgICAgaXNFdmFsU3VwcG9ydGVkOiBwYXJhbXMuaXNFdmFsU3VwcG9ydGVkLFxuICAgICAgICAgICAgICBkaXNhYmxlRm9udEZhY2U6IHBhcmFtcy5kaXNhYmxlRm9udEZhY2UsXG4gICAgICAgICAgICAgIGlnbm9yZUVycm9yczogcGFyYW1zLmlnbm9yZUVycm9ycyxcbiAgICAgICAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmU6IF90aGlzMTIuX29uVW5zdXBwb3J0ZWRGZWF0dXJlLmJpbmQoX3RoaXMxMiksXG4gICAgICAgICAgICAgIGZvbnRSZWdpc3RyeTogZm9udFJlZ2lzdHJ5XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMxMi5mb250TG9hZGVyLmJpbmQoZm9udClbXCJjYXRjaFwiXShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJGb250RmFsbGJhY2tcIiwge1xuICAgICAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgJiYgZm9udC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9udC5kYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF90aGlzMTIuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBmb250KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJGb250UGF0aFwiOlxuICAgICAgICAgIGNhc2UgXCJJbWFnZVwiOlxuICAgICAgICAgICAgX3RoaXMxMi5jb21tb25PYmpzLnJlc29sdmUoaWQsIGV4cG9ydGVkRGF0YSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdvdCB1bmtub3duIGNvbW1vbiBvYmplY3QgdHlwZSBcIi5jb25jYXQodHlwZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwib2JqXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBfaW1hZ2VEYXRhJGRhdGE7XG5cbiAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZGF0YTIgPSBfc2xpY2VkVG9BcnJheShkYXRhLCA0KSxcbiAgICAgICAgICAgIGlkID0gX2RhdGEyWzBdLFxuICAgICAgICAgICAgcGFnZUluZGV4ID0gX2RhdGEyWzFdLFxuICAgICAgICAgICAgdHlwZSA9IF9kYXRhMlsyXSxcbiAgICAgICAgICAgIGltYWdlRGF0YSA9IF9kYXRhMlszXTtcblxuICAgICAgICB2YXIgcGFnZVByb3h5ID0gX3RoaXMxMi5wYWdlQ2FjaGVbcGFnZUluZGV4XTtcblxuICAgICAgICBpZiAocGFnZVByb3h5Lm9ianMuaGFzKGlkKSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwiSW1hZ2VcIjpcbiAgICAgICAgICAgIHBhZ2VQcm94eS5vYmpzLnJlc29sdmUoaWQsIGltYWdlRGF0YSk7XG4gICAgICAgICAgICB2YXIgTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUgPSA4MDAwMDAwO1xuXG4gICAgICAgICAgICBpZiAoKGltYWdlRGF0YSA9PT0gbnVsbCB8fCBpbWFnZURhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfaW1hZ2VEYXRhJGRhdGEgPSBpbWFnZURhdGEuZGF0YSkgPT09IG51bGwgfHwgX2ltYWdlRGF0YSRkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW1hZ2VEYXRhJGRhdGEubGVuZ3RoKSA+IE1BWF9JTUFHRV9TSVpFX1RPX1NUT1JFKSB7XG4gICAgICAgICAgICAgIHBhZ2VQcm94eS5jbGVhbnVwQWZ0ZXJSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHb3QgdW5rbm93biBvYmplY3QgdHlwZSBcIi5jb25jYXQodHlwZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJEb2NQcm9ncmVzc1wiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoX3RoaXMxMi5kZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9hZGluZ1Rhc2sub25Qcm9ncmVzcykge1xuICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgbG9hZGVkOiBkYXRhLmxvYWRlZCxcbiAgICAgICAgICAgIHRvdGFsOiBkYXRhLnRvdGFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJVbnN1cHBvcnRlZEZlYXR1cmVcIiwgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUuYmluZCh0aGlzKSk7XG4gICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkZldGNoQnVpbHRJbkNNYXBcIiwgZnVuY3Rpb24gKGRhdGEsIHNpbmspIHtcbiAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgc2luay5lcnJvcihuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZldGNoZWQgPSBmYWxzZTtcblxuICAgICAgICBzaW5rLm9uUHVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmV0Y2hlZCkge1xuICAgICAgICAgICAgc2luay5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZldGNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgX3RoaXMxMi5DTWFwUmVhZGVyRmFjdG9yeS5mZXRjaChkYXRhKS50aGVuKGZ1bmN0aW9uIChidWlsdEluQ01hcCkge1xuICAgICAgICAgICAgc2luay5lbnF1ZXVlKGJ1aWx0SW5DTWFwLCAxLCBbYnVpbHRJbkNNYXAuY01hcERhdGEuYnVmZmVyXSk7XG4gICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX29uVW5zdXBwb3J0ZWRGZWF0dXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblVuc3VwcG9ydGVkRmVhdHVyZShfcmVmMTcpIHtcbiAgICAgIHZhciBmZWF0dXJlSWQgPSBfcmVmMTcuZmVhdHVyZUlkO1xuXG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sb2FkaW5nVGFzay5vblVuc3VwcG9ydGVkRmVhdHVyZSkge1xuICAgICAgICB0aGlzLmxvYWRpbmdUYXNrLm9uVW5zdXBwb3J0ZWRGZWF0dXJlKGZlYXR1cmVJZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERhdGFcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZShwYWdlTnVtYmVyKSB7XG4gICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYWdlTnVtYmVyKSB8fCBwYWdlTnVtYmVyIDw9IDAgfHwgcGFnZU51bWJlciA+IHRoaXMuX251bVBhZ2VzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIHBhZ2UgcmVxdWVzdFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYWdlSW5kZXggPSBwYWdlTnVtYmVyIC0gMTtcblxuICAgICAgaWYgKHBhZ2VJbmRleCBpbiB0aGlzLnBhZ2VQcm9taXNlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlUHJvbWlzZXNbcGFnZUluZGV4XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VcIiwge1xuICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleFxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocGFnZUluZm8pIHtcbiAgICAgICAgaWYgKF90aGlzMTMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNwb3J0IGRlc3Ryb3llZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYWdlID0gbmV3IFBERlBhZ2VQcm94eShwYWdlSW5kZXgsIHBhZ2VJbmZvLCBfdGhpczEzLCBfdGhpczEzLl9wYXJhbXMub3duZXJEb2N1bWVudCwgX3RoaXMxMy5fcGFyYW1zLnBkZkJ1Zyk7XG4gICAgICAgIF90aGlzMTMucGFnZUNhY2hlW3BhZ2VJbmRleF0gPSBwYWdlO1xuICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wYWdlUHJvbWlzZXNbcGFnZUluZGV4XSA9IHByb21pc2U7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGFnZUluZGV4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VJbmRleChyZWYpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VJbmRleFwiLCB7XG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihyZWFzb24pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbm5vdGF0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbm5vdGF0aW9ucyhwYWdlSW5kZXgsIGludGVudCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0QW5ub3RhdGlvbnNcIiwge1xuICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleCxcbiAgICAgICAgaW50ZW50OiBpbnRlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYXZlRG9jdW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZURvY3VtZW50KCkge1xuICAgICAgdmFyIF90aGlzJF9mdWxsUmVhZGVyJGZpbCxcbiAgICAgICAgICBfdGhpcyRfZnVsbFJlYWRlcixcbiAgICAgICAgICBfdGhpczE0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiU2F2ZURvY3VtZW50XCIsIHtcbiAgICAgICAgbnVtUGFnZXM6IHRoaXMuX251bVBhZ2VzLFxuICAgICAgICBhbm5vdGF0aW9uU3RvcmFnZTogdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zZXJpYWxpemFibGUsXG4gICAgICAgIGZpbGVuYW1lOiAoX3RoaXMkX2Z1bGxSZWFkZXIkZmlsID0gKF90aGlzJF9mdWxsUmVhZGVyID0gdGhpcy5fZnVsbFJlYWRlcikgPT09IG51bGwgfHwgX3RoaXMkX2Z1bGxSZWFkZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9mdWxsUmVhZGVyLmZpbGVuYW1lKSAhPT0gbnVsbCAmJiBfdGhpcyRfZnVsbFJlYWRlciRmaWwgIT09IHZvaWQgMCA/IF90aGlzJF9mdWxsUmVhZGVyJGZpbCA6IG51bGxcbiAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMTQuYW5ub3RhdGlvblN0b3JhZ2UucmVzZXRNb2RpZmllZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZpZWxkT2JqZWN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZE9iamVjdHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRGaWVsZE9iamVjdHNcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0pTQWN0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNKU0FjdGlvbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFzSlNBY3Rpb25zUHJvbWlzZSB8fCAodGhpcy5faGFzSlNBY3Rpb25zUHJvbWlzZSA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiSGFzSlNBY3Rpb25zXCIsIG51bGwpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2FsY3VsYXRpb25PcmRlcklkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYWxjdWxhdGlvbk9yZGVySWRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0Q2FsY3VsYXRpb25PcmRlcklkc1wiLCBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGVzdGluYXRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlc3RpbmF0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERlc3RpbmF0aW9uc1wiLCBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGVzdGluYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzdGluYXRpb24oaWQpIHtcbiAgICAgIGlmICh0eXBlb2YgaWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgZGVzdGluYXRpb24gcmVxdWVzdC5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREZXN0aW5hdGlvblwiLCB7XG4gICAgICAgIGlkOiBpZFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VMYWJlbHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUxhYmVscygpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYWJlbHNcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VMYXlvdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUxheW91dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYXlvdXRcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VNb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VNb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZU1vZGVcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFZpZXdlclByZWZlcmVuY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZXdlclByZWZlcmVuY2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0Vmlld2VyUHJlZmVyZW5jZXNcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE9wZW5BY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3BlbkFjdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE9wZW5BY3Rpb25cIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEF0dGFjaG1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dGFjaG1lbnRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0QXR0YWNobWVudHNcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEphdmFTY3JpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SmF2YVNjcmlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEphdmFTY3JpcHRcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERvY0pTQWN0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREb2NKU0FjdGlvbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREb2NKU0FjdGlvbnNcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VKU0FjdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUpTQWN0aW9ucyhwYWdlSW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VKU0FjdGlvbnNcIiwge1xuICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VYZmFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZVhmYShwYWdlSW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VYZmFcIiwge1xuICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFN0cnVjdFRyZWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3RydWN0VHJlZShwYWdlSW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFN0cnVjdFRyZWVcIiwge1xuICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE91dGxpbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3V0bGluZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE91dGxpbmVcIiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE9wdGlvbmFsQ29udGVudENvbmZpZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcHRpb25hbENvbnRlbnRDb25maWcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRPcHRpb25hbENvbnRlbnRDb25maWdcIiwgbnVsbCkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICByZXR1cm4gbmV3IF9vcHRpb25hbF9jb250ZW50X2NvbmZpZy5PcHRpb25hbENvbnRlbnRDb25maWcocmVzdWx0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGVybWlzc2lvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRQZXJtaXNzaW9uc1wiLCBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TWV0YWRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEoKSB7XG4gICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE1ldGFkYXRhXCIsIG51bGwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgdmFyIF90aGlzMTUkX2Z1bGxSZWFkZXIkZiwgX3RoaXMxNSRfZnVsbFJlYWRlciwgX3RoaXMxNSRfZnVsbFJlYWRlciRjLCBfdGhpczE1JF9mdWxsUmVhZGVyMjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGluZm86IHJlc3VsdHNbMF0sXG4gICAgICAgICAgbWV0YWRhdGE6IHJlc3VsdHNbMV0gPyBuZXcgX21ldGFkYXRhLk1ldGFkYXRhKHJlc3VsdHNbMV0pIDogbnVsbCxcbiAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTogKF90aGlzMTUkX2Z1bGxSZWFkZXIkZiA9IChfdGhpczE1JF9mdWxsUmVhZGVyID0gX3RoaXMxNS5fZnVsbFJlYWRlcikgPT09IG51bGwgfHwgX3RoaXMxNSRfZnVsbFJlYWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMxNSRfZnVsbFJlYWRlci5maWxlbmFtZSkgIT09IG51bGwgJiYgX3RoaXMxNSRfZnVsbFJlYWRlciRmICE9PSB2b2lkIDAgPyBfdGhpczE1JF9mdWxsUmVhZGVyJGYgOiBudWxsLFxuICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IChfdGhpczE1JF9mdWxsUmVhZGVyJGMgPSAoX3RoaXMxNSRfZnVsbFJlYWRlcjIgPSBfdGhpczE1Ll9mdWxsUmVhZGVyKSA9PT0gbnVsbCB8fCBfdGhpczE1JF9mdWxsUmVhZGVyMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMxNSRfZnVsbFJlYWRlcjIuY29udGVudExlbmd0aCkgIT09IG51bGwgJiYgX3RoaXMxNSRfZnVsbFJlYWRlciRjICE9PSB2b2lkIDAgPyBfdGhpczE1JF9mdWxsUmVhZGVyJGMgOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TWFya0luZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWFya0luZm8oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRNYXJrSW5mb1wiLCBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U3RhdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3RhdHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRTdGF0c1wiLCBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRDbGVhbnVwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfc3RhcnRDbGVhbnVwID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7XG4gICAgICAgIHZhciBrZWVwTG9hZGVkRm9udHMsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgY2xlYW51cFN1Y2Nlc3NmdWwsXG4gICAgICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGtlZXBMb2FkZWRGb250cyA9IF9hcmdzMi5sZW5ndGggPiAwICYmIF9hcmdzMlswXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3MyWzBdIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkNsZWFudXBcIiwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBpID0gMCwgaWkgPSB0aGlzLnBhZ2VDYWNoZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGlmICghKGkgPCBpaSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYWdlID0gdGhpcy5wYWdlQ2FjaGVbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAocGFnZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwiY29udGludWVcIiwgMTMpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgY2xlYW51cFN1Y2Nlc3NmdWwgPSBwYWdlLmNsZWFudXAoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwU3VjY2Vzc2Z1bCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInN0YXJ0Q2xlYW51cDogUGFnZSBcIi5jb25jYXQoaSArIDEsIFwiIGlzIGN1cnJlbnRseSByZW5kZXJpbmcuXCIpKTtcblxuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgIGlmICgha2VlcExvYWRlZEZvbnRzKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmZvbnRMb2FkZXIuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNKU0FjdGlvbnNQcm9taXNlID0gbnVsbDtcblxuICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0Q2xlYW51cCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdGFydENsZWFudXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXJ0Q2xlYW51cDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJsb2FkaW5nUGFyYW1zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gdGhpcy5fcGFyYW1zO1xuICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwibG9hZGluZ1BhcmFtc1wiLCB7XG4gICAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IHBhcmFtcy5kaXNhYmxlQXV0b0ZldGNoLFxuICAgICAgICBkaXNhYmxlRm9udEZhY2U6IHBhcmFtcy5kaXNhYmxlRm9udEZhY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBXb3JrZXJUcmFuc3BvcnQ7XG59KCk7XG5cbnZhciBQREZPYmplY3RzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGT2JqZWN0cygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGT2JqZWN0cyk7XG5cbiAgICB0aGlzLl9vYmpzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZPYmplY3RzLCBbe1xuICAgIGtleTogXCJfZW5zdXJlT2JqXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnN1cmVPYmoob2JqSWQpIHtcbiAgICAgIGlmICh0aGlzLl9vYmpzW29iaklkXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2Jqc1tvYmpJZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9vYmpzW29iaklkXSA9IHtcbiAgICAgICAgY2FwYWJpbGl0eTogKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpLFxuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICByZXNvbHZlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQob2JqSWQpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZU9iaihvYmpJZCkuY2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oY2FsbGJhY2spO1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JqID0gdGhpcy5fb2Jqc1tvYmpJZF07XG5cbiAgICAgIGlmICghb2JqIHx8ICFvYmoucmVzb2x2ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGluZyBvYmplY3QgdGhhdCBpc24ndCByZXNvbHZlZCB5ZXQgXCIuY29uY2F0KG9iaklkLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqLmRhdGE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMob2JqSWQpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl9vYmpzW29iaklkXTtcbiAgICAgIHJldHVybiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLnJlc29sdmVkKSB8fCBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzb2x2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKG9iaklkLCBkYXRhKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fZW5zdXJlT2JqKG9iaklkKTtcblxuICAgICAgb2JqLnJlc29sdmVkID0gdHJ1ZTtcbiAgICAgIG9iai5kYXRhID0gZGF0YTtcbiAgICAgIG9iai5jYXBhYmlsaXR5LnJlc29sdmUoZGF0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5fb2JqcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERk9iamVjdHM7XG59KCk7XG5cbnZhciBSZW5kZXJUYXNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVuZGVyVGFzayhpbnRlcm5hbFJlbmRlclRhc2spIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVuZGVyVGFzayk7XG5cbiAgICB0aGlzLl9pbnRlcm5hbFJlbmRlclRhc2sgPSBpbnRlcm5hbFJlbmRlclRhc2s7XG4gICAgdGhpcy5vbkNvbnRpbnVlID0gbnVsbDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZW5kZXJUYXNrLCBbe1xuICAgIGtleTogXCJwcm9taXNlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxSZW5kZXJUYXNrLmNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgIHRoaXMuX2ludGVybmFsUmVuZGVyVGFzay5jYW5jZWwoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVuZGVyVGFzaztcbn0oKTtcblxudmFyIEludGVybmFsUmVuZGVyVGFzayA9IGZ1bmN0aW9uIEludGVybmFsUmVuZGVyVGFza0Nsb3N1cmUoKSB7XG4gIHZhciBjYW52YXNJblJlbmRlcmluZyA9IG5ldyBXZWFrU2V0KCk7XG5cbiAgdmFyIEludGVybmFsUmVuZGVyVGFzayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW50ZXJuYWxSZW5kZXJUYXNrKF9yZWYxOCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX3JlZjE4LmNhbGxiYWNrLFxuICAgICAgICAgIHBhcmFtcyA9IF9yZWYxOC5wYXJhbXMsXG4gICAgICAgICAgb2JqcyA9IF9yZWYxOC5vYmpzLFxuICAgICAgICAgIGNvbW1vbk9ianMgPSBfcmVmMTguY29tbW9uT2JqcyxcbiAgICAgICAgICBvcGVyYXRvckxpc3QgPSBfcmVmMTgub3BlcmF0b3JMaXN0LFxuICAgICAgICAgIHBhZ2VJbmRleCA9IF9yZWYxOC5wYWdlSW5kZXgsXG4gICAgICAgICAgY2FudmFzRmFjdG9yeSA9IF9yZWYxOC5jYW52YXNGYWN0b3J5LFxuICAgICAgICAgIF9yZWYxOCR1c2VSZXF1ZXN0QW5pbSA9IF9yZWYxOC51c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgICAgdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gX3JlZjE4JHVzZVJlcXVlc3RBbmltID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxOCR1c2VSZXF1ZXN0QW5pbSxcbiAgICAgICAgICBfcmVmMTgkcGRmQnVnID0gX3JlZjE4LnBkZkJ1ZyxcbiAgICAgICAgICBwZGZCdWcgPSBfcmVmMTgkcGRmQnVnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxOCRwZGZCdWc7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcm5hbFJlbmRlclRhc2spO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgIHRoaXMub2JqcyA9IG9ianM7XG4gICAgICB0aGlzLmNvbW1vbk9ianMgPSBjb21tb25PYmpzO1xuICAgICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSBudWxsO1xuICAgICAgdGhpcy5vcGVyYXRvckxpc3QgPSBvcGVyYXRvckxpc3Q7XG4gICAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5O1xuICAgICAgdGhpcy5fcGRmQnVnID0gcGRmQnVnO1xuICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjayA9IG51bGw7XG4gICAgICB0aGlzLmdyYXBoaWNzUmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3VzZVJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gdHJ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgdGhpcy5jYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHRoaXMudGFzayA9IG5ldyBSZW5kZXJUYXNrKHRoaXMpO1xuICAgICAgdGhpcy5fY2FuY2VsQm91bmQgPSB0aGlzLmNhbmNlbC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fY29udGludWVCb3VuZCA9IHRoaXMuX2NvbnRpbnVlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9zY2hlZHVsZU5leHRCb3VuZCA9IHRoaXMuX3NjaGVkdWxlTmV4dC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fbmV4dEJvdW5kID0gdGhpcy5fbmV4dC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fY2FudmFzID0gcGFyYW1zLmNhbnZhc0NvbnRleHQuY2FudmFzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJbnRlcm5hbFJlbmRlclRhc2ssIFt7XG4gICAgICBrZXk6IFwiY29tcGxldGVkXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FwYWJpbGl0eS5wcm9taXNlW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge30pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpbml0aWFsaXplR3JhcGhpY3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplR3JhcGhpY3MoX3JlZjE5KSB7XG4gICAgICAgIHZhciBfZ2xvYmFsVGhpcyRTdGVwcGVyTWE7XG5cbiAgICAgICAgdmFyIF9yZWYxOSR0cmFuc3BhcmVuY3kgPSBfcmVmMTkudHJhbnNwYXJlbmN5LFxuICAgICAgICAgICAgdHJhbnNwYXJlbmN5ID0gX3JlZjE5JHRyYW5zcGFyZW5jeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTkkdHJhbnNwYXJlbmN5LFxuICAgICAgICAgICAgb3B0aW9uYWxDb250ZW50Q29uZmlnID0gX3JlZjE5Lm9wdGlvbmFsQ29udGVudENvbmZpZztcblxuICAgICAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY2FudmFzKSB7XG4gICAgICAgICAgaWYgKGNhbnZhc0luUmVuZGVyaW5nLmhhcyh0aGlzLl9jYW52YXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdXNlIHRoZSBzYW1lIGNhbnZhcyBkdXJpbmcgbXVsdGlwbGUgcmVuZGVyKCkgb3BlcmF0aW9ucy4gXCIgKyBcIlVzZSBkaWZmZXJlbnQgY2FudmFzIG9yIGVuc3VyZSBwcmV2aW91cyBvcGVyYXRpb25zIHdlcmUgXCIgKyBcImNhbmNlbGxlZCBvciBjb21wbGV0ZWQuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbnZhc0luUmVuZGVyaW5nLmFkZCh0aGlzLl9jYW52YXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3BkZkJ1ZyAmJiAoX2dsb2JhbFRoaXMkU3RlcHBlck1hID0gZ2xvYmFsVGhpcy5TdGVwcGVyTWFuYWdlcikgIT09IG51bGwgJiYgX2dsb2JhbFRoaXMkU3RlcHBlck1hICE9PSB2b2lkIDAgJiYgX2dsb2JhbFRoaXMkU3RlcHBlck1hLmVuYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLnN0ZXBwZXIgPSBnbG9iYWxUaGlzLlN0ZXBwZXJNYW5hZ2VyLmNyZWF0ZSh0aGlzLl9wYWdlSW5kZXgpO1xuICAgICAgICAgIHRoaXMuc3RlcHBlci5pbml0KHRoaXMub3BlcmF0b3JMaXN0KTtcbiAgICAgICAgICB0aGlzLnN0ZXBwZXIubmV4dEJyZWFrUG9pbnQgPSB0aGlzLnN0ZXBwZXIuZ2V0TmV4dEJyZWFrUG9pbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdGhpcyRwYXJhbXMgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGNhbnZhc0NvbnRleHQgPSBfdGhpcyRwYXJhbXMuY2FudmFzQ29udGV4dCxcbiAgICAgICAgICAgIHZpZXdwb3J0ID0gX3RoaXMkcGFyYW1zLnZpZXdwb3J0LFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gX3RoaXMkcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgICAgICAgIGltYWdlTGF5ZXIgPSBfdGhpcyRwYXJhbXMuaW1hZ2VMYXllcixcbiAgICAgICAgICAgIGJhY2tncm91bmQgPSBfdGhpcyRwYXJhbXMuYmFja2dyb3VuZDtcbiAgICAgICAgdGhpcy5nZnggPSBuZXcgX2NhbnZhcy5DYW52YXNHcmFwaGljcyhjYW52YXNDb250ZXh0LCB0aGlzLmNvbW1vbk9ianMsIHRoaXMub2JqcywgdGhpcy5jYW52YXNGYWN0b3J5LCBpbWFnZUxheWVyLCBvcHRpb25hbENvbnRlbnRDb25maWcpO1xuICAgICAgICB0aGlzLmdmeC5iZWdpbkRyYXdpbmcoe1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgICAgICB0cmFuc3BhcmVuY3k6IHRyYW5zcGFyZW5jeSxcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9wZXJhdG9yTGlzdElkeCA9IDA7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeSA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjYW5jZWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FuY2VsbGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5nZngpIHtcbiAgICAgICAgICB0aGlzLmdmeC5lbmREcmF3aW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY2FudmFzKSB7XG4gICAgICAgICAgY2FudmFzSW5SZW5kZXJpbmdbXCJkZWxldGVcIl0odGhpcy5fY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2soZXJyb3IgfHwgbmV3IF9kaXNwbGF5X3V0aWxzLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbihcIlJlbmRlcmluZyBjYW5jZWxsZWQsIHBhZ2UgXCIuY29uY2F0KHRoaXMuX3BhZ2VJbmRleCArIDEpLCBcImNhbnZhc1wiKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9wZXJhdG9yTGlzdENoYW5nZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVyYXRvckxpc3RDaGFuZ2VkKCkge1xuICAgICAgICBpZiAoIXRoaXMuZ3JhcGhpY3NSZWFkeSkge1xuICAgICAgICAgIGlmICghdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrID0gdGhpcy5fY29udGludWVCb3VuZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGVwcGVyKSB7XG4gICAgICAgICAgdGhpcy5zdGVwcGVyLnVwZGF0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY29udGludWUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2NvbnRpbnVlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbnRpbnVlKCkge1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRhc2sub25Db250aW51ZSkge1xuICAgICAgICAgIHRoaXMudGFzay5vbkNvbnRpbnVlKHRoaXMuX3NjaGVkdWxlTmV4dEJvdW5kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZU5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2NoZWR1bGVOZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NjaGVkdWxlTmV4dCgpIHtcbiAgICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl91c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMTYuX25leHRCb3VuZCgpW1wiY2F0Y2hcIl0oX3RoaXMxNi5fY2FuY2VsQm91bmQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4odGhpcy5fbmV4dEJvdW5kKVtcImNhdGNoXCJdKHRoaXMuX2NhbmNlbEJvdW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfbmV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9uZXh0MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkge1xuICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gdGhpcy5nZnguZXhlY3V0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCwgdGhpcy5vcGVyYXRvckxpc3RJZHgsIHRoaXMuX2NvbnRpbnVlQm91bmQsIHRoaXMuc3RlcHBlcik7XG5cbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdG9yTGlzdElkeCA9PT0gdGhpcy5vcGVyYXRvckxpc3QuYXJnc0FycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVyYXRvckxpc3QubGFzdENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZnguZW5kRHJhd2luZygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzSW5SZW5kZXJpbmdbXCJkZWxldGVcIl0odGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGZ1bmN0aW9uIF9uZXh0KCkge1xuICAgICAgICAgIHJldHVybiBfbmV4dDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfbmV4dDtcbiAgICAgIH0oKVxuICAgIH1dKTtcblxuICAgIHJldHVybiBJbnRlcm5hbFJlbmRlclRhc2s7XG4gIH0oKTtcblxuICByZXR1cm4gSW50ZXJuYWxSZW5kZXJUYXNrO1xufSgpO1xuXG52YXIgdmVyc2lvbiA9ICcyLjkuMzU5JztcbmV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG52YXIgYnVpbGQgPSAnZTY2N2M4Y2JjJztcbmV4cG9ydHMuYnVpbGQgPSBidWlsZDtcblxuLyoqKi8gfSksXG4vKiAxMTQgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLkZvbnRMb2FkZXIgPSBleHBvcnRzLkZvbnRGYWNlT2JqZWN0ID0gdm9pZCAwO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEJhc2VGb250TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZUZvbnRMb2FkZXIoX3JlZikge1xuICAgIHZhciBkb2NJZCA9IF9yZWYuZG9jSWQsXG4gICAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlID0gX3JlZi5vblVuc3VwcG9ydGVkRmVhdHVyZSxcbiAgICAgICAgX3JlZiRvd25lckRvY3VtZW50ID0gX3JlZi5vd25lckRvY3VtZW50LFxuICAgICAgICBvd25lckRvY3VtZW50ID0gX3JlZiRvd25lckRvY3VtZW50ID09PSB2b2lkIDAgPyBnbG9iYWxUaGlzLmRvY3VtZW50IDogX3JlZiRvd25lckRvY3VtZW50O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VGb250TG9hZGVyKTtcblxuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlRm9udExvYWRlcikge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VGb250TG9hZGVyLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmRvY0lkID0gZG9jSWQ7XG4gICAgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUgPSBvblVuc3VwcG9ydGVkRmVhdHVyZTtcbiAgICB0aGlzLl9kb2N1bWVudCA9IG93bmVyRG9jdW1lbnQ7XG4gICAgdGhpcy5uYXRpdmVGb250RmFjZXMgPSBbXTtcbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IG51bGw7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZUZvbnRMb2FkZXIsIFt7XG4gICAga2V5OiBcImFkZE5hdGl2ZUZvbnRGYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE5hdGl2ZUZvbnRGYWNlKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcy5wdXNoKG5hdGl2ZUZvbnRGYWNlKTtcblxuICAgICAgdGhpcy5fZG9jdW1lbnQuZm9udHMuYWRkKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0UnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICAgIHZhciBzdHlsZUVsZW1lbnQgPSB0aGlzLnN0eWxlRWxlbWVudDtcblxuICAgICAgaWYgKCFzdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgc3R5bGVFbGVtZW50ID0gdGhpcy5zdHlsZUVsZW1lbnQgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHN0eWxlRWxlbWVudC5pZCA9IFwiUERGSlNfRk9OVF9TVFlMRV9UQUdfXCIuY29uY2F0KHRoaXMuZG9jSWQpO1xuXG4gICAgICAgIHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0eWxlU2hlZXQgPSBzdHlsZUVsZW1lbnQuc2hlZXQ7XG4gICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc3R5bGVTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLm5hdGl2ZUZvbnRGYWNlcyksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIG5hdGl2ZUZvbnRGYWNlID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICB0aGlzLl9kb2N1bWVudC5mb250c1tcImRlbGV0ZVwiXShuYXRpdmVGb250RmFjZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5uYXRpdmVGb250RmFjZXMubGVuZ3RoID0gMDtcblxuICAgICAgaWYgKHRoaXMuc3R5bGVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuc3R5bGVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnN0eWxlRWxlbWVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJpbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9iaW5kID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmb250KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG5hdGl2ZUZvbnRGYWNlLCBydWxlO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICghKGZvbnQuYXR0YWNoZWQgfHwgZm9udC5taXNzaW5nRmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZm9udC5hdHRhY2hlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE5O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmF0aXZlRm9udEZhY2UgPSBmb250LmNyZWF0ZU5hdGl2ZUZvbnRGYWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZE5hdGl2ZUZvbnRGYWNlKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNztcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZUZvbnRGYWNlLmxvYWRlZDtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjtcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0W1wiY2F0Y2hcIl0oNyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlSWQ6IF91dGlsLlVOU1VQUE9SVEVEX0ZFQVRVUkVTLmVycm9yRm9udExvYWROYXRpdmVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIkZhaWxlZCB0byBsb2FkIGZvbnQgJ1wiLmNvbmNhdChuYXRpdmVGb250RmFjZS5mYW1pbHksIFwiJzogJ1wiKS5jb25jYXQoX2NvbnRleHQudDAsIFwiJy5cIikpO1xuICAgICAgICAgICAgICAgIGZvbnQuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dC50MDtcblxuICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG5cbiAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICBydWxlID0gZm9udC5jcmVhdGVGb250RmFjZVJ1bGUoKTtcblxuICAgICAgICAgICAgICAgIGlmICghcnVsZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2O1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBfdGhpcy5fcXVldWVMb2FkaW5nQ2FsbGJhY2socmVzb2x2ZSk7XG5cbiAgICAgICAgICAgICAgICAgIF90aGlzLl9wcmVwYXJlRm9udExvYWRFdmVudChbcnVsZV0sIFtmb250XSwgcmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzcsIDEyXV0pO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBiaW5kKF94KSB7XG4gICAgICAgIHJldHVybiBfYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmluZDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJfcXVldWVMb2FkaW5nQ2FsbGJhY2tcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3F1ZXVlTG9hZGluZ0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBfcXVldWVMb2FkaW5nQ2FsbGJhY2tgLlwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF90aGlzJF9kb2N1bWVudDtcblxuICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwiaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZFwiLCAhISgoX3RoaXMkX2RvY3VtZW50ID0gdGhpcy5fZG9jdW1lbnQpICE9PSBudWxsICYmIF90aGlzJF9kb2N1bWVudCAhPT0gdm9pZCAwICYmIF90aGlzJF9kb2N1bWVudC5mb250cykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWRgLlwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2xvYWRUZXN0Rm9udFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX2xvYWRUZXN0Rm9udGAuXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcHJlcGFyZUZvbnRMb2FkRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVGb250TG9hZEV2ZW50KHJ1bGVzLCBmb250c1RvTG9hZCwgcmVxdWVzdCkge1xuICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX3ByZXBhcmVGb250TG9hZEV2ZW50YC5cIik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VGb250TG9hZGVyO1xufSgpO1xuXG52YXIgRm9udExvYWRlcjtcbmV4cG9ydHMuRm9udExvYWRlciA9IEZvbnRMb2FkZXI7XG57XG4gIGV4cG9ydHMuRm9udExvYWRlciA9IEZvbnRMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlRm9udExvYWRlcikge1xuICAgIF9pbmhlcml0cyhHZW5lcmljRm9udExvYWRlciwgX0Jhc2VGb250TG9hZGVyKTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoR2VuZXJpY0ZvbnRMb2FkZXIpO1xuXG4gICAgZnVuY3Rpb24gR2VuZXJpY0ZvbnRMb2FkZXIocGFyYW1zKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2VuZXJpY0ZvbnRMb2FkZXIpO1xuXG4gICAgICBfdGhpczIgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgICAgX3RoaXMyLmxvYWRpbmdDb250ZXh0ID0ge1xuICAgICAgICByZXF1ZXN0czogW10sXG4gICAgICAgIG5leHRSZXF1ZXN0SWQ6IDBcbiAgICAgIH07XG4gICAgICBfdGhpczIubG9hZFRlc3RGb250SWQgPSAwO1xuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoR2VuZXJpY0ZvbnRMb2FkZXIsIFt7XG4gICAgICBrZXk6IFwiaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgc3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtID0gL01vemlsbGFcXC81LjAuKj9ydjooXFxkKykuKj8gR2Vja28vLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICAgICAgICBpZiAoKG0gPT09IG51bGwgfHwgbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbVsxXSkgPj0gMTQpIHtcbiAgICAgICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwiaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWRcIiwgc3VwcG9ydGVkKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3F1ZXVlTG9hZGluZ0NhbGxiYWNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3F1ZXVlTG9hZGluZ0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdCgpIHtcbiAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghcmVxdWVzdC5kb25lLCBcImNvbXBsZXRlUmVxdWVzdCgpIGNhbm5vdCBiZSBjYWxsZWQgdHdpY2UuXCIpO1xuICAgICAgICAgIHJlcXVlc3QuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICB3aGlsZSAoY29udGV4dC5yZXF1ZXN0cy5sZW5ndGggPiAwICYmIGNvbnRleHQucmVxdWVzdHNbMF0uZG9uZSkge1xuICAgICAgICAgICAgdmFyIG90aGVyUmVxdWVzdCA9IGNvbnRleHQucmVxdWVzdHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQob3RoZXJSZXF1ZXN0LmNhbGxiYWNrLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMubG9hZGluZ0NvbnRleHQ7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGlkOiBcInBkZmpzLWZvbnQtbG9hZGluZy1cIi5jb25jYXQoY29udGV4dC5uZXh0UmVxdWVzdElkKyspLFxuICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZVJlcXVlc3QsXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH07XG4gICAgICAgIGNvbnRleHQucmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9sb2FkVGVzdEZvbnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgZ2V0TG9hZFRlc3RGb250ID0gZnVuY3Rpb24gZ2V0TG9hZFRlc3RGb250KCkge1xuICAgICAgICAgIHJldHVybiBhdG9iKFwiVDFSVVR3QUxBSUFBQXdBd1EwWkdJREh0Wmc0QUFBT1lBQUFBZ1VaR1ZFMWxrelp3QUFBRUhBQUFBQnhIUkVWR0FCUUFcIiArIFwiRlFBQUJEZ0FBQUFlVDFNdk1sWU5Zd2tBQUFFZ0FBQUFZR050WVhBQkRRTFVBQUFDTkFBQUFVSm9aV0ZrL3hWRkRRQUFcIiArIFwiQUx3QUFBQTJhR2hsWVFka0Erb0FBQUQwQUFBQUpHaHRkSGdENkFBQUFBQUVXQUFBQUFadFlYaHdBQUpRQUFBQUFSZ0FcIiArIFwiQUFBR2JtRnRaVmptZEg0QUFBR0FBQUFBc1hCdmMzVC9oZ0F6QUFBRGVBQUFBQ0FBQVFBQUFBRUFBTFpSRnNSZkR6ejFcIiArIFwiQUFzRDZBQUFBQURPQk9UTEFBQUFBTTRLSER3QUFBQUFBK2dESVFBQUFBZ0FBZ0FBQUFBQUFBQUJBQUFESVFBQUFGb0RcIiArIFwiNkFBQUFBQUQ2QUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBVUFBQUFnQUFBQVFENkFIMEFBVUFBQUtLQXJ3QUFBQ01cIiArIFwiQW9vQ3ZBQUFBZUFBTVFFQ0FBQUNBQVlKQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFGQm1SV1FBd0FBdUFDNERcIiArIFwiSVA4NEFGb0RJUUFBQUFBQUFRQUFBQUFBQUFBQUFDQUFJQUFCQUFBQURnQ3VBQUVBQUFBQUFBQUFBUUFBQUFFQUFBQUFcIiArIFwiQUFFQUFRQUFBQUVBQUFBQUFBSUFBUUFBQUFFQUFBQUFBQU1BQVFBQUFBRUFBQUFBQUFRQUFRQUFBQUVBQUFBQUFBVUFcIiArIFwiQVFBQUFBRUFBQUFBQUFZQUFRQUFBQU1BQVFRSkFBQUFBZ0FCQUFNQUFRUUpBQUVBQWdBQkFBTUFBUVFKQUFJQUFnQUJcIiArIFwiQUFNQUFRUUpBQU1BQWdBQkFBTUFBUVFKQUFRQUFnQUJBQU1BQVFRSkFBVUFBZ0FCQUFNQUFRUUpBQVlBQWdBQldBQllcIiArIFwiQUFBQUFBQUFBd0FBQUFNQUFBQWNBQUVBQUFBQUFEd0FBd0FCQUFBQUhBQUVBQ0FBQUFBRUFBUUFBUUFBQUM3Ly93QUFcIiArIFwiQUM3Ly8vL1RBQUVBQUFBQUFBQUJCZ0FBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTUFBQUFBQUFEL2d3QXlBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFcIiArIFwiQUFBQkFBUUVBQUVCQVFKWUFBRUJBU0g0RHdENEd3SEVBdmdjQS9nWEJJd01BWXVMK256NXRRWGtENWozQ0JMbkVRQUNcIiArIFwiQVFFQklWaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZQUFBQkFRQUFEd0FDQVFFRUUvdDNcIiArIFwiRG92NmZBSDZmQVQrZlBwOCtud0hEb3NNQ3ZtMUN2bTFEQXo2ZkJRQUFBQUFBQUFCQUFBQUFNbUpiekVBQUFBQXpnVGpcIiArIFwiRlFBQUFBRE9CT1FwQUFFQUFBQUFBQUFBREFBVUFBUUFBQUFCQUFBQUFnQUJBQUFBQUFBQUFBQUQ2QUFBQUFBQUFBPT1cIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwiX2xvYWRUZXN0Rm9udFwiLCBnZXRMb2FkVGVzdEZvbnQoKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9wcmVwYXJlRm9udExvYWRFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcmVwYXJlRm9udExvYWRFdmVudChydWxlcywgZm9udHMsIHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gaW50MzIoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0IHwgZGF0YS5jaGFyQ29kZUF0KG9mZnNldCArIDEpIDw8IDE2IHwgZGF0YS5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDggfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMykgJiAweGZmO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3BsaWNlU3RyaW5nKHMsIG9mZnNldCwgcmVtb3ZlLCBpbnNlcnQpIHtcbiAgICAgICAgICB2YXIgY2h1bmsxID0gcy5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcbiAgICAgICAgICB2YXIgY2h1bmsyID0gcy5zdWJzdHJpbmcob2Zmc2V0ICsgcmVtb3ZlKTtcbiAgICAgICAgICByZXR1cm4gY2h1bmsxICsgaW5zZXJ0ICsgY2h1bmsyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksIGlpO1xuXG4gICAgICAgIHZhciBjYW52YXMgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdmFyIGNhbGxlZCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNGb250UmVhZHkobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsZWQrKztcblxuICAgICAgICAgIGlmIChjYWxsZWQgPiAzMCkge1xuICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiTG9hZCB0ZXN0IGZvbnQgbmV2ZXIgbG9hZGVkLlwiKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3R4LmZvbnQgPSBcIjMwcHggXCIgKyBuYW1lO1xuICAgICAgICAgIGN0eC5maWxsVGV4dChcIi5cIiwgMCwgMjApO1xuICAgICAgICAgIHZhciBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIDEsIDEpO1xuXG4gICAgICAgICAgaWYgKGltYWdlRGF0YS5kYXRhWzNdID4gMCkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGlzRm9udFJlYWR5LmJpbmQobnVsbCwgbmFtZSwgY2FsbGJhY2spKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2FkVGVzdEZvbnRJZCA9IFwibHRcIi5jb25jYXQoRGF0ZS5ub3coKSkuY29uY2F0KHRoaXMubG9hZFRlc3RGb250SWQrKyk7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fbG9hZFRlc3RGb250O1xuICAgICAgICB2YXIgQ09NTUVOVF9PRkZTRVQgPSA5NzY7XG4gICAgICAgIGRhdGEgPSBzcGxpY2VTdHJpbmcoZGF0YSwgQ09NTUVOVF9PRkZTRVQsIGxvYWRUZXN0Rm9udElkLmxlbmd0aCwgbG9hZFRlc3RGb250SWQpO1xuICAgICAgICB2YXIgQ0ZGX0NIRUNLU1VNX09GRlNFVCA9IDE2O1xuICAgICAgICB2YXIgWFhYWF9WQUxVRSA9IDB4NTg1ODU4NTg7XG4gICAgICAgIHZhciBjaGVja3N1bSA9IGludDMyKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gbG9hZFRlc3RGb250SWQubGVuZ3RoIC0gMzsgaSA8IGlpOyBpICs9IDQpIHtcbiAgICAgICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkLCBpKSB8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA8IGxvYWRUZXN0Rm9udElkLmxlbmd0aCkge1xuICAgICAgICAgIGNoZWNrc3VtID0gY2hlY2tzdW0gLSBYWFhYX1ZBTFVFICsgaW50MzIobG9hZFRlc3RGb250SWQgKyBcIlhYWFwiLCBpKSB8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQsIDQsICgwLCBfdXRpbC5zdHJpbmczMikoY2hlY2tzdW0pKTtcbiAgICAgICAgdmFyIHVybCA9IFwidXJsKGRhdGE6Zm9udC9vcGVudHlwZTtiYXNlNjQsXCIuY29uY2F0KGJ0b2EoZGF0YSksIFwiKTtcIik7XG4gICAgICAgIHZhciBydWxlID0gXCJAZm9udC1mYWNlIHtmb250LWZhbWlseTpcXFwiXCIuY29uY2F0KGxvYWRUZXN0Rm9udElkLCBcIlxcXCI7c3JjOlwiKS5jb25jYXQodXJsLCBcIn1cIik7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgICAgdmFyIG5hbWVzID0gW107XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmb250cyksXG4gICAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGZvbnQgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKGZvbnQubG9hZGVkTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWVzLnB1c2gobG9hZFRlc3RGb250SWQpO1xuXG4gICAgICAgIHZhciBkaXYgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gZGl2LnN0eWxlLmhlaWdodCA9IFwiMTBweFwiO1xuICAgICAgICBkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGRpdi5zdHlsZS50b3AgPSBkaXYuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbmFtZXMgPSBuYW1lczsgX2kgPCBfbmFtZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBfbmFtZXNbX2ldO1xuXG4gICAgICAgICAgdmFyIHNwYW4gPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblxuICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkhpXCI7XG4gICAgICAgICAgc3Bhbi5zdHlsZS5mb250RmFtaWx5ID0gbmFtZTtcbiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgaXNGb250UmVhZHkobG9hZFRlc3RGb250SWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMuX2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcblxuICAgICAgICAgIHJlcXVlc3QuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEdlbmVyaWNGb250TG9hZGVyO1xuICB9KEJhc2VGb250TG9hZGVyKTtcbn1cblxudmFyIEZvbnRGYWNlT2JqZWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VPYmplY3QodHJhbnNsYXRlZERhdGEsIF9yZWYyKSB7XG4gICAgdmFyIF9yZWYyJGlzRXZhbFN1cHBvcnRlZCA9IF9yZWYyLmlzRXZhbFN1cHBvcnRlZCxcbiAgICAgICAgaXNFdmFsU3VwcG9ydGVkID0gX3JlZjIkaXNFdmFsU3VwcG9ydGVkID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkaXNFdmFsU3VwcG9ydGVkLFxuICAgICAgICBfcmVmMiRkaXNhYmxlRm9udEZhY2UgPSBfcmVmMi5kaXNhYmxlRm9udEZhY2UsXG4gICAgICAgIGRpc2FibGVGb250RmFjZSA9IF9yZWYyJGRpc2FibGVGb250RmFjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkaXNhYmxlRm9udEZhY2UsXG4gICAgICAgIF9yZWYyJGlnbm9yZUVycm9ycyA9IF9yZWYyLmlnbm9yZUVycm9ycyxcbiAgICAgICAgaWdub3JlRXJyb3JzID0gX3JlZjIkaWdub3JlRXJyb3JzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGlnbm9yZUVycm9ycyxcbiAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmUgPSBfcmVmMi5vblVuc3VwcG9ydGVkRmVhdHVyZSxcbiAgICAgICAgX3JlZjIkZm9udFJlZ2lzdHJ5ID0gX3JlZjIuZm9udFJlZ2lzdHJ5LFxuICAgICAgICBmb250UmVnaXN0cnkgPSBfcmVmMiRmb250UmVnaXN0cnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMiRmb250UmVnaXN0cnk7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9udEZhY2VPYmplY3QpO1xuXG4gICAgdGhpcy5jb21waWxlZEdseXBocyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBpIGluIHRyYW5zbGF0ZWREYXRhKSB7XG4gICAgICB0aGlzW2ldID0gdHJhbnNsYXRlZERhdGFbaV07XG4gICAgfVxuXG4gICAgdGhpcy5pc0V2YWxTdXBwb3J0ZWQgPSBpc0V2YWxTdXBwb3J0ZWQgIT09IGZhbHNlO1xuICAgIHRoaXMuZGlzYWJsZUZvbnRGYWNlID0gZGlzYWJsZUZvbnRGYWNlID09PSB0cnVlO1xuICAgIHRoaXMuaWdub3JlRXJyb3JzID0gaWdub3JlRXJyb3JzID09PSB0cnVlO1xuICAgIHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlID0gb25VbnN1cHBvcnRlZEZlYXR1cmU7XG4gICAgdGhpcy5mb250UmVnaXN0cnkgPSBmb250UmVnaXN0cnk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRm9udEZhY2VPYmplY3QsIFt7XG4gICAga2V5OiBcImNyZWF0ZU5hdGl2ZUZvbnRGYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUZvbnRGYWNlKCkge1xuICAgICAgaWYgKCF0aGlzLmRhdGEgfHwgdGhpcy5kaXNhYmxlRm9udEZhY2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYXRpdmVGb250RmFjZTtcblxuICAgICAgaWYgKCF0aGlzLmNzc0ZvbnRJbmZvKSB7XG4gICAgICAgIG5hdGl2ZUZvbnRGYWNlID0gbmV3IEZvbnRGYWNlKHRoaXMubG9hZGVkTmFtZSwgdGhpcy5kYXRhLCB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3NzID0ge1xuICAgICAgICAgIHdlaWdodDogdGhpcy5jc3NGb250SW5mby5mb250V2VpZ2h0XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGUpIHtcbiAgICAgICAgICBjc3Muc3R5bGUgPSBcIm9ibGlxdWUgXCIuY29uY2F0KHRoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGUsIFwiZGVnXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmF0aXZlRm9udEZhY2UgPSBuZXcgRm9udEZhY2UodGhpcy5jc3NGb250SW5mby5mb250RmFtaWx5LCB0aGlzLmRhdGEsIGNzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZvbnRSZWdpc3RyeSkge1xuICAgICAgICB0aGlzLmZvbnRSZWdpc3RyeS5yZWdpc3RlckZvbnQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuYXRpdmVGb250RmFjZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlRm9udEZhY2VSdWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUZvbnRGYWNlUnVsZSgpIHtcbiAgICAgIGlmICghdGhpcy5kYXRhIHx8IHRoaXMuZGlzYWJsZUZvbnRGYWNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9ICgwLCBfdXRpbC5ieXRlc1RvU3RyaW5nKSh0aGlzLmRhdGEpO1xuICAgICAgdmFyIHVybCA9IFwidXJsKGRhdGE6XCIuY29uY2F0KHRoaXMubWltZXR5cGUsIFwiO2Jhc2U2NCxcIikuY29uY2F0KGJ0b2EoZGF0YSksIFwiKTtcIik7XG4gICAgICB2YXIgcnVsZTtcblxuICAgICAgaWYgKCF0aGlzLmNzc0ZvbnRJbmZvKSB7XG4gICAgICAgIHJ1bGUgPSBcIkBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlxcXCJcIi5jb25jYXQodGhpcy5sb2FkZWROYW1lLCBcIlxcXCI7c3JjOlwiKS5jb25jYXQodXJsLCBcIn1cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3NzID0gXCJmb250LXdlaWdodDogXCIuY29uY2F0KHRoaXMuY3NzRm9udEluZm8uZm9udFdlaWdodCwgXCI7XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLmNzc0ZvbnRJbmZvLml0YWxpY0FuZ2xlKSB7XG4gICAgICAgICAgY3NzICs9IFwiZm9udC1zdHlsZTogb2JsaXF1ZSBcIi5jb25jYXQodGhpcy5jc3NGb250SW5mby5pdGFsaWNBbmdsZSwgXCJkZWc7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZSA9IFwiQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6XFxcIlwiLmNvbmNhdCh0aGlzLmNzc0ZvbnRJbmZvLmZvbnRGYW1pbHksIFwiXFxcIjtcIikuY29uY2F0KGNzcywgXCJzcmM6XCIpLmNvbmNhdCh1cmwsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZm9udFJlZ2lzdHJ5KSB7XG4gICAgICAgIHRoaXMuZm9udFJlZ2lzdHJ5LnJlZ2lzdGVyRm9udCh0aGlzLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGF0aEdlbmVyYXRvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYXRoR2VuZXJhdG9yKG9ianMsIGNoYXJhY3Rlcikge1xuICAgICAgaWYgKHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl07XG4gICAgICB9XG5cbiAgICAgIHZhciBjbWRzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjbWRzID0gb2Jqcy5nZXQodGhpcy5sb2FkZWROYW1lICsgXCJfcGF0aF9cIiArIGNoYXJhY3Rlcik7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBpZiAoIXRoaXMuaWdub3JlRXJyb3JzKSB7XG4gICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRHZXRQYXRoXG4gICAgICAgIH0pO1xuXG4gICAgICAgICgwLCBfdXRpbC53YXJuKShcImdldFBhdGhHZW5lcmF0b3IgLSBpZ25vcmluZyBjaGFyYWN0ZXI6IFxcXCJcIi5jb25jYXQoZXgsIFwiXFxcIi5cIikpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21waWxlZEdseXBoc1tjaGFyYWN0ZXJdID0gZnVuY3Rpb24gKGMsIHNpemUpIHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0V2YWxTdXBwb3J0ZWQgJiYgX3V0aWwuSXNFdmFsU3VwcG9ydGVkQ2FjaGVkLnZhbHVlKSB7XG4gICAgICAgIHZhciBqc0J1ZiA9IFtdO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY21kcyksXG4gICAgICAgICAgICBfc3RlcDM7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgICB2YXIgYXJncyA9IGN1cnJlbnQuYXJncyAhPT0gdW5kZWZpbmVkID8gY3VycmVudC5hcmdzLmpvaW4oXCIsXCIpIDogXCJcIjtcbiAgICAgICAgICAgIGpzQnVmLnB1c2goXCJjLlwiLCBjdXJyZW50LmNtZCwgXCIoXCIsIGFyZ3MsIFwiKTtcXG5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBuZXcgRnVuY3Rpb24oXCJjXCIsIFwic2l6ZVwiLCBqc0J1Zi5qb2luKFwiXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSA9IGZ1bmN0aW9uIChjLCBzaXplKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY21kcyksXG4gICAgICAgICAgICBfc3RlcDQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIF9jdXJyZW50ID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoX2N1cnJlbnQuY21kID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgICAgX2N1cnJlbnQuYXJncyA9IFtzaXplLCAtc2l6ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNbX2N1cnJlbnQuY21kXS5hcHBseShjLCBfY3VycmVudC5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjQuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjQuZigpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb250RmFjZU9iamVjdDtcbn0oKTtcblxuZXhwb3J0cy5Gb250RmFjZU9iamVjdCA9IEZvbnRGYWNlT2JqZWN0O1xuXG4vKioqLyB9KSxcbi8qIDExNSAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuTm9kZUNNYXBSZWFkZXJGYWN0b3J5ID0gZXhwb3J0cy5Ob2RlQ2FudmFzRmFjdG9yeSA9IHZvaWQgMDtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxudmFyIF9pc19ub2RlID0gX193X3BkZmpzX3JlcXVpcmVfXyg2KTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgTm9kZUNhbnZhc0ZhY3RvcnkgPSBmdW5jdGlvbiBOb2RlQ2FudmFzRmFjdG9yeSgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVDYW52YXNGYWN0b3J5KTtcblxuICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiTm90IGltcGxlbWVudGVkOiBOb2RlQ2FudmFzRmFjdG9yeVwiKTtcbn07XG5cbmV4cG9ydHMuTm9kZUNhbnZhc0ZhY3RvcnkgPSBOb2RlQ2FudmFzRmFjdG9yeTtcblxudmFyIE5vZGVDTWFwUmVhZGVyRmFjdG9yeSA9IGZ1bmN0aW9uIE5vZGVDTWFwUmVhZGVyRmFjdG9yeSgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVDTWFwUmVhZGVyRmFjdG9yeSk7XG5cbiAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIk5vdCBpbXBsZW1lbnRlZDogTm9kZUNNYXBSZWFkZXJGYWN0b3J5XCIpO1xufTtcblxuZXhwb3J0cy5Ob2RlQ01hcFJlYWRlckZhY3RvcnkgPSBOb2RlQ01hcFJlYWRlckZhY3Rvcnk7XG5cbmlmIChfaXNfbm9kZS5pc05vZGVKUykge1xuICBleHBvcnRzLk5vZGVDYW52YXNGYWN0b3J5ID0gTm9kZUNhbnZhc0ZhY3RvcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ2FudmFzRmFjdG9yeSkge1xuICAgIF9pbmhlcml0cyhOb2RlQ2FudmFzRmFjdG9yeSwgX0Jhc2VDYW52YXNGYWN0b3J5KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm9kZUNhbnZhc0ZhY3RvcnkpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUNhbnZhc0ZhY3RvcnkoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZUNhbnZhc0ZhY3RvcnkpO1xuXG4gICAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE5vZGVDYW52YXNGYWN0b3J5LCBbe1xuICAgICAga2V5OiBcImNyZWF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGlmICh3aWR0aCA8PSAwIHx8IGhlaWdodCA8PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMgc2l6ZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBDYW52YXMgPSByZXF1aXJlKFwiY2FudmFzXCIpO1xuXG4gICAgICAgIHZhciBjYW52YXMgPSBDYW52YXMuY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNhbnZhczogY2FudmFzLFxuICAgICAgICAgIGNvbnRleHQ6IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTm9kZUNhbnZhc0ZhY3Rvcnk7XG4gIH0oX2Rpc3BsYXlfdXRpbHMuQmFzZUNhbnZhc0ZhY3RvcnkpO1xuXG4gIGV4cG9ydHMuTm9kZUNNYXBSZWFkZXJGYWN0b3J5ID0gTm9kZUNNYXBSZWFkZXJGYWN0b3J5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNNYXBSZWFkZXJGYWN0b3IpIHtcbiAgICBfaW5oZXJpdHMoTm9kZUNNYXBSZWFkZXJGYWN0b3J5LCBfQmFzZUNNYXBSZWFkZXJGYWN0b3IpO1xuXG4gICAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoTm9kZUNNYXBSZWFkZXJGYWN0b3J5KTtcblxuICAgIGZ1bmN0aW9uIE5vZGVDTWFwUmVhZGVyRmFjdG9yeSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlQ01hcFJlYWRlckZhY3RvcnkpO1xuXG4gICAgICByZXR1cm4gX3N1cGVyMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhOb2RlQ01hcFJlYWRlckZhY3RvcnksIFt7XG4gICAgICBrZXk6IFwiX2ZldGNoRGF0YVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB2YXIgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5cbiAgICAgICAgICBmcy5yZWFkRmlsZSh1cmwsIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycm9yIHx8ICFkYXRhKSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgY01hcERhdGE6IG5ldyBVaW50OEFycmF5KGRhdGEpLFxuICAgICAgICAgICAgICBjb21wcmVzc2lvblR5cGU6IGNvbXByZXNzaW9uVHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBOb2RlQ01hcFJlYWRlckZhY3Rvcnk7XG4gIH0oX2Rpc3BsYXlfdXRpbHMuQmFzZUNNYXBSZWFkZXJGYWN0b3J5KTtcbn1cblxuLyoqKi8gfSksXG4vKiAxMTYgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5Bbm5vdGF0aW9uU3RvcmFnZSA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBBbm5vdGF0aW9uU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFubm90YXRpb25TdG9yYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbm5vdGF0aW9uU3RvcmFnZSk7XG5cbiAgICB0aGlzLl9zdG9yYWdlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX21vZGlmaWVkID0gZmFsc2U7XG4gICAgdGhpcy5vblNldE1vZGlmaWVkID0gbnVsbDtcbiAgICB0aGlzLm9uUmVzZXRNb2RpZmllZCA9IG51bGw7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQW5ub3RhdGlvblN0b3JhZ2UsIFt7XG4gICAga2V5OiBcImdldFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fc3RvcmFnZS5nZXQoa2V5KTtcblxuICAgICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkID8gb2JqIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fc3RvcmFnZS5nZXQoa2V5KTtcblxuICAgICAgdmFyIG1vZGlmaWVkID0gZmFsc2U7XG5cbiAgICAgIGlmIChvYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3QkZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlKTsgX2kgPCBfT2JqZWN0JGVudHJpZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIF9PYmplY3QkZW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KF9PYmplY3QkZW50cmllc1tfaV0sIDIpLFxuICAgICAgICAgICAgICBlbnRyeSA9IF9PYmplY3QkZW50cmllcyRfaVswXSxcbiAgICAgICAgICAgICAgdmFsID0gX09iamVjdCRlbnRyaWVzJF9pWzFdO1xuXG4gICAgICAgICAgaWYgKG9ialtlbnRyeV0gIT09IHZhbCkge1xuICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgb2JqW2VudHJ5XSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0b3JhZ2Uuc2V0KGtleSwgdmFsdWUpO1xuXG4gICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGlmaWVkKSB7XG4gICAgICAgIHRoaXMuX3NldE1vZGlmaWVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZS5zaXplID4gMCA/ICgwLCBfdXRpbC5vYmplY3RGcm9tTWFwKSh0aGlzLl9zdG9yYWdlKSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLnNpemU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRNb2RpZmllZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0TW9kaWZpZWQoKSB7XG4gICAgICBpZiAoIXRoaXMuX21vZGlmaWVkKSB7XG4gICAgICAgIHRoaXMuX21vZGlmaWVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25TZXRNb2RpZmllZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vblNldE1vZGlmaWVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRNb2RpZmllZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldE1vZGlmaWVkKCkge1xuICAgICAgaWYgKHRoaXMuX21vZGlmaWVkKSB7XG4gICAgICAgIHRoaXMuX21vZGlmaWVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uUmVzZXRNb2RpZmllZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vblJlc2V0TW9kaWZpZWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXJpYWxpemFibGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLnNpemUgPiAwID8gdGhpcy5fc3RvcmFnZSA6IG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFubm90YXRpb25TdG9yYWdlO1xufSgpO1xuXG5leHBvcnRzLkFubm90YXRpb25TdG9yYWdlID0gQW5ub3RhdGlvblN0b3JhZ2U7XG5cbi8qKiovIH0pLFxuLyogMTE3ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuYXBpQ29tcGF0aWJpbGl0eVBhcmFtcyA9IHZvaWQgMDtcblxudmFyIF9pc19ub2RlID0gX193X3BkZmpzX3JlcXVpcmVfXyg2KTtcblxudmFyIGNvbXBhdGliaWxpdHlQYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xue1xuICAoZnVuY3Rpb24gY2hlY2tGb250RmFjZSgpIHtcbiAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMpIHtcbiAgICAgIGNvbXBhdGliaWxpdHlQYXJhbXMuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTtcbiAgICB9XG4gIH0pKCk7XG59XG52YXIgYXBpQ29tcGF0aWJpbGl0eVBhcmFtcyA9IE9iamVjdC5mcmVlemUoY29tcGF0aWJpbGl0eVBhcmFtcyk7XG5leHBvcnRzLmFwaUNvbXBhdGliaWxpdHlQYXJhbXMgPSBhcGlDb21wYXRpYmlsaXR5UGFyYW1zO1xuXG4vKioqLyB9KSxcbi8qIDExOCAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLkNhbnZhc0dyYXBoaWNzID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG52YXIgX3BhdHRlcm5faGVscGVyID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTkpO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMykgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTM7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG52YXIgTUlOX0ZPTlRfU0laRSA9IDE2O1xudmFyIE1BWF9GT05UX1NJWkUgPSAxMDA7XG52YXIgTUFYX0dST1VQX1NJWkUgPSA0MDk2O1xudmFyIENPTVBJTEVfVFlQRTNfR0xZUEhTID0gdHJ1ZTtcbnZhciBNQVhfU0laRV9UT19DT01QSUxFID0gMTAwMDtcbnZhciBGVUxMX0NIVU5LX0hFSUdIVCA9IDE2O1xudmFyIExJTkVXSURUSF9TQ0FMRV9GQUNUT1IgPSAxLjAwMDAwMTtcblxuZnVuY3Rpb24gYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY3R4KSB7XG4gIGlmIChjdHgubW96Q3VycmVudFRyYW5zZm9ybSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGN0eC5fb3JpZ2luYWxTYXZlID0gY3R4LnNhdmU7XG4gIGN0eC5fb3JpZ2luYWxSZXN0b3JlID0gY3R4LnJlc3RvcmU7XG4gIGN0eC5fb3JpZ2luYWxSb3RhdGUgPSBjdHgucm90YXRlO1xuICBjdHguX29yaWdpbmFsU2NhbGUgPSBjdHguc2NhbGU7XG4gIGN0eC5fb3JpZ2luYWxUcmFuc2xhdGUgPSBjdHgudHJhbnNsYXRlO1xuICBjdHguX29yaWdpbmFsVHJhbnNmb3JtID0gY3R4LnRyYW5zZm9ybTtcbiAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybSA9IGN0eC5zZXRUcmFuc2Zvcm07XG4gIGN0eC5fb3JpZ2luYWxSZXNldFRyYW5zZm9ybSA9IGN0eC5yZXNldFRyYW5zZm9ybTtcbiAgY3R4Ll90cmFuc2Zvcm1NYXRyaXggPSBjdHguX3RyYW5zZm9ybU1hdHJpeCB8fCBbMSwgMCwgMCwgMSwgMCwgMF07XG4gIGN0eC5fdHJhbnNmb3JtU3RhY2sgPSBbXTtcblxuICB0cnkge1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3R4KSwgXCJsaW5lV2lkdGhcIik7XG4gICAgY3R4Ll9zZXRMaW5lV2lkdGggPSBkZXNjLnNldDtcbiAgICBjdHguX2dldExpbmVXaWR0aCA9IGRlc2MuZ2V0O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIFwibGluZVdpZHRoXCIsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuX3NldExpbmVXaWR0aCh3aWR0aCAqIExJTkVXSURUSF9TQ0FMRV9GQUNUT1IpO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0TGluZVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TGluZVdpZHRoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwgXCJtb3pDdXJyZW50VHJhbnNmb3JtXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldEN1cnJlbnRUcmFuc2Zvcm0oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIFwibW96Q3VycmVudFRyYW5zZm9ybUludmVyc2VcIiwge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zZm9ybUludmVyc2UoKSB7XG4gICAgICB2YXIgX3RoaXMkX3RyYW5zZm9ybU1hdHJpID0gX3NsaWNlZFRvQXJyYXkodGhpcy5fdHJhbnNmb3JtTWF0cml4LCA2KSxcbiAgICAgICAgICBhID0gX3RoaXMkX3RyYW5zZm9ybU1hdHJpWzBdLFxuICAgICAgICAgIGIgPSBfdGhpcyRfdHJhbnNmb3JtTWF0cmlbMV0sXG4gICAgICAgICAgYyA9IF90aGlzJF90cmFuc2Zvcm1NYXRyaVsyXSxcbiAgICAgICAgICBkID0gX3RoaXMkX3RyYW5zZm9ybU1hdHJpWzNdLFxuICAgICAgICAgIGUgPSBfdGhpcyRfdHJhbnNmb3JtTWF0cmlbNF0sXG4gICAgICAgICAgZiA9IF90aGlzJF90cmFuc2Zvcm1NYXRyaVs1XTtcblxuICAgICAgdmFyIGFkX2JjID0gYSAqIGQgLSBiICogYztcbiAgICAgIHZhciBiY19hZCA9IGIgKiBjIC0gYSAqIGQ7XG4gICAgICByZXR1cm4gW2QgLyBhZF9iYywgYiAvIGJjX2FkLCBjIC8gYmNfYWQsIGEgLyBhZF9iYywgKGQgKiBlIC0gYyAqIGYpIC8gYmNfYWQsIChiICogZSAtIGEgKiBmKSAvIGFkX2JjXTtcbiAgICB9XG4gIH0pO1xuXG4gIGN0eC5zYXZlID0gZnVuY3Rpb24gY3R4U2F2ZSgpIHtcbiAgICB2YXIgb2xkID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuXG4gICAgdGhpcy5fdHJhbnNmb3JtU3RhY2sucHVzaChvbGQpO1xuXG4gICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gb2xkLnNsaWNlKDAsIDYpO1xuXG4gICAgdGhpcy5fb3JpZ2luYWxTYXZlKCk7XG4gIH07XG5cbiAgY3R4LnJlc3RvcmUgPSBmdW5jdGlvbiBjdHhSZXN0b3JlKCkge1xuICAgIHZhciBwcmV2ID0gdGhpcy5fdHJhbnNmb3JtU3RhY2sucG9wKCk7XG5cbiAgICBpZiAocHJldikge1xuICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gcHJldjtcblxuICAgICAgdGhpcy5fb3JpZ2luYWxSZXN0b3JlKCk7XG4gICAgfVxuICB9O1xuXG4gIGN0eC50cmFuc2xhdGUgPSBmdW5jdGlvbiBjdHhUcmFuc2xhdGUoeCwgeSkge1xuICAgIHZhciBtID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuICAgIG1bNF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTtcbiAgICBtWzVdID0gbVsxXSAqIHggKyBtWzNdICogeSArIG1bNV07XG5cbiAgICB0aGlzLl9vcmlnaW5hbFRyYW5zbGF0ZSh4LCB5KTtcbiAgfTtcblxuICBjdHguc2NhbGUgPSBmdW5jdGlvbiBjdHhTY2FsZSh4LCB5KSB7XG4gICAgdmFyIG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7XG4gICAgbVswXSA9IG1bMF0gKiB4O1xuICAgIG1bMV0gPSBtWzFdICogeDtcbiAgICBtWzJdID0gbVsyXSAqIHk7XG4gICAgbVszXSA9IG1bM10gKiB5O1xuXG4gICAgdGhpcy5fb3JpZ2luYWxTY2FsZSh4LCB5KTtcbiAgfTtcblxuICBjdHgudHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICB2YXIgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBbbVswXSAqIGEgKyBtWzJdICogYiwgbVsxXSAqIGEgKyBtWzNdICogYiwgbVswXSAqIGMgKyBtWzJdICogZCwgbVsxXSAqIGMgKyBtWzNdICogZCwgbVswXSAqIGUgKyBtWzJdICogZiArIG1bNF0sIG1bMV0gKiBlICsgbVszXSAqIGYgKyBtWzVdXTtcblxuICAgIGN0eC5fb3JpZ2luYWxUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gIH07XG5cbiAgY3R4LnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIGN0eFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuXG4gICAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgfTtcblxuICBjdHgucmVzZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhSZXNldFRyYW5zZm9ybSgpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF07XG5cbiAgICBjdHguX29yaWdpbmFsUmVzZXRUcmFuc2Zvcm0oKTtcbiAgfTtcblxuICBjdHgucm90YXRlID0gZnVuY3Rpb24gY3R4Um90YXRlKGFuZ2xlKSB7XG4gICAgdmFyIGNvc1ZhbHVlID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHZhciBzaW5WYWx1ZSA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICB2YXIgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBbbVswXSAqIGNvc1ZhbHVlICsgbVsyXSAqIHNpblZhbHVlLCBtWzFdICogY29zVmFsdWUgKyBtWzNdICogc2luVmFsdWUsIG1bMF0gKiAtc2luVmFsdWUgKyBtWzJdICogY29zVmFsdWUsIG1bMV0gKiAtc2luVmFsdWUgKyBtWzNdICogY29zVmFsdWUsIG1bNF0sIG1bNV1dO1xuXG4gICAgdGhpcy5fb3JpZ2luYWxSb3RhdGUoYW5nbGUpO1xuICB9O1xufVxuXG52YXIgQ2FjaGVkQ2FudmFzZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYWNoZWRDYW52YXNlcyhjYW52YXNGYWN0b3J5KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhY2hlZENhbnZhc2VzKTtcblxuICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2FjaGVkQ2FudmFzZXMsIFt7XG4gICAga2V5OiBcImdldENhbnZhc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIHRyYWNrVHJhbnNmb3JtKSB7XG4gICAgICB2YXIgY2FudmFzRW50cnk7XG5cbiAgICAgIGlmICh0aGlzLmNhY2hlW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbnZhc0VudHJ5ID0gdGhpcy5jYWNoZVtpZF07XG4gICAgICAgIHRoaXMuY2FudmFzRmFjdG9yeS5yZXNldChjYW52YXNFbnRyeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNhbnZhc0VudHJ5LmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzRW50cnkgPSB0aGlzLmNhbnZhc0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmNhY2hlW2lkXSA9IGNhbnZhc0VudHJ5O1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhY2tUcmFuc2Zvcm0pIHtcbiAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzRW50cnkuY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYW52YXNFbnRyeTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICAgIHZhciBjYW52YXNFbnRyeSA9IHRoaXMuY2FjaGVbaWRdO1xuICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkuZGVzdHJveShjYW52YXNFbnRyeSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FjaGVkQ2FudmFzZXM7XG59KCk7XG5cbmZ1bmN0aW9uIGNvbXBpbGVUeXBlM0dseXBoKGltZ0RhdGEpIHtcbiAgdmFyIFBPSU5UX1RPX1BST0NFU1NfTElNSVQgPSAxMDAwO1xuICB2YXIgUE9JTlRfVFlQRVMgPSBuZXcgVWludDhBcnJheShbMCwgMiwgNCwgMCwgMSwgMCwgNSwgNCwgOCwgMTAsIDAsIDgsIDAsIDIsIDEsIDBdKTtcbiAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aCxcbiAgICAgIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0LFxuICAgICAgd2lkdGgxID0gd2lkdGggKyAxO1xuICB2YXIgaSwgaWksIGosIGowO1xuICB2YXIgcG9pbnRzID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgxICogKGhlaWdodCArIDEpKTtcbiAgdmFyIGxpbmVTaXplID0gd2lkdGggKyA3ICYgfjcsXG4gICAgICBkYXRhMCA9IGltZ0RhdGEuZGF0YTtcbiAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShsaW5lU2l6ZSAqIGhlaWdodCk7XG4gIHZhciBwb3MgPSAwO1xuXG4gIGZvciAoaSA9IDAsIGlpID0gZGF0YTAubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIHZhciBlbGVtID0gZGF0YTBbaV07XG4gICAgdmFyIG1hc2sgPSAxMjg7XG5cbiAgICB3aGlsZSAobWFzayA+IDApIHtcbiAgICAgIGRhdGFbcG9zKytdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1O1xuICAgICAgbWFzayA+Pj0gMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY291bnQgPSAwO1xuICBwb3MgPSAwO1xuXG4gIGlmIChkYXRhW3Bvc10gIT09IDApIHtcbiAgICBwb2ludHNbMF0gPSAxO1xuICAgICsrY291bnQ7XG4gIH1cblxuICBmb3IgKGogPSAxOyBqIDwgd2lkdGg7IGorKykge1xuICAgIGlmIChkYXRhW3Bvc10gIT09IGRhdGFbcG9zICsgMV0pIHtcbiAgICAgIHBvaW50c1tqXSA9IGRhdGFbcG9zXSA/IDIgOiAxO1xuICAgICAgKytjb3VudDtcbiAgICB9XG5cbiAgICBwb3MrKztcbiAgfVxuXG4gIGlmIChkYXRhW3Bvc10gIT09IDApIHtcbiAgICBwb2ludHNbal0gPSAyO1xuICAgICsrY291bnQ7XG4gIH1cblxuICBmb3IgKGkgPSAxOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICBwb3MgPSBpICogbGluZVNpemU7XG4gICAgajAgPSBpICogd2lkdGgxO1xuXG4gICAgaWYgKGRhdGFbcG9zIC0gbGluZVNpemVdICE9PSBkYXRhW3Bvc10pIHtcbiAgICAgIHBvaW50c1tqMF0gPSBkYXRhW3Bvc10gPyAxIDogODtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuXG4gICAgdmFyIHN1bSA9IChkYXRhW3Bvc10gPyA0IDogMCkgKyAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gPyA4IDogMCk7XG5cbiAgICBmb3IgKGogPSAxOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgc3VtID0gKHN1bSA+PiAyKSArIChkYXRhW3BvcyArIDFdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemUgKyAxXSA/IDggOiAwKTtcblxuICAgICAgaWYgKFBPSU5UX1RZUEVTW3N1bV0pIHtcbiAgICAgICAgcG9pbnRzW2owICsgal0gPSBQT0lOVF9UWVBFU1tzdW1dO1xuICAgICAgICArK2NvdW50O1xuICAgICAgfVxuXG4gICAgICBwb3MrKztcbiAgICB9XG5cbiAgICBpZiAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gIT09IGRhdGFbcG9zXSkge1xuICAgICAgcG9pbnRzW2owICsgal0gPSBkYXRhW3Bvc10gPyAyIDogNDtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcG9zID0gbGluZVNpemUgKiAoaGVpZ2h0IC0gMSk7XG4gIGowID0gaSAqIHdpZHRoMTtcblxuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzW2owXSA9IDg7XG4gICAgKytjb3VudDtcbiAgfVxuXG4gIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgaWYgKGRhdGFbcG9zXSAhPT0gZGF0YVtwb3MgKyAxXSkge1xuICAgICAgcG9pbnRzW2owICsgal0gPSBkYXRhW3Bvc10gPyA0IDogODtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuXG4gICAgcG9zKys7XG4gIH1cblxuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzW2owICsgal0gPSA0O1xuICAgICsrY291bnQ7XG4gIH1cblxuICBpZiAoY291bnQgPiBQT0lOVF9UT19QUk9DRVNTX0xJTUlUKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc3RlcHMgPSBuZXcgSW50MzJBcnJheShbMCwgd2lkdGgxLCAtMSwgMCwgLXdpZHRoMSwgMCwgMCwgMCwgMV0pO1xuICB2YXIgb3V0bGluZXMgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBjb3VudCAmJiBpIDw9IGhlaWdodDsgaSsrKSB7XG4gICAgdmFyIHAgPSBpICogd2lkdGgxO1xuICAgIHZhciBlbmQgPSBwICsgd2lkdGg7XG5cbiAgICB3aGlsZSAocCA8IGVuZCAmJiAhcG9pbnRzW3BdKSB7XG4gICAgICBwKys7XG4gICAgfVxuXG4gICAgaWYgKHAgPT09IGVuZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGNvb3JkcyA9IFtwICUgd2lkdGgxLCBpXTtcbiAgICB2YXIgcDAgPSBwO1xuICAgIHZhciB0eXBlID0gcG9pbnRzW3BdO1xuXG4gICAgZG8ge1xuICAgICAgdmFyIHN0ZXAgPSBzdGVwc1t0eXBlXTtcblxuICAgICAgZG8ge1xuICAgICAgICBwICs9IHN0ZXA7XG4gICAgICB9IHdoaWxlICghcG9pbnRzW3BdKTtcblxuICAgICAgdmFyIHBwID0gcG9pbnRzW3BdO1xuXG4gICAgICBpZiAocHAgIT09IDUgJiYgcHAgIT09IDEwKSB7XG4gICAgICAgIHR5cGUgPSBwcDtcbiAgICAgICAgcG9pbnRzW3BdID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBwcCAmIDB4MzMgKiB0eXBlID4+IDQ7XG4gICAgICAgIHBvaW50c1twXSAmPSB0eXBlID4+IDIgfCB0eXBlIDw8IDI7XG4gICAgICB9XG5cbiAgICAgIGNvb3Jkcy5wdXNoKHAgJSB3aWR0aDEsIHAgLyB3aWR0aDEgfCAwKTtcblxuICAgICAgaWYgKCFwb2ludHNbcF0pIHtcbiAgICAgICAgLS1jb3VudDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChwMCAhPT0gcCk7XG5cbiAgICBvdXRsaW5lcy5wdXNoKGNvb3Jkcyk7XG4gICAgLS1pO1xuICB9XG5cbiAgdmFyIGRyYXdPdXRsaW5lID0gZnVuY3Rpb24gZHJhd091dGxpbmUoYykge1xuICAgIGMuc2F2ZSgpO1xuICAgIGMuc2NhbGUoMSAvIHdpZHRoLCAtMSAvIGhlaWdodCk7XG4gICAgYy50cmFuc2xhdGUoMCwgLWhlaWdodCk7XG4gICAgYy5iZWdpblBhdGgoKTtcblxuICAgIGZvciAodmFyIGsgPSAwLCBrayA9IG91dGxpbmVzLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcbiAgICAgIHZhciBvID0gb3V0bGluZXNba107XG4gICAgICBjLm1vdmVUbyhvWzBdLCBvWzFdKTtcblxuICAgICAgZm9yICh2YXIgbCA9IDIsIGxsID0gby5sZW5ndGg7IGwgPCBsbDsgbCArPSAyKSB7XG4gICAgICAgIGMubGluZVRvKG9bbF0sIG9bbCArIDFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjLmZpbGwoKTtcbiAgICBjLmJlZ2luUGF0aCgpO1xuICAgIGMucmVzdG9yZSgpO1xuICB9O1xuXG4gIHJldHVybiBkcmF3T3V0bGluZTtcbn1cblxudmFyIENhbnZhc0V4dHJhU3RhdGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYW52YXNFeHRyYVN0YXRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW52YXNFeHRyYVN0YXRlKTtcblxuICAgIHRoaXMuYWxwaGFJc1NoYXBlID0gZmFsc2U7XG4gICAgdGhpcy5mb250U2l6ZSA9IDA7XG4gICAgdGhpcy5mb250U2l6ZVNjYWxlID0gMTtcbiAgICB0aGlzLnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgdGhpcy50ZXh0TWF0cml4U2NhbGUgPSAxO1xuICAgIHRoaXMuZm9udE1hdHJpeCA9IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYO1xuICAgIHRoaXMubGVhZGluZyA9IDA7XG4gICAgdGhpcy54ID0gMDtcbiAgICB0aGlzLnkgPSAwO1xuICAgIHRoaXMubGluZVggPSAwO1xuICAgIHRoaXMubGluZVkgPSAwO1xuICAgIHRoaXMuY2hhclNwYWNpbmcgPSAwO1xuICAgIHRoaXMud29yZFNwYWNpbmcgPSAwO1xuICAgIHRoaXMudGV4dEhTY2FsZSA9IDE7XG4gICAgdGhpcy50ZXh0UmVuZGVyaW5nTW9kZSA9IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEw7XG4gICAgdGhpcy50ZXh0UmlzZSA9IDA7XG4gICAgdGhpcy5maWxsQ29sb3IgPSBcIiMwMDAwMDBcIjtcbiAgICB0aGlzLnN0cm9rZUNvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgdGhpcy5wYXR0ZXJuRmlsbCA9IGZhbHNlO1xuICAgIHRoaXMuZmlsbEFscGhhID0gMTtcbiAgICB0aGlzLnN0cm9rZUFscGhhID0gMTtcbiAgICB0aGlzLmxpbmVXaWR0aCA9IDE7XG4gICAgdGhpcy5hY3RpdmVTTWFzayA9IG51bGw7XG4gICAgdGhpcy5yZXN1bWVTTWFza0N0eCA9IG51bGw7XG4gICAgdGhpcy50cmFuc2Zlck1hcHMgPSBudWxsO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhbnZhc0V4dHJhU3RhdGUsIFt7XG4gICAga2V5OiBcImNsb25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEN1cnJlbnRQb2ludFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDdXJyZW50UG9pbnQoeCwgeSkge1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbnZhc0V4dHJhU3RhdGU7XG59KCk7XG5cbnZhciBDYW52YXNHcmFwaGljcyA9IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzQ2xvc3VyZSgpIHtcbiAgdmFyIEVYRUNVVElPTl9USU1FID0gMTU7XG4gIHZhciBFWEVDVVRJT05fU1RFUFMgPSAxMDtcblxuICBmdW5jdGlvbiBwdXRCaW5hcnlJbWFnZURhdGEoY3R4LCBpbWdEYXRhKSB7XG4gICAgdmFyIHRyYW5zZmVyTWFwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgSW1hZ2VEYXRhICE9PSBcInVuZGVmaW5lZFwiICYmIGltZ0RhdGEgaW5zdGFuY2VvZiBJbWFnZURhdGEpIHtcbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0LFxuICAgICAgICB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgdmFyIHBhcnRpYWxDaHVua0hlaWdodCA9IGhlaWdodCAlIEZVTExfQ0hVTktfSEVJR0hUO1xuICAgIHZhciBmdWxsQ2h1bmtzID0gKGhlaWdodCAtIHBhcnRpYWxDaHVua0hlaWdodCkgLyBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICB2YXIgdG90YWxDaHVua3MgPSBwYXJ0aWFsQ2h1bmtIZWlnaHQgPT09IDAgPyBmdWxsQ2h1bmtzIDogZnVsbENodW5rcyArIDE7XG4gICAgdmFyIGNodW5rSW1nRGF0YSA9IGN0eC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIEZVTExfQ0hVTktfSEVJR0hUKTtcbiAgICB2YXIgc3JjUG9zID0gMCxcbiAgICAgICAgZGVzdFBvcztcbiAgICB2YXIgc3JjID0gaW1nRGF0YS5kYXRhO1xuICAgIHZhciBkZXN0ID0gY2h1bmtJbWdEYXRhLmRhdGE7XG4gICAgdmFyIGksIGosIHRoaXNDaHVua0hlaWdodCwgZWxlbXNJblRoaXNDaHVuaztcbiAgICB2YXIgdHJhbnNmZXJNYXBSZWQsIHRyYW5zZmVyTWFwR3JlZW4sIHRyYW5zZmVyTWFwQmx1ZSwgdHJhbnNmZXJNYXBHcmF5O1xuXG4gICAgaWYgKHRyYW5zZmVyTWFwcykge1xuICAgICAgc3dpdGNoICh0cmFuc2Zlck1hcHMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0cmFuc2Zlck1hcFJlZCA9IHRyYW5zZmVyTWFwc1swXTtcbiAgICAgICAgICB0cmFuc2Zlck1hcEdyZWVuID0gdHJhbnNmZXJNYXBzWzBdO1xuICAgICAgICAgIHRyYW5zZmVyTWFwQmx1ZSA9IHRyYW5zZmVyTWFwc1swXTtcbiAgICAgICAgICB0cmFuc2Zlck1hcEdyYXkgPSB0cmFuc2Zlck1hcHNbMF07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHRyYW5zZmVyTWFwUmVkID0gdHJhbnNmZXJNYXBzWzBdO1xuICAgICAgICAgIHRyYW5zZmVyTWFwR3JlZW4gPSB0cmFuc2Zlck1hcHNbMV07XG4gICAgICAgICAgdHJhbnNmZXJNYXBCbHVlID0gdHJhbnNmZXJNYXBzWzJdO1xuICAgICAgICAgIHRyYW5zZmVyTWFwR3JheSA9IHRyYW5zZmVyTWFwc1szXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFApIHtcbiAgICAgIHZhciBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aDtcbiAgICAgIHZhciBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIsIDAsIGRlc3QuYnl0ZUxlbmd0aCA+PiAyKTtcbiAgICAgIHZhciBkZXN0MzJEYXRhTGVuZ3RoID0gZGVzdDMyLmxlbmd0aDtcbiAgICAgIHZhciBmdWxsU3JjRGlmZiA9IHdpZHRoICsgNyA+PiAzO1xuICAgICAgdmFyIHdoaXRlID0gMHhmZmZmZmZmZjtcbiAgICAgIHZhciBibGFjayA9IF91dGlsLklzTGl0dGxlRW5kaWFuQ2FjaGVkLnZhbHVlID8gMHhmZjAwMDAwMCA6IDB4MDAwMDAwZmY7XG5cbiAgICAgIGlmICh0cmFuc2Zlck1hcEdyYXkpIHtcbiAgICAgICAgaWYgKHRyYW5zZmVyTWFwR3JheVswXSA9PT0gMHhmZiAmJiB0cmFuc2Zlck1hcEdyYXlbMHhmZl0gPT09IDApIHtcbiAgICAgICAgICB2YXIgX3JlZiA9IFtibGFjaywgd2hpdGVdO1xuICAgICAgICAgIHdoaXRlID0gX3JlZlswXTtcbiAgICAgICAgICBibGFjayA9IF9yZWZbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gaSA8IGZ1bGxDaHVua3MgPyBGVUxMX0NIVU5LX0hFSUdIVCA6IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgICAgZGVzdFBvcyA9IDA7XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXNDaHVua0hlaWdodDsgaisrKSB7XG4gICAgICAgICAgdmFyIHNyY0RpZmYgPSBzcmNMZW5ndGggLSBzcmNQb3M7XG4gICAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICAgIHZhciBrRW5kID0gc3JjRGlmZiA+IGZ1bGxTcmNEaWZmID8gd2lkdGggOiBzcmNEaWZmICogOCAtIDc7XG4gICAgICAgICAgdmFyIGtFbmRVbnJvbGxlZCA9IGtFbmQgJiB+NztcbiAgICAgICAgICB2YXIgbWFzayA9IDA7XG4gICAgICAgICAgdmFyIHNyY0J5dGUgPSAwO1xuXG4gICAgICAgICAgZm9yICg7IGsgPCBrRW5kVW5yb2xsZWQ7IGsgKz0gOCkge1xuICAgICAgICAgICAgc3JjQnl0ZSA9IHNyY1tzcmNQb3MrK107XG4gICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAxMjggPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgNjQgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMzIgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMTYgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgOCA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA0ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDIgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMSA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICg7IGsgPCBrRW5kOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChtYXNrID09PSAwKSB7XG4gICAgICAgICAgICAgIHNyY0J5dGUgPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgICBtYXNrID0gMTI4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiBtYXNrID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgIG1hc2sgPj49IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGRlc3RQb3MgPCBkZXN0MzJEYXRhTGVuZ3RoKSB7XG4gICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbWdEYXRhLmtpbmQgPT09IF91dGlsLkltYWdlS2luZC5SR0JBXzMyQlBQKSB7XG4gICAgICB2YXIgaGFzVHJhbnNmZXJNYXBzID0gISEodHJhbnNmZXJNYXBSZWQgfHwgdHJhbnNmZXJNYXBHcmVlbiB8fCB0cmFuc2Zlck1hcEJsdWUpO1xuICAgICAgaiA9IDA7XG4gICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiBGVUxMX0NIVU5LX0hFSUdIVCAqIDQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY1Bvcywgc3JjUG9zICsgZWxlbXNJblRoaXNDaHVuaykpO1xuICAgICAgICBzcmNQb3MgKz0gZWxlbXNJblRoaXNDaHVuaztcblxuICAgICAgICBpZiAoaGFzVHJhbnNmZXJNYXBzKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IGVsZW1zSW5UaGlzQ2h1bms7IF9rICs9IDQpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcFJlZCkge1xuICAgICAgICAgICAgICBkZXN0W19rICsgMF0gPSB0cmFuc2Zlck1hcFJlZFtkZXN0W19rICsgMF1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBHcmVlbikge1xuICAgICAgICAgICAgICBkZXN0W19rICsgMV0gPSB0cmFuc2Zlck1hcEdyZWVuW2Rlc3RbX2sgKyAxXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcEJsdWUpIHtcbiAgICAgICAgICAgICAgZGVzdFtfayArIDJdID0gdHJhbnNmZXJNYXBCbHVlW2Rlc3RbX2sgKyAyXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgICBqICs9IEZVTExfQ0hVTktfSEVJR0hUO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IHRvdGFsQ2h1bmtzKSB7XG4gICAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHBhcnRpYWxDaHVua0hlaWdodCAqIDQ7XG4gICAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTtcblxuICAgICAgICBpZiAoaGFzVHJhbnNmZXJNYXBzKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2syID0gMDsgX2syIDwgZWxlbXNJblRoaXNDaHVuazsgX2syICs9IDQpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcFJlZCkge1xuICAgICAgICAgICAgICBkZXN0W19rMiArIDBdID0gdHJhbnNmZXJNYXBSZWRbZGVzdFtfazIgKyAwXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcEdyZWVuKSB7XG4gICAgICAgICAgICAgIGRlc3RbX2syICsgMV0gPSB0cmFuc2Zlck1hcEdyZWVuW2Rlc3RbX2syICsgMV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBCbHVlKSB7XG4gICAgICAgICAgICAgIGRlc3RbX2syICsgMl0gPSB0cmFuc2Zlck1hcEJsdWVbZGVzdFtfazIgKyAyXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCXzI0QlBQKSB7XG4gICAgICB2YXIgX2hhc1RyYW5zZmVyTWFwcyA9ICEhKHRyYW5zZmVyTWFwUmVkIHx8IHRyYW5zZmVyTWFwR3JlZW4gfHwgdHJhbnNmZXJNYXBCbHVlKTtcblxuICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiB0aGlzQ2h1bmtIZWlnaHQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbENodW5rczsgaSsrKSB7XG4gICAgICAgIGlmIChpID49IGZ1bGxDaHVua3MpIHtcbiAgICAgICAgICB0aGlzQ2h1bmtIZWlnaHQgPSBwYXJ0aWFsQ2h1bmtIZWlnaHQ7XG4gICAgICAgICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogdGhpc0NodW5rSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdFBvcyA9IDA7XG5cbiAgICAgICAgZm9yIChqID0gZWxlbXNJblRoaXNDaHVuazsgai0tOykge1xuICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IHNyY1tzcmNQb3MrK107XG4gICAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IDI1NTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfaGFzVHJhbnNmZXJNYXBzKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2szID0gMDsgX2szIDwgZGVzdFBvczsgX2szICs9IDQpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcFJlZCkge1xuICAgICAgICAgICAgICBkZXN0W19rMyArIDBdID0gdHJhbnNmZXJNYXBSZWRbZGVzdFtfazMgKyAwXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcEdyZWVuKSB7XG4gICAgICAgICAgICAgIGRlc3RbX2szICsgMV0gPSB0cmFuc2Zlck1hcEdyZWVuW2Rlc3RbX2szICsgMV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBCbHVlKSB7XG4gICAgICAgICAgICAgIGRlc3RbX2szICsgMl0gPSB0cmFuc2Zlck1hcEJsdWVbZGVzdFtfazMgKyAyXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBpbWFnZSBraW5kOiBcIi5jb25jYXQoaW1nRGF0YS5raW5kKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHV0QmluYXJ5SW1hZ2VNYXNrKGN0eCwgaW1nRGF0YSkge1xuICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCxcbiAgICAgICAgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgIHZhciBwYXJ0aWFsQ2h1bmtIZWlnaHQgPSBoZWlnaHQgJSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICB2YXIgZnVsbENodW5rcyA9IChoZWlnaHQgLSBwYXJ0aWFsQ2h1bmtIZWlnaHQpIC8gRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgdmFyIHRvdGFsQ2h1bmtzID0gcGFydGlhbENodW5rSGVpZ2h0ID09PSAwID8gZnVsbENodW5rcyA6IGZ1bGxDaHVua3MgKyAxO1xuICAgIHZhciBjaHVua0ltZ0RhdGEgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgdmFyIHNyY1BvcyA9IDA7XG4gICAgdmFyIHNyYyA9IGltZ0RhdGEuZGF0YTtcbiAgICB2YXIgZGVzdCA9IGNodW5rSW1nRGF0YS5kYXRhO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbENodW5rczsgaSsrKSB7XG4gICAgICB2YXIgdGhpc0NodW5rSGVpZ2h0ID0gaSA8IGZ1bGxDaHVua3MgPyBGVUxMX0NIVU5LX0hFSUdIVCA6IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgIHZhciBkZXN0UG9zID0gMztcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzQ2h1bmtIZWlnaHQ7IGorKykge1xuICAgICAgICB2YXIgZWxlbSA9IHZvaWQgMCxcbiAgICAgICAgICAgIG1hc2sgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgd2lkdGg7IGsrKykge1xuICAgICAgICAgIGlmICghbWFzaykge1xuICAgICAgICAgICAgZWxlbSA9IHNyY1tzcmNQb3MrK107XG4gICAgICAgICAgICBtYXNrID0gMTI4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlc3RbZGVzdFBvc10gPSBlbGVtICYgbWFzayA/IDAgOiAyNTU7XG4gICAgICAgICAgZGVzdFBvcyArPSA0O1xuICAgICAgICAgIG1hc2sgPj49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29weUN0eFN0YXRlKHNvdXJjZUN0eCwgZGVzdEN0eCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gW1wic3Ryb2tlU3R5bGVcIiwgXCJmaWxsU3R5bGVcIiwgXCJmaWxsUnVsZVwiLCBcImdsb2JhbEFscGhhXCIsIFwibGluZVdpZHRoXCIsIFwibGluZUNhcFwiLCBcImxpbmVKb2luXCIsIFwibWl0ZXJMaW1pdFwiLCBcImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvblwiLCBcImZvbnRcIl07XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG5cbiAgICAgIGlmIChzb3VyY2VDdHhbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVzdEN0eFtwcm9wZXJ0eV0gPSBzb3VyY2VDdHhbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzb3VyY2VDdHguc2V0TGluZURhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVzdEN0eC5zZXRMaW5lRGFzaChzb3VyY2VDdHguZ2V0TGluZURhc2goKSk7XG4gICAgICBkZXN0Q3R4LmxpbmVEYXNoT2Zmc2V0ID0gc291cmNlQ3R4LmxpbmVEYXNoT2Zmc2V0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0Q3R4VG9EZWZhdWx0KGN0eCkge1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiIzAwMDAwMFwiO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDAwMDBcIjtcbiAgICBjdHguZmlsbFJ1bGUgPSBcIm5vbnplcm9cIjtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC5saW5lQ2FwID0gXCJidXR0XCI7XG4gICAgY3R4LmxpbmVKb2luID0gXCJtaXRlclwiO1xuICAgIGN0eC5taXRlckxpbWl0ID0gMTA7XG4gICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcbiAgICBjdHguZm9udCA9IFwiMTBweCBzYW5zLXNlcmlmXCI7XG5cbiAgICBpZiAoY3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGN0eC5zZXRMaW5lRGFzaChbXSk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBvc2VTTWFza0JhY2tkcm9wKGJ5dGVzLCByMCwgZzAsIGIwKSB7XG4gICAgdmFyIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIHZhciBhbHBoYSA9IGJ5dGVzW2ldO1xuXG4gICAgICBpZiAoYWxwaGEgPT09IDApIHtcbiAgICAgICAgYnl0ZXNbaSAtIDNdID0gcjA7XG4gICAgICAgIGJ5dGVzW2kgLSAyXSA9IGcwO1xuICAgICAgICBieXRlc1tpIC0gMV0gPSBiMDtcbiAgICAgIH0gZWxzZSBpZiAoYWxwaGEgPCAyNTUpIHtcbiAgICAgICAgdmFyIGFscGhhXyA9IDI1NSAtIGFscGhhO1xuICAgICAgICBieXRlc1tpIC0gM10gPSBieXRlc1tpIC0gM10gKiBhbHBoYSArIHIwICogYWxwaGFfID4+IDg7XG4gICAgICAgIGJ5dGVzW2kgLSAyXSA9IGJ5dGVzW2kgLSAyXSAqIGFscGhhICsgZzAgKiBhbHBoYV8gPj4gODtcbiAgICAgICAgYnl0ZXNbaSAtIDFdID0gYnl0ZXNbaSAtIDFdICogYWxwaGEgKyBiMCAqIGFscGhhXyA+PiA4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBvc2VTTWFza0FscGhhKG1hc2tEYXRhLCBsYXllckRhdGEsIHRyYW5zZmVyTWFwKSB7XG4gICAgdmFyIGxlbmd0aCA9IG1hc2tEYXRhLmxlbmd0aDtcbiAgICB2YXIgc2NhbGUgPSAxIC8gMjU1O1xuXG4gICAgZm9yICh2YXIgaSA9IDM7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgICAgdmFyIGFscGhhID0gdHJhbnNmZXJNYXAgPyB0cmFuc2Zlck1hcFttYXNrRGF0YVtpXV0gOiBtYXNrRGF0YVtpXTtcbiAgICAgIGxheWVyRGF0YVtpXSA9IGxheWVyRGF0YVtpXSAqIGFscGhhICogc2NhbGUgfCAwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBvc2VTTWFza0x1bWlub3NpdHkobWFza0RhdGEsIGxheWVyRGF0YSwgdHJhbnNmZXJNYXApIHtcbiAgICB2YXIgbGVuZ3RoID0gbWFza0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDM7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgICAgdmFyIHkgPSBtYXNrRGF0YVtpIC0gM10gKiA3NyArIG1hc2tEYXRhW2kgLSAyXSAqIDE1MiArIG1hc2tEYXRhW2kgLSAxXSAqIDI4O1xuICAgICAgbGF5ZXJEYXRhW2ldID0gdHJhbnNmZXJNYXAgPyBsYXllckRhdGFbaV0gKiB0cmFuc2Zlck1hcFt5ID4+IDhdID4+IDggOiBsYXllckRhdGFbaV0gKiB5ID4+IDE2O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyaWNDb21wb3NlU01hc2sobWFza0N0eCwgbGF5ZXJDdHgsIHdpZHRoLCBoZWlnaHQsIHN1YnR5cGUsIGJhY2tkcm9wLCB0cmFuc2Zlck1hcCkge1xuICAgIHZhciBoYXNCYWNrZHJvcCA9ICEhYmFja2Ryb3A7XG4gICAgdmFyIHIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFswXSA6IDA7XG4gICAgdmFyIGcwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsxXSA6IDA7XG4gICAgdmFyIGIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsyXSA6IDA7XG4gICAgdmFyIGNvbXBvc2VGbjtcblxuICAgIGlmIChzdWJ0eXBlID09PSBcIkx1bWlub3NpdHlcIikge1xuICAgICAgY29tcG9zZUZuID0gY29tcG9zZVNNYXNrTHVtaW5vc2l0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcG9zZUZuID0gY29tcG9zZVNNYXNrQWxwaGE7XG4gICAgfVxuXG4gICAgdmFyIFBJWEVMU19UT19QUk9DRVNTID0gMTA0ODU3NjtcbiAgICB2YXIgY2h1bmtTaXplID0gTWF0aC5taW4oaGVpZ2h0LCBNYXRoLmNlaWwoUElYRUxTX1RPX1BST0NFU1MgLyB3aWR0aCkpO1xuXG4gICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgaGVpZ2h0OyByb3cgKz0gY2h1bmtTaXplKSB7XG4gICAgICB2YXIgY2h1bmtIZWlnaHQgPSBNYXRoLm1pbihjaHVua1NpemUsIGhlaWdodCAtIHJvdyk7XG4gICAgICB2YXIgbWFza0RhdGEgPSBtYXNrQ3R4LmdldEltYWdlRGF0YSgwLCByb3csIHdpZHRoLCBjaHVua0hlaWdodCk7XG4gICAgICB2YXIgbGF5ZXJEYXRhID0gbGF5ZXJDdHguZ2V0SW1hZ2VEYXRhKDAsIHJvdywgd2lkdGgsIGNodW5rSGVpZ2h0KTtcblxuICAgICAgaWYgKGhhc0JhY2tkcm9wKSB7XG4gICAgICAgIGNvbXBvc2VTTWFza0JhY2tkcm9wKG1hc2tEYXRhLmRhdGEsIHIwLCBnMCwgYjApO1xuICAgICAgfVxuXG4gICAgICBjb21wb3NlRm4obWFza0RhdGEuZGF0YSwgbGF5ZXJEYXRhLmRhdGEsIHRyYW5zZmVyTWFwKTtcbiAgICAgIG1hc2tDdHgucHV0SW1hZ2VEYXRhKGxheWVyRGF0YSwgMCwgcm93KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21wb3NlU01hc2soY3R4LCBzbWFzaywgbGF5ZXJDdHgpIHtcbiAgICB2YXIgbWFzayA9IHNtYXNrLmNhbnZhcztcbiAgICB2YXIgbWFza0N0eCA9IHNtYXNrLmNvbnRleHQ7XG4gICAgY3R4LnNldFRyYW5zZm9ybShzbWFzay5zY2FsZVgsIDAsIDAsIHNtYXNrLnNjYWxlWSwgc21hc2sub2Zmc2V0WCwgc21hc2sub2Zmc2V0WSk7XG4gICAgZ2VuZXJpY0NvbXBvc2VTTWFzayhtYXNrQ3R4LCBsYXllckN0eCwgbWFzay53aWR0aCwgbWFzay5oZWlnaHQsIHNtYXNrLnN1YnR5cGUsIHNtYXNrLmJhY2tkcm9wLCBzbWFzay50cmFuc2Zlck1hcCk7XG4gICAgY3R4LmRyYXdJbWFnZShtYXNrLCAwLCAwKTtcbiAgfVxuXG4gIHZhciBMSU5FX0NBUF9TVFlMRVMgPSBbXCJidXR0XCIsIFwicm91bmRcIiwgXCJzcXVhcmVcIl07XG4gIHZhciBMSU5FX0pPSU5fU1RZTEVTID0gW1wibWl0ZXJcIiwgXCJyb3VuZFwiLCBcImJldmVsXCJdO1xuICB2YXIgTk9STUFMX0NMSVAgPSB7fTtcbiAgdmFyIEVPX0NMSVAgPSB7fTtcblxuICB2YXIgQ2FudmFzR3JhcGhpY3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzKGNhbnZhc0N0eCwgY29tbW9uT2Jqcywgb2JqcywgY2FudmFzRmFjdG9yeSwgaW1hZ2VMYXllciwgb3B0aW9uYWxDb250ZW50Q29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FudmFzR3JhcGhpY3MpO1xuXG4gICAgICB0aGlzLmN0eCA9IGNhbnZhc0N0eDtcbiAgICAgIHRoaXMuY3VycmVudCA9IG5ldyBDYW52YXNFeHRyYVN0YXRlKCk7XG4gICAgICB0aGlzLnN0YXRlU3RhY2sgPSBbXTtcbiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsO1xuICAgICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gZmFsc2U7XG4gICAgICB0aGlzLnJlcyA9IG51bGw7XG4gICAgICB0aGlzLnhvYmpzID0gbnVsbDtcbiAgICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7XG4gICAgICB0aGlzLm9ianMgPSBvYmpzO1xuICAgICAgdGhpcy5jYW52YXNGYWN0b3J5ID0gY2FudmFzRmFjdG9yeTtcbiAgICAgIHRoaXMuaW1hZ2VMYXllciA9IGltYWdlTGF5ZXI7XG4gICAgICB0aGlzLmdyb3VwU3RhY2sgPSBbXTtcbiAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gbnVsbDtcbiAgICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IG51bGw7XG4gICAgICB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjayA9IFtdO1xuICAgICAgdGhpcy5ncm91cExldmVsID0gMDtcbiAgICAgIHRoaXMuc21hc2tTdGFjayA9IFtdO1xuICAgICAgdGhpcy5zbWFza0NvdW50ZXIgPSAwO1xuICAgICAgdGhpcy50ZW1wU01hc2sgPSBudWxsO1xuICAgICAgdGhpcy5jb250ZW50VmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLm1hcmtlZENvbnRlbnRTdGFjayA9IFtdO1xuICAgICAgdGhpcy5vcHRpb25hbENvbnRlbnRDb25maWcgPSBvcHRpb25hbENvbnRlbnRDb25maWc7XG4gICAgICB0aGlzLmNhY2hlZENhbnZhc2VzID0gbmV3IENhY2hlZENhbnZhc2VzKHRoaXMuY2FudmFzRmFjdG9yeSk7XG5cbiAgICAgIGlmIChjYW52YXNDdHgpIHtcbiAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzQ3R4KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENhbnZhc0dyYXBoaWNzLCBbe1xuICAgICAga2V5OiBcImJlZ2luRHJhd2luZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luRHJhd2luZyhfcmVmMikge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gX3JlZjIudHJhbnNmb3JtLFxuICAgICAgICAgICAgdmlld3BvcnQgPSBfcmVmMi52aWV3cG9ydCxcbiAgICAgICAgICAgIF9yZWYyJHRyYW5zcGFyZW5jeSA9IF9yZWYyLnRyYW5zcGFyZW5jeSxcbiAgICAgICAgICAgIHRyYW5zcGFyZW5jeSA9IF9yZWYyJHRyYW5zcGFyZW5jeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR0cmFuc3BhcmVuY3ksXG4gICAgICAgICAgICBfcmVmMiRiYWNrZ3JvdW5kID0gX3JlZjIuYmFja2dyb3VuZCxcbiAgICAgICAgICAgIGJhY2tncm91bmQgPSBfcmVmMiRiYWNrZ3JvdW5kID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjIkYmFja2dyb3VuZDtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5jdHguY2FudmFzLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5jdHguY2FudmFzLmhlaWdodDtcbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kIHx8IFwicmdiKDI1NSwgMjU1LCAyNTUpXCI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgaWYgKHRyYW5zcGFyZW5jeSkge1xuICAgICAgICAgIHZhciB0cmFuc3BhcmVudENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwidHJhbnNwYXJlbnRcIiwgd2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy5jb21wb3NpdGVDdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICB0aGlzLnRyYW5zcGFyZW50Q2FudmFzID0gdHJhbnNwYXJlbnRDYW52YXMuY2FudmFzO1xuICAgICAgICAgIHRoaXMuY3R4ID0gdHJhbnNwYXJlbnRDYW52YXMuY29udGV4dDtcbiAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgICAgdGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCB0aGlzLmNvbXBvc2l0ZUN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgcmVzZXRDdHhUb0RlZmF1bHQodGhpcy5jdHgpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRyYW5zZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHZpZXdwb3J0LnRyYW5zZm9ybSk7XG4gICAgICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0uc2xpY2UoKTtcbiAgICAgICAgdGhpcy5fY29tYmluZWRTY2FsZUZhY3RvciA9IE1hdGguaHlwb3QodGhpcy5iYXNlVHJhbnNmb3JtWzBdLCB0aGlzLmJhc2VUcmFuc2Zvcm1bMl0pO1xuXG4gICAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuYmVnaW5MYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJleGVjdXRlT3BlcmF0b3JMaXN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZU9wZXJhdG9yTGlzdChvcGVyYXRvckxpc3QsIGV4ZWN1dGlvblN0YXJ0SWR4LCBjb250aW51ZUNhbGxiYWNrLCBzdGVwcGVyKSB7XG4gICAgICAgIHZhciBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5O1xuICAgICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgICB2YXIgaSA9IGV4ZWN1dGlvblN0YXJ0SWR4IHx8IDA7XG4gICAgICAgIHZhciBhcmdzQXJyYXlMZW4gPSBhcmdzQXJyYXkubGVuZ3RoO1xuXG4gICAgICAgIGlmIChhcmdzQXJyYXlMZW4gPT09IGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaHVua09wZXJhdGlvbnMgPSBhcmdzQXJyYXlMZW4gLSBpID4gRVhFQ1VUSU9OX1NURVBTICYmIHR5cGVvZiBjb250aW51ZUNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIHZhciBlbmRUaW1lID0gY2h1bmtPcGVyYXRpb25zID8gRGF0ZS5ub3coKSArIEVYRUNVVElPTl9USU1FIDogMDtcbiAgICAgICAgdmFyIHN0ZXBzID0gMDtcbiAgICAgICAgdmFyIGNvbW1vbk9ianMgPSB0aGlzLmNvbW1vbk9ianM7XG4gICAgICAgIHZhciBvYmpzID0gdGhpcy5vYmpzO1xuICAgICAgICB2YXIgZm5JZDtcblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGlmIChzdGVwcGVyICE9PSB1bmRlZmluZWQgJiYgaSA9PT0gc3RlcHBlci5uZXh0QnJlYWtQb2ludCkge1xuICAgICAgICAgICAgc3RlcHBlci5icmVha0l0KGksIGNvbnRpbnVlQ2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm5JZCA9IGZuQXJyYXlbaV07XG5cbiAgICAgICAgICBpZiAoZm5JZCAhPT0gX3V0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIHRoaXNbZm5JZF0uYXBwbHkodGhpcywgYXJnc0FycmF5W2ldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFyZ3NBcnJheVtpXSksXG4gICAgICAgICAgICAgICAgX3N0ZXA7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlcE9iaklkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ianNQb29sID0gZGVwT2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gY29tbW9uT2JqcyA6IG9ianM7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9ianNQb29sLmhhcyhkZXBPYmpJZCkpIHtcbiAgICAgICAgICAgICAgICAgIG9ianNQb29sLmdldChkZXBPYmpJZCwgY29udGludWVDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpKys7XG5cbiAgICAgICAgICBpZiAoaSA9PT0gYXJnc0FycmF5TGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2h1bmtPcGVyYXRpb25zICYmICsrc3RlcHMgPiBFWEVDVVRJT05fU1RFUFMpIHtcbiAgICAgICAgICAgIGlmIChEYXRlLm5vdygpID4gZW5kVGltZSkge1xuICAgICAgICAgICAgICBjb250aW51ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGVwcyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZERyYXdpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmREcmF3aW5nKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCB8fCB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICBpZiAodGhpcy50cmFuc3BhcmVudENhbnZhcykge1xuICAgICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jb21wb3NpdGVDdHg7XG4gICAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICAgIHRoaXMuY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy50cmFuc3BhcmVudENhbnZhcywgMCwgMCk7XG4gICAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgICAgIHRoaXMudHJhbnNwYXJlbnRDYW52YXMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWNoZWRDYW52YXNlcy5jbGVhcigpO1xuXG4gICAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuZW5kTGF5b3V0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGluZVdpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gd2lkdGg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldExpbmVDYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMaW5lQ2FwKHN0eWxlKSB7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVDYXAgPSBMSU5FX0NBUF9TVFlMRVNbc3R5bGVdO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRMaW5lSm9pblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExpbmVKb2luKHN0eWxlKSB7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVKb2luID0gTElORV9KT0lOX1NUWUxFU1tzdHlsZV07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldE1pdGVyTGltaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNaXRlckxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMuY3R4Lm1pdGVyTGltaXQgPSBsaW1pdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RGFzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuXG4gICAgICAgIGlmIChjdHguc2V0TGluZURhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChkYXNoQXJyYXkpO1xuICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGRhc2hQaGFzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRSZW5kZXJpbmdJbnRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50KSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRGbGF0bmVzc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZsYXRuZXNzKGZsYXRuZXNzKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRHU3RhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRHU3RhdGUoc3RhdGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHN0YXRlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVzW2ldO1xuICAgICAgICAgIHZhciBrZXkgPSBzdGF0ZVswXTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzdGF0ZVsxXTtcblxuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiTFdcIjpcbiAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lV2lkdGgodmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIkxDXCI6XG4gICAgICAgICAgICAgIHRoaXMuc2V0TGluZUNhcCh2YWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiTEpcIjpcbiAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbih2YWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiTUxcIjpcbiAgICAgICAgICAgICAgdGhpcy5zZXRNaXRlckxpbWl0KHZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJEXCI6XG4gICAgICAgICAgICAgIHRoaXMuc2V0RGFzaCh2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIlJJXCI6XG4gICAgICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJGTFwiOlxuICAgICAgICAgICAgICB0aGlzLnNldEZsYXRuZXNzKHZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgICAgIHRoaXMuc2V0Rm9udCh2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIkNBXCI6XG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VBbHBoYSA9IHN0YXRlWzFdO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImNhXCI6XG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudC5maWxsQWxwaGEgPSBzdGF0ZVsxXTtcbiAgICAgICAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSBzdGF0ZVsxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJCTVwiOlxuICAgICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJTTWFza1wiOlxuICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVTdGFjay5sZW5ndGggPiAwICYmIHRoaXMuc3RhdGVTdGFja1t0aGlzLnN0YXRlU3RhY2subGVuZ3RoIC0gMV0uYWN0aXZlU01hc2sgPT09IHRoaXMuY3VycmVudC5hY3RpdmVTTWFzaykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdXNwZW5kU01hc2tHcm91cCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmVuZFNNYXNrR3JvdXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgPSB2YWx1ZSA/IHRoaXMudGVtcFNNYXNrIDogbnVsbDtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iZWdpblNNYXNrR3JvdXAoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMudGVtcFNNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJUUlwiOlxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudHJhbnNmZXJNYXBzID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJlZ2luU01hc2tHcm91cFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luU01hc2tHcm91cCgpIHtcbiAgICAgICAgdmFyIGFjdGl2ZVNNYXNrID0gdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrO1xuICAgICAgICB2YXIgZHJhd25XaWR0aCA9IGFjdGl2ZVNNYXNrLmNhbnZhcy53aWR0aDtcbiAgICAgICAgdmFyIGRyYXduSGVpZ2h0ID0gYWN0aXZlU01hc2suY2FudmFzLmhlaWdodDtcbiAgICAgICAgdmFyIGNhY2hlSWQgPSBcInNtYXNrR3JvdXBBdFwiICsgdGhpcy5ncm91cExldmVsO1xuICAgICAgICB2YXIgc2NyYXRjaENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKGNhY2hlSWQsIGRyYXduV2lkdGgsIGRyYXduSGVpZ2h0LCB0cnVlKTtcbiAgICAgICAgdmFyIGN1cnJlbnRDdHggPSB0aGlzLmN0eDtcbiAgICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBjdXJyZW50Q3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgdmFyIGdyb3VwQ3R4ID0gc2NyYXRjaENhbnZhcy5jb250ZXh0O1xuICAgICAgICBncm91cEN0eC5zY2FsZSgxIC8gYWN0aXZlU01hc2suc2NhbGVYLCAxIC8gYWN0aXZlU01hc2suc2NhbGVZKTtcbiAgICAgICAgZ3JvdXBDdHgudHJhbnNsYXRlKC1hY3RpdmVTTWFzay5vZmZzZXRYLCAtYWN0aXZlU01hc2sub2Zmc2V0WSk7XG4gICAgICAgIGdyb3VwQ3R4LnRyYW5zZm9ybS5hcHBseShncm91cEN0eCwgY3VycmVudFRyYW5zZm9ybSk7XG4gICAgICAgIGFjdGl2ZVNNYXNrLnN0YXJ0VHJhbnNmb3JtSW52ZXJzZSA9IGdyb3VwQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuICAgICAgICBjb3B5Q3R4U3RhdGUoY3VycmVudEN0eCwgZ3JvdXBDdHgpO1xuICAgICAgICB0aGlzLmN0eCA9IGdyb3VwQ3R4O1xuICAgICAgICB0aGlzLnNldEdTdGF0ZShbW1wiQk1cIiwgXCJzb3VyY2Utb3ZlclwiXSwgW1wiY2FcIiwgMV0sIFtcIkNBXCIsIDFdXSk7XG4gICAgICAgIHRoaXMuZ3JvdXBTdGFjay5wdXNoKGN1cnJlbnRDdHgpO1xuICAgICAgICB0aGlzLmdyb3VwTGV2ZWwrKztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3VzcGVuZFNNYXNrR3JvdXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdXNwZW5kU01hc2tHcm91cCgpIHtcbiAgICAgICAgdmFyIGdyb3VwQ3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHRoaXMuZ3JvdXBMZXZlbC0tO1xuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuZ3JvdXBTdGFjay5wb3AoKTtcbiAgICAgICAgY29tcG9zZVNNYXNrKHRoaXMuY3R4LCB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2ssIGdyb3VwQ3R4KTtcbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgIGNvcHlDdHhTdGF0ZShncm91cEN0eCwgdGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHggPSBncm91cEN0eDtcblxuICAgICAgICB2YXIgZGVsdGFUcmFuc2Zvcm0gPSBfdXRpbC5VdGlsLnRyYW5zZm9ybSh0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2suc3RhcnRUcmFuc2Zvcm1JbnZlcnNlLCBncm91cEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcblxuICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIGRlbHRhVHJhbnNmb3JtKTtcbiAgICAgICAgZ3JvdXBDdHguc2F2ZSgpO1xuICAgICAgICBncm91cEN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgIGdyb3VwQ3R4LmNsZWFyUmVjdCgwLCAwLCBncm91cEN0eC5jYW52YXMud2lkdGgsIGdyb3VwQ3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBncm91cEN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc3VtZVNNYXNrR3JvdXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVTTWFza0dyb3VwKCkge1xuICAgICAgICB2YXIgZ3JvdXBDdHggPSB0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHg7XG4gICAgICAgIHZhciBjdXJyZW50Q3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHRoaXMuY3R4ID0gZ3JvdXBDdHg7XG4gICAgICAgIHRoaXMuZ3JvdXBTdGFjay5wdXNoKGN1cnJlbnRDdHgpO1xuICAgICAgICB0aGlzLmdyb3VwTGV2ZWwrKztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5kU01hc2tHcm91cFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuZFNNYXNrR3JvdXAoKSB7XG4gICAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB0aGlzLmdyb3VwTGV2ZWwtLTtcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7XG4gICAgICAgIGNvbXBvc2VTTWFzayh0aGlzLmN0eCwgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrLCBncm91cEN0eCk7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgY29weUN0eFN0YXRlKGdyb3VwQ3R4LCB0aGlzLmN0eCk7XG5cbiAgICAgICAgdmFyIGRlbHRhVHJhbnNmb3JtID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0odGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrLnN0YXJ0VHJhbnNmb3JtSW52ZXJzZSwgZ3JvdXBDdHgubW96Q3VycmVudFRyYW5zZm9ybSk7XG5cbiAgICAgICAgdGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCBkZWx0YVRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNhdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgIHZhciBvbGQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIHRoaXMuc3RhdGVTdGFjay5wdXNoKG9sZCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG9sZC5jbG9uZSgpO1xuICAgICAgICB0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHggPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXN0b3JlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5yZXN1bWVTTWFza0N0eCkge1xuICAgICAgICAgIHRoaXMucmVzdW1lU01hc2tHcm91cCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayAhPT0gbnVsbCAmJiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLmFjdGl2ZVNNYXNrICE9PSB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spKSB7XG4gICAgICAgICAgdGhpcy5lbmRTTWFza0dyb3VwKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuc3RhdGVTdGFjay5wb3AoKTtcbiAgICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb25zdHJ1Y3RQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3RydWN0UGF0aChvcHMsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgdmFyIHggPSBjdXJyZW50LngsXG4gICAgICAgICAgICB5ID0gY3VycmVudC55O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gMCwgaWkgPSBvcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHN3aXRjaCAob3BzW2ldIHwgMCkge1xuICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucmVjdGFuZ2xlOlxuICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICB2YXIgd2lkdGggPSBhcmdzW2orK107XG4gICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBhcmdzW2orK107XG4gICAgICAgICAgICAgIHZhciB4dyA9IHggKyB3aWR0aDtcbiAgICAgICAgICAgICAgdmFyIHloID0geSArIGhlaWdodDtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcblxuICAgICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4dywgeWgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeHcsIHkpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeHcsIHloKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHgsIHloKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzpcbiAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmxpbmVUbzpcbiAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG86XG4gICAgICAgICAgICAgIHggPSBhcmdzW2ogKyA0XTtcbiAgICAgICAgICAgICAgeSA9IGFyZ3NbaiArIDVdO1xuICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdLCB4LCB5KTtcbiAgICAgICAgICAgICAgaiArPSA2O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzI6XG4gICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHksIGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCBhcmdzW2ogKyAyXSwgYXJnc1tqICsgM10pO1xuICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgICAgIHkgPSBhcmdzW2ogKyAzXTtcbiAgICAgICAgICAgICAgaiArPSA0O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzM6XG4gICAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgICAgeSA9IGFyZ3NbaiArIDNdO1xuICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhhcmdzW2pdLCBhcmdzW2ogKyAxXSwgeCwgeSwgeCwgeSk7XG4gICAgICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmNsb3NlUGF0aDpcbiAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50LnNldEN1cnJlbnRQb2ludCh4LCB5KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xvc2VQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VQYXRoKCkge1xuICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3Ryb2tlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3Ryb2tlKGNvbnN1bWVQYXRoKSB7XG4gICAgICAgIGNvbnN1bWVQYXRoID0gdHlwZW9mIGNvbnN1bWVQYXRoICE9PSBcInVuZGVmaW5lZFwiID8gY29uc3VtZVBhdGggOiB0cnVlO1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgaWYgKF90eXBlb2Yoc3Ryb2tlQ29sb3IpID09PSBcIm9iamVjdFwiICYmIHN0cm9rZUNvbG9yICE9PSBudWxsICYmIHN0cm9rZUNvbG9yICE9PSB2b2lkIDAgJiYgc3Ryb2tlQ29sb3IuZ2V0UGF0dGVybikge1xuICAgICAgICAgICAgdmFyIGxpbmVXaWR0aCA9IHRoaXMuZ2V0U2luZ2xlUGl4ZWxXaWR0aCgpO1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLm1heChsaW5lV2lkdGgsIHRoaXMuY3VycmVudC5saW5lV2lkdGgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9saW5lV2lkdGggPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKTtcblxuICAgICAgICAgICAgaWYgKF9saW5lV2lkdGggPCAwICYmIC1fbGluZVdpZHRoID49IHRoaXMuY3VycmVudC5saW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuX2NvbWJpbmVkU2NhbGVGYWN0b3IpO1xuICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gTWF0aC5tYXgoX2xpbmVXaWR0aCwgdGhpcy5jdXJyZW50LmxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uc3VtZVBhdGgpIHtcbiAgICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLmN1cnJlbnQuZmlsbEFscGhhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZVN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlU3Ryb2tlKCkge1xuICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICB0aGlzLnN0cm9rZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmaWxsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbChjb25zdW1lUGF0aCkge1xuICAgICAgICBjb25zdW1lUGF0aCA9IHR5cGVvZiBjb25zdW1lUGF0aCAhPT0gXCJ1bmRlZmluZWRcIiA/IGNvbnN1bWVQYXRoIDogdHJ1ZTtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB2YXIgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjtcbiAgICAgICAgdmFyIGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgICAgIHZhciBuZWVkUmVzdG9yZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc1BhdHRlcm5GaWxsKSB7XG4gICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbENvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzKTtcbiAgICAgICAgICBuZWVkUmVzdG9yZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdFT0ZpbGwpIHtcbiAgICAgICAgICAgIGN0eC5maWxsKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkUmVzdG9yZSkge1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uc3VtZVBhdGgpIHtcbiAgICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW9GaWxsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW9GaWxsKCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlsbFN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuZmlsbChmYWxzZSk7XG4gICAgICAgIHRoaXMuc3Ryb2tlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb25zdW1lUGF0aCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlb0ZpbGxTdHJva2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlb0ZpbGxTdHJva2UoKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZUZpbGxTdHJva2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUZpbGxTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZUVPRmlsbFN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlRU9GaWxsU3Ryb2tlKCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICB0aGlzLmZpbGxTdHJva2UoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5kUGF0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuZFBhdGgoKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZVBhdGgoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xpcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsaXAoKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBOT1JNQUxfQ0xJUDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW9DbGlwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW9DbGlwKCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gRU9fQ0xJUDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5UZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmVnaW5UZXh0KCkge1xuICAgICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgPSAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmRUZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kVGV4dCgpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gdGhpcy5wZW5kaW5nVGV4dFBhdGhzO1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG5cbiAgICAgICAgaWYgKHBhdGhzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2ldO1xuICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCBwYXRoLnRyYW5zZm9ybSk7XG4gICAgICAgICAgY3R4LnRyYW5zbGF0ZShwYXRoLngsIHBhdGgueSk7XG4gICAgICAgICAgcGF0aC5hZGRUb1BhdGgoY3R4LCBwYXRoLmZvbnRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1RleHRQYXRocztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0Q2hhclNwYWNpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDaGFyU3BhY2luZyhzcGFjaW5nKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5jaGFyU3BhY2luZyA9IHNwYWNpbmc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFdvcmRTcGFjaW5nXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0V29yZFNwYWNpbmcoc3BhY2luZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQud29yZFNwYWNpbmcgPSBzcGFjaW5nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRIU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIU2NhbGUoc2NhbGUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGVhZGluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExlYWRpbmcobGVhZGluZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQubGVhZGluZyA9IC1sZWFkaW5nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRGb250XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Rm9udChmb250UmVmTmFtZSwgc2l6ZSkge1xuICAgICAgICB2YXIgZm9udE9iaiA9IHRoaXMuY29tbW9uT2Jqcy5nZXQoZm9udFJlZk5hbWUpO1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcblxuICAgICAgICBpZiAoIWZvbnRPYmopIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGZvbnQgZm9yIFwiLmNvbmNhdChmb250UmVmTmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudC5mb250TWF0cml4ID0gZm9udE9iai5mb250TWF0cml4IHx8IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYO1xuXG4gICAgICAgIGlmIChjdXJyZW50LmZvbnRNYXRyaXhbMF0gPT09IDAgfHwgY3VycmVudC5mb250TWF0cml4WzNdID09PSAwKSB7XG4gICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiSW52YWxpZCBmb250IG1hdHJpeCBmb3IgZm9udCBcIiArIGZvbnRSZWZOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaXplIDwgMCkge1xuICAgICAgICAgIHNpemUgPSAtc2l6ZTtcbiAgICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50LmZvbnQgPSBmb250T2JqO1xuICAgICAgICB0aGlzLmN1cnJlbnQuZm9udFNpemUgPSBzaXplO1xuXG4gICAgICAgIGlmIChmb250T2JqLmlzVHlwZTNGb250KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5hbWUgPSBmb250T2JqLmxvYWRlZE5hbWUgfHwgXCJzYW5zLXNlcmlmXCI7XG4gICAgICAgIHZhciBib2xkID0gXCJub3JtYWxcIjtcblxuICAgICAgICBpZiAoZm9udE9iai5ibGFjaykge1xuICAgICAgICAgIGJvbGQgPSBcIjkwMFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbnRPYmouYm9sZCkge1xuICAgICAgICAgIGJvbGQgPSBcImJvbGRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGFsaWMgPSBmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiO1xuICAgICAgICB2YXIgdHlwZWZhY2UgPSBcIlxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiLCBcIikuY29uY2F0KGZvbnRPYmouZmFsbGJhY2tOYW1lKTtcbiAgICAgICAgdmFyIGJyb3dzZXJGb250U2l6ZSA9IHNpemU7XG5cbiAgICAgICAgaWYgKHNpemUgPCBNSU5fRk9OVF9TSVpFKSB7XG4gICAgICAgICAgYnJvd3NlckZvbnRTaXplID0gTUlOX0ZPTlRfU0laRTtcbiAgICAgICAgfSBlbHNlIGlmIChzaXplID4gTUFYX0ZPTlRfU0laRSkge1xuICAgICAgICAgIGJyb3dzZXJGb250U2l6ZSA9IE1BWF9GT05UX1NJWkU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnQuZm9udFNpemVTY2FsZSA9IHNpemUgLyBicm93c2VyRm9udFNpemU7XG4gICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIlwiLmNvbmNhdChpdGFsaWMsIFwiIFwiKS5jb25jYXQoYm9sZCwgXCIgXCIpLmNvbmNhdChicm93c2VyRm9udFNpemUsIFwicHggXCIpLmNvbmNhdCh0eXBlZmFjZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFRleHRSZW5kZXJpbmdNb2RlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGV4dFJlbmRlcmluZ01vZGUobW9kZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPSBtb2RlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRUZXh0UmlzZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRleHRSaXNlKHJpc2UpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRSaXNlID0gcmlzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibW92ZVRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYICs9IHg7XG4gICAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZICs9IHk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldExlYWRpbmdNb3ZlVGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExlYWRpbmdNb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgIHRoaXMuc2V0TGVhZGluZygteSk7XG4gICAgICAgIHRoaXMubW92ZVRleHQoeCwgeSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFRleHRNYXRyaXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUZXh0TWF0cml4KGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXggPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICAgIHRoaXMuY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSBNYXRoLmh5cG90KGEsIGIpO1xuICAgICAgICB0aGlzLmN1cnJlbnQueCA9IHRoaXMuY3VycmVudC5saW5lWCA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZID0gMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmV4dExpbmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0TGluZSgpIHtcbiAgICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhaW50Q2hhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50Q2hhcihjaGFyYWN0ZXIsIHgsIHksIHBhdHRlcm5UcmFuc2Zvcm0sIHJlc2V0TGluZVdpZHRoVG9PbmUpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgdmFyIGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgICAgIHZhciB0ZXh0UmVuZGVyaW5nTW9kZSA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGU7XG4gICAgICAgIHZhciBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemUgLyBjdXJyZW50LmZvbnRTaXplU2NhbGU7XG4gICAgICAgIHZhciBmaWxsU3Ryb2tlTW9kZSA9IHRleHRSZW5kZXJpbmdNb2RlICYgX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0VfTUFTSztcbiAgICAgICAgdmFyIGlzQWRkVG9QYXRoU2V0ID0gISEodGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSF9GTEFHKTtcbiAgICAgICAgdmFyIHBhdHRlcm5GaWxsID0gY3VycmVudC5wYXR0ZXJuRmlsbCAmJiAhZm9udC5taXNzaW5nRmlsZTtcbiAgICAgICAgdmFyIGFkZFRvUGF0aDtcblxuICAgICAgICBpZiAoZm9udC5kaXNhYmxlRm9udEZhY2UgfHwgaXNBZGRUb1BhdGhTZXQgfHwgcGF0dGVybkZpbGwpIHtcbiAgICAgICAgICBhZGRUb1BhdGggPSBmb250LmdldFBhdGhHZW5lcmF0b3IodGhpcy5jb21tb25PYmpzLCBjaGFyYWN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvbnQuZGlzYWJsZUZvbnRGYWNlIHx8IHBhdHRlcm5GaWxsKSB7XG4gICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBhZGRUb1BhdGgoY3R4LCBmb250U2l6ZSk7XG5cbiAgICAgICAgICBpZiAocGF0dGVyblRyYW5zZm9ybSkge1xuICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybS5hcHBseShjdHgsIHBhdHRlcm5UcmFuc2Zvcm0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgICBpZiAocmVzZXRMaW5lV2lkdGhUb09uZSkge1xuICAgICAgICAgICAgICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IE1hdGgucm91bmQodGhpcy5fY29tYmluZWRTY2FsZUZhY3Rvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChjaGFyYWN0ZXIsIHgsIHkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgICAgaWYgKHJlc2V0TGluZVdpZHRoVG9PbmUpIHtcbiAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuX2NvbWJpbmVkU2NhbGVGYWN0b3IpO1xuICAgICAgICAgICAgICBjdHguc3Ryb2tlVGV4dChjaGFyYWN0ZXIsIDAsIDApO1xuICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQoY2hhcmFjdGVyLCB4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNBZGRUb1BhdGhTZXQpIHtcbiAgICAgICAgICB2YXIgcGF0aHMgPSB0aGlzLnBlbmRpbmdUZXh0UGF0aHMgfHwgKHRoaXMucGVuZGluZ1RleHRQYXRocyA9IFtdKTtcbiAgICAgICAgICBwYXRocy5wdXNoKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0sXG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICAgICAgICAgIGFkZFRvUGF0aDogYWRkVG9QYXRoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNGb250U3VicGl4ZWxBQUVuYWJsZWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMkY2FjaGVkQ2FudmFzZXMkID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZFwiLCAxMCwgMTApLFxuICAgICAgICAgICAgY3R4ID0gX3RoaXMkY2FjaGVkQ2FudmFzZXMkLmNvbnRleHQ7XG5cbiAgICAgICAgY3R4LnNjYWxlKDEuNSwgMSk7XG4gICAgICAgIGN0eC5maWxsVGV4dChcIklcIiwgMCwgMTApO1xuICAgICAgICB2YXIgZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMTAsIDEwKS5kYXRhO1xuICAgICAgICB2YXIgZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAzOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgIGlmIChkYXRhW2ldID4gMCAmJiBkYXRhW2ldIDwgMjU1KSB7XG4gICAgICAgICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImlzRm9udFN1YnBpeGVsQUFFbmFibGVkXCIsIGVuYWJsZWQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93VGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dUZXh0KGdseXBocykge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgdmFyIGZvbnQgPSBjdXJyZW50LmZvbnQ7XG5cbiAgICAgICAgaWYgKGZvbnQuaXNUeXBlM0ZvbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zaG93VHlwZTNUZXh0KGdseXBocyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuXG4gICAgICAgIGlmIChmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHZhciBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlO1xuICAgICAgICB2YXIgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nO1xuICAgICAgICB2YXIgd29yZFNwYWNpbmcgPSBjdXJyZW50LndvcmRTcGFjaW5nO1xuICAgICAgICB2YXIgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjtcbiAgICAgICAgdmFyIHRleHRIU2NhbGUgPSBjdXJyZW50LnRleHRIU2NhbGUgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICB2YXIgZ2x5cGhzTGVuZ3RoID0gZ2x5cGhzLmxlbmd0aDtcbiAgICAgICAgdmFyIHZlcnRpY2FsID0gZm9udC52ZXJ0aWNhbDtcbiAgICAgICAgdmFyIHNwYWNpbmdEaXIgPSB2ZXJ0aWNhbCA/IDEgOiAtMTtcbiAgICAgICAgdmFyIGRlZmF1bHRWTWV0cmljcyA9IGZvbnQuZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICB2YXIgd2lkdGhBZHZhbmNlU2NhbGUgPSBmb250U2l6ZSAqIGN1cnJlbnQuZm9udE1hdHJpeFswXTtcbiAgICAgICAgdmFyIHNpbXBsZUZpbGxUZXh0ID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCAmJiAhZm9udC5kaXNhYmxlRm9udEZhY2UgJiYgIWN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIHZhciBwYXR0ZXJuVHJhbnNmb3JtO1xuXG4gICAgICAgIGlmIChjdXJyZW50LnBhdHRlcm5GaWxsKSB7XG4gICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IGN1cnJlbnQuZmlsbENvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzKTtcbiAgICAgICAgICBwYXR0ZXJuVHJhbnNmb3JtID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcGF0dGVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBjdXJyZW50LnRleHRNYXRyaXgpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKGN1cnJlbnQueCwgY3VycmVudC55ICsgY3VycmVudC50ZXh0UmlzZSk7XG5cbiAgICAgICAgaWYgKGZvbnREaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHguc2NhbGUodGV4dEhTY2FsZSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGluZVdpZHRoID0gY3VycmVudC5saW5lV2lkdGg7XG4gICAgICAgIHZhciByZXNldExpbmVXaWR0aFRvT25lID0gZmFsc2U7XG4gICAgICAgIHZhciBzY2FsZSA9IGN1cnJlbnQudGV4dE1hdHJpeFNjYWxlO1xuXG4gICAgICAgIGlmIChzY2FsZSA9PT0gMCB8fCBsaW5lV2lkdGggPT09IDApIHtcbiAgICAgICAgICB2YXIgZmlsbFN0cm9rZU1vZGUgPSBjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlICYgX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0VfTUFTSztcblxuICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gICAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKTtcbiAgICAgICAgICAgIHJlc2V0TGluZVdpZHRoVG9PbmUgPSBsaW5lV2lkdGggPCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lV2lkdGggLz0gc2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9udFNpemVTY2FsZSAhPT0gMS4wKSB7XG4gICAgICAgICAgY3R4LnNjYWxlKGZvbnRTaXplU2NhbGUsIGZvbnRTaXplU2NhbGUpO1xuICAgICAgICAgIGxpbmVXaWR0aCAvPSBmb250U2l6ZVNjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgdmFyIHggPSAwLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaV07XG5cbiAgICAgICAgICBpZiAoKDAsIF91dGlsLmlzTnVtKShnbHlwaCkpIHtcbiAgICAgICAgICAgIHggKz0gc3BhY2luZ0RpciAqIGdseXBoICogZm9udFNpemUgLyAxMDAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlc3RvcmVOZWVkZWQgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgc3BhY2luZyA9IChnbHlwaC5pc1NwYWNlID8gd29yZFNwYWNpbmcgOiAwKSArIGNoYXJTcGFjaW5nO1xuICAgICAgICAgIHZhciBjaGFyYWN0ZXIgPSBnbHlwaC5mb250Q2hhcjtcbiAgICAgICAgICB2YXIgYWNjZW50ID0gZ2x5cGguYWNjZW50O1xuICAgICAgICAgIHZhciBzY2FsZWRYID0gdm9pZCAwLFxuICAgICAgICAgICAgICBzY2FsZWRZID0gdm9pZCAwO1xuICAgICAgICAgIHZhciB3aWR0aCA9IGdseXBoLndpZHRoO1xuXG4gICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICB2YXIgdm1ldHJpYyA9IGdseXBoLnZtZXRyaWMgfHwgZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICAgICAgdmFyIHZ4ID0gLShnbHlwaC52bWV0cmljID8gdm1ldHJpY1sxXSA6IHdpZHRoICogMC41KSAqIHdpZHRoQWR2YW5jZVNjYWxlO1xuICAgICAgICAgICAgdmFyIHZ5ID0gdm1ldHJpY1syXSAqIHdpZHRoQWR2YW5jZVNjYWxlO1xuICAgICAgICAgICAgd2lkdGggPSB2bWV0cmljID8gLXZtZXRyaWNbMF0gOiB3aWR0aDtcbiAgICAgICAgICAgIHNjYWxlZFggPSB2eCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICBzY2FsZWRZID0gKHggKyB2eSkgLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY2FsZWRYID0geCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICBzY2FsZWRZID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZm9udC5yZW1lYXN1cmUgJiYgd2lkdGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgbWVhc3VyZWRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChjaGFyYWN0ZXIpLndpZHRoICogMTAwMCAvIGZvbnRTaXplICogZm9udFNpemVTY2FsZTtcblxuICAgICAgICAgICAgaWYgKHdpZHRoIDwgbWVhc3VyZWRXaWR0aCAmJiB0aGlzLmlzRm9udFN1YnBpeGVsQUFFbmFibGVkKSB7XG4gICAgICAgICAgICAgIHZhciBjaGFyYWN0ZXJTY2FsZVggPSB3aWR0aCAvIG1lYXN1cmVkV2lkdGg7XG4gICAgICAgICAgICAgIHJlc3RvcmVOZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICBjdHguc2NhbGUoY2hhcmFjdGVyU2NhbGVYLCAxKTtcbiAgICAgICAgICAgICAgc2NhbGVkWCAvPSBjaGFyYWN0ZXJTY2FsZVg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoICE9PSBtZWFzdXJlZFdpZHRoKSB7XG4gICAgICAgICAgICAgIHNjYWxlZFggKz0gKHdpZHRoIC0gbWVhc3VyZWRXaWR0aCkgLyAyMDAwICogZm9udFNpemUgLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlICYmIChnbHlwaC5pc0luRm9udCB8fCBmb250Lm1pc3NpbmdGaWxlKSkge1xuICAgICAgICAgICAgaWYgKHNpbXBsZUZpbGxUZXh0ICYmICFhY2NlbnQpIHtcbiAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGNoYXJhY3Rlciwgc2NhbGVkWCwgc2NhbGVkWSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnBhaW50Q2hhcihjaGFyYWN0ZXIsIHNjYWxlZFgsIHNjYWxlZFksIHBhdHRlcm5UcmFuc2Zvcm0sIHJlc2V0TGluZVdpZHRoVG9PbmUpO1xuXG4gICAgICAgICAgICAgIGlmIChhY2NlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVkQWNjZW50WCA9IHNjYWxlZFggKyBmb250U2l6ZSAqIGFjY2VudC5vZmZzZXQueCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlZEFjY2VudFkgPSBzY2FsZWRZIC0gZm9udFNpemUgKiBhY2NlbnQub2Zmc2V0LnkgLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgICAgIHRoaXMucGFpbnRDaGFyKGFjY2VudC5mb250Q2hhciwgc2NhbGVkQWNjZW50WCwgc2NhbGVkQWNjZW50WSwgcGF0dGVyblRyYW5zZm9ybSwgcmVzZXRMaW5lV2lkdGhUb09uZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY2hhcldpZHRoID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlIC0gc3BhY2luZyAqIGZvbnREaXJlY3Rpb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJXaWR0aCA9IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgKyBzcGFjaW5nICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4ICs9IGNoYXJXaWR0aDtcblxuICAgICAgICAgIGlmIChyZXN0b3JlTmVlZGVkKSB7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgIGN1cnJlbnQueSAtPSB4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnQueCArPSB4ICogdGV4dEhTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNob3dUeXBlM1RleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93VHlwZTNUZXh0KGdseXBocykge1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICB2YXIgZm9udCA9IGN1cnJlbnQuZm9udDtcbiAgICAgICAgdmFyIGZvbnRTaXplID0gY3VycmVudC5mb250U2l6ZTtcbiAgICAgICAgdmFyIGZvbnREaXJlY3Rpb24gPSBjdXJyZW50LmZvbnREaXJlY3Rpb247XG4gICAgICAgIHZhciBzcGFjaW5nRGlyID0gZm9udC52ZXJ0aWNhbCA/IDEgOiAtMTtcbiAgICAgICAgdmFyIGNoYXJTcGFjaW5nID0gY3VycmVudC5jaGFyU3BhY2luZztcbiAgICAgICAgdmFyIHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICAgICAgdmFyIHRleHRIU2NhbGUgPSBjdXJyZW50LnRleHRIU2NhbGUgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICB2YXIgZm9udE1hdHJpeCA9IGN1cnJlbnQuZm9udE1hdHJpeCB8fCBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICAgICAgdmFyIGdseXBoc0xlbmd0aCA9IGdseXBocy5sZW5ndGg7XG4gICAgICAgIHZhciBpc1RleHRJbnZpc2libGUgPSBjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5JTlZJU0lCTEU7XG4gICAgICAgIHZhciBpLCBnbHlwaCwgd2lkdGgsIHNwYWNpbmdMZW5ndGg7XG5cbiAgICAgICAgaWYgKGlzVGV4dEludmlzaWJsZSB8fCBmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgY3VycmVudC50ZXh0TWF0cml4KTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSk7XG4gICAgICAgIGN0eC5zY2FsZSh0ZXh0SFNjYWxlLCBmb250RGlyZWN0aW9uKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBnbHlwaCA9IGdseXBoc1tpXTtcblxuICAgICAgICAgIGlmICgoMCwgX3V0aWwuaXNOdW0pKGdseXBoKSkge1xuICAgICAgICAgICAgc3BhY2luZ0xlbmd0aCA9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDtcbiAgICAgICAgICAgIHRoaXMuY3R4LnRyYW5zbGF0ZShzcGFjaW5nTGVuZ3RoLCAwKTtcbiAgICAgICAgICAgIGN1cnJlbnQueCArPSBzcGFjaW5nTGVuZ3RoICogdGV4dEhTY2FsZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzcGFjaW5nID0gKGdseXBoLmlzU3BhY2UgPyB3b3JkU3BhY2luZyA6IDApICsgY2hhclNwYWNpbmc7XG4gICAgICAgICAgdmFyIG9wZXJhdG9yTGlzdCA9IGZvbnQuY2hhclByb2NPcGVyYXRvckxpc3RbZ2x5cGgub3BlcmF0b3JMaXN0SWRdO1xuXG4gICAgICAgICAgaWYgKCFvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlR5cGUzIGNoYXJhY3RlciBcXFwiXCIuY29uY2F0KGdseXBoLm9wZXJhdG9yTGlzdElkLCBcIlxcXCIgaXMgbm90IGF2YWlsYWJsZS5cIikpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gZ2x5cGg7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5zY2FsZShmb250U2l6ZSwgZm9udFNpemUpO1xuICAgICAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIGZvbnRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlT3BlcmF0b3JMaXN0KG9wZXJhdG9yTGlzdCk7XG4gICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdHJhbnNmb3JtZWQgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFtnbHlwaC53aWR0aCwgMF0sIGZvbnRNYXRyaXgpO1xuXG4gICAgICAgICAgd2lkdGggPSB0cmFuc2Zvcm1lZFswXSAqIGZvbnRTaXplICsgc3BhY2luZztcbiAgICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAwKTtcbiAgICAgICAgICBjdXJyZW50LnggKz0gd2lkdGggKiB0ZXh0SFNjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nVHlwZTMgPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRDaGFyV2lkdGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDaGFyV2lkdGgoeFdpZHRoLCB5V2lkdGgpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldENoYXJXaWR0aEFuZEJvdW5kc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENoYXJXaWR0aEFuZEJvdW5kcyh4V2lkdGgsIHlXaWR0aCwgbGx4LCBsbHksIHVyeCwgdXJ5KSB7XG4gICAgICAgIHRoaXMuY3R4LnJlY3QobGx4LCBsbHksIHVyeCAtIGxseCwgdXJ5IC0gbGx5KTtcbiAgICAgICAgdGhpcy5jbGlwKCk7XG4gICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDb2xvck5fUGF0dGVyblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbG9yTl9QYXR0ZXJuKElSKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHBhdHRlcm47XG5cbiAgICAgICAgaWYgKElSWzBdID09PSBcIlRpbGluZ1BhdHRlcm5cIikge1xuICAgICAgICAgIHZhciBjb2xvciA9IElSWzFdO1xuICAgICAgICAgIHZhciBiYXNlVHJhbnNmb3JtID0gdGhpcy5iYXNlVHJhbnNmb3JtIHx8IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0uc2xpY2UoKTtcbiAgICAgICAgICB2YXIgY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0ge1xuICAgICAgICAgICAgY3JlYXRlQ2FudmFzR3JhcGhpY3M6IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0dyYXBoaWNzKGN0eCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENhbnZhc0dyYXBoaWNzKGN0eCwgX3RoaXMuY29tbW9uT2JqcywgX3RoaXMub2JqcywgX3RoaXMuY2FudmFzRmFjdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwYXR0ZXJuID0gbmV3IF9wYXR0ZXJuX2hlbHBlci5UaWxpbmdQYXR0ZXJuKElSLCBjb2xvciwgdGhpcy5jdHgsIGNhbnZhc0dyYXBoaWNzRmFjdG9yeSwgYmFzZVRyYW5zZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0dGVybiA9ICgwLCBfcGF0dGVybl9oZWxwZXIuZ2V0U2hhZGluZ1BhdHRlcm4pKElSKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRTdHJva2VDb2xvck5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdHJva2VDb2xvck4oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IHRoaXMuZ2V0Q29sb3JOX1BhdHRlcm4oYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RmlsbENvbG9yTlwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxDb2xvck4oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSB0aGlzLmdldENvbG9yTl9QYXR0ZXJuKGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbCA9IHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFN0cm9rZVJHQkNvbG9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3Ryb2tlUkdCQ29sb3IociwgZywgYikge1xuICAgICAgICB2YXIgY29sb3IgPSBfdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihyLCBnLCBiKTtcblxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjb2xvcjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RmlsbFJHQkNvbG9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbFJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IociwgZywgYik7XG5cbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNoYWRpbmdGaWxsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hhZGluZ0ZpbGwocGF0dGVybklSKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHZhciBwYXR0ZXJuID0gKDAsIF9wYXR0ZXJuX2hlbHBlci5nZXRTaGFkaW5nUGF0dGVybikocGF0dGVybklSKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHBhdHRlcm4uZ2V0UGF0dGVybihjdHgsIHRoaXMsIHRydWUpO1xuICAgICAgICB2YXIgaW52ID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuXG4gICAgICAgIGlmIChpbnYpIHtcbiAgICAgICAgICB2YXIgY2FudmFzID0gY3R4LmNhbnZhcztcbiAgICAgICAgICB2YXIgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgICAgdmFyIGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAgICAgICB2YXIgYmwgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFswLCAwXSwgaW52KTtcblxuICAgICAgICAgIHZhciBiciA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgICB2YXIgdWwgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt3aWR0aCwgMF0sIGludik7XG5cbiAgICAgICAgICB2YXIgdXIgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt3aWR0aCwgaGVpZ2h0XSwgaW52KTtcblxuICAgICAgICAgIHZhciB4MCA9IE1hdGgubWluKGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgICB2YXIgeTAgPSBNYXRoLm1pbihibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7XG4gICAgICAgICAgdmFyIHgxID0gTWF0aC5tYXgoYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pO1xuICAgICAgICAgIHZhciB5MSA9IE1hdGgubWF4KGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4MCwgeTAsIHgxIC0geDAsIHkxIC0geTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KC0xZTEwLCAtMWUxMCwgMmUxMCwgMmUxMCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5JbmxpbmVJbWFnZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luSW5saW5lSW1hZ2UoKSB7XG4gICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJTaG91bGQgbm90IGNhbGwgYmVnaW5JbmxpbmVJbWFnZVwiKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5JbWFnZURhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWdpbkltYWdlRGF0YSgpIHtcbiAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIlNob3VsZCBub3QgY2FsbCBiZWdpbkltYWdlRGF0YVwiKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFpbnRGb3JtWE9iamVjdEJlZ2luXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRGb3JtWE9iamVjdEJlZ2luKG1hdHJpeCwgYmJveCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkgJiYgbWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtLmFwcGx5KHRoaXMsIG1hdHJpeCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuXG4gICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gICAgICAgICAgdmFyIGhlaWdodCA9IGJib3hbM10gLSBiYm94WzFdO1xuICAgICAgICAgIHRoaXMuY3R4LnJlY3QoYmJveFswXSwgYmJveFsxXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgdGhpcy5jbGlwKCk7XG4gICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFpbnRGb3JtWE9iamVjdEVuZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50Rm9ybVhPYmplY3RFbmQoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjay5wb3AoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5Hcm91cFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luR3JvdXAoZ3JvdXApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHZhciBjdXJyZW50Q3R4ID0gdGhpcy5jdHg7XG5cbiAgICAgICAgaWYgKCFncm91cC5pc29sYXRlZCkge1xuICAgICAgICAgICgwLCBfdXRpbC5pbmZvKShcIlRPRE86IFN1cHBvcnQgbm9uLWlzb2xhdGVkIGdyb3Vwcy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JvdXAua25vY2tvdXQpIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJLbm9ja291dCBncm91cHMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IGN1cnJlbnRDdHgubW96Q3VycmVudFRyYW5zZm9ybTtcblxuICAgICAgICBpZiAoZ3JvdXAubWF0cml4KSB7XG4gICAgICAgICAgY3VycmVudEN0eC50cmFuc2Zvcm0uYXBwbHkoY3VycmVudEN0eCwgZ3JvdXAubWF0cml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ3JvdXAuYmJveCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJvdW5kaW5nIGJveCBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm91bmRzID0gX3V0aWwuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChncm91cC5iYm94LCBjdXJyZW50Q3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuXG4gICAgICAgIHZhciBjYW52YXNCb3VuZHMgPSBbMCwgMCwgY3VycmVudEN0eC5jYW52YXMud2lkdGgsIGN1cnJlbnRDdHguY2FudmFzLmhlaWdodF07XG4gICAgICAgIGJvdW5kcyA9IF91dGlsLlV0aWwuaW50ZXJzZWN0KGJvdW5kcywgY2FudmFzQm91bmRzKSB8fCBbMCwgMCwgMCwgMF07XG4gICAgICAgIHZhciBvZmZzZXRYID0gTWF0aC5mbG9vcihib3VuZHNbMF0pO1xuICAgICAgICB2YXIgb2Zmc2V0WSA9IE1hdGguZmxvb3IoYm91bmRzWzFdKTtcbiAgICAgICAgdmFyIGRyYXduV2lkdGggPSBNYXRoLm1heChNYXRoLmNlaWwoYm91bmRzWzJdKSAtIG9mZnNldFgsIDEpO1xuICAgICAgICB2YXIgZHJhd25IZWlnaHQgPSBNYXRoLm1heChNYXRoLmNlaWwoYm91bmRzWzNdKSAtIG9mZnNldFksIDEpO1xuICAgICAgICB2YXIgc2NhbGVYID0gMSxcbiAgICAgICAgICAgIHNjYWxlWSA9IDE7XG5cbiAgICAgICAgaWYgKGRyYXduV2lkdGggPiBNQVhfR1JPVVBfU0laRSkge1xuICAgICAgICAgIHNjYWxlWCA9IGRyYXduV2lkdGggLyBNQVhfR1JPVVBfU0laRTtcbiAgICAgICAgICBkcmF3bldpZHRoID0gTUFYX0dST1VQX1NJWkU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHJhd25IZWlnaHQgPiBNQVhfR1JPVVBfU0laRSkge1xuICAgICAgICAgIHNjYWxlWSA9IGRyYXduSGVpZ2h0IC8gTUFYX0dST1VQX1NJWkU7XG4gICAgICAgICAgZHJhd25IZWlnaHQgPSBNQVhfR1JPVVBfU0laRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWNoZUlkID0gXCJncm91cEF0XCIgKyB0aGlzLmdyb3VwTGV2ZWw7XG5cbiAgICAgICAgaWYgKGdyb3VwLnNtYXNrKSB7XG4gICAgICAgICAgY2FjaGVJZCArPSBcIl9zbWFza19cIiArIHRoaXMuc21hc2tDb3VudGVyKysgJSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCwgdHJ1ZSk7XG4gICAgICAgIHZhciBncm91cEN0eCA9IHNjcmF0Y2hDYW52YXMuY29udGV4dDtcbiAgICAgICAgZ3JvdXBDdHguc2NhbGUoMSAvIHNjYWxlWCwgMSAvIHNjYWxlWSk7XG4gICAgICAgIGdyb3VwQ3R4LnRyYW5zbGF0ZSgtb2Zmc2V0WCwgLW9mZnNldFkpO1xuICAgICAgICBncm91cEN0eC50cmFuc2Zvcm0uYXBwbHkoZ3JvdXBDdHgsIGN1cnJlbnRUcmFuc2Zvcm0pO1xuXG4gICAgICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgICAgIHRoaXMuc21hc2tTdGFjay5wdXNoKHtcbiAgICAgICAgICAgIGNhbnZhczogc2NyYXRjaENhbnZhcy5jYW52YXMsXG4gICAgICAgICAgICBjb250ZXh0OiBncm91cEN0eCxcbiAgICAgICAgICAgIG9mZnNldFg6IG9mZnNldFgsXG4gICAgICAgICAgICBvZmZzZXRZOiBvZmZzZXRZLFxuICAgICAgICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICAgICAgICBzY2FsZVk6IHNjYWxlWSxcbiAgICAgICAgICAgIHN1YnR5cGU6IGdyb3VwLnNtYXNrLnN1YnR5cGUsXG4gICAgICAgICAgICBiYWNrZHJvcDogZ3JvdXAuc21hc2suYmFja2Ryb3AsXG4gICAgICAgICAgICB0cmFuc2Zlck1hcDogZ3JvdXAuc21hc2sudHJhbnNmZXJNYXAgfHwgbnVsbCxcbiAgICAgICAgICAgIHN0YXJ0VHJhbnNmb3JtSW52ZXJzZTogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRDdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgIGN1cnJlbnRDdHgudHJhbnNsYXRlKG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgICAgIGN1cnJlbnRDdHguc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29weUN0eFN0YXRlKGN1cnJlbnRDdHgsIGdyb3VwQ3R4KTtcbiAgICAgICAgdGhpcy5jdHggPSBncm91cEN0eDtcbiAgICAgICAgdGhpcy5zZXRHU3RhdGUoW1tcIkJNXCIsIFwic291cmNlLW92ZXJcIl0sIFtcImNhXCIsIDFdLCBbXCJDQVwiLCAxXV0pO1xuICAgICAgICB0aGlzLmdyb3VwU3RhY2sucHVzaChjdXJyZW50Q3R4KTtcbiAgICAgICAgdGhpcy5ncm91cExldmVsKys7XG4gICAgICAgIHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZEdyb3VwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kR3JvdXAoZ3JvdXApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ncm91cExldmVsLS07XG4gICAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuZ3JvdXBTdGFjay5wb3AoKTtcblxuICAgICAgICBpZiAodGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmN0eC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgICAgIHRoaXMudGVtcFNNYXNrID0gdGhpcy5zbWFza1N0YWNrLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShncm91cEN0eC5jYW52YXMsIDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJlZ2luQW5ub3RhdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWdpbkFubm90YXRpb25zKCkge1xuICAgICAgICB0aGlzLnNhdmUoKTtcblxuICAgICAgICBpZiAodGhpcy5iYXNlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCB0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZEFubm90YXRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kQW5ub3RhdGlvbnMoKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJiZWdpbkFubm90YXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWdpbkFubm90YXRpb24ocmVjdCwgdHJhbnNmb3JtLCBtYXRyaXgpIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHJlc2V0Q3R4VG9EZWZhdWx0KHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV3IENhbnZhc0V4dHJhU3RhdGUoKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWN0KSAmJiByZWN0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgIHZhciB3aWR0aCA9IHJlY3RbMl0gLSByZWN0WzBdO1xuICAgICAgICAgIHZhciBoZWlnaHQgPSByZWN0WzNdIC0gcmVjdFsxXTtcbiAgICAgICAgICB0aGlzLmN0eC5yZWN0KHJlY3RbMF0sIHJlY3RbMV0sIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgIHRoaXMuY2xpcCgpO1xuICAgICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFuc2Zvcm0uYXBwbHkodGhpcywgdHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0uYXBwbHkodGhpcywgbWF0cml4KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5kQW5ub3RhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuZEFubm90YXRpb24oKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludEltYWdlTWFza1hPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludEltYWdlTWFza1hPYmplY3QoaW1nKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgdmFyIHdpZHRoID0gaW1nLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgIHZhciBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgICAgICB2YXIgZ2x5cGggPSB0aGlzLnByb2Nlc3NpbmdUeXBlMztcblxuICAgICAgICBpZiAoQ09NUElMRV9UWVBFM19HTFlQSFMgJiYgZ2x5cGggJiYgZ2x5cGguY29tcGlsZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh3aWR0aCA8PSBNQVhfU0laRV9UT19DT01QSUxFICYmIGhlaWdodCA8PSBNQVhfU0laRV9UT19DT01QSUxFKSB7XG4gICAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IGNvbXBpbGVUeXBlM0dseXBoKHtcbiAgICAgICAgICAgICAgZGF0YTogaW1nLmRhdGEsXG4gICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdseXBoICE9PSBudWxsICYmIGdseXBoICE9PSB2b2lkIDAgJiYgZ2x5cGguY29tcGlsZWQpIHtcbiAgICAgICAgICBnbHlwaC5jb21waWxlZChjdHgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXNrQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJtYXNrQ2FudmFzXCIsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB2YXIgbWFza0N0eCA9IG1hc2tDYW52YXMuY29udGV4dDtcbiAgICAgICAgbWFza0N0eC5zYXZlKCk7XG4gICAgICAgIHB1dEJpbmFyeUltYWdlTWFzayhtYXNrQ3R4LCBpbWcpO1xuICAgICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLWluXCI7XG4gICAgICAgIG1hc2tDdHguZmlsbFN0eWxlID0gaXNQYXR0ZXJuRmlsbCA/IGZpbGxDb2xvci5nZXRQYXR0ZXJuKG1hc2tDdHgsIHRoaXMpIDogZmlsbENvbG9yO1xuICAgICAgICBtYXNrQ3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBtYXNrQ3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChtYXNrQ2FudmFzLmNhbnZhcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdChpbWdEYXRhLCBzY2FsZVgpIHtcbiAgICAgICAgdmFyIHNrZXdYID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgICB2YXIgc2tld1kgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgICAgIHZhciBzY2FsZVkgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgIHZhciBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgICAgICB2YXIgbWFza0NhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwibWFza0NhbnZhc1wiLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdmFyIG1hc2tDdHggPSBtYXNrQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgIG1hc2tDdHguc2F2ZSgpO1xuICAgICAgICBwdXRCaW5hcnlJbWFnZU1hc2sobWFza0N0eCwgaW1nRGF0YSk7XG4gICAgICAgIG1hc2tDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtaW5cIjtcbiAgICAgICAgbWFza0N0eC5maWxsU3R5bGUgPSBpc1BhdHRlcm5GaWxsID8gZmlsbENvbG9yLmdldFBhdHRlcm4obWFza0N0eCwgdGhpcykgOiBmaWxsQ29sb3I7XG4gICAgICAgIG1hc2tDdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIG1hc2tDdHgucmVzdG9yZSgpO1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgIGN0eC50cmFuc2Zvcm0oc2NhbGVYLCBza2V3WCwgc2tld1ksIHNjYWxlWSwgcG9zaXRpb25zW2ldLCBwb3NpdGlvbnNbaSArIDFdKTtcbiAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgIGN0eC5kcmF3SW1hZ2UobWFza0NhbnZhcy5jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIC0xLCAxLCAxKTtcbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXAoaW1hZ2VzKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgIHZhciBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGltYWdlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIGltYWdlID0gaW1hZ2VzW2ldO1xuICAgICAgICAgIHZhciB3aWR0aCA9IGltYWdlLndpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgdmFyIG1hc2tDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1hc2tDYW52YXNcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgdmFyIG1hc2tDdHggPSBtYXNrQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgICAgbWFza0N0eC5zYXZlKCk7XG4gICAgICAgICAgcHV0QmluYXJ5SW1hZ2VNYXNrKG1hc2tDdHgsIGltYWdlKTtcbiAgICAgICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLWluXCI7XG4gICAgICAgICAgbWFza0N0eC5maWxsU3R5bGUgPSBpc1BhdHRlcm5GaWxsID8gZmlsbENvbG9yLmdldFBhdHRlcm4obWFza0N0eCwgdGhpcykgOiBmaWxsQ29sb3I7XG4gICAgICAgICAgbWFza0N0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICBtYXNrQ3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBpbWFnZS50cmFuc2Zvcm0pO1xuICAgICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZShtYXNrQ2FudmFzLmNhbnZhcywgMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgLTEsIDEsIDEpO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFpbnRJbWFnZVhPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludEltYWdlWE9iamVjdChvYmpJZCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW1nRGF0YSA9IG9iaklkLnN0YXJ0c1dpdGgoXCJnX1wiKSA/IHRoaXMuY29tbW9uT2Jqcy5nZXQob2JqSWQpIDogdGhpcy5vYmpzLmdldChvYmpJZCk7XG5cbiAgICAgICAgaWYgKCFpbWdEYXRhKSB7XG4gICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiRGVwZW5kZW50IGltYWdlIGlzbid0IHJlYWR5IHlldFwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludEltYWdlWE9iamVjdFJlcGVhdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0KG9iaklkLCBzY2FsZVgsIHNjYWxlWSwgcG9zaXRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbWdEYXRhID0gb2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTtcblxuICAgICAgICBpZiAoIWltZ0RhdGEpIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJEZXBlbmRlbnQgaW1hZ2UgaXNuJ3QgcmVhZHkgeWV0XCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgICAgdmFyIG1hcCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICAgICAgbWFwLnB1c2goe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBbc2NhbGVYLCAwLCAwLCBzY2FsZVksIHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2kgKyAxXV0sXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IHdpZHRoLFxuICAgICAgICAgICAgaDogaGVpZ2h0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAoaW1nRGF0YSwgbWFwKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFpbnRJbmxpbmVJbWFnZVhPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgY3R4LnNjYWxlKDEgLyB3aWR0aCwgLTEgLyBoZWlnaHQpO1xuICAgICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZTtcbiAgICAgICAgdmFyIHdpZHRoU2NhbGUgPSBNYXRoLm1heChNYXRoLmh5cG90KGN1cnJlbnRUcmFuc2Zvcm1bMF0sIGN1cnJlbnRUcmFuc2Zvcm1bMV0pLCAxKTtcbiAgICAgICAgdmFyIGhlaWdodFNjYWxlID0gTWF0aC5tYXgoTWF0aC5oeXBvdChjdXJyZW50VHJhbnNmb3JtWzJdLCBjdXJyZW50VHJhbnNmb3JtWzNdKSwgMSk7XG4gICAgICAgIHZhciBpbWdUb1BhaW50LCB0bXBDYW52YXMsIHRtcEN0eDtcblxuICAgICAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIgJiYgaW1nRGF0YSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8ICFpbWdEYXRhLmRhdGEpIHtcbiAgICAgICAgICBpbWdUb1BhaW50ID0gaW1nRGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0bXBDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcImlubGluZUltYWdlXCIsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgIHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgICAgIHB1dEJpbmFyeUltYWdlRGF0YSh0bXBDdHgsIGltZ0RhdGEsIHRoaXMuY3VycmVudC50cmFuc2Zlck1hcHMpO1xuICAgICAgICAgIGltZ1RvUGFpbnQgPSB0bXBDYW52YXMuY2FudmFzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhaW50V2lkdGggPSB3aWR0aCxcbiAgICAgICAgICAgIHBhaW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB2YXIgdG1wQ2FudmFzSWQgPSBcInByZXNjYWxlMVwiO1xuXG4gICAgICAgIHdoaWxlICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSB8fCBoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7XG4gICAgICAgICAgdmFyIG5ld1dpZHRoID0gcGFpbnRXaWR0aCxcbiAgICAgICAgICAgICAgbmV3SGVpZ2h0ID0gcGFpbnRIZWlnaHQ7XG5cbiAgICAgICAgICBpZiAod2lkdGhTY2FsZSA+IDIgJiYgcGFpbnRXaWR0aCA+IDEpIHtcbiAgICAgICAgICAgIG5ld1dpZHRoID0gTWF0aC5jZWlsKHBhaW50V2lkdGggLyAyKTtcbiAgICAgICAgICAgIHdpZHRoU2NhbGUgLz0gcGFpbnRXaWR0aCAvIG5ld1dpZHRoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7XG4gICAgICAgICAgICBuZXdIZWlnaHQgPSBNYXRoLmNlaWwocGFpbnRIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIGhlaWdodFNjYWxlIC89IHBhaW50SGVpZ2h0IC8gbmV3SGVpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKHRtcENhbnZhc0lkLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcbiAgICAgICAgICB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgICAgIHRtcEN0eC5kcmF3SW1hZ2UoaW1nVG9QYWludCwgMCwgMCwgcGFpbnRXaWR0aCwgcGFpbnRIZWlnaHQsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgICAgIGltZ1RvUGFpbnQgPSB0bXBDYW52YXMuY2FudmFzO1xuICAgICAgICAgIHBhaW50V2lkdGggPSBuZXdXaWR0aDtcbiAgICAgICAgICBwYWludEhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgICB0bXBDYW52YXNJZCA9IHRtcENhbnZhc0lkID09PSBcInByZXNjYWxlMVwiID8gXCJwcmVzY2FsZTJcIiA6IFwicHJlc2NhbGUxXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjdHguZHJhd0ltYWdlKGltZ1RvUGFpbnQsIDAsIDAsIHBhaW50V2lkdGgsIHBhaW50SGVpZ2h0LCAwLCAtaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBpZiAodGhpcy5pbWFnZUxheWVyKSB7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRDYW52YXNQb3NpdGlvbigwLCAtaGVpZ2h0KTtcbiAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuYXBwZW5kSW1hZ2Uoe1xuICAgICAgICAgICAgaW1nRGF0YTogaW1nRGF0YSxcbiAgICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgdG9wOiBwb3NpdGlvblsxXSxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAvIGN1cnJlbnRUcmFuc2Zvcm1bMF0sXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAvIGN1cnJlbnRUcmFuc2Zvcm1bM11cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludElubGluZUltYWdlWE9iamVjdEdyb3VwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cChpbWdEYXRhLCBtYXApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB2YXIgdyA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgIHZhciBoID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICAgIHZhciB0bXBDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcImlubGluZUltYWdlXCIsIHcsIGgpO1xuICAgICAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgIHB1dEJpbmFyeUltYWdlRGF0YSh0bXBDdHgsIGltZ0RhdGEsIHRoaXMuY3VycmVudC50cmFuc2Zlck1hcHMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG1hcC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gbWFwW2ldO1xuICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIGVudHJ5LnRyYW5zZm9ybSk7XG4gICAgICAgICAgY3R4LnNjYWxlKDEsIC0xKTtcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKHRtcENhbnZhcy5jYW52YXMsIGVudHJ5LngsIGVudHJ5LnksIGVudHJ5LncsIGVudHJ5LmgsIDAsIC0xLCAxLCAxKTtcblxuICAgICAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0Q2FudmFzUG9zaXRpb24oZW50cnkueCwgZW50cnkueSk7XG4gICAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuYXBwZW5kSW1hZ2Uoe1xuICAgICAgICAgICAgICBpbWdEYXRhOiBpbWdEYXRhLFxuICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvblswXSxcbiAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvblsxXSxcbiAgICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICAgIGhlaWdodDogaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludFNvbGlkQ29sb3JJbWFnZU1hc2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXJrUG9pbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXJrUG9pbnQodGFnKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXJrUG9pbnRQcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcmtQb2ludFByb3BzKHRhZywgcHJvcGVydGllcykge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5NYXJrZWRDb250ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmVnaW5NYXJrZWRDb250ZW50KHRhZykge1xuICAgICAgICB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5wdXNoKHtcbiAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJiZWdpbk1hcmtlZENvbnRlbnRQcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luTWFya2VkQ29udGVudFByb3BzKHRhZywgcHJvcGVydGllcykge1xuICAgICAgICBpZiAodGFnID09PSBcIk9DXCIpIHtcbiAgICAgICAgICB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5wdXNoKHtcbiAgICAgICAgICAgIHZpc2libGU6IHRoaXMub3B0aW9uYWxDb250ZW50Q29uZmlnLmlzVmlzaWJsZShwcm9wZXJ0aWVzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFya2VkQ29udGVudFN0YWNrLnB1c2goe1xuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250ZW50VmlzaWJsZSA9IHRoaXMuaXNDb250ZW50VmlzaWJsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmRNYXJrZWRDb250ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kTWFya2VkQ29udGVudCgpIHtcbiAgICAgICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sucG9wKCk7XG4gICAgICAgIHRoaXMuY29udGVudFZpc2libGUgPSB0aGlzLmlzQ29udGVudFZpc2libGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYmVnaW5Db21wYXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWdpbkNvbXBhdCgpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVuZENvbXBhdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuZENvbXBhdCgpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbnN1bWVQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZVBhdGgoKSB7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLmN0eDtcblxuICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCkge1xuICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdDbGlwID09PSBFT19DTElQKSB7XG4gICAgICAgICAgICBjdHguY2xpcChcImV2ZW5vZGRcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFNpbmdsZVBpeGVsV2lkdGhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaW5nbGVQaXhlbFdpZHRoKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9PT0gbnVsbCkge1xuICAgICAgICAgIHZhciBtID0gdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgICB2YXIgYWJzRGV0ID0gTWF0aC5hYnMobVswXSAqIG1bM10gLSBtWzJdICogbVsxXSk7XG4gICAgICAgICAgdmFyIHNxTm9ybTEgPSBNYXRoLnBvdyhtWzBdLCAyKSArIE1hdGgucG93KG1bMl0sIDIpO1xuICAgICAgICAgIHZhciBzcU5vcm0yID0gTWF0aC5wb3cobVsxXSwgMikgKyBNYXRoLnBvdyhtWzNdLCAyKTtcbiAgICAgICAgICB2YXIgcGl4ZWxIZWlnaHQgPSBNYXRoLnNxcnQoTWF0aC5tYXgoc3FOb3JtMSwgc3FOb3JtMikpIC8gYWJzRGV0O1xuXG4gICAgICAgICAgaWYgKHNxTm9ybTEgIT09IHNxTm9ybTIgJiYgdGhpcy5fY29tYmluZWRTY2FsZUZhY3RvciAqIHBpeGVsSGVpZ2h0ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IC0odGhpcy5fY29tYmluZWRTY2FsZUZhY3RvciAqIHBpeGVsSGVpZ2h0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFic0RldCA+IE51bWJlci5FUFNJTE9OKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gcGl4ZWxIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDYW52YXNQb3NpdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKHgsIHkpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIHJldHVybiBbdHJhbnNmb3JtWzBdICogeCArIHRyYW5zZm9ybVsyXSAqIHkgKyB0cmFuc2Zvcm1bNF0sIHRyYW5zZm9ybVsxXSAqIHggKyB0cmFuc2Zvcm1bM10gKiB5ICsgdHJhbnNmb3JtWzVdXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNDb250ZW50VmlzaWJsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ29udGVudFZpc2libGUoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmICghdGhpcy5tYXJrZWRDb250ZW50U3RhY2tbaV0udmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYW52YXNHcmFwaGljcztcbiAgfSgpO1xuXG4gIGZvciAodmFyIG9wIGluIF91dGlsLk9QUykge1xuICAgIENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVtfdXRpbC5PUFNbb3BdXSA9IENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVtvcF07XG4gIH1cblxuICByZXR1cm4gQ2FudmFzR3JhcGhpY3M7XG59KCk7XG5cbmV4cG9ydHMuQ2FudmFzR3JhcGhpY3MgPSBDYW52YXNHcmFwaGljcztcblxuLyoqKi8gfSksXG4vKiAxMTkgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmdldFNoYWRpbmdQYXR0ZXJuID0gZ2V0U2hhZGluZ1BhdHRlcm47XG5leHBvcnRzLlRpbGluZ1BhdHRlcm4gPSB2b2lkIDA7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIHN2Z0VsZW1lbnQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdHJpeChtYXRyaXgpIHtcbiAgaWYgKHR5cGVvZiBET01NYXRyaXggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gbmV3IERPTU1hdHJpeChtYXRyaXgpO1xuICB9XG5cbiAgaWYgKCFzdmdFbGVtZW50KSB7XG4gICAgc3ZnRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuICB9XG5cbiAgcmV0dXJuIHN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KG1hdHJpeCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KSB7XG4gIGlmICghYmJveCB8fCB0eXBlb2YgUGF0aDJEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gIHZhciBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTtcbiAgdmFyIHJlZ2lvbiA9IG5ldyBQYXRoMkQoKTtcbiAgcmVnaW9uLnJlY3QoYmJveFswXSwgYmJveFsxXSwgd2lkdGgsIGhlaWdodCk7XG4gIGN0eC5jbGlwKHJlZ2lvbik7XG59XG5cbnZhciBCYXNlU2hhZGluZ1BhdHRlcm4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU2hhZGluZ1BhdHRlcm4oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VTaGFkaW5nUGF0dGVybik7XG5cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZVNoYWRpbmdQYXR0ZXJuKSB7XG4gICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZVNoYWRpbmdQYXR0ZXJuLlwiKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZVNoYWRpbmdQYXR0ZXJuLCBbe1xuICAgIGtleTogXCJnZXRQYXR0ZXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhdHRlcm4oKSB7XG4gICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBnZXRQYXR0ZXJuYCBjYWxsZWQuXCIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlU2hhZGluZ1BhdHRlcm47XG59KCk7XG5cbnZhciBSYWRpYWxBeGlhbFNoYWRpbmdQYXR0ZXJuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVNoYWRpbmdQYXR0ZXJuKSB7XG4gIF9pbmhlcml0cyhSYWRpYWxBeGlhbFNoYWRpbmdQYXR0ZXJuLCBfQmFzZVNoYWRpbmdQYXR0ZXJuKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJhZGlhbEF4aWFsU2hhZGluZ1BhdHRlcm4pO1xuXG4gIGZ1bmN0aW9uIFJhZGlhbEF4aWFsU2hhZGluZ1BhdHRlcm4oSVIpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLl90eXBlID0gSVJbMV07XG4gICAgX3RoaXMuX2Jib3ggPSBJUlsyXTtcbiAgICBfdGhpcy5fY29sb3JTdG9wcyA9IElSWzNdO1xuICAgIF90aGlzLl9wMCA9IElSWzRdO1xuICAgIF90aGlzLl9wMSA9IElSWzVdO1xuICAgIF90aGlzLl9yMCA9IElSWzZdO1xuICAgIF90aGlzLl9yMSA9IElSWzddO1xuICAgIF90aGlzLl9tYXRyaXggPSBJUls4XTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybiwgW3tcbiAgICBrZXk6IFwiZ2V0UGF0dGVyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYXR0ZXJuKGN0eCwgb3duZXIsIHNoYWRpbmdGaWxsKSB7XG4gICAgICB2YXIgdG1wQ2FudmFzID0gb3duZXIuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwicGF0dGVyblwiLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCwgdHJ1ZSk7XG4gICAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIHRtcEN0eC5jYW52YXMud2lkdGgsIHRtcEN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgIHRtcEN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRtcEN0eC5yZWN0KDAsIDAsIHRtcEN0eC5jYW52YXMud2lkdGgsIHRtcEN0eC5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgaWYgKCFzaGFkaW5nRmlsbCkge1xuICAgICAgICB0bXBDdHguc2V0VHJhbnNmb3JtLmFwcGx5KHRtcEN0eCwgb3duZXIuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX21hdHJpeCkge1xuICAgICAgICAgIHRtcEN0eC50cmFuc2Zvcm0uYXBwbHkodG1wQ3R4LCB0aGlzLl9tYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0bXBDdHguc2V0VHJhbnNmb3JtLmFwcGx5KHRtcEN0eCwgY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgfVxuXG4gICAgICBhcHBseUJvdW5kaW5nQm94KHRtcEN0eCwgdGhpcy5fYmJveCk7XG4gICAgICB2YXIgZ3JhZDtcblxuICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IFwiYXhpYWxcIikge1xuICAgICAgICBncmFkID0gdG1wQ3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHRoaXMuX3AwWzBdLCB0aGlzLl9wMFsxXSwgdGhpcy5fcDFbMF0sIHRoaXMuX3AxWzFdKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdHlwZSA9PT0gXCJyYWRpYWxcIikge1xuICAgICAgICBncmFkID0gdG1wQ3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHRoaXMuX3AwWzBdLCB0aGlzLl9wMFsxXSwgdGhpcy5fcjAsIHRoaXMuX3AxWzBdLCB0aGlzLl9wMVsxXSwgdGhpcy5fcjEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fY29sb3JTdG9wcyksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGNvbG9yU3RvcCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIGdyYWQuYWRkQ29sb3JTdG9wKGNvbG9yU3RvcFswXSwgY29sb3JTdG9wWzFdKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuXG4gICAgICB0bXBDdHguZmlsbFN0eWxlID0gZ3JhZDtcbiAgICAgIHRtcEN0eC5maWxsKCk7XG4gICAgICB2YXIgcGF0dGVybiA9IGN0eC5jcmVhdGVQYXR0ZXJuKHRtcENhbnZhcy5jYW52YXMsIFwicmVwZWF0XCIpO1xuICAgICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0oY3JlYXRlTWF0cml4KGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkpO1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhZGlhbEF4aWFsU2hhZGluZ1BhdHRlcm47XG59KEJhc2VTaGFkaW5nUGF0dGVybik7XG5cbmZ1bmN0aW9uIGRyYXdUcmlhbmdsZShkYXRhLCBjb250ZXh0LCBwMSwgcDIsIHAzLCBjMSwgYzIsIGMzKSB7XG4gIHZhciBjb29yZHMgPSBjb250ZXh0LmNvb3JkcyxcbiAgICAgIGNvbG9ycyA9IGNvbnRleHQuY29sb3JzO1xuICB2YXIgYnl0ZXMgPSBkYXRhLmRhdGEsXG4gICAgICByb3dTaXplID0gZGF0YS53aWR0aCAqIDQ7XG4gIHZhciB0bXA7XG5cbiAgaWYgKGNvb3Jkc1twMSArIDFdID4gY29vcmRzW3AyICsgMV0pIHtcbiAgICB0bXAgPSBwMTtcbiAgICBwMSA9IHAyO1xuICAgIHAyID0gdG1wO1xuICAgIHRtcCA9IGMxO1xuICAgIGMxID0gYzI7XG4gICAgYzIgPSB0bXA7XG4gIH1cblxuICBpZiAoY29vcmRzW3AyICsgMV0gPiBjb29yZHNbcDMgKyAxXSkge1xuICAgIHRtcCA9IHAyO1xuICAgIHAyID0gcDM7XG4gICAgcDMgPSB0bXA7XG4gICAgdG1wID0gYzI7XG4gICAgYzIgPSBjMztcbiAgICBjMyA9IHRtcDtcbiAgfVxuXG4gIGlmIChjb29yZHNbcDEgKyAxXSA+IGNvb3Jkc1twMiArIDFdKSB7XG4gICAgdG1wID0gcDE7XG4gICAgcDEgPSBwMjtcbiAgICBwMiA9IHRtcDtcbiAgICB0bXAgPSBjMTtcbiAgICBjMSA9IGMyO1xuICAgIGMyID0gdG1wO1xuICB9XG5cbiAgdmFyIHgxID0gKGNvb3Jkc1twMV0gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gIHZhciB5MSA9IChjb29yZHNbcDEgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcbiAgdmFyIHgyID0gKGNvb3Jkc1twMl0gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gIHZhciB5MiA9IChjb29yZHNbcDIgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcbiAgdmFyIHgzID0gKGNvb3Jkc1twM10gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gIHZhciB5MyA9IChjb29yZHNbcDMgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcblxuICBpZiAoeTEgPj0geTMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYzFyID0gY29sb3JzW2MxXSxcbiAgICAgIGMxZyA9IGNvbG9yc1tjMSArIDFdLFxuICAgICAgYzFiID0gY29sb3JzW2MxICsgMl07XG4gIHZhciBjMnIgPSBjb2xvcnNbYzJdLFxuICAgICAgYzJnID0gY29sb3JzW2MyICsgMV0sXG4gICAgICBjMmIgPSBjb2xvcnNbYzIgKyAyXTtcbiAgdmFyIGMzciA9IGNvbG9yc1tjM10sXG4gICAgICBjM2cgPSBjb2xvcnNbYzMgKyAxXSxcbiAgICAgIGMzYiA9IGNvbG9yc1tjMyArIDJdO1xuICB2YXIgbWluWSA9IE1hdGgucm91bmQoeTEpLFxuICAgICAgbWF4WSA9IE1hdGgucm91bmQoeTMpO1xuICB2YXIgeGEsIGNhciwgY2FnLCBjYWI7XG4gIHZhciB4YiwgY2JyLCBjYmcsIGNiYjtcblxuICBmb3IgKHZhciB5ID0gbWluWTsgeSA8PSBtYXhZOyB5KyspIHtcbiAgICBpZiAoeSA8IHkyKSB7XG4gICAgICB2YXIgX2sgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh5IDwgeTEpIHtcbiAgICAgICAgX2sgPSAwO1xuICAgICAgfSBlbHNlIGlmICh5MSA9PT0geTIpIHtcbiAgICAgICAgX2sgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2sgPSAoeTEgLSB5KSAvICh5MSAtIHkyKTtcbiAgICAgIH1cblxuICAgICAgeGEgPSB4MSAtICh4MSAtIHgyKSAqIF9rO1xuICAgICAgY2FyID0gYzFyIC0gKGMxciAtIGMycikgKiBfaztcbiAgICAgIGNhZyA9IGMxZyAtIChjMWcgLSBjMmcpICogX2s7XG4gICAgICBjYWIgPSBjMWIgLSAoYzFiIC0gYzJiKSAqIF9rO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2syID0gdm9pZCAwO1xuXG4gICAgICBpZiAoeSA+IHkzKSB7XG4gICAgICAgIF9rMiA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHkyID09PSB5Mykge1xuICAgICAgICBfazIgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2syID0gKHkyIC0geSkgLyAoeTIgLSB5Myk7XG4gICAgICB9XG5cbiAgICAgIHhhID0geDIgLSAoeDIgLSB4MykgKiBfazI7XG4gICAgICBjYXIgPSBjMnIgLSAoYzJyIC0gYzNyKSAqIF9rMjtcbiAgICAgIGNhZyA9IGMyZyAtIChjMmcgLSBjM2cpICogX2syO1xuICAgICAgY2FiID0gYzJiIC0gKGMyYiAtIGMzYikgKiBfazI7XG4gICAgfVxuXG4gICAgdmFyIGsgPSB2b2lkIDA7XG5cbiAgICBpZiAoeSA8IHkxKSB7XG4gICAgICBrID0gMDtcbiAgICB9IGVsc2UgaWYgKHkgPiB5Mykge1xuICAgICAgayA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGsgPSAoeTEgLSB5KSAvICh5MSAtIHkzKTtcbiAgICB9XG5cbiAgICB4YiA9IHgxIC0gKHgxIC0geDMpICogaztcbiAgICBjYnIgPSBjMXIgLSAoYzFyIC0gYzNyKSAqIGs7XG4gICAgY2JnID0gYzFnIC0gKGMxZyAtIGMzZykgKiBrO1xuICAgIGNiYiA9IGMxYiAtIChjMWIgLSBjM2IpICogaztcbiAgICB2YXIgeDFfID0gTWF0aC5yb3VuZChNYXRoLm1pbih4YSwgeGIpKTtcbiAgICB2YXIgeDJfID0gTWF0aC5yb3VuZChNYXRoLm1heCh4YSwgeGIpKTtcbiAgICB2YXIgaiA9IHJvd1NpemUgKiB5ICsgeDFfICogNDtcblxuICAgIGZvciAodmFyIHggPSB4MV87IHggPD0geDJfOyB4KyspIHtcbiAgICAgIGsgPSAoeGEgLSB4KSAvICh4YSAtIHhiKTtcblxuICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgIGsgPSAwO1xuICAgICAgfSBlbHNlIGlmIChrID4gMSkge1xuICAgICAgICBrID0gMTtcbiAgICAgIH1cblxuICAgICAgYnl0ZXNbaisrXSA9IGNhciAtIChjYXIgLSBjYnIpICogayB8IDA7XG4gICAgICBieXRlc1tqKytdID0gY2FnIC0gKGNhZyAtIGNiZykgKiBrIHwgMDtcbiAgICAgIGJ5dGVzW2orK10gPSBjYWIgLSAoY2FiIC0gY2JiKSAqIGsgfCAwO1xuICAgICAgYnl0ZXNbaisrXSA9IDI1NTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhd0ZpZ3VyZShkYXRhLCBmaWd1cmUsIGNvbnRleHQpIHtcbiAgdmFyIHBzID0gZmlndXJlLmNvb3JkcztcbiAgdmFyIGNzID0gZmlndXJlLmNvbG9ycztcbiAgdmFyIGksIGlpO1xuXG4gIHN3aXRjaCAoZmlndXJlLnR5cGUpIHtcbiAgICBjYXNlIFwibGF0dGljZVwiOlxuICAgICAgdmFyIHZlcnRpY2VzUGVyUm93ID0gZmlndXJlLnZlcnRpY2VzUGVyUm93O1xuICAgICAgdmFyIHJvd3MgPSBNYXRoLmZsb29yKHBzLmxlbmd0aCAvIHZlcnRpY2VzUGVyUm93KSAtIDE7XG4gICAgICB2YXIgY29scyA9IHZlcnRpY2VzUGVyUm93IC0gMTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICB2YXIgcSA9IGkgKiB2ZXJ0aWNlc1BlclJvdztcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvbHM7IGorKywgcSsrKSB7XG4gICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW3FdLCBwc1txICsgMV0sIHBzW3EgKyB2ZXJ0aWNlc1BlclJvd10sIGNzW3FdLCBjc1txICsgMV0sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvd10pO1xuICAgICAgICAgIGRyYXdUcmlhbmdsZShkYXRhLCBjb250ZXh0LCBwc1txICsgdmVydGljZXNQZXJSb3cgKyAxXSwgcHNbcSArIDFdLCBwc1txICsgdmVydGljZXNQZXJSb3ddLCBjc1txICsgdmVydGljZXNQZXJSb3cgKyAxXSwgY3NbcSArIDFdLCBjc1txICsgdmVydGljZXNQZXJSb3ddKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJ0cmlhbmdsZXNcIjpcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMykge1xuICAgICAgICBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcHNbaV0sIHBzW2kgKyAxXSwgcHNbaSArIDJdLCBjc1tpXSwgY3NbaSArIDFdLCBjc1tpICsgMl0pO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGZpZ3VyZVwiKTtcbiAgfVxufVxuXG52YXIgTWVzaFNoYWRpbmdQYXR0ZXJuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVNoYWRpbmdQYXR0ZXJuMikge1xuICBfaW5oZXJpdHMoTWVzaFNoYWRpbmdQYXR0ZXJuLCBfQmFzZVNoYWRpbmdQYXR0ZXJuMik7XG5cbiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoTWVzaFNoYWRpbmdQYXR0ZXJuKTtcblxuICBmdW5jdGlvbiBNZXNoU2hhZGluZ1BhdHRlcm4oSVIpIHtcbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lc2hTaGFkaW5nUGF0dGVybik7XG5cbiAgICBfdGhpczIgPSBfc3VwZXIyLmNhbGwodGhpcyk7XG4gICAgX3RoaXMyLl9jb29yZHMgPSBJUlsyXTtcbiAgICBfdGhpczIuX2NvbG9ycyA9IElSWzNdO1xuICAgIF90aGlzMi5fZmlndXJlcyA9IElSWzRdO1xuICAgIF90aGlzMi5fYm91bmRzID0gSVJbNV07XG4gICAgX3RoaXMyLl9tYXRyaXggPSBJUls2XTtcbiAgICBfdGhpczIuX2Jib3ggPSBJUls3XTtcbiAgICBfdGhpczIuX2JhY2tncm91bmQgPSBJUls4XTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lc2hTaGFkaW5nUGF0dGVybiwgW3tcbiAgICBrZXk6IFwiX2NyZWF0ZU1lc2hDYW52YXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZU1lc2hDYW52YXMoY29tYmluZWRTY2FsZSwgYmFja2dyb3VuZENvbG9yLCBjYWNoZWRDYW52YXNlcykge1xuICAgICAgdmFyIEVYUEVDVEVEX1NDQUxFID0gMS4xO1xuICAgICAgdmFyIE1BWF9QQVRURVJOX1NJWkUgPSAzMDAwO1xuICAgICAgdmFyIEJPUkRFUl9TSVpFID0gMjtcbiAgICAgIHZhciBvZmZzZXRYID0gTWF0aC5mbG9vcih0aGlzLl9ib3VuZHNbMF0pO1xuICAgICAgdmFyIG9mZnNldFkgPSBNYXRoLmZsb29yKHRoaXMuX2JvdW5kc1sxXSk7XG4gICAgICB2YXIgYm91bmRzV2lkdGggPSBNYXRoLmNlaWwodGhpcy5fYm91bmRzWzJdKSAtIG9mZnNldFg7XG4gICAgICB2YXIgYm91bmRzSGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMuX2JvdW5kc1szXSkgLSBvZmZzZXRZO1xuICAgICAgdmFyIHdpZHRoID0gTWF0aC5taW4oTWF0aC5jZWlsKE1hdGguYWJzKGJvdW5kc1dpZHRoICogY29tYmluZWRTY2FsZVswXSAqIEVYUEVDVEVEX1NDQUxFKSksIE1BWF9QQVRURVJOX1NJWkUpO1xuICAgICAgdmFyIGhlaWdodCA9IE1hdGgubWluKE1hdGguY2VpbChNYXRoLmFicyhib3VuZHNIZWlnaHQgKiBjb21iaW5lZFNjYWxlWzFdICogRVhQRUNURURfU0NBTEUpKSwgTUFYX1BBVFRFUk5fU0laRSk7XG4gICAgICB2YXIgc2NhbGVYID0gYm91bmRzV2lkdGggLyB3aWR0aDtcbiAgICAgIHZhciBzY2FsZVkgPSBib3VuZHNIZWlnaHQgLyBoZWlnaHQ7XG4gICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgY29vcmRzOiB0aGlzLl9jb29yZHMsXG4gICAgICAgIGNvbG9yczogdGhpcy5fY29sb3JzLFxuICAgICAgICBvZmZzZXRYOiAtb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WTogLW9mZnNldFksXG4gICAgICAgIHNjYWxlWDogMSAvIHNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiAxIC8gc2NhbGVZXG4gICAgICB9O1xuICAgICAgdmFyIHBhZGRlZFdpZHRoID0gd2lkdGggKyBCT1JERVJfU0laRSAqIDI7XG4gICAgICB2YXIgcGFkZGVkSGVpZ2h0ID0gaGVpZ2h0ICsgQk9SREVSX1NJWkUgKiAyO1xuICAgICAgdmFyIHRtcENhbnZhcyA9IGNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1lc2hcIiwgcGFkZGVkV2lkdGgsIHBhZGRlZEhlaWdodCwgZmFsc2UpO1xuICAgICAgdmFyIHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgdmFyIGRhdGEgPSB0bXBDdHguY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIHZhciBieXRlcyA9IGRhdGEuZGF0YTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBieXRlcy5sZW5ndGg7IGkgPCBpaTsgaSArPSA0KSB7XG4gICAgICAgICAgYnl0ZXNbaV0gPSBiYWNrZ3JvdW5kQ29sb3JbMF07XG4gICAgICAgICAgYnl0ZXNbaSArIDFdID0gYmFja2dyb3VuZENvbG9yWzFdO1xuICAgICAgICAgIGJ5dGVzW2kgKyAyXSA9IGJhY2tncm91bmRDb2xvclsyXTtcbiAgICAgICAgICBieXRlc1tpICsgM10gPSAyNTU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9maWd1cmVzKSxcbiAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGZpZ3VyZSA9IF9zdGVwMi52YWx1ZTtcbiAgICAgICAgICBkcmF3RmlndXJlKGRhdGEsIGZpZ3VyZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuXG4gICAgICB0bXBDdHgucHV0SW1hZ2VEYXRhKGRhdGEsIEJPUkRFUl9TSVpFLCBCT1JERVJfU0laRSk7XG4gICAgICB2YXIgY2FudmFzID0gdG1wQ2FudmFzLmNhbnZhcztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhbnZhczogY2FudmFzLFxuICAgICAgICBvZmZzZXRYOiBvZmZzZXRYIC0gQk9SREVSX1NJWkUgKiBzY2FsZVgsXG4gICAgICAgIG9mZnNldFk6IG9mZnNldFkgLSBCT1JERVJfU0laRSAqIHNjYWxlWSxcbiAgICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICAgIHNjYWxlWTogc2NhbGVZXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRQYXR0ZXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhdHRlcm4oY3R4LCBvd25lciwgc2hhZGluZ0ZpbGwpIHtcbiAgICAgIGFwcGx5Qm91bmRpbmdCb3goY3R4LCB0aGlzLl9iYm94KTtcbiAgICAgIHZhciBzY2FsZTtcblxuICAgICAgaWYgKHNoYWRpbmdGaWxsKSB7XG4gICAgICAgIHNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShjdHgubW96Q3VycmVudFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUob3duZXIuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX21hdHJpeCkge1xuICAgICAgICAgIHZhciBtYXRyaXhTY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodGhpcy5fbWF0cml4KTtcblxuICAgICAgICAgIHNjYWxlID0gW3NjYWxlWzBdICogbWF0cml4U2NhbGVbMF0sIHNjYWxlWzFdICogbWF0cml4U2NhbGVbMV1dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzID0gdGhpcy5fY3JlYXRlTWVzaENhbnZhcyhzY2FsZSwgc2hhZGluZ0ZpbGwgPyBudWxsIDogdGhpcy5fYmFja2dyb3VuZCwgb3duZXIuY2FjaGVkQ2FudmFzZXMpO1xuXG4gICAgICBpZiAoIXNoYWRpbmdGaWxsKSB7XG4gICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCBvd25lci5iYXNlVHJhbnNmb3JtKTtcblxuICAgICAgICBpZiAodGhpcy5fbWF0cml4KSB7XG4gICAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIHRoaXMuX21hdHJpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3R4LnRyYW5zbGF0ZSh0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLm9mZnNldFgsIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMub2Zmc2V0WSk7XG4gICAgICBjdHguc2NhbGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVgsIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuc2NhbGVZKTtcbiAgICAgIHJldHVybiBjdHguY3JlYXRlUGF0dGVybih0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLmNhbnZhcywgXCJuby1yZXBlYXRcIik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lc2hTaGFkaW5nUGF0dGVybjtcbn0oQmFzZVNoYWRpbmdQYXR0ZXJuKTtcblxudmFyIER1bW15U2hhZGluZ1BhdHRlcm4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlU2hhZGluZ1BhdHRlcm4zKSB7XG4gIF9pbmhlcml0cyhEdW1teVNoYWRpbmdQYXR0ZXJuLCBfQmFzZVNoYWRpbmdQYXR0ZXJuMyk7XG5cbiAgdmFyIF9zdXBlcjMgPSBfY3JlYXRlU3VwZXIoRHVtbXlTaGFkaW5nUGF0dGVybik7XG5cbiAgZnVuY3Rpb24gRHVtbXlTaGFkaW5nUGF0dGVybigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHVtbXlTaGFkaW5nUGF0dGVybik7XG5cbiAgICByZXR1cm4gX3N1cGVyMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKER1bW15U2hhZGluZ1BhdHRlcm4sIFt7XG4gICAga2V5OiBcImdldFBhdHRlcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGF0dGVybigpIHtcbiAgICAgIHJldHVybiBcImhvdHBpbmtcIjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHVtbXlTaGFkaW5nUGF0dGVybjtcbn0oQmFzZVNoYWRpbmdQYXR0ZXJuKTtcblxuZnVuY3Rpb24gZ2V0U2hhZGluZ1BhdHRlcm4oSVIpIHtcbiAgc3dpdGNoIChJUlswXSkge1xuICAgIGNhc2UgXCJSYWRpYWxBeGlhbFwiOlxuICAgICAgcmV0dXJuIG5ldyBSYWRpYWxBeGlhbFNoYWRpbmdQYXR0ZXJuKElSKTtcblxuICAgIGNhc2UgXCJNZXNoXCI6XG4gICAgICByZXR1cm4gbmV3IE1lc2hTaGFkaW5nUGF0dGVybihJUik7XG5cbiAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgIHJldHVybiBuZXcgRHVtbXlTaGFkaW5nUGF0dGVybigpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBJUiB0eXBlOiBcIi5jb25jYXQoSVJbMF0pKTtcbn1cblxudmFyIFBhaW50VHlwZSA9IHtcbiAgQ09MT1JFRDogMSxcbiAgVU5DT0xPUkVEOiAyXG59O1xuXG52YXIgVGlsaW5nUGF0dGVybiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRpbGluZ1BhdHRlcm4oSVIsIGNvbG9yLCBjdHgsIGNhbnZhc0dyYXBoaWNzRmFjdG9yeSwgYmFzZVRyYW5zZm9ybSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaWxpbmdQYXR0ZXJuKTtcblxuICAgIHRoaXMub3BlcmF0b3JMaXN0ID0gSVJbMl07XG4gICAgdGhpcy5tYXRyaXggPSBJUlszXSB8fCBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgdGhpcy5iYm94ID0gSVJbNF07XG4gICAgdGhpcy54c3RlcCA9IElSWzVdO1xuICAgIHRoaXMueXN0ZXAgPSBJUls2XTtcbiAgICB0aGlzLnBhaW50VHlwZSA9IElSWzddO1xuICAgIHRoaXMudGlsaW5nVHlwZSA9IElSWzhdO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLmNhbnZhc0dyYXBoaWNzRmFjdG9yeSA9IGNhbnZhc0dyYXBoaWNzRmFjdG9yeTtcbiAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSBiYXNlVHJhbnNmb3JtO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRpbGluZ1BhdHRlcm4sIFt7XG4gICAga2V5OiBcImNyZWF0ZVBhdHRlcm5DYW52YXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUGF0dGVybkNhbnZhcyhvd25lcikge1xuICAgICAgdmFyIG9wZXJhdG9yTGlzdCA9IHRoaXMub3BlcmF0b3JMaXN0O1xuICAgICAgdmFyIGJib3ggPSB0aGlzLmJib3g7XG4gICAgICB2YXIgeHN0ZXAgPSB0aGlzLnhzdGVwO1xuICAgICAgdmFyIHlzdGVwID0gdGhpcy55c3RlcDtcbiAgICAgIHZhciBwYWludFR5cGUgPSB0aGlzLnBhaW50VHlwZTtcbiAgICAgIHZhciB0aWxpbmdUeXBlID0gdGhpcy50aWxpbmdUeXBlO1xuICAgICAgdmFyIGNvbG9yID0gdGhpcy5jb2xvcjtcbiAgICAgIHZhciBjYW52YXNHcmFwaGljc0ZhY3RvcnkgPSB0aGlzLmNhbnZhc0dyYXBoaWNzRmFjdG9yeTtcbiAgICAgICgwLCBfdXRpbC5pbmZvKShcIlRpbGluZ1R5cGU6IFwiICsgdGlsaW5nVHlwZSk7XG4gICAgICB2YXIgeDAgPSBiYm94WzBdLFxuICAgICAgICAgIHkwID0gYmJveFsxXSxcbiAgICAgICAgICB4MSA9IGJib3hbMl0sXG4gICAgICAgICAgeTEgPSBiYm94WzNdO1xuXG4gICAgICB2YXIgbWF0cml4U2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMubWF0cml4KTtcblxuICAgICAgdmFyIGN1ck1hdHJpeFNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZSh0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuXG4gICAgICB2YXIgY29tYmluZWRTY2FsZSA9IFttYXRyaXhTY2FsZVswXSAqIGN1ck1hdHJpeFNjYWxlWzBdLCBtYXRyaXhTY2FsZVsxXSAqIGN1ck1hdHJpeFNjYWxlWzFdXTtcbiAgICAgIHZhciBkaW14ID0gdGhpcy5nZXRTaXplQW5kU2NhbGUoeHN0ZXAsIHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgY29tYmluZWRTY2FsZVswXSk7XG4gICAgICB2YXIgZGlteSA9IHRoaXMuZ2V0U2l6ZUFuZFNjYWxlKHlzdGVwLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LCBjb21iaW5lZFNjYWxlWzFdKTtcbiAgICAgIHZhciB0bXBDYW52YXMgPSBvd25lci5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJwYXR0ZXJuXCIsIGRpbXguc2l6ZSwgZGlteS5zaXplLCB0cnVlKTtcbiAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgIHZhciBncmFwaGljcyA9IGNhbnZhc0dyYXBoaWNzRmFjdG9yeS5jcmVhdGVDYW52YXNHcmFwaGljcyh0bXBDdHgpO1xuICAgICAgZ3JhcGhpY3MuZ3JvdXBMZXZlbCA9IG93bmVyLmdyb3VwTGV2ZWw7XG4gICAgICB0aGlzLnNldEZpbGxBbmRTdHJva2VTdHlsZVRvQ29udGV4dChncmFwaGljcywgcGFpbnRUeXBlLCBjb2xvcik7XG4gICAgICBncmFwaGljcy50cmFuc2Zvcm0oZGlteC5zY2FsZSwgMCwgMCwgZGlteS5zY2FsZSwgMCwgMCk7XG4gICAgICB0aGlzLmNsaXBCYm94KGdyYXBoaWNzLCBiYm94LCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgICBncmFwaGljcy5iYXNlVHJhbnNmb3JtID0gZ3JhcGhpY3MuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0uc2xpY2UoKTtcbiAgICAgIGdyYXBoaWNzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTtcbiAgICAgIGdyYXBoaWNzLmVuZERyYXdpbmcoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhbnZhczogdG1wQ2FudmFzLmNhbnZhcyxcbiAgICAgICAgc2NhbGVYOiBkaW14LnNjYWxlLFxuICAgICAgICBzY2FsZVk6IGRpbXkuc2NhbGVcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNpemVBbmRTY2FsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaXplQW5kU2NhbGUoc3RlcCwgcmVhbE91dHB1dFNpemUsIHNjYWxlKSB7XG4gICAgICBzdGVwID0gTWF0aC5hYnMoc3RlcCk7XG4gICAgICB2YXIgbWF4U2l6ZSA9IE1hdGgubWF4KFRpbGluZ1BhdHRlcm4uTUFYX1BBVFRFUk5fU0laRSwgcmVhbE91dHB1dFNpemUpO1xuICAgICAgdmFyIHNpemUgPSBNYXRoLmNlaWwoc3RlcCAqIHNjYWxlKTtcblxuICAgICAgaWYgKHNpemUgPj0gbWF4U2l6ZSkge1xuICAgICAgICBzaXplID0gbWF4U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlID0gc2l6ZSAvIHN0ZXA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xpcEJib3hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xpcEJib3goZ3JhcGhpY3MsIGJib3gsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShiYm94KSAmJiBiYm94Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICB2YXIgYmJveFdpZHRoID0geDEgLSB4MDtcbiAgICAgICAgdmFyIGJib3hIZWlnaHQgPSB5MSAtIHkwO1xuICAgICAgICBncmFwaGljcy5jdHgucmVjdCh4MCwgeTAsIGJib3hXaWR0aCwgYmJveEhlaWdodCk7XG4gICAgICAgIGdyYXBoaWNzLmNsaXAoKTtcbiAgICAgICAgZ3JhcGhpY3MuZW5kUGF0aCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRGaWxsQW5kU3Ryb2tlU3R5bGVUb0NvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0KGdyYXBoaWNzLCBwYWludFR5cGUsIGNvbG9yKSB7XG4gICAgICB2YXIgY29udGV4dCA9IGdyYXBoaWNzLmN0eCxcbiAgICAgICAgICBjdXJyZW50ID0gZ3JhcGhpY3MuY3VycmVudDtcblxuICAgICAgc3dpdGNoIChwYWludFR5cGUpIHtcbiAgICAgICAgY2FzZSBQYWludFR5cGUuQ09MT1JFRDpcbiAgICAgICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgY3VycmVudC5maWxsQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgIGN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYWludFR5cGUuVU5DT0xPUkVEOlxuICAgICAgICAgIHZhciBjc3NDb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0pO1xuXG4gICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjc3NDb2xvcjtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY3NzQ29sb3I7XG4gICAgICAgICAgY3VycmVudC5maWxsQ29sb3IgPSBjc3NDb2xvcjtcbiAgICAgICAgICBjdXJyZW50LnN0cm9rZUNvbG9yID0gY3NzQ29sb3I7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgX3V0aWwuRm9ybWF0RXJyb3IoXCJVbnN1cHBvcnRlZCBwYWludCB0eXBlOiBcIi5jb25jYXQocGFpbnRUeXBlKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhdHRlcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGF0dGVybihjdHgsIG93bmVyLCBzaGFkaW5nRmlsbCkge1xuICAgICAgY3R4ID0gdGhpcy5jdHg7XG4gICAgICB2YXIgbWF0cml4ID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlO1xuXG4gICAgICBpZiAoIXNoYWRpbmdGaWxsKSB7XG4gICAgICAgIG1hdHJpeCA9IF91dGlsLlV0aWwudHJhbnNmb3JtKG1hdHJpeCwgb3duZXIuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgICAgaWYgKHRoaXMubWF0cml4KSB7XG4gICAgICAgICAgbWF0cml4ID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0obWF0cml4LCB0aGlzLm1hdHJpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMgPSB0aGlzLmNyZWF0ZVBhdHRlcm5DYW52YXMob3duZXIpO1xuICAgICAgdmFyIGRvbU1hdHJpeCA9IGNyZWF0ZU1hdHJpeChtYXRyaXgpO1xuICAgICAgZG9tTWF0cml4ID0gZG9tTWF0cml4LnNjYWxlKDEgLyB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLnNjYWxlWCwgMSAvIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuc2NhbGVZKTtcbiAgICAgIHZhciBwYXR0ZXJuID0gY3R4LmNyZWF0ZVBhdHRlcm4odGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5jYW52YXMsIFwicmVwZWF0XCIpO1xuICAgICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0oZG9tTWF0cml4KTtcbiAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcIk1BWF9QQVRURVJOX1NJWkVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcIk1BWF9QQVRURVJOX1NJWkVcIiwgMzAwMCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbGluZ1BhdHRlcm47XG59KCk7XG5cbmV4cG9ydHMuVGlsaW5nUGF0dGVybiA9IFRpbGluZ1BhdHRlcm47XG5cbi8qKiovIH0pLFxuLyogMTIwICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuR2xvYmFsV29ya2VyT3B0aW9ucyA9IHZvaWQgMDtcbnZhciBHbG9iYWxXb3JrZXJPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmV4cG9ydHMuR2xvYmFsV29ya2VyT3B0aW9ucyA9IEdsb2JhbFdvcmtlck9wdGlvbnM7XG5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQgPSBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQ7XG5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9IEdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID09PSB1bmRlZmluZWQgPyBcIlwiIDogR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmM7XG5cbi8qKiovIH0pLFxuLyogMTIxICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuTWVzc2FnZUhhbmRsZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBDYWxsYmFja0tpbmQgPSB7XG4gIFVOS05PV046IDAsXG4gIERBVEE6IDEsXG4gIEVSUk9SOiAyXG59O1xudmFyIFN0cmVhbUtpbmQgPSB7XG4gIFVOS05PV046IDAsXG4gIENBTkNFTDogMSxcbiAgQ0FOQ0VMX0NPTVBMRVRFOiAyLFxuICBDTE9TRTogMyxcbiAgRU5RVUVVRTogNCxcbiAgRVJST1I6IDUsXG4gIFBVTEw6IDYsXG4gIFBVTExfQ09NUExFVEU6IDcsXG4gIFNUQVJUX0NPTVBMRVRFOiA4XG59O1xuXG5mdW5jdGlvbiB3cmFwUmVhc29uKHJlYXNvbikge1xuICBpZiAoX3R5cGVvZihyZWFzb24pICE9PSBcIm9iamVjdFwiIHx8IHJlYXNvbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiByZWFzb247XG4gIH1cblxuICBzd2l0Y2ggKHJlYXNvbi5uYW1lKSB7XG4gICAgY2FzZSBcIkFib3J0RXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKTtcblxuICAgIGNhc2UgXCJNaXNzaW5nUERGRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UpO1xuXG4gICAgY2FzZSBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiOlxuICAgICAgcmV0dXJuIG5ldyBfdXRpbC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5zdGF0dXMpO1xuXG4gICAgY2FzZSBcIlVua25vd25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgcmV0dXJuIG5ldyBfdXRpbC5Vbmtub3duRXJyb3JFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5kZXRhaWxzKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IF91dGlsLlVua25vd25FcnJvckV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSwgcmVhc29uLnRvU3RyaW5nKCkpO1xuICB9XG59XG5cbnZhciBNZXNzYWdlSGFuZGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1lc3NhZ2VIYW5kbGVyKHNvdXJjZU5hbWUsIHRhcmdldE5hbWUsIGNvbU9iaikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVzc2FnZUhhbmRsZXIpO1xuXG4gICAgdGhpcy5zb3VyY2VOYW1lID0gc291cmNlTmFtZTtcbiAgICB0aGlzLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lO1xuICAgIHRoaXMuY29tT2JqID0gY29tT2JqO1xuICAgIHRoaXMuY2FsbGJhY2tJZCA9IDE7XG4gICAgdGhpcy5zdHJlYW1JZCA9IDE7XG4gICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7XG4gICAgdGhpcy5zdHJlYW1TaW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5zdHJlYW1Db250cm9sbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5hY3Rpb25IYW5kbGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHRoaXMuX29uQ29tT2JqT25NZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGE7XG5cbiAgICAgIGlmIChkYXRhLnRhcmdldE5hbWUgIT09IF90aGlzLnNvdXJjZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5zdHJlYW0pIHtcbiAgICAgICAgX3RoaXMuX3Byb2Nlc3NTdHJlYW1NZXNzYWdlKGRhdGEpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrSWQgPSBkYXRhLmNhbGxiYWNrSWQ7XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gX3RoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07XG5cbiAgICAgICAgaWYgKCFjYXBhYmlsaXR5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlc29sdmUgY2FsbGJhY2sgXCIuY29uY2F0KGNhbGxiYWNrSWQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBfdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXTtcblxuICAgICAgICBpZiAoZGF0YS5jYWxsYmFjayA9PT0gQ2FsbGJhY2tLaW5kLkRBVEEpIHtcbiAgICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUoZGF0YS5kYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmNhbGxiYWNrID09PSBDYWxsYmFja0tpbmQuRVJST1IpIHtcbiAgICAgICAgICBjYXBhYmlsaXR5LnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjYWxsYmFjayBjYXNlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aW9uID0gX3RoaXMuYWN0aW9uSGFuZGxlcltkYXRhLmFjdGlvbl07XG5cbiAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gYWN0aW9uIGZyb20gd29ya2VyOiBcIi5jb25jYXQoZGF0YS5hY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuY2FsbGJhY2tJZCkge1xuICAgICAgICB2YXIgY2JTb3VyY2VOYW1lID0gX3RoaXMuc291cmNlTmFtZTtcbiAgICAgICAgdmFyIGNiVGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTtcbiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKGFjdGlvbihkYXRhLmRhdGEpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWU6IGNiU291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuREFUQSxcbiAgICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCxcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWU6IGNiU291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuRVJST1IsXG4gICAgICAgICAgICBjYWxsYmFja0lkOiBkYXRhLmNhbGxiYWNrSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5zdHJlYW1JZCkge1xuICAgICAgICBfdGhpcy5fY3JlYXRlU3RyZWFtU2luayhkYXRhKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbihkYXRhLmRhdGEpO1xuICAgIH07XG5cbiAgICBjb21PYmouYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25Db21PYmpPbk1lc3NhZ2UpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lc3NhZ2VIYW5kbGVyLCBbe1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihhY3Rpb25OYW1lLCBoYW5kbGVyKSB7XG4gICAgICB2YXIgYWggPSB0aGlzLmFjdGlvbkhhbmRsZXI7XG5cbiAgICAgIGlmIChhaFthY3Rpb25OYW1lXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBhbHJlYWR5IGFuIGFjdGlvbk5hbWUgY2FsbGVkIFxcXCJcIi5jb25jYXQoYWN0aW9uTmFtZSwgXCJcXFwiXCIpKTtcbiAgICAgIH1cblxuICAgICAgYWhbYWN0aW9uTmFtZV0gPSBoYW5kbGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmQoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7XG4gICAgICB0aGlzLl9wb3N0TWVzc2FnZSh7XG4gICAgICAgIHNvdXJjZU5hbWU6IHRoaXMuc291cmNlTmFtZSxcbiAgICAgICAgdGFyZ2V0TmFtZTogdGhpcy50YXJnZXROYW1lLFxuICAgICAgICBhY3Rpb246IGFjdGlvbk5hbWUsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0sIHRyYW5zZmVycyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlbmRXaXRoUHJvbWlzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kV2l0aFByb21pc2UoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tJZCA9IHRoaXMuY2FsbGJhY2tJZCsrO1xuICAgICAgdmFyIGNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzW2NhbGxiYWNrSWRdID0gY2FwYWJpbGl0eTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWU6IHRoaXMuc291cmNlTmFtZSxcbiAgICAgICAgICB0YXJnZXROYW1lOiB0aGlzLnRhcmdldE5hbWUsXG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICAgIGNhbGxiYWNrSWQ6IGNhbGxiYWNrSWQsXG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9LCB0cmFuc2ZlcnMpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgY2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZW5kV2l0aFN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kV2l0aFN0cmVhbShhY3Rpb25OYW1lLCBkYXRhLCBxdWV1ZWluZ1N0cmF0ZWd5LCB0cmFuc2ZlcnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc3RyZWFtSWQgPSB0aGlzLnN0cmVhbUlkKys7XG4gICAgICB2YXIgc291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZTtcbiAgICAgIHZhciB0YXJnZXROYW1lID0gdGhpcy50YXJnZXROYW1lO1xuICAgICAgdmFyIGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICBfdGhpczIuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdID0ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICAgICAgICAgIHN0YXJ0Q2FsbDogc3RhcnRDYXBhYmlsaXR5LFxuICAgICAgICAgICAgcHVsbENhbGw6IG51bGwsXG4gICAgICAgICAgICBjYW5jZWxDYWxsOiBudWxsLFxuICAgICAgICAgICAgaXNDbG9zZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzMi5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbk5hbWUsXG4gICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemVcbiAgICAgICAgICB9LCB0cmFuc2ZlcnMpO1xuXG4gICAgICAgICAgcmV0dXJuIHN0YXJ0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICB9LFxuICAgICAgICBwdWxsOiBmdW5jdGlvbiBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICB2YXIgcHVsbENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgX3RoaXMyLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbCA9IHB1bGxDYXBhYmlsaXR5O1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lOiBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMLFxuICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcHVsbENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkocmVhc29uIGluc3RhbmNlb2YgRXJyb3IsIFwiY2FuY2VsIG11c3QgaGF2ZSBhIHZhbGlkIHJlYXNvblwiKTtcbiAgICAgICAgICB2YXIgY2FuY2VsQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICBfdGhpczIuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwgPSBjYW5jZWxDYXBhYmlsaXR5O1xuICAgICAgICAgIF90aGlzMi5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lOiBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DQU5DRUwsXG4gICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjYW5jZWxDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgIH0sIHF1ZXVlaW5nU3RyYXRlZ3kpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfY3JlYXRlU3RyZWFtU2lua1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlU3RyZWFtU2luayhkYXRhKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcbiAgICAgIHZhciBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQ7XG4gICAgICB2YXIgc291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZTtcbiAgICAgIHZhciB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lO1xuICAgICAgdmFyIGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuICAgICAgdmFyIHN0cmVhbVNpbmsgPSB7XG4gICAgICAgIGVucXVldWU6IGZ1bmN0aW9uIGVucXVldWUoY2h1bmspIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgICAgICAgICB2YXIgdHJhbnNmZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBsYXN0RGVzaXJlZFNpemUgPSB0aGlzLmRlc2lyZWRTaXplO1xuICAgICAgICAgIHRoaXMuZGVzaXJlZFNpemUgLT0gc2l6ZTtcblxuICAgICAgICAgIGlmIChsYXN0RGVzaXJlZFNpemUgPiAwICYmIHRoaXMuZGVzaXJlZFNpemUgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5zaW5rQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgIHRoaXMucmVhZHkgPSB0aGlzLnNpbmtDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fcG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsXG4gICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuRU5RVUVVRSxcbiAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCxcbiAgICAgICAgICAgIGNodW5rOiBjaHVua1xuICAgICAgICAgIH0sIHRyYW5zZmVycyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lOiBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DTE9TRSxcbiAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLnN0cmVhbVNpbmtzW3N0cmVhbUlkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHJlYXNvbikge1xuICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yLCBcImVycm9yIG11c3QgaGF2ZSBhIHZhbGlkIHJlYXNvblwiKTtcblxuICAgICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsXG4gICAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLFxuICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVSUk9SLFxuICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lua0NhcGFiaWxpdHk6ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKSxcbiAgICAgICAgb25QdWxsOiBudWxsLFxuICAgICAgICBvbkNhbmNlbDogbnVsbCxcbiAgICAgICAgaXNDYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgICBkZXNpcmVkU2l6ZTogZGF0YS5kZXNpcmVkU2l6ZSxcbiAgICAgICAgcmVhZHk6IG51bGxcbiAgICAgIH07XG4gICAgICBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIHN0cmVhbVNpbmsucmVhZHkgPSBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXSA9IHN0cmVhbVNpbms7XG4gICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXNvbHZlKGFjdGlvbihkYXRhLmRhdGEsIHN0cmVhbVNpbmspKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsXG4gICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSxcbiAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsXG4gICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSxcbiAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLFxuICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5TVEFSVF9DT01QTEVURSxcbiAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsXG4gICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbilcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3Byb2Nlc3NTdHJlYW1NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzU3RyZWFtTWVzc2FnZShkYXRhKSB7XG4gICAgICB2YXIgc3RyZWFtSWQgPSBkYXRhLnN0cmVhbUlkO1xuICAgICAgdmFyIHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7XG4gICAgICB2YXIgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTtcbiAgICAgIHZhciBjb21PYmogPSB0aGlzLmNvbU9iajtcblxuICAgICAgc3dpdGNoIChkYXRhLnN0cmVhbSkge1xuICAgICAgICBjYXNlIFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEU6XG4gICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uc3RhcnRDYWxsLnJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uc3RhcnRDYWxsLnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEU6XG4gICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0ucHVsbENhbGwucmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbC5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU3RyZWFtS2luZC5QVUxMOlxuICAgICAgICAgIGlmICghdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0pIHtcbiAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLFxuICAgICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdLmRlc2lyZWRTaXplIDw9IDAgJiYgZGF0YS5kZXNpcmVkU2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXS5kZXNpcmVkU2l6ZSA9IGRhdGEuZGVzaXJlZFNpemU7XG4gICAgICAgICAgdmFyIG9uUHVsbCA9IHRoaXMuc3RyZWFtU2lua3NbZGF0YS5zdHJlYW1JZF0ub25QdWxsO1xuICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKG9uUHVsbCAmJiBvblB1bGwoKSk7XG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICBzb3VyY2VOYW1lOiBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURSxcbiAgICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICBzb3VyY2VOYW1lOiBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURSxcbiAgICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkVOUVVFVUU6XG4gICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkodGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0sIFwiZW5xdWV1ZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcblxuICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uY29udHJvbGxlci5lbnF1ZXVlKGRhdGEuY2h1bmspO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU3RyZWFtS2luZC5DTE9TRTpcbiAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSwgXCJjbG9zZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcblxuICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNvbnRyb2xsZXIuY2xvc2UoKTtcblxuICAgICAgICAgIHRoaXMuX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtSWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkVSUk9SOlxuICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLCBcImVycm9yIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyXCIpO1xuICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNvbnRyb2xsZXIuZXJyb3Iod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuXG4gICAgICAgICAgdGhpcy5fZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1JZCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFOlxuICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwucmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsLnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1JZCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFN0cmVhbUtpbmQuQ0FOQ0VMOlxuICAgICAgICAgIGlmICghdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBvbkNhbmNlbCA9IHRoaXMuc3RyZWFtU2lua3NbZGF0YS5zdHJlYW1JZF0ub25DYW5jZWw7XG4gICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUob25DYW5jZWwgJiYgb25DYW5jZWwod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpKTtcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DQU5DRUxfQ09NUExFVEUsXG4gICAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCxcbiAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkNBTkNFTF9DT01QTEVURSxcbiAgICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uc2lua0NhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgICB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXS5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBzdHJlYW0gY2FzZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9kZWxldGVTdHJlYW1Db250cm9sbGVyMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc3RyZWFtSWQpIHtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGxTZXR0bGVkKFt0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5zdGFydENhbGwsIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLnB1bGxDYWxsLCB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsXS5tYXAoZnVuY3Rpb24gKGNhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYXBhYmlsaXR5ICYmIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIF9kZWxldGVTdHJlYW1Db250cm9sbGVyKF94KSB7XG4gICAgICAgIHJldHVybiBfZGVsZXRlU3RyZWFtQ29udHJvbGxlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9kZWxldGVTdHJlYW1Db250cm9sbGVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcIl9wb3N0TWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJzKSB7XG4gICAgICBpZiAodHJhbnNmZXJzICYmIHRoaXMucG9zdE1lc3NhZ2VUcmFuc2ZlcnMpIHtcbiAgICAgICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tT2JqLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmNvbU9iai5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lc3NhZ2VIYW5kbGVyO1xufSgpO1xuXG5leHBvcnRzLk1lc3NhZ2VIYW5kbGVyID0gTWVzc2FnZUhhbmRsZXI7XG5cbi8qKiovIH0pLFxuLyogMTIyICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuTWV0YWRhdGEgPSB2b2lkIDA7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIE1ldGFkYXRhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWV0YWRhdGEoX3JlZikge1xuICAgIHZhciBwYXJzZWREYXRhID0gX3JlZi5wYXJzZWREYXRhLFxuICAgICAgICByYXdEYXRhID0gX3JlZi5yYXdEYXRhO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1ldGFkYXRhKTtcblxuICAgIHRoaXMuX21ldGFkYXRhTWFwID0gcGFyc2VkRGF0YTtcbiAgICB0aGlzLl9kYXRhID0gcmF3RGF0YTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZXRhZGF0YSwgW3tcbiAgICBrZXk6IFwiZ2V0UmF3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhdygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICAgIHZhciBfdGhpcyRfbWV0YWRhdGFNYXAkZ2U7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkX21ldGFkYXRhTWFwJGdlID0gdGhpcy5fbWV0YWRhdGFNYXAuZ2V0KG5hbWUpKSAhPT0gbnVsbCAmJiBfdGhpcyRfbWV0YWRhdGFNYXAkZ2UgIT09IHZvaWQgMCA/IF90aGlzJF9tZXRhZGF0YU1hcCRnZSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlsLm9iamVjdEZyb21NYXApKHRoaXMuX21ldGFkYXRhTWFwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFNYXAuaGFzKG5hbWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNZXRhZGF0YTtcbn0oKTtcblxuZXhwb3J0cy5NZXRhZGF0YSA9IE1ldGFkYXRhO1xuXG4vKioqLyB9KSxcbi8qIDEyMyAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLk9wdGlvbmFsQ29udGVudENvbmZpZyA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgT3B0aW9uYWxDb250ZW50R3JvdXAgPSBmdW5jdGlvbiBPcHRpb25hbENvbnRlbnRHcm91cChuYW1lLCBpbnRlbnQpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdGlvbmFsQ29udGVudEdyb3VwKTtcblxuICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmludGVudCA9IGludGVudDtcbn07XG5cbnZhciBPcHRpb25hbENvbnRlbnRDb25maWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPcHRpb25hbENvbnRlbnRDb25maWcoZGF0YSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcHRpb25hbENvbnRlbnRDb25maWcpO1xuXG4gICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICB0aGlzLmNyZWF0b3IgPSBudWxsO1xuICAgIHRoaXMuX29yZGVyID0gbnVsbDtcbiAgICB0aGlzLl9ncm91cHMgPSBuZXcgTWFwKCk7XG5cbiAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICB0aGlzLmNyZWF0b3IgPSBkYXRhLmNyZWF0b3I7XG4gICAgdGhpcy5fb3JkZXIgPSBkYXRhLm9yZGVyO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEuZ3JvdXBzKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9ncm91cCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIHRoaXMuX2dyb3Vwcy5zZXQoX2dyb3VwLmlkLCBuZXcgT3B0aW9uYWxDb250ZW50R3JvdXAoX2dyb3VwLm5hbWUsIF9ncm91cC5pbnRlbnQpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYmFzZVN0YXRlID09PSBcIk9GRlwiKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX2dyb3VwcyksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBncm91cCA9IF9zdGVwMi52YWx1ZTtcbiAgICAgICAgICBncm91cC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YS5vbiksXG4gICAgICAgIF9zdGVwMztcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgICB2YXIgb24gPSBfc3RlcDMudmFsdWU7XG4gICAgICAgIHRoaXMuX2dyb3Vwcy5nZXQob24pLnZpc2libGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjMuZigpO1xuICAgIH1cblxuICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YS5vZmYpLFxuICAgICAgICBfc3RlcDQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIG9mZiA9IF9zdGVwNC52YWx1ZTtcbiAgICAgICAgdGhpcy5fZ3JvdXBzLmdldChvZmYpLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjQuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT3B0aW9uYWxDb250ZW50Q29uZmlnLCBbe1xuICAgIGtleTogXCJfZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcGVyYXRvciA9IGFycmF5WzBdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgICAgIHZhciBzdGF0ZSA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICAgIHN0YXRlID0gdGhpcy5fZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvbihlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ncm91cHMuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgc3RhdGUgPSB0aGlzLl9ncm91cHMuZ2V0KGVsZW1lbnQpLnZpc2libGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6IFwiLmNvbmNhdChlbGVtZW50KSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgICAgICAgY2FzZSBcIkFuZFwiOlxuICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIk9yXCI6XG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcIk5vdFwiOlxuICAgICAgICAgICAgcmV0dXJuICFzdGF0ZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3BlcmF0b3IgPT09IFwiQW5kXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmlzaWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Zpc2libGUoZ3JvdXApIHtcbiAgICAgIGlmIChncm91cC50eXBlID09PSBcIk9DR1wiKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhncm91cC5pZCkpIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogXCIuY29uY2F0KGdyb3VwLmlkKSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzLmdldChncm91cC5pZCkudmlzaWJsZTtcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJPQ01EXCIpIHtcbiAgICAgICAgaWYgKGdyb3VwLmV4cHJlc3Npb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvbihncm91cC5leHByZXNzaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ3JvdXAucG9saWN5IHx8IGdyb3VwLnBvbGljeSA9PT0gXCJBbnlPblwiKSB7XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cC5pZHMpLFxuICAgICAgICAgICAgICBfc3RlcDU7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgdmFyIGlkID0gX3N0ZXA1LnZhbHVlO1xuXG4gICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogXCIuY29uY2F0KGlkKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodGhpcy5fZ3JvdXBzLmdldChpZCkudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNS5mKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGdyb3VwLnBvbGljeSA9PT0gXCJBbGxPblwiKSB7XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cC5pZHMpLFxuICAgICAgICAgICAgICBfc3RlcDY7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgdmFyIF9pZCA9IF9zdGVwNi52YWx1ZTtcblxuICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dyb3Vwcy5oYXMoX2lkKSkge1xuICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIk9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiBcIi5jb25jYXQoX2lkKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dyb3Vwcy5nZXQoX2lkKS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNi5mKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZ3JvdXAucG9saWN5ID09PSBcIkFueU9mZlwiKSB7XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjcgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cC5pZHMpLFxuICAgICAgICAgICAgICBfc3RlcDc7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgdmFyIF9pZDIgPSBfc3RlcDcudmFsdWU7XG5cbiAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKF9pZDIpKSB7XG4gICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6IFwiLmNvbmNhdChfaWQyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dyb3Vwcy5nZXQoX2lkMikudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNy5mKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGdyb3VwLnBvbGljeSA9PT0gXCJBbGxPZmZcIikge1xuICAgICAgICAgIHZhciBfaXRlcmF0b3I4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZ3JvdXAuaWRzKSxcbiAgICAgICAgICAgICAgX3N0ZXA4O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOC5zKCk7ICEoX3N0ZXA4ID0gX2l0ZXJhdG9yOC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBfaWQzID0gX3N0ZXA4LnZhbHVlO1xuXG4gICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhfaWQzKSkge1xuICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIk9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiBcIi5jb25jYXQoX2lkMykpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2dyb3Vwcy5nZXQoX2lkMykudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjguZigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5rbm93biBvcHRpb25hbCBjb250ZW50IHBvbGljeSBcIi5jb25jYXQoZ3JvdXAucG9saWN5LCBcIi5cIikpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5rbm93biBncm91cCB0eXBlIFwiLmNvbmNhdChncm91cC50eXBlLCBcIi5cIikpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZpc2liaWxpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VmlzaWJpbGl0eShpZCkge1xuICAgICAgdmFyIHZpc2libGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6IFwiLmNvbmNhdChpZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2dyb3Vwcy5nZXQoaWQpLnZpc2libGUgPSAhIXZpc2libGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE9yZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9yZGVyKCkge1xuICAgICAgaWYgKCF0aGlzLl9ncm91cHMuc2l6ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX29yZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRlci5zbGljZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9ncm91cHMua2V5cygpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0R3JvdXBzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ncm91cHMuc2l6ZSA+IDAgPyAoMCwgX3V0aWwub2JqZWN0RnJvbU1hcCkodGhpcy5fZ3JvdXBzKSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEdyb3VwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwKGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzLmdldChpZCkgfHwgbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3B0aW9uYWxDb250ZW50Q29uZmlnO1xufSgpO1xuXG5leHBvcnRzLk9wdGlvbmFsQ29udGVudENvbmZpZyA9IE9wdGlvbmFsQ29udGVudENvbmZpZztcblxuLyoqKi8gfSksXG4vKiAxMjQgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5QREZEYXRhVHJhbnNwb3J0U3RyZWFtID0gdm9pZCAwO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIFBERkRhdGFUcmFuc3BvcnRTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQREZEYXRhVHJhbnNwb3J0U3RyZWFtKHBhcmFtcywgcGRmRGF0YVJhbmdlVHJhbnNwb3J0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRhVHJhbnNwb3J0U3RyZWFtKTtcblxuICAgICgwLCBfdXRpbC5hc3NlcnQpKHBkZkRhdGFSYW5nZVRyYW5zcG9ydCwgJ1BERkRhdGFUcmFuc3BvcnRTdHJlYW0gLSBtaXNzaW5nIHJlcXVpcmVkIFwicGRmRGF0YVJhbmdlVHJhbnNwb3J0XCIgYXJndW1lbnQuJyk7XG4gICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gW107XG4gICAgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lID0gcGFyYW1zLnByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTtcbiAgICB0aGlzLl9jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IHBhcmFtcy5jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSB8fCBudWxsO1xuICAgIHZhciBpbml0aWFsRGF0YSA9IHBhcmFtcy5pbml0aWFsRGF0YTtcblxuICAgIGlmICgoaW5pdGlhbERhdGEgPT09IG51bGwgfHwgaW5pdGlhbERhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWxEYXRhLmxlbmd0aCkgPiAwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaW5pdGlhbERhdGEpLmJ1ZmZlcjtcblxuICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzLnB1c2goYnVmZmVyKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQ7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhcGFyYW1zLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFwYXJhbXMuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbnVsbDtcbiAgICB0aGlzLl9yYW5nZVJlYWRlcnMgPSBbXTtcblxuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRSYW5nZUxpc3RlbmVyKGZ1bmN0aW9uIChiZWdpbiwgY2h1bmspIHtcbiAgICAgIF90aGlzLl9vblJlY2VpdmVEYXRhKHtcbiAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICBjaHVuazogY2h1bmtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFkZFByb2dyZXNzTGlzdGVuZXIoZnVuY3Rpb24gKGxvYWRlZCwgdG90YWwpIHtcbiAgICAgIF90aGlzLl9vblByb2dyZXNzKHtcbiAgICAgICAgbG9hZGVkOiBsb2FkZWQsXG4gICAgICAgIHRvdGFsOiB0b3RhbFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIoZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICBfdGhpcy5fb25SZWNlaXZlRGF0YSh7XG4gICAgICAgIGNodW5rOiBjaHVua1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX29uUHJvZ3Jlc3NpdmVEb25lKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQudHJhbnNwb3J0UmVhZHkoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZEYXRhVHJhbnNwb3J0U3RyZWFtLCBbe1xuICAgIGtleTogXCJfb25SZWNlaXZlRGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZWNlaXZlRGF0YShhcmdzKSB7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYXJncy5jaHVuaykuYnVmZmVyO1xuXG4gICAgICBpZiAoYXJncy5iZWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikge1xuICAgICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLl9lbnF1ZXVlKGJ1ZmZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzLnB1c2goYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZvdW5kID0gdGhpcy5fcmFuZ2VSZWFkZXJzLnNvbWUoZnVuY3Rpb24gKHJhbmdlUmVhZGVyKSB7XG4gICAgICAgICAgaWYgKHJhbmdlUmVhZGVyLl9iZWdpbiAhPT0gYXJncy5iZWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJhbmdlUmVhZGVyLl9lbnF1ZXVlKGJ1ZmZlcik7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoZm91bmQsIFwiX29uUmVjZWl2ZURhdGEgLSBubyBgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyYCBpbnN0YW5jZSBmb3VuZC5cIik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wcm9ncmVzc2l2ZURhdGFMZW5ndGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRfZnVsbFJlcXVlc3RSZWEsIF90aGlzJF9mdWxsUmVxdWVzdFJlYTI7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhID0gKF90aGlzJF9mdWxsUmVxdWVzdFJlYTIgPSB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgPT09IG51bGwgfHwgX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhMi5fbG9hZGVkKSAhPT0gbnVsbCAmJiBfdGhpcyRfZnVsbFJlcXVlc3RSZWEgIT09IHZvaWQgMCA/IF90aGlzJF9mdWxsUmVxdWVzdFJlYSA6IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzKGV2dCkge1xuICAgICAgaWYgKGV2dC50b3RhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBmaXJzdFJlYWRlciA9IHRoaXMuX3JhbmdlUmVhZGVyc1swXTtcblxuICAgICAgICBpZiAoZmlyc3RSZWFkZXIgIT09IG51bGwgJiYgZmlyc3RSZWFkZXIgIT09IHZvaWQgMCAmJiBmaXJzdFJlYWRlci5vblByb2dyZXNzKSB7XG4gICAgICAgICAgZmlyc3RSZWFkZXIub25Qcm9ncmVzcyh7XG4gICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZ1bGxSZWFkZXIgPSB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcblxuICAgICAgICBpZiAoZnVsbFJlYWRlciAhPT0gbnVsbCAmJiBmdWxsUmVhZGVyICE9PSB2b2lkIDAgJiYgZnVsbFJlYWRlci5vblByb2dyZXNzKSB7XG4gICAgICAgICAgZnVsbFJlYWRlci5vblByb2dyZXNzKHtcbiAgICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZCxcbiAgICAgICAgICAgIHRvdGFsOiBldnQudG90YWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfb25Qcm9ncmVzc2l2ZURvbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUHJvZ3Jlc3NpdmVEb25lKCkge1xuICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLnByb2dyZXNzaXZlRG9uZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVtb3ZlUmFuZ2VSZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVJhbmdlUmVhZGVyKHJlYWRlcikge1xuICAgICAgdmFyIGkgPSB0aGlzLl9yYW5nZVJlYWRlcnMuaW5kZXhPZihyZWFkZXIpO1xuXG4gICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIHRoaXMuX3JhbmdlUmVhZGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZ1bGxSZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZEYXRhVHJhbnNwb3J0U3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpO1xuICAgICAgdmFyIHF1ZXVlZENodW5rcyA9IHRoaXMuX3F1ZXVlZENodW5rcztcbiAgICAgIHRoaXMuX3F1ZXVlZENodW5rcyA9IG51bGw7XG4gICAgICByZXR1cm4gbmV3IFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIodGhpcywgcXVldWVkQ2h1bmtzLCB0aGlzLl9wcm9ncmVzc2l2ZURvbmUsIHRoaXMuX2NvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UmFuZ2VSZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWFkZXIgPSBuZXcgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyKHRoaXMsIGJlZ2luLCBlbmQpO1xuXG4gICAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQucmVxdWVzdERhdGFSYW5nZShiZWdpbiwgZW5kKTtcblxuICAgICAgdGhpcy5fcmFuZ2VSZWFkZXJzLnB1c2gocmVhZGVyKTtcblxuICAgICAgcmV0dXJuIHJlYWRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsQWxsUmVxdWVzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9yYW5nZVJlYWRlcnMuc2xpY2UoMCkpLFxuICAgICAgICAgIF9zdGVwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciByZWFkZXIgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFib3J0KCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERkRhdGFUcmFuc3BvcnRTdHJlYW07XG59KCk7XG5cbmV4cG9ydHMuUERGRGF0YVRyYW5zcG9ydFN0cmVhbSA9IFBERkRhdGFUcmFuc3BvcnRTdHJlYW07XG5cbnZhciBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJlYWRlcihzdHJlYW0sIHF1ZXVlZENodW5rcykge1xuICAgIHZhciBwcm9ncmVzc2l2ZURvbmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIHZhciBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyKTtcblxuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9kb25lID0gcHJvZ3Jlc3NpdmVEb25lIHx8IGZhbHNlO1xuICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9kaXNwbGF5X3V0aWxzLmlzUGRmRmlsZSkoY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUpID8gY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUgOiBudWxsO1xuICAgIHRoaXMuX3F1ZXVlZENodW5rcyA9IHF1ZXVlZENodW5rcyB8fCBbXTtcbiAgICB0aGlzLl9sb2FkZWQgPSAwO1xuXG4gICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9xdWV1ZWRDaHVua3MpLFxuICAgICAgICBfc3RlcDI7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGNodW5rID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2hlYWRlcnNSZWFkeSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHN0cmVhbS5fZnVsbFJlcXVlc3RSZWFkZXIgPSB0aGlzO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJlYWRlciwgW3tcbiAgICBrZXk6IFwiX2VucXVldWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VucXVldWUoY2h1bmspIHtcbiAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJlcXVlc3RDYXBhYmlsaXR5ID0gdGhpcy5fcmVxdWVzdHMuc2hpZnQoKTtcblxuICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoZWFkZXJzUmVhZHlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzUmVhZHk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbGVuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmlsZW5hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzUmFuZ2VTdXBwb3J0ZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU3RyZWFtaW5nU3VwcG9ydGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29udGVudExlbmd0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0cmVhbS5fY29udGVudExlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICB2YXIgY2h1bmssIHJlcXVlc3RDYXBhYmlsaXR5O1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX3F1ZXVlZENodW5rcy5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjaHVuayA9IHRoaXMuX3F1ZXVlZENodW5rcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICByZXR1cm4gX3JlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX3JlcXVlc3RzKSxcbiAgICAgICAgICBfc3RlcDM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3RDYXBhYmlsaXR5ID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByb2dyZXNzaXZlRG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyO1xufSgpO1xuXG52YXIgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIpO1xuXG4gICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgIHRoaXMuX2JlZ2luID0gYmVnaW47XG4gICAgdGhpcy5fZW5kID0gZW5kO1xuICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlciwgW3tcbiAgICBrZXk6IFwiX2VucXVldWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VucXVldWUoY2h1bmspIHtcbiAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IGNodW5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlcXVlc3RzQ2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7XG5cbiAgICAgICAgcmVxdWVzdHNDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX3JlcXVlc3RzKSxcbiAgICAgICAgICAgIF9zdGVwNDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSBfc3RlcDQudmFsdWU7XG4gICAgICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9zdHJlYW0uX3JlbW92ZVJhbmdlUmVhZGVyKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1N0cmVhbWluZ1N1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVhZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcbiAgICAgICAgdmFyIGNodW5rLCByZXF1ZXN0Q2FwYWJpbGl0eTtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9xdWV1ZWRDaHVuaykge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVuaztcbiAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgIHJldHVybiBfcmVhZDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX3JlcXVlc3RzKSxcbiAgICAgICAgICBfc3RlcDU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3RDYXBhYmlsaXR5ID0gX3N0ZXA1LnZhbHVlO1xuICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yNS5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG5cbiAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlcjtcbn0oKTtcblxuLyoqKi8gfSksXG4vKiAxMjUgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLkFubm90YXRpb25MYXllciA9IHZvaWQgMDtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxudmFyIF9hbm5vdGF0aW9uX3N0b3JhZ2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExNik7XG5cbnZhciBfc2NyaXB0aW5nX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjYpO1xuXG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7IH1cblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyB0aHJvdyBfZTI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEFubm90YXRpb25FbGVtZW50RmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFubm90YXRpb25FbGVtZW50RmFjdG9yeSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBbm5vdGF0aW9uRWxlbWVudEZhY3RvcnksIG51bGwsIFt7XG4gICAga2V5OiBcImNyZWF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUocGFyYW1ldGVycykge1xuICAgICAgdmFyIHN1YnR5cGUgPSBwYXJhbWV0ZXJzLmRhdGEuYW5ub3RhdGlvblR5cGU7XG5cbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkxJTks6XG4gICAgICAgICAgcmV0dXJuIG5ldyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5URVhUOlxuICAgICAgICAgIHJldHVybiBuZXcgVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuV0lER0VUOlxuICAgICAgICAgIHZhciBmaWVsZFR5cGUgPSBwYXJhbWV0ZXJzLmRhdGEuZmllbGRUeXBlO1xuXG4gICAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJUeFwiOlxuICAgICAgICAgICAgICByZXR1cm4gbmV3IFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgY2FzZSBcIkJ0blwiOlxuICAgICAgICAgICAgICBpZiAocGFyYW1ldGVycy5kYXRhLnJhZGlvQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnMuZGF0YS5jaGVja0JveCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICBjYXNlIFwiQ2hcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV3IFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9QVVA6XG4gICAgICAgICAgcmV0dXJuIG5ldyBQb3B1cEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuRlJFRVRFWFQ6XG4gICAgICAgICAgcmV0dXJuIG5ldyBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuTElORTpcbiAgICAgICAgICByZXR1cm4gbmV3IExpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlNRVUFSRTpcbiAgICAgICAgICByZXR1cm4gbmV3IFNxdWFyZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuQ0lSQ0xFOlxuICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5QT0xZTElORTpcbiAgICAgICAgICByZXR1cm4gbmV3IFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5DQVJFVDpcbiAgICAgICAgICByZXR1cm4gbmV3IENhcmV0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5JTks6XG4gICAgICAgICAgcmV0dXJuIG5ldyBJbmtBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlBPTFlHT046XG4gICAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5ISUdITElHSFQ6XG4gICAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlVOREVSTElORTpcbiAgICAgICAgICByZXR1cm4gbmV3IFVuZGVybGluZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1FVSUdHTFk6XG4gICAgICAgICAgcmV0dXJuIG5ldyBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1RSSUtFT1VUOlxuICAgICAgICAgIHJldHVybiBuZXcgU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5TVEFNUDpcbiAgICAgICAgICByZXR1cm4gbmV3IFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5GSUxFQVRUQUNITUVOVDpcbiAgICAgICAgICByZXR1cm4gbmV3IEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbmV3IEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBbm5vdGF0aW9uRWxlbWVudEZhY3Rvcnk7XG59KCk7XG5cbnZhciBBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgIF9yZWYkaXNSZW5kZXJhYmxlID0gX3JlZi5pc1JlbmRlcmFibGUsXG4gICAgICAgIGlzUmVuZGVyYWJsZSA9IF9yZWYkaXNSZW5kZXJhYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNSZW5kZXJhYmxlLFxuICAgICAgICBfcmVmJGlnbm9yZUJvcmRlciA9IF9yZWYuaWdub3JlQm9yZGVyLFxuICAgICAgICBpZ25vcmVCb3JkZXIgPSBfcmVmJGlnbm9yZUJvcmRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlnbm9yZUJvcmRlcixcbiAgICAgICAgX3JlZiRjcmVhdGVRdWFkcmlsYXRlID0gX3JlZi5jcmVhdGVRdWFkcmlsYXRlcmFscyxcbiAgICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHMgPSBfcmVmJGNyZWF0ZVF1YWRyaWxhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRjcmVhdGVRdWFkcmlsYXRlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHRoaXMuaXNSZW5kZXJhYmxlID0gaXNSZW5kZXJhYmxlO1xuICAgIHRoaXMuZGF0YSA9IHBhcmFtZXRlcnMuZGF0YTtcbiAgICB0aGlzLmxheWVyID0gcGFyYW1ldGVycy5sYXllcjtcbiAgICB0aGlzLnBhZ2UgPSBwYXJhbWV0ZXJzLnBhZ2U7XG4gICAgdGhpcy52aWV3cG9ydCA9IHBhcmFtZXRlcnMudmlld3BvcnQ7XG4gICAgdGhpcy5saW5rU2VydmljZSA9IHBhcmFtZXRlcnMubGlua1NlcnZpY2U7XG4gICAgdGhpcy5kb3dubG9hZE1hbmFnZXIgPSBwYXJhbWV0ZXJzLmRvd25sb2FkTWFuYWdlcjtcbiAgICB0aGlzLmltYWdlUmVzb3VyY2VzUGF0aCA9IHBhcmFtZXRlcnMuaW1hZ2VSZXNvdXJjZXNQYXRoO1xuICAgIHRoaXMucmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9IHBhcmFtZXRlcnMucmVuZGVySW50ZXJhY3RpdmVGb3JtcztcbiAgICB0aGlzLnN2Z0ZhY3RvcnkgPSBwYXJhbWV0ZXJzLnN2Z0ZhY3Rvcnk7XG4gICAgdGhpcy5hbm5vdGF0aW9uU3RvcmFnZSA9IHBhcmFtZXRlcnMuYW5ub3RhdGlvblN0b3JhZ2U7XG4gICAgdGhpcy5lbmFibGVTY3JpcHRpbmcgPSBwYXJhbWV0ZXJzLmVuYWJsZVNjcmlwdGluZztcbiAgICB0aGlzLmhhc0pTQWN0aW9ucyA9IHBhcmFtZXRlcnMuaGFzSlNBY3Rpb25zO1xuICAgIHRoaXMuX21vdXNlU3RhdGUgPSBwYXJhbWV0ZXJzLm1vdXNlU3RhdGU7XG5cbiAgICBpZiAoaXNSZW5kZXJhYmxlKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuX2NyZWF0ZUNvbnRhaW5lcihpZ25vcmVCb3JkZXIpO1xuICAgIH1cblxuICAgIGlmIChjcmVhdGVRdWFkcmlsYXRlcmFscykge1xuICAgICAgdGhpcy5xdWFkcmlsYXRlcmFscyA9IHRoaXMuX2NyZWF0ZVF1YWRyaWxhdGVyYWxzKGlnbm9yZUJvcmRlcik7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJfY3JlYXRlQ29udGFpbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVDb250YWluZXIoKSB7XG4gICAgICB2YXIgaWdub3JlQm9yZGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhLFxuICAgICAgICAgIHBhZ2UgPSB0aGlzLnBhZ2UsXG4gICAgICAgICAgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0O1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIpO1xuICAgICAgdmFyIHdpZHRoID0gZGF0YS5yZWN0WzJdIC0gZGF0YS5yZWN0WzBdO1xuICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTtcbiAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFubm90YXRpb24taWRcIiwgZGF0YS5pZCk7XG5cbiAgICAgIHZhciByZWN0ID0gX3V0aWwuVXRpbC5ub3JtYWxpemVSZWN0KFtkYXRhLnJlY3RbMF0sIHBhZ2Uudmlld1szXSAtIGRhdGEucmVjdFsxXSArIHBhZ2Uudmlld1sxXSwgZGF0YS5yZWN0WzJdLCBwYWdlLnZpZXdbM10gLSBkYXRhLnJlY3RbM10gKyBwYWdlLnZpZXdbMV1dKTtcblxuICAgICAgY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4KFwiLmNvbmNhdCh2aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIiksIFwiKVwiKTtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBcIlwiLmNvbmNhdCgtcmVjdFswXSwgXCJweCBcIikuY29uY2F0KC1yZWN0WzFdLCBcInB4XCIpO1xuXG4gICAgICBpZiAoIWlnbm9yZUJvcmRlciAmJiBkYXRhLmJvcmRlclN0eWxlLndpZHRoID4gMCkge1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyV2lkdGggPSBcIlwiLmNvbmNhdChkYXRhLmJvcmRlclN0eWxlLndpZHRoLCBcInB4XCIpO1xuXG4gICAgICAgIGlmIChkYXRhLmJvcmRlclN0eWxlLnN0eWxlICE9PSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlVOREVSTElORSkge1xuICAgICAgICAgIHdpZHRoID0gd2lkdGggLSAyICogZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyICogZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBob3Jpem9udGFsUmFkaXVzID0gZGF0YS5ib3JkZXJTdHlsZS5ob3Jpem9udGFsQ29ybmVyUmFkaXVzO1xuICAgICAgICB2YXIgdmVydGljYWxSYWRpdXMgPSBkYXRhLmJvcmRlclN0eWxlLnZlcnRpY2FsQ29ybmVyUmFkaXVzO1xuXG4gICAgICAgIGlmIChob3Jpem9udGFsUmFkaXVzID4gMCB8fCB2ZXJ0aWNhbFJhZGl1cyA+IDApIHtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gXCJcIi5jb25jYXQoaG9yaXpvbnRhbFJhZGl1cywgXCJweCAvIFwiKS5jb25jYXQodmVydGljYWxSYWRpdXMsIFwicHhcIik7XG4gICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSkge1xuICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5TT0xJRDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJTdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLkRBU0hFRDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJTdHlsZSA9IFwiZGFzaGVkXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5CRVZFTEVEOlxuICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5pbXBsZW1lbnRlZCBib3JkZXIgc3R5bGU6IGJldmVsZWRcIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5JTlNFVDpcbiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlVuaW1wbGVtZW50ZWQgYm9yZGVyIHN0eWxlOiBpbnNldFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlVOREVSTElORTpcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJCb3R0b21TdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEuY29sb3IpIHtcbiAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihkYXRhLmNvbG9yWzBdIHwgMCwgZGF0YS5jb2xvclsxXSB8IDAsIGRhdGEuY29sb3JbMl0gfCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQocmVjdFswXSwgXCJweFwiKTtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdChyZWN0WzFdLCBcInB4XCIpO1xuICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQod2lkdGgsIFwicHhcIik7XG4gICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQoaGVpZ2h0LCBcInB4XCIpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2NyZWF0ZVF1YWRyaWxhdGVyYWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVRdWFkcmlsYXRlcmFscygpIHtcbiAgICAgIHZhciBpZ25vcmVCb3JkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIXRoaXMuZGF0YS5xdWFkUG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcXVhZHJpbGF0ZXJhbHMgPSBbXTtcbiAgICAgIHZhciBzYXZlZFJlY3QgPSB0aGlzLmRhdGEucmVjdDtcblxuICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZGF0YS5xdWFkUG9pbnRzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgcXVhZFBvaW50ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgdGhpcy5kYXRhLnJlY3QgPSBbcXVhZFBvaW50WzJdLngsIHF1YWRQb2ludFsyXS55LCBxdWFkUG9pbnRbMV0ueCwgcXVhZFBvaW50WzFdLnldO1xuICAgICAgICAgIHF1YWRyaWxhdGVyYWxzLnB1c2godGhpcy5fY3JlYXRlQ29udGFpbmVyKGlnbm9yZUJvcmRlcikpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0YS5yZWN0ID0gc2F2ZWRSZWN0O1xuICAgICAgcmV0dXJuIHF1YWRyaWxhdGVyYWxzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfY3JlYXRlUG9wdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVBvcHVwKHRyaWdnZXIsIGRhdGEpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcblxuICAgICAgaWYgKHRoaXMucXVhZHJpbGF0ZXJhbHMpIHtcbiAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgdGhpcy5xdWFkcmlsYXRlcmFscztcbiAgICAgICAgY29udGFpbmVyID0gdGhpcy5xdWFkcmlsYXRlcmFsc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0cmlnZ2VyKSB7XG4gICAgICAgIHRyaWdnZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0cmlnZ2VyLnN0eWxlLmhlaWdodCA9IGNvbnRhaW5lci5zdHlsZS5oZWlnaHQ7XG4gICAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmlnZ2VyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvcHVwRWxlbWVudCA9IG5ldyBQb3B1cEVsZW1lbnQoe1xuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgICAgY29sb3I6IGRhdGEuY29sb3IsXG4gICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICBtb2RpZmljYXRpb25EYXRlOiBkYXRhLm1vZGlmaWNhdGlvbkRhdGUsXG4gICAgICAgIGNvbnRlbnRzOiBkYXRhLmNvbnRlbnRzLFxuICAgICAgICBoaWRlV3JhcHBlcjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgcG9wdXAgPSBwb3B1cEVsZW1lbnQucmVuZGVyKCk7XG4gICAgICBwb3B1cC5zdHlsZS5sZWZ0ID0gY29udGFpbmVyLnN0eWxlLndpZHRoO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbmRlclF1YWRyaWxhdGVyYWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXJRdWFkcmlsYXRlcmFscyhjbGFzc05hbWUpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5xdWFkcmlsYXRlcmFscyksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBxdWFkcmlsYXRlcmFsID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgIHF1YWRyaWxhdGVyYWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucXVhZHJpbGF0ZXJhbHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBBbm5vdGF0aW9uRWxlbWVudC5yZW5kZXJgIGNhbGxlZFwiKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQW5ub3RhdGlvbkVsZW1lbnQ7XG59KCk7XG5cbnZhciBMaW5rQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudCkge1xuICBfaW5oZXJpdHMoTGlua0Fubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTGlua0Fubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBMaW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS51cmwgfHwgcGFyYW1ldGVycy5kYXRhLmRlc3QgfHwgcGFyYW1ldGVycy5kYXRhLmFjdGlvbiB8fCBwYXJhbWV0ZXJzLmRhdGEuaXNUb29sdGlwT25seSB8fCBwYXJhbWV0ZXJzLmRhdGEuYWN0aW9ucyAmJiAocGFyYW1ldGVycy5kYXRhLmFjdGlvbnMuQWN0aW9uIHx8IHBhcmFtZXRlcnMuZGF0YS5hY3Rpb25zW1wiTW91c2UgVXBcIl0gfHwgcGFyYW1ldGVycy5kYXRhLmFjdGlvbnNbXCJNb3VzZSBEb3duXCJdKSk7XG4gICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogaXNSZW5kZXJhYmxlLFxuICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHM6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaW5rQW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YSxcbiAgICAgICAgICBsaW5rU2VydmljZSA9IHRoaXMubGlua1NlcnZpY2U7XG4gICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXG4gICAgICBpZiAoZGF0YS51cmwpIHtcbiAgICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmFkZExpbmtBdHRyaWJ1dGVzKShsaW5rLCB7XG4gICAgICAgICAgdXJsOiBkYXRhLnVybCxcbiAgICAgICAgICB0YXJnZXQ6IGRhdGEubmV3V2luZG93ID8gX2Rpc3BsYXlfdXRpbHMuTGlua1RhcmdldC5CTEFOSyA6IGxpbmtTZXJ2aWNlLmV4dGVybmFsTGlua1RhcmdldCxcbiAgICAgICAgICByZWw6IGxpbmtTZXJ2aWNlLmV4dGVybmFsTGlua1JlbCxcbiAgICAgICAgICBlbmFibGVkOiBsaW5rU2VydmljZS5leHRlcm5hbExpbmtFbmFibGVkXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmFjdGlvbikge1xuICAgICAgICB0aGlzLl9iaW5kTmFtZWRBY3Rpb24obGluaywgZGF0YS5hY3Rpb24pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmRlc3QpIHtcbiAgICAgICAgdGhpcy5fYmluZExpbmsobGluaywgZGF0YS5kZXN0KTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5hY3Rpb25zICYmIChkYXRhLmFjdGlvbnMuQWN0aW9uIHx8IGRhdGEuYWN0aW9uc1tcIk1vdXNlIFVwXCJdIHx8IGRhdGEuYWN0aW9uc1tcIk1vdXNlIERvd25cIl0pICYmIHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuX2JpbmRKU0FjdGlvbihsaW5rLCBkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JpbmRMaW5rKGxpbmssIFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJsaW5rQW5ub3RhdGlvblwiKS5tYXAoZnVuY3Rpb24gKHF1YWRyaWxhdGVyYWwsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIGxpbmtFbGVtZW50ID0gaW5kZXggPT09IDAgPyBsaW5rIDogbGluay5jbG9uZU5vZGUoKTtcbiAgICAgICAgICBxdWFkcmlsYXRlcmFsLmFwcGVuZENoaWxkKGxpbmtFbGVtZW50KTtcbiAgICAgICAgICByZXR1cm4gcXVhZHJpbGF0ZXJhbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwibGlua0Fubm90YXRpb25cIjtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYmluZExpbmtcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRMaW5rKGxpbmssIGRlc3RpbmF0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBsaW5rLmhyZWYgPSB0aGlzLmxpbmtTZXJ2aWNlLmdldERlc3RpbmF0aW9uSGFzaChkZXN0aW5hdGlvbik7XG5cbiAgICAgIGxpbmsub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgX3RoaXMubGlua1NlcnZpY2UuZ29Ub0Rlc3RpbmF0aW9uKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChkZXN0aW5hdGlvbiB8fCBkZXN0aW5hdGlvbiA9PT0gXCJcIikge1xuICAgICAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWxMaW5rXCI7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9iaW5kTmFtZWRBY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmROYW1lZEFjdGlvbihsaW5rLCBhY3Rpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBsaW5rLmhyZWYgPSB0aGlzLmxpbmtTZXJ2aWNlLmdldEFuY2hvclVybChcIlwiKTtcblxuICAgICAgbGluay5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIubGlua1NlcnZpY2UuZXhlY3V0ZU5hbWVkQWN0aW9uKGFjdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgbGluay5jbGFzc05hbWUgPSBcImludGVybmFsTGlua1wiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYmluZEpTQWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9iaW5kSlNBY3Rpb24obGluaywgZGF0YSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuICAgICAgdmFyIG1hcCA9IG5ldyBNYXAoW1tcIkFjdGlvblwiLCBcIm9uY2xpY2tcIl0sIFtcIk1vdXNlIFVwXCIsIFwib25tb3VzZXVwXCJdLCBbXCJNb3VzZSBEb3duXCIsIFwib25tb3VzZWRvd25cIl1dKTtcblxuICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgIHZhciBuYW1lID0gX09iamVjdCRrZXlzW19pXTtcbiAgICAgICAgdmFyIGpzTmFtZSA9IG1hcC5nZXQobmFtZSk7XG5cbiAgICAgICAgaWYgKCFqc05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua1tqc05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdGhpczMkbGlua1NlcnZpY2UkZXY7XG5cbiAgICAgICAgICAoX3RoaXMzJGxpbmtTZXJ2aWNlJGV2ID0gX3RoaXMzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzKSA9PT0gbnVsbCB8fCBfdGhpczMkbGlua1NlcnZpY2UkZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzMyRsaW5rU2VydmljZSRldi5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgc291cmNlOiBfdGhpczMsXG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKGRhdGEuYWN0aW9ucyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxpbmsuY2xhc3NOYW1lID0gXCJpbnRlcm5hbExpbmtcIjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGlua0Fubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBUZXh0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDIpIHtcbiAgX2luaGVyaXRzKFRleHRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50Mik7XG5cbiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoVGV4dEFubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBUZXh0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMi5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogaXNSZW5kZXJhYmxlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV4dEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJ0ZXh0QW5ub3RhdGlvblwiO1xuICAgICAgdmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgIGltYWdlLnN0eWxlLmhlaWdodCA9IHRoaXMuY29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICAgIGltYWdlLnN0eWxlLndpZHRoID0gdGhpcy5jb250YWluZXIuc3R5bGUud2lkdGg7XG4gICAgICBpbWFnZS5zcmMgPSB0aGlzLmltYWdlUmVzb3VyY2VzUGF0aCArIFwiYW5ub3RhdGlvbi1cIiArIHRoaXMuZGF0YS5uYW1lLnRvTG93ZXJDYXNlKCkgKyBcIi5zdmdcIjtcbiAgICAgIGltYWdlLmFsdCA9IFwiW3t7dHlwZX19IEFubm90YXRpb25dXCI7XG4gICAgICBpbWFnZS5kYXRhc2V0LmwxMG5JZCA9IFwidGV4dF9hbm5vdGF0aW9uX3R5cGVcIjtcbiAgICAgIGltYWdlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHR5cGU6IHRoaXMuZGF0YS5uYW1lXG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoaW1hZ2UsIHRoaXMuZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV4dEFubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50Mykge1xuICBfaW5oZXJpdHMoV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDMpO1xuXG4gIHZhciBfc3VwZXIzID0gX2NyZWF0ZVN1cGVyKFdpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIF9zdXBlcjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnRpdGxlID0gdGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0S2V5TW9kaWZpZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEtleU1vZGlmaWVyKGV2ZW50KSB7XG4gICAgICByZXR1cm4gbmF2aWdhdG9yLnBsYXRmb3JtLmluY2x1ZGVzKFwiV2luXCIpICYmIGV2ZW50LmN0cmxLZXkgfHwgbmF2aWdhdG9yLnBsYXRmb3JtLmluY2x1ZGVzKFwiTWFjXCIpICYmIGV2ZW50Lm1ldGFLZXk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRFdmVudExpc3RlbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGJhc2VOYW1lLCBldmVudE5hbWUsIHZhbHVlR2V0dGVyKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgaWYgKGJhc2VOYW1lLmluY2x1ZGVzKFwibW91c2VcIikpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGJhc2VOYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgX3RoaXM0JGxpbmtTZXJ2aWNlJGV2O1xuXG4gICAgICAgICAgKF90aGlzNCRsaW5rU2VydmljZSRldiA9IF90aGlzNC5saW5rU2VydmljZS5ldmVudEJ1cykgPT09IG51bGwgfHwgX3RoaXM0JGxpbmtTZXJ2aWNlJGV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpczQkbGlua1NlcnZpY2UkZXYuZGlzcGF0Y2goXCJkaXNwYXRjaGV2ZW50aW5zYW5kYm94XCIsIHtcbiAgICAgICAgICAgIHNvdXJjZTogX3RoaXM0LFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgIGlkOiBfdGhpczQuZGF0YS5pZCxcbiAgICAgICAgICAgICAgbmFtZTogZXZlbnROYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVHZXR0ZXIoZXZlbnQpLFxuICAgICAgICAgICAgICBzaGlmdDogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgIG1vZGlmaWVyOiBfdGhpczQuX2dldEtleU1vZGlmaWVyKGV2ZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihiYXNlTmFtZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgdmFyIF90aGlzNCRsaW5rU2VydmljZSRldjI7XG5cbiAgICAgICAgICAoX3RoaXM0JGxpbmtTZXJ2aWNlJGV2MiA9IF90aGlzNC5saW5rU2VydmljZS5ldmVudEJ1cykgPT09IG51bGwgfHwgX3RoaXM0JGxpbmtTZXJ2aWNlJGV2MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXM0JGxpbmtTZXJ2aWNlJGV2Mi5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgc291cmNlOiBfdGhpczQsXG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgaWQ6IF90aGlzNC5kYXRhLmlkLFxuICAgICAgICAgICAgICBuYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldEV2ZW50TGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRFdmVudExpc3RlbmVycyhlbGVtZW50LCBuYW1lcywgZ2V0dGVyKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5hbWVzKSxcbiAgICAgICAgICBfc3RlcDM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIF90aGlzJGRhdGEkYWN0aW9ucztcblxuICAgICAgICAgIHZhciBfc3RlcDMkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDMudmFsdWUsIDIpLFxuICAgICAgICAgICAgICBiYXNlTmFtZSA9IF9zdGVwMyR2YWx1ZVswXSxcbiAgICAgICAgICAgICAgZXZlbnROYW1lID0gX3N0ZXAzJHZhbHVlWzFdO1xuXG4gICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gXCJBY3Rpb25cIiB8fCAoX3RoaXMkZGF0YSRhY3Rpb25zID0gdGhpcy5kYXRhLmFjdGlvbnMpICE9PSBudWxsICYmIF90aGlzJGRhdGEkYWN0aW9ucyAhPT0gdm9pZCAwICYmIF90aGlzJGRhdGEkYWN0aW9uc1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGJhc2VOYW1lLCBldmVudE5hbWUsIGdldHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2Rpc3BhdGNoRXZlbnRGcm9tU2FuZGJveFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94KGFjdGlvbnMsIGpzRXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgc2V0Q29sb3IgPSBmdW5jdGlvbiBzZXRDb2xvcihqc05hbWUsIHN0eWxlTmFtZSwgZXZlbnQpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gZXZlbnQuZGV0YWlsW2pzTmFtZV07XG4gICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZVtzdHlsZU5hbWVdID0gX3NjcmlwdGluZ191dGlscy5Db2xvckNvbnZlcnRlcnNbXCJcIi5jb25jYXQoY29sb3JbMF0sIFwiX0hUTUxcIildKGNvbG9yLnNsaWNlKDEpKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjb21tb25BY3Rpb25zID0ge1xuICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbiBkaXNwbGF5KGV2ZW50KSB7XG4gICAgICAgICAgdmFyIGhpZGRlbiA9IGV2ZW50LmRldGFpbC5kaXNwbGF5ICUgMiA9PT0gMTtcbiAgICAgICAgICBldmVudC50YXJnZXQuc3R5bGUudmlzaWJpbGl0eSA9IGhpZGRlbiA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIjtcblxuICAgICAgICAgIF90aGlzNS5hbm5vdGF0aW9uU3RvcmFnZS5zZXRWYWx1ZShfdGhpczUuZGF0YS5pZCwge1xuICAgICAgICAgICAgaGlkZGVuOiBoaWRkZW4sXG4gICAgICAgICAgICBwcmludDogZXZlbnQuZGV0YWlsLmRpc3BsYXkgPT09IDAgfHwgZXZlbnQuZGV0YWlsLmRpc3BsYXkgPT09IDNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJpbnQ6IGZ1bmN0aW9uIHByaW50KGV2ZW50KSB7XG4gICAgICAgICAgX3RoaXM1LmFubm90YXRpb25TdG9yYWdlLnNldFZhbHVlKF90aGlzNS5kYXRhLmlkLCB7XG4gICAgICAgICAgICBwcmludDogZXZlbnQuZGV0YWlsLnByaW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhpZGRlbjogZnVuY3Rpb24gaGlkZGVuKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQudGFyZ2V0LnN0eWxlLnZpc2liaWxpdHkgPSBldmVudC5kZXRhaWwuaGlkZGVuID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiO1xuXG4gICAgICAgICAgX3RoaXM1LmFubm90YXRpb25TdG9yYWdlLnNldFZhbHVlKF90aGlzNS5kYXRhLmlkLCB7XG4gICAgICAgICAgICBoaWRkZW46IGV2ZW50LmRldGFpbC5oaWRkZW5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKGV2ZW50KSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0LmZvY3VzKHtcbiAgICAgICAgICAgICAgcHJldmVudFNjcm9sbDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9LFxuICAgICAgICB1c2VyTmFtZTogZnVuY3Rpb24gdXNlck5hbWUoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC50YXJnZXQudGl0bGUgPSBldmVudC5kZXRhaWwudXNlck5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWRvbmx5OiBmdW5jdGlvbiByZWFkb25seShldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC5kZXRhaWwucmVhZG9ubHkpIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCBcIlwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWlyZWQ6IGZ1bmN0aW9uIHJlcXVpcmVkKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnNldEF0dHJpYnV0ZShcInJlcXVpcmVkXCIsIFwiXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudC50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwicmVxdWlyZWRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiZ0NvbG9yOiBmdW5jdGlvbiBiZ0NvbG9yKGV2ZW50KSB7XG4gICAgICAgICAgc2V0Q29sb3IoXCJiZ0NvbG9yXCIsIFwiYmFja2dyb3VuZENvbG9yXCIsIGV2ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZmlsbENvbG9yOiBmdW5jdGlvbiBmaWxsQ29sb3IoZXZlbnQpIHtcbiAgICAgICAgICBzZXRDb2xvcihcImZpbGxDb2xvclwiLCBcImJhY2tncm91bmRDb2xvclwiLCBldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZnQ29sb3I6IGZ1bmN0aW9uIGZnQ29sb3IoZXZlbnQpIHtcbiAgICAgICAgICBzZXRDb2xvcihcImZnQ29sb3JcIiwgXCJjb2xvclwiLCBldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRleHRDb2xvcjogZnVuY3Rpb24gdGV4dENvbG9yKGV2ZW50KSB7XG4gICAgICAgICAgc2V0Q29sb3IoXCJ0ZXh0Q29sb3JcIiwgXCJjb2xvclwiLCBldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBmdW5jdGlvbiBib3JkZXJDb2xvcihldmVudCkge1xuICAgICAgICAgIHNldENvbG9yKFwiYm9yZGVyQ29sb3JcIiwgXCJib3JkZXJDb2xvclwiLCBldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cm9rZUNvbG9yOiBmdW5jdGlvbiBzdHJva2VDb2xvcihldmVudCkge1xuICAgICAgICAgIHNldENvbG9yKFwic3Ryb2tlQ29sb3JcIiwgXCJib3JkZXJDb2xvclwiLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhqc0V2ZW50LmRldGFpbCk7IF9pMiA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgbmFtZSA9IF9PYmplY3Qka2V5czJbX2kyXTtcbiAgICAgICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNbbmFtZV0gfHwgY29tbW9uQWN0aW9uc1tuYW1lXTtcblxuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgYWN0aW9uKGpzRXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdpZGdldEFubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9XaWRnZXRBbm5vdGF0aW9uRWxlbSkge1xuICBfaW5oZXJpdHMoVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50LCBfV2lkZ2V0QW5ub3RhdGlvbkVsZW0pO1xuXG4gIHZhciBfc3VwZXI0ID0gX2NyZWF0ZVN1cGVyKFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHZhciBpc1JlbmRlcmFibGUgPSBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXMgfHwgIXBhcmFtZXRlcnMuZGF0YS5oYXNBcHBlYXJhbmNlICYmICEhcGFyYW1ldGVycy5kYXRhLmZpZWxkVmFsdWU7XG4gICAgcmV0dXJuIF9zdXBlcjQuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZVxuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgW3tcbiAgICBrZXk6IFwic2V0UHJvcGVydHlPblNpYmxpbmdzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb3BlcnR5T25TaWJsaW5ncyhiYXNlLCBrZXksIHZhbHVlLCBrZXlJblN0b3JhZ2UpIHtcbiAgICAgIHZhciBzdG9yYWdlID0gdGhpcy5hbm5vdGF0aW9uU3RvcmFnZTtcblxuICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShiYXNlLm5hbWUpKSxcbiAgICAgICAgICBfc3RlcDQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gYmFzZSkge1xuICAgICAgICAgICAgZWxlbWVudFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICBkYXRhW2tleUluU3RvcmFnZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSwgZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgc3RvcmFnZSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2U7XG4gICAgICB2YXIgaWQgPSB0aGlzLmRhdGEuaWQ7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInRleHRXaWRnZXRBbm5vdGF0aW9uXCI7XG4gICAgICB2YXIgZWxlbWVudCA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLnJlbmRlckludGVyYWN0aXZlRm9ybXMpIHtcbiAgICAgICAgdmFyIHN0b3JlZERhdGEgPSBzdG9yYWdlLmdldFZhbHVlKGlkLCB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMuZGF0YS5maWVsZFZhbHVlLFxuICAgICAgICAgIHZhbHVlQXNTdHJpbmc6IHRoaXMuZGF0YS5maWVsZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdGV4dENvbnRlbnQgPSBzdG9yZWREYXRhLnZhbHVlQXNTdHJpbmcgfHwgc3RvcmVkRGF0YS52YWx1ZSB8fCBcIlwiO1xuICAgICAgICB2YXIgZWxlbWVudERhdGEgPSB7XG4gICAgICAgICAgdXNlclZhbHVlOiBudWxsLFxuICAgICAgICAgIGZvcm1hdHRlZFZhbHVlOiBudWxsLFxuICAgICAgICAgIGJlZm9yZUlucHV0U2VsZWN0aW9uUmFuZ2U6IG51bGwsXG4gICAgICAgICAgYmVmb3JlSW5wdXRWYWx1ZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEubXVsdGlMaW5lKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICBlbGVtZW50LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHRleHRDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IHRleHRDb250ZW50O1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXM2LnNldFByb3BlcnR5T25TaWJsaW5ncyhlbGVtZW50LCBcInZhbHVlXCIsIGV2ZW50LnRhcmdldC52YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGJsdXJMaXN0ZW5lciA9IGZ1bmN0aW9uIGJsdXJMaXN0ZW5lcihldmVudCkge1xuICAgICAgICAgIGlmIChlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnQudGFyZ2V0LnNjcm9sbExlZnQgPSAwO1xuICAgICAgICAgIGVsZW1lbnREYXRhLmJlZm9yZUlucHV0U2VsZWN0aW9uUmFuZ2UgPSBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZVNjcmlwdGluZyAmJiB0aGlzLmhhc0pTQWN0aW9ucykge1xuICAgICAgICAgIHZhciBfdGhpcyRkYXRhJGFjdGlvbnMyO1xuXG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudERhdGEudXNlclZhbHVlKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGVsZW1lbnREYXRhLnVzZXJWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBmdW5jdGlvbiAoanNFdmVudCkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShldmVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50RGF0YS51c2VyVmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gZWxlbWVudERhdGEudXNlclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdmFsdWVBc1N0cmluZzogZnVuY3Rpb24gdmFsdWVBc1N0cmluZyhldmVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnREYXRhLmZvcm1hdHRlZFZhbHVlID0gZXZlbnQuZGV0YWlsLnZhbHVlQXNTdHJpbmcgfHwgXCJcIjtcblxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGVsZW1lbnREYXRhLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlOiBlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzZWxSYW5nZTogZnVuY3Rpb24gc2VsUmFuZ2UoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50JGRldGFpbCRzZWxSYW5nID0gX3NsaWNlZFRvQXJyYXkoZXZlbnQuZGV0YWlsLnNlbFJhbmdlLCAyKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsU3RhcnQgPSBfZXZlbnQkZGV0YWlsJHNlbFJhbmdbMF0sXG4gICAgICAgICAgICAgICAgICAgIHNlbEVuZCA9IF9ldmVudCRkZXRhaWwkc2VsUmFuZ1sxXTtcblxuICAgICAgICAgICAgICAgIGlmIChzZWxTdGFydCA+PSAwICYmIHNlbEVuZCA8IGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZShzZWxTdGFydCwgc2VsRW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF90aGlzNi5fZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94KGFjdGlvbnMsIGpzRXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM2JGxpbmtTZXJ2aWNlJGV2O1xuXG4gICAgICAgICAgICBlbGVtZW50RGF0YS5iZWZvcmVJbnB1dFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGNvbW1pdEtleSA9IC0xO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgICAgIGNvbW1pdEtleSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgIGNvbW1pdEtleSA9IDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJUYWJcIikge1xuICAgICAgICAgICAgICBjb21taXRLZXkgPSAzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29tbWl0S2V5ID09PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgIChfdGhpczYkbGlua1NlcnZpY2UkZXYgPSBfdGhpczYubGlua1NlcnZpY2UuZXZlbnRCdXMpID09PSBudWxsIHx8IF90aGlzNiRsaW5rU2VydmljZSRldiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXM2JGxpbmtTZXJ2aWNlJGV2LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgIHNvdXJjZTogX3RoaXM2LFxuICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIHdpbGxDb21taXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tbWl0S2V5OiBjb21taXRLZXksXG4gICAgICAgICAgICAgICAgc2VsU3RhcnQ6IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgICBzZWxFbmQ6IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIF9ibHVyTGlzdGVuZXIgPSBibHVyTGlzdGVuZXI7XG4gICAgICAgICAgYmx1ckxpc3RlbmVyID0gbnVsbDtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKF90aGlzNi5fbW91c2VTdGF0ZS5pc0Rvd24pIHtcbiAgICAgICAgICAgICAgdmFyIF90aGlzNiRsaW5rU2VydmljZSRldjI7XG5cbiAgICAgICAgICAgICAgZWxlbWVudERhdGEudXNlclZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICAoX3RoaXM2JGxpbmtTZXJ2aWNlJGV2MiA9IF90aGlzNi5saW5rU2VydmljZS5ldmVudEJ1cykgPT09IG51bGwgfHwgX3RoaXM2JGxpbmtTZXJ2aWNlJGV2MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXM2JGxpbmtTZXJ2aWNlJGV2Mi5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogX3RoaXM2LFxuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICAgICAgICB3aWxsQ29tbWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgY29tbWl0S2V5OiAxLFxuICAgICAgICAgICAgICAgICAgc2VsU3RhcnQ6IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgICAgIHNlbEVuZDogZXZlbnQudGFyZ2V0LnNlbGVjdGlvbkVuZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9ibHVyTGlzdGVuZXIoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnREYXRhLmJlZm9yZUlucHV0VmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBlbGVtZW50RGF0YS5iZWZvcmVJbnB1dFNlbGVjdGlvblJhbmdlID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPT09IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgICAgICAgZWxlbWVudERhdGEuYmVmb3JlSW5wdXRTZWxlY3Rpb25SYW5nZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZWxlbWVudERhdGEuYmVmb3JlSW5wdXRTZWxlY3Rpb25SYW5nZSA9IFtldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQsIGV2ZW50LnRhcmdldC5zZWxlY3Rpb25FbmRdO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKChfdGhpcyRkYXRhJGFjdGlvbnMyID0gdGhpcy5kYXRhLmFjdGlvbnMpICE9PSBudWxsICYmIF90aGlzJGRhdGEkYWN0aW9uczIgIT09IHZvaWQgMCAmJiBfdGhpcyRkYXRhJGFjdGlvbnMyLktleXN0cm9rZSkge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBfdGhpczYkbGlua1NlcnZpY2UkZXYzO1xuXG4gICAgICAgICAgICAgIHZhciBzZWxTdGFydCA9IC0xO1xuICAgICAgICAgICAgICB2YXIgc2VsRW5kID0gLTE7XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnREYXRhLmJlZm9yZUlucHV0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2VsZW1lbnREYXRhJGJlZm9yZUluID0gX3NsaWNlZFRvQXJyYXkoZWxlbWVudERhdGEuYmVmb3JlSW5wdXRTZWxlY3Rpb25SYW5nZSwgMik7XG5cbiAgICAgICAgICAgICAgICBzZWxTdGFydCA9IF9lbGVtZW50RGF0YSRiZWZvcmVJblswXTtcbiAgICAgICAgICAgICAgICBzZWxFbmQgPSBfZWxlbWVudERhdGEkYmVmb3JlSW5bMV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAoX3RoaXM2JGxpbmtTZXJ2aWNlJGV2MyA9IF90aGlzNi5saW5rU2VydmljZS5ldmVudEJ1cykgPT09IG51bGwgfHwgX3RoaXM2JGxpbmtTZXJ2aWNlJGV2MyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXM2JGxpbmtTZXJ2aWNlJGV2My5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogX3RoaXM2LFxuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50RGF0YS5iZWZvcmVJbnB1dFZhbHVlLFxuICAgICAgICAgICAgICAgICAgY2hhbmdlOiBldmVudC5kYXRhLFxuICAgICAgICAgICAgICAgICAgd2lsbENvbW1pdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBzZWxTdGFydDogc2VsU3RhcnQsXG4gICAgICAgICAgICAgICAgICBzZWxFbmQ6IHNlbEVuZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycyhlbGVtZW50LCBbW1wiZm9jdXNcIiwgXCJGb2N1c1wiXSwgW1wiYmx1clwiLCBcIkJsdXJcIl0sIFtcIm1vdXNlZG93blwiLCBcIk1vdXNlIERvd25cIl0sIFtcIm1vdXNlZW50ZXJcIiwgXCJNb3VzZSBFbnRlclwiXSwgW1wibW91c2VsZWF2ZVwiLCBcIk1vdXNlIEV4aXRcIl0sIFtcIm1vdXNldXBcIiwgXCJNb3VzZSBVcFwiXV0sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChibHVyTGlzdGVuZXIpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGJsdXJMaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5O1xuICAgICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEubWF4TGVuICE9PSBudWxsKSB7XG4gICAgICAgICAgZWxlbWVudC5tYXhMZW5ndGggPSB0aGlzLmRhdGEubWF4TGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5jb21iKSB7XG4gICAgICAgICAgdmFyIGZpZWxkV2lkdGggPSB0aGlzLmRhdGEucmVjdFsyXSAtIHRoaXMuZGF0YS5yZWN0WzBdO1xuICAgICAgICAgIHZhciBjb21iV2lkdGggPSBmaWVsZFdpZHRoIC8gdGhpcy5kYXRhLm1heExlbjtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb21iXCIpO1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGV0dGVyU3BhY2luZyA9IFwiY2FsYyhcIi5jb25jYXQoY29tYldpZHRoLCBcInB4IC0gMWNoKVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJ0YWJsZS1jZWxsXCI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldFRleHRTdHlsZShlbGVtZW50KTtcblxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRUZXh0U3R5bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFRleHRTdHlsZShlbGVtZW50KSB7XG4gICAgICB2YXIgVEVYVF9BTElHTk1FTlQgPSBbXCJsZWZ0XCIsIFwiY2VudGVyXCIsIFwicmlnaHRcIl07XG4gICAgICB2YXIgX3RoaXMkZGF0YSRkZWZhdWx0QXBwID0gdGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YSxcbiAgICAgICAgICBmb250U2l6ZSA9IF90aGlzJGRhdGEkZGVmYXVsdEFwcC5mb250U2l6ZSxcbiAgICAgICAgICBmb250Q29sb3IgPSBfdGhpcyRkYXRhJGRlZmF1bHRBcHAuZm9udENvbG9yO1xuICAgICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZTtcblxuICAgICAgaWYgKGZvbnRTaXplKSB7XG4gICAgICAgIHN0eWxlLmZvbnRTaXplID0gXCJcIi5jb25jYXQoZm9udFNpemUsIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLmNvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IoZm9udENvbG9yWzBdLCBmb250Q29sb3JbMV0sIGZvbnRDb2xvclsyXSk7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGV4dEFsaWdubWVudCAhPT0gbnVsbCkge1xuICAgICAgICBzdHlsZS50ZXh0QWxpZ24gPSBURVhUX0FMSUdOTUVOVFt0aGlzLmRhdGEudGV4dEFsaWdubWVudF07XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudDtcbn0oV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dpZGdldEFubm90YXRpb25FbGVtMikge1xuICBfaW5oZXJpdHMoQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgX1dpZGdldEFubm90YXRpb25FbGVtMik7XG5cbiAgdmFyIF9zdXBlcjUgPSBfY3JlYXRlU3VwZXIoQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIF9zdXBlcjUuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHBhcmFtZXRlcnMucmVuZGVySW50ZXJhY3RpdmVGb3Jtc1xuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICB2YXIgaWQgPSBkYXRhLmlkO1xuICAgICAgdmFyIHZhbHVlID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZTogZGF0YS5maWVsZFZhbHVlICYmIChkYXRhLmV4cG9ydFZhbHVlICYmIGRhdGEuZXhwb3J0VmFsdWUgPT09IGRhdGEuZmllbGRWYWx1ZSB8fCAhZGF0YS5leHBvcnRWYWx1ZSAmJiBkYXRhLmZpZWxkVmFsdWUgIT09IFwiT2ZmXCIpXG4gICAgICB9KS52YWx1ZTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSBcIk9mZlwiO1xuICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImJ1dHRvbldpZGdldEFubm90YXRpb24gY2hlY2tCb3hcIjtcbiAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IGRhdGEucmVhZE9ubHk7XG4gICAgICBlbGVtZW50LnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBldmVudC50YXJnZXQubmFtZTtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKG5hbWUpKSxcbiAgICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgY2hlY2tib3ggPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChjaGVja2JveCAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShjaGVja2JveC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtYW5ub3RhdGlvbi1pZFwiKSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5lbmFibGVTY3JpcHRpbmcgJiYgdGhpcy5oYXNKU0FjdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZnJvbXNhbmRib3hcIiwgZnVuY3Rpb24gKGpzRXZlbnQpIHtcbiAgICAgICAgICB2YXIgYWN0aW9ucyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShldmVudCkge1xuICAgICAgICAgICAgICBldmVudC50YXJnZXQuY2hlY2tlZCA9IGV2ZW50LmRldGFpbC52YWx1ZSAhPT0gXCJPZmZcIjtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXM3Ll9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQ7XG59KFdpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9XaWRnZXRBbm5vdGF0aW9uRWxlbTMpIHtcbiAgX2luaGVyaXRzKFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIF9XaWRnZXRBbm5vdGF0aW9uRWxlbTMpO1xuXG4gIHZhciBfc3VwZXI2ID0gX2NyZWF0ZVN1cGVyKFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHJldHVybiBfc3VwZXI2LmNhbGwodGhpcywgcGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXNcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiByYWRpb0J1dHRvblwiO1xuICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICB2YXIgaWQgPSBkYXRhLmlkO1xuICAgICAgdmFyIHZhbHVlID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZTogZGF0YS5maWVsZFZhbHVlID09PSBkYXRhLmJ1dHRvblZhbHVlXG4gICAgICB9KS52YWx1ZTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSBkYXRhLmJ1dHRvblZhbHVlO1xuICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBkYXRhLnJlYWRPbmx5O1xuICAgICAgZWxlbWVudC50eXBlID0gXCJyYWRpb1wiO1xuICAgICAgZWxlbWVudC5uYW1lID0gZGF0YS5maWVsZE5hbWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUodGFyZ2V0Lm5hbWUpKSxcbiAgICAgICAgICAgIF9zdGVwNjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgcmFkaW8gPSBfc3RlcDYudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChyYWRpbyAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUocmFkaW8uZ2V0QXR0cmlidXRlKFwiaWRcIiksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I2LmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICB2YWx1ZTogdGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICAgIHZhciBwZGZCdXR0b25WYWx1ZSA9IGRhdGEuYnV0dG9uVmFsdWU7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZyb21zYW5kYm94XCIsIGZ1bmN0aW9uIChqc0V2ZW50KSB7XG4gICAgICAgICAgdmFyIGFjdGlvbnMgPSB7XG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSBwZGZCdXR0b25WYWx1ZSA9PT0gZXZlbnQuZGV0YWlsLnZhbHVlO1xuXG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoZXZlbnQudGFyZ2V0Lm5hbWUpKSxcbiAgICAgICAgICAgICAgICAgIF9zdGVwNztcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmFkaW8gPSBfc3RlcDcudmFsdWU7XG4gICAgICAgICAgICAgICAgICB2YXIgcmFkaW9JZCA9IHJhZGlvLmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IHJhZGlvSWQgPT09IGlkICYmIGNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKHJhZGlvSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJhZGlvLmNoZWNrZWRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5lKGVycik7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5mKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXM4Ll9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQ7XG59KFdpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xpbmtBbm5vdGF0aW9uRWxlbWVuKSB7XG4gIF9pbmhlcml0cyhQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIF9MaW5rQW5ub3RhdGlvbkVsZW1lbik7XG5cbiAgdmFyIF9zdXBlcjcgPSBfY3JlYXRlU3VwZXIoUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgICByZXR1cm4gX3N1cGVyNy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQucHJvdG90eXBlKSwgXCJyZW5kZXJcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiBwdXNoQnV0dG9uXCI7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0KSB7XG4gICAgICAgIGNvbnRhaW5lci50aXRsZSA9IHRoaXMuZGF0YS5hbHRlcm5hdGl2ZVRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudDtcbn0oTGlua0Fubm90YXRpb25FbGVtZW50KTtcblxudmFyIENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfV2lkZ2V0QW5ub3RhdGlvbkVsZW00KSB7XG4gIF9pbmhlcml0cyhDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgX1dpZGdldEFubm90YXRpb25FbGVtNCk7XG5cbiAgdmFyIF9zdXBlcjggPSBfY3JlYXRlU3VwZXIoQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIF9zdXBlcjguY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHBhcmFtZXRlcnMucmVuZGVySW50ZXJhY3RpdmVGb3Jtc1xuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiY2hvaWNlV2lkZ2V0QW5ub3RhdGlvblwiO1xuICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgdmFyIGlkID0gdGhpcy5kYXRhLmlkO1xuICAgICAgc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZTogdGhpcy5kYXRhLmZpZWxkVmFsdWUubGVuZ3RoID4gMCA/IHRoaXMuZGF0YS5maWVsZFZhbHVlWzBdIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHZhciBzZWxlY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgIHNlbGVjdEVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmRhdGEucmVhZE9ubHk7XG4gICAgICBzZWxlY3RFbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuICAgICAgc2VsZWN0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG5cbiAgICAgIGlmICghdGhpcy5kYXRhLmNvbWJvKSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQuc2l6ZSA9IHRoaXMuZGF0YS5vcHRpb25zLmxlbmd0aDtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLm11bHRpU2VsZWN0KSB7XG4gICAgICAgICAgc2VsZWN0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjggPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmRhdGEub3B0aW9ucyksXG4gICAgICAgICAgX3N0ZXA4O1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBvcHRpb24gPSBfc3RlcDgudmFsdWU7XG4gICAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgIG9wdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb24uZGlzcGxheVZhbHVlO1xuICAgICAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBvcHRpb24uZXhwb3J0VmFsdWU7XG5cbiAgICAgICAgICBpZiAodGhpcy5kYXRhLmZpZWxkVmFsdWUuaW5jbHVkZXMob3B0aW9uLmV4cG9ydFZhbHVlKSkge1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I4LmYoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoZXZlbnQsIGlzRXhwb3J0KSB7XG4gICAgICAgIHZhciBuYW1lID0gaXNFeHBvcnQgPyBcInZhbHVlXCIgOiBcInRleHRDb250ZW50XCI7XG4gICAgICAgIHZhciBvcHRpb25zID0gZXZlbnQudGFyZ2V0Lm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFldmVudC50YXJnZXQubXVsdGlwbGUpIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWxlY3RlZEluZGV4ID09PSAtMSA/IG51bGwgOiBvcHRpb25zW29wdGlvbnMuc2VsZWN0ZWRJbmRleF1bbmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKG9wdGlvbnMsIGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uLnNlbGVjdGVkO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgIHJldHVybiBvcHRpb25bbmFtZV07XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdmFyIGdldEl0ZW1zID0gZnVuY3Rpb24gZ2V0SXRlbXMoZXZlbnQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBldmVudC50YXJnZXQub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChvcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogb3B0aW9uLnRleHRDb250ZW50LFxuICAgICAgICAgICAgZXhwb3J0VmFsdWU6IG9wdGlvbi52YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZyb21zYW5kYm94XCIsIGZ1bmN0aW9uIChqc0V2ZW50KSB7XG4gICAgICAgICAgdmFyIGFjdGlvbnMgPSB7XG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBzZWxlY3RFbGVtZW50Lm9wdGlvbnM7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZTtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBTZXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0pO1xuICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG9wdGlvbnMsIGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZXMuaGFzKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKGV2ZW50LCB0cnVlKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtdWx0aXBsZVNlbGVjdGlvbjogZnVuY3Rpb24gbXVsdGlwbGVTZWxlY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBzZWxlY3RFbGVtZW50Lm9wdGlvbnM7XG4gICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRldGFpbC5yZW1vdmU7XG4gICAgICAgICAgICAgIG9wdGlvbnNbaW5kZXhdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQucmVtb3ZlKGluZGV4KTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4LmNhbGwob3B0aW9ucywgZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgb3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZShldmVudCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgaXRlbXM6IGdldEl0ZW1zKGV2ZW50KVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoZXZlbnQpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKHNlbGVjdEVsZW1lbnQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5yZW1vdmUoMCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBfZXZlbnQkZGV0YWlsJGluc2VydCA9IGV2ZW50LmRldGFpbC5pbnNlcnQsXG4gICAgICAgICAgICAgICAgICBpbmRleCA9IF9ldmVudCRkZXRhaWwkaW5zZXJ0LmluZGV4LFxuICAgICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlID0gX2V2ZW50JGRldGFpbCRpbnNlcnQuZGlzcGxheVZhbHVlLFxuICAgICAgICAgICAgICAgICAgZXhwb3J0VmFsdWUgPSBfZXZlbnQkZGV0YWlsJGluc2VydC5leHBvcnRWYWx1ZTtcbiAgICAgICAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICBvcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICBvcHRpb25FbGVtZW50LnZhbHVlID0gZXhwb3J0VmFsdWU7XG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG9wdGlvbkVsZW1lbnQsIHNlbGVjdEVsZW1lbnQuY2hpbGRyZW5baW5kZXhdKTtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZShldmVudCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgaXRlbXM6IGdldEl0ZW1zKGV2ZW50KVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gZXZlbnQuZGV0YWlsLml0ZW1zO1xuXG4gICAgICAgICAgICAgIHdoaWxlIChzZWxlY3RFbGVtZW50Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQucmVtb3ZlKDApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjkgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpdGVtcyksXG4gICAgICAgICAgICAgICAgICBfc3RlcDk7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjkucygpOyAhKF9zdGVwOSA9IF9pdGVyYXRvcjkubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcDkudmFsdWU7XG4gICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheVZhbHVlID0gaXRlbS5kaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgZXhwb3J0VmFsdWUgPSBpdGVtLmV4cG9ydFZhbHVlO1xuICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGRpc3BsYXlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBleHBvcnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQob3B0aW9uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LmUoZXJyKTtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LmYoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChzZWxlY3RFbGVtZW50Lm9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQub3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKGV2ZW50LCB0cnVlKSxcbiAgICAgICAgICAgICAgICBpdGVtczogZ2V0SXRlbXMoZXZlbnQpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGluZGljZXMgPSBuZXcgU2V0KGV2ZW50LmRldGFpbC5pbmRpY2VzKTtcbiAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBldmVudC50YXJnZXQub3B0aW9ucztcbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChvcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uLCBpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaW5kaWNlcy5oYXMoaSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKGV2ZW50LCB0cnVlKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZGl0YWJsZTogZnVuY3Rpb24gZWRpdGFibGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmRpc2FibGVkID0gIWV2ZW50LmRldGFpbC5lZGl0YWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RoaXM5Ll9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxlY3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgX3RoaXM5JGxpbmtTZXJ2aWNlJGV2O1xuXG4gICAgICAgICAgdmFyIGV4cG9ydFZhbHVlID0gZ2V0VmFsdWUoZXZlbnQsIHRydWUpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKGV2ZW50LCBmYWxzZSk7XG4gICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgdmFsdWU6IGV4cG9ydFZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgKF90aGlzOSRsaW5rU2VydmljZSRldiA9IF90aGlzOS5saW5rU2VydmljZS5ldmVudEJ1cykgPT09IG51bGwgfHwgX3RoaXM5JGxpbmtTZXJ2aWNlJGV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpczkkbGlua1NlcnZpY2UkZXYuZGlzcGF0Y2goXCJkaXNwYXRjaGV2ZW50aW5zYW5kYm94XCIsIHtcbiAgICAgICAgICAgIHNvdXJjZTogX3RoaXM5LFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICBjaGFuZ2VFeDogZXhwb3J0VmFsdWUsXG4gICAgICAgICAgICAgIHdpbGxDb21taXQ6IHRydWUsXG4gICAgICAgICAgICAgIGNvbW1pdEtleTogMSxcbiAgICAgICAgICAgICAga2V5RG93bjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoc2VsZWN0RWxlbWVudCwgW1tcImZvY3VzXCIsIFwiRm9jdXNcIl0sIFtcImJsdXJcIiwgXCJCbHVyXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJNb3VzZSBEb3duXCJdLCBbXCJtb3VzZWVudGVyXCIsIFwiTW91c2UgRW50ZXJcIl0sIFtcIm1vdXNlbGVhdmVcIiwgXCJNb3VzZSBFeGl0XCJdLCBbXCJtb3VzZXVwXCIsIFwiTW91c2UgVXBcIl0sIFtcImlucHV0XCIsIFwiQWN0aW9uXCJdXSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZShldmVudClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdEVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudDtcbn0oV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgUG9wdXBBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50NCkge1xuICBfaW5oZXJpdHMoUG9wdXBBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50NCk7XG5cbiAgdmFyIF9zdXBlcjkgPSBfY3JlYXRlU3VwZXIoUG9wdXBBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gUG9wdXBBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHJldHVybiBfc3VwZXI5LmNhbGwodGhpcywgcGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBpc1JlbmRlcmFibGVcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3B1cEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIElHTk9SRV9UWVBFUyA9IFtcIkxpbmVcIiwgXCJTcXVhcmVcIiwgXCJDaXJjbGVcIiwgXCJQb2x5TGluZVwiLCBcIlBvbHlnb25cIiwgXCJJbmtcIl07XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInBvcHVwQW5ub3RhdGlvblwiO1xuXG4gICAgICBpZiAoSUdOT1JFX1RZUEVTLmluY2x1ZGVzKHRoaXMuZGF0YS5wYXJlbnRUeXBlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtYW5ub3RhdGlvbi1pZD1cXFwiXCIuY29uY2F0KHRoaXMuZGF0YS5wYXJlbnRJZCwgXCJcXFwiXVwiKTtcbiAgICAgIHZhciBwYXJlbnRFbGVtZW50cyA9IHRoaXMubGF5ZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgIGlmIChwYXJlbnRFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9wdXAgPSBuZXcgUG9wdXBFbGVtZW50KHtcbiAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgdHJpZ2dlcjogQXJyYXkuZnJvbShwYXJlbnRFbGVtZW50cyksXG4gICAgICAgIGNvbG9yOiB0aGlzLmRhdGEuY29sb3IsXG4gICAgICAgIHRpdGxlOiB0aGlzLmRhdGEudGl0bGUsXG4gICAgICAgIG1vZGlmaWNhdGlvbkRhdGU6IHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlLFxuICAgICAgICBjb250ZW50czogdGhpcy5kYXRhLmNvbnRlbnRzXG4gICAgICB9KTtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5wYWdlO1xuXG4gICAgICB2YXIgcmVjdCA9IF91dGlsLlV0aWwubm9ybWFsaXplUmVjdChbdGhpcy5kYXRhLnBhcmVudFJlY3RbMF0sIHBhZ2Uudmlld1szXSAtIHRoaXMuZGF0YS5wYXJlbnRSZWN0WzFdICsgcGFnZS52aWV3WzFdLCB0aGlzLmRhdGEucGFyZW50UmVjdFsyXSwgcGFnZS52aWV3WzNdIC0gdGhpcy5kYXRhLnBhcmVudFJlY3RbM10gKyBwYWdlLnZpZXdbMV1dKTtcblxuICAgICAgdmFyIHBvcHVwTGVmdCA9IHJlY3RbMF0gKyB0aGlzLmRhdGEucGFyZW50UmVjdFsyXSAtIHRoaXMuZGF0YS5wYXJlbnRSZWN0WzBdO1xuICAgICAgdmFyIHBvcHVwVG9wID0gcmVjdFsxXTtcbiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IFwiXCIuY29uY2F0KC1wb3B1cExlZnQsIFwicHggXCIpLmNvbmNhdCgtcG9wdXBUb3AsIFwicHhcIik7XG4gICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQocG9wdXBMZWZ0LCBcInB4XCIpO1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudG9wID0gXCJcIi5jb25jYXQocG9wdXBUb3AsIFwicHhcIik7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChwb3B1cC5yZW5kZXIoKSk7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFBvcHVwRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBvcHVwRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwRWxlbWVudCk7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IHBhcmFtZXRlcnMuY29udGFpbmVyO1xuICAgIHRoaXMudHJpZ2dlciA9IHBhcmFtZXRlcnMudHJpZ2dlcjtcbiAgICB0aGlzLmNvbG9yID0gcGFyYW1ldGVycy5jb2xvcjtcbiAgICB0aGlzLnRpdGxlID0gcGFyYW1ldGVycy50aXRsZTtcbiAgICB0aGlzLm1vZGlmaWNhdGlvbkRhdGUgPSBwYXJhbWV0ZXJzLm1vZGlmaWNhdGlvbkRhdGU7XG4gICAgdGhpcy5jb250ZW50cyA9IHBhcmFtZXRlcnMuY29udGVudHM7XG4gICAgdGhpcy5oaWRlV3JhcHBlciA9IHBhcmFtZXRlcnMuaGlkZVdyYXBwZXIgfHwgZmFsc2U7XG4gICAgdGhpcy5waW5uZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3B1cEVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgQkFDS0dST1VORF9FTkxJR0hUID0gMC43O1xuICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBcInBvcHVwV3JhcHBlclwiO1xuICAgICAgdGhpcy5oaWRlRWxlbWVudCA9IHRoaXMuaGlkZVdyYXBwZXIgPyB3cmFwcGVyIDogdGhpcy5jb250YWluZXI7XG4gICAgICB0aGlzLmhpZGVFbGVtZW50LmhpZGRlbiA9IHRydWU7XG4gICAgICB2YXIgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcG9wdXAuY2xhc3NOYW1lID0gXCJwb3B1cFwiO1xuICAgICAgdmFyIGNvbG9yID0gdGhpcy5jb2xvcjtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIHZhciByID0gQkFDS0dST1VORF9FTkxJR0hUICogKDI1NSAtIGNvbG9yWzBdKSArIGNvbG9yWzBdO1xuICAgICAgICB2YXIgZyA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclsxXSkgKyBjb2xvclsxXTtcbiAgICAgICAgdmFyIGIgPSBCQUNLR1JPVU5EX0VOTElHSFQgKiAoMjU1IC0gY29sb3JbMl0pICsgY29sb3JbMl07XG4gICAgICAgIHBvcHVwLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKHIgfCAwLCBnIHwgMCwgYiB8IDApO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XG4gICAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMudGl0bGU7XG4gICAgICBwb3B1cC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICAgIHZhciBkYXRlT2JqZWN0ID0gX2Rpc3BsYXlfdXRpbHMuUERGRGF0ZVN0cmluZy50b0RhdGVPYmplY3QodGhpcy5tb2RpZmljYXRpb25EYXRlKTtcblxuICAgICAgaWYgKGRhdGVPYmplY3QpIHtcbiAgICAgICAgdmFyIG1vZGlmaWNhdGlvbkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZS50ZXh0Q29udGVudCA9IFwie3tkYXRlfX0sIHt7dGltZX19XCI7XG4gICAgICAgIG1vZGlmaWNhdGlvbkRhdGUuZGF0YXNldC5sMTBuSWQgPSBcImFubm90YXRpb25fZGF0ZV9zdHJpbmdcIjtcbiAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5kYXRhc2V0LmwxMG5BcmdzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGRhdGU6IGRhdGVPYmplY3QudG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICAgICAgdGltZTogZGF0ZU9iamVjdC50b0xvY2FsZVRpbWVTdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICAgICAgcG9wdXAuYXBwZW5kQ2hpbGQobW9kaWZpY2F0aW9uRGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50cyA9IHRoaXMuX2Zvcm1hdENvbnRlbnRzKHRoaXMuY29udGVudHMpO1xuXG4gICAgICBwb3B1cC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnRyaWdnZXIpKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlciA9IFt0aGlzLnRyaWdnZXJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yMTAgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLnRyaWdnZXIpLFxuICAgICAgICAgIF9zdGVwMTA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMTAucygpOyAhKF9zdGVwMTAgPSBfaXRlcmF0b3IxMC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBfc3RlcDEwLnZhbHVlO1xuICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX3RvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5fc2hvdy5iaW5kKHRoaXMsIGZhbHNlKSk7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgdGhpcy5faGlkZS5iaW5kKHRoaXMsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxMC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxMC5mKCk7XG4gICAgICB9XG5cbiAgICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oaWRlLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChwb3B1cCk7XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2Zvcm1hdENvbnRlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JtYXRDb250ZW50cyhjb250ZW50cykge1xuICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgIHZhciBsaW5lcyA9IGNvbnRlbnRzLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICBwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxpbmUpKTtcblxuICAgICAgICBpZiAoaSA8IGlpIC0gMSkge1xuICAgICAgICAgIHAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3RvZ2dsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMucGlubmVkKSB7XG4gICAgICAgIHRoaXMuX2hpZGUodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zaG93KHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc2hvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdygpIHtcbiAgICAgIHZhciBwaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHRoaXMucGlubmVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaGlkZUVsZW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIHRoaXMuaGlkZUVsZW1lbnQuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnpJbmRleCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGlkZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGlkZSgpIHtcbiAgICAgIHZhciB1bnBpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcblxuICAgICAgaWYgKHVucGluKSB7XG4gICAgICAgIHRoaXMucGlubmVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oaWRlRWxlbWVudC5oaWRkZW4gJiYgIXRoaXMucGlubmVkKSB7XG4gICAgICAgIHRoaXMuaGlkZUVsZW1lbnQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuekluZGV4IC09IDE7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcHVwRWxlbWVudDtcbn0oKTtcblxudmFyIEZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDUpIHtcbiAgX2luaGVyaXRzKEZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDUpO1xuXG4gIHZhciBfc3VwZXIxMCA9IF9jcmVhdGVTdXBlcihGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHJldHVybiBfc3VwZXIxMC5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogaXNSZW5kZXJhYmxlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZnJlZVRleHRBbm5vdGF0aW9uXCI7XG5cbiAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKG51bGwsIHRoaXMuZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudDtcbn0oQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgTGluZUFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQ2KSB7XG4gIF9pbmhlcml0cyhMaW5lQW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDYpO1xuXG4gIHZhciBfc3VwZXIxMSA9IF9jcmVhdGVTdXBlcihMaW5lQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmVBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpO1xuICAgIHJldHVybiBfc3VwZXIxMS5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogaXNSZW5kZXJhYmxlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGluZUFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJsaW5lQW5ub3RhdGlvblwiO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICB2YXIgd2lkdGggPSBkYXRhLnJlY3RbMl0gLSBkYXRhLnJlY3RbMF07XG4gICAgICB2YXIgaGVpZ2h0ID0gZGF0YS5yZWN0WzNdIC0gZGF0YS5yZWN0WzFdO1xuICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7XG4gICAgICB2YXIgbGluZSA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmxpbmVcIik7XG4gICAgICBsaW5lLnNldEF0dHJpYnV0ZShcIngxXCIsIGRhdGEucmVjdFsyXSAtIGRhdGEubGluZUNvb3JkaW5hdGVzWzBdKTtcbiAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieTFcIiwgZGF0YS5yZWN0WzNdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMV0pO1xuICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ4MlwiLCBkYXRhLnJlY3RbMl0gLSBkYXRhLmxpbmVDb29yZGluYXRlc1syXSk7XG4gICAgICBsaW5lLnNldEF0dHJpYnV0ZShcInkyXCIsIGRhdGEucmVjdFszXSAtIGRhdGEubGluZUNvb3JkaW5hdGVzWzNdKTtcbiAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgICBsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgc3ZnLmFwcGVuZENoaWxkKGxpbmUpO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKGxpbmUsIGRhdGEpO1xuXG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpbmVBbm5vdGF0aW9uRWxlbWVudDtcbn0oQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDcpIHtcbiAgX2luaGVyaXRzKFNxdWFyZUFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQ3KTtcblxuICB2YXIgX3N1cGVyMTIgPSBfY3JlYXRlU3VwZXIoU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFNxdWFyZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMTIuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNxdWFyZUFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJzcXVhcmVBbm5vdGF0aW9uXCI7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTtcbiAgICAgIHZhciBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgICB2YXIgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHZhciBib3JkZXJXaWR0aCA9IGRhdGEuYm9yZGVyU3R5bGUud2lkdGg7XG4gICAgICB2YXIgc3F1YXJlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGJvcmRlcldpZHRoIC8gMik7XG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwieVwiLCBib3JkZXJXaWR0aCAvIDIpO1xuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoIC0gYm9yZGVyV2lkdGgpO1xuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQgLSBib3JkZXJXaWR0aCk7XG4gICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGJvcmRlcldpZHRoIHx8IDEpO1xuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgc3ZnLmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoc3F1YXJlLCBkYXRhKTtcblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcXVhcmVBbm5vdGF0aW9uRWxlbWVudDtcbn0oQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDgpIHtcbiAgX2luaGVyaXRzKENpcmNsZUFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQ4KTtcblxuICB2YXIgX3N1cGVyMTMgPSBfY3JlYXRlU3VwZXIoQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIENpcmNsZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMTMuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENpcmNsZUFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJjaXJjbGVBbm5vdGF0aW9uXCI7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTtcbiAgICAgIHZhciBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgICB2YXIgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHZhciBib3JkZXJXaWR0aCA9IGRhdGEuYm9yZGVyU3R5bGUud2lkdGg7XG4gICAgICB2YXIgY2lyY2xlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6ZWxsaXBzZVwiKTtcbiAgICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCB3aWR0aCAvIDIpO1xuICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcImN5XCIsIGhlaWdodCAvIDIpO1xuICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInJ4XCIsIHdpZHRoIC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwicnlcIiwgaGVpZ2h0IC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGJvcmRlcldpZHRoIHx8IDEpO1xuICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgc3ZnLmFwcGVuZENoaWxkKGNpcmNsZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoY2lyY2xlLCBkYXRhKTtcblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaXJjbGVBbm5vdGF0aW9uRWxlbWVudDtcbn0oQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50OSkge1xuICBfaW5oZXJpdHMoUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50OSk7XG5cbiAgdmFyIF9zdXBlcjE0ID0gX2NyZWF0ZVN1cGVyKFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIHZhciBfdGhpczEwO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBfdGhpczEwID0gX3N1cGVyMTQuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICAgIF90aGlzMTAuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJwb2x5bGluZUFubm90YXRpb25cIjtcbiAgICBfdGhpczEwLnN2Z0VsZW1lbnROYW1lID0gXCJzdmc6cG9seWxpbmVcIjtcbiAgICByZXR1cm4gX3RoaXMxMDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb2x5bGluZUFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gdGhpcy5jb250YWluZXJDbGFzc05hbWU7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTtcbiAgICAgIHZhciBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07XG4gICAgICB2YXIgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHZhciBwb2ludHMgPSBbXTtcblxuICAgICAgdmFyIF9pdGVyYXRvcjExID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YS52ZXJ0aWNlcyksXG4gICAgICAgICAgX3N0ZXAxMTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IF9zdGVwMTEudmFsdWU7XG4gICAgICAgICAgdmFyIHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICAgICAgdmFyIHkgPSBkYXRhLnJlY3RbM10gLSBjb29yZGluYXRlLnk7XG4gICAgICAgICAgcG9pbnRzLnB1c2goeCArIFwiLFwiICsgeSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxMS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxMS5mKCk7XG4gICAgICB9XG5cbiAgICAgIHBvaW50cyA9IHBvaW50cy5qb2luKFwiIFwiKTtcbiAgICAgIHZhciBwb2x5bGluZSA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KHRoaXMuc3ZnRWxlbWVudE5hbWUpO1xuICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgZGF0YS5ib3JkZXJTdHlsZS53aWR0aCB8fCAxKTtcbiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQocG9seWxpbmUpO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHBvbHlsaW5lLCBkYXRhKTtcblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb2x5bGluZUFubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Qb2x5bGluZUFubm90YXRpb25FbCkge1xuICBfaW5oZXJpdHMoUG9seWdvbkFubm90YXRpb25FbGVtZW50LCBfUG9seWxpbmVBbm5vdGF0aW9uRWwpO1xuXG4gIHZhciBfc3VwZXIxNSA9IF9jcmVhdGVTdXBlcihQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvbHlnb25Bbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgdmFyIF90aGlzMTE7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9seWdvbkFubm90YXRpb25FbGVtZW50KTtcblxuICAgIF90aGlzMTEgPSBfc3VwZXIxNS5jYWxsKHRoaXMsIHBhcmFtZXRlcnMpO1xuICAgIF90aGlzMTEuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJwb2x5Z29uQW5ub3RhdGlvblwiO1xuICAgIF90aGlzMTEuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5Z29uXCI7XG4gICAgcmV0dXJuIF90aGlzMTE7XG4gIH1cblxuICByZXR1cm4gUG9seWdvbkFubm90YXRpb25FbGVtZW50O1xufShQb2x5bGluZUFubm90YXRpb25FbGVtZW50KTtcblxudmFyIENhcmV0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDEwKSB7XG4gIF9pbmhlcml0cyhDYXJldEFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxMCk7XG5cbiAgdmFyIF9zdXBlcjE2ID0gX2NyZWF0ZVN1cGVyKENhcmV0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcmV0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJldEFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgcmV0dXJuIF9zdXBlcjE2LmNhbGwodGhpcywgcGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBpc1JlbmRlcmFibGUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDYXJldEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJjYXJldEFubm90YXRpb25cIjtcblxuICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAobnVsbCwgdGhpcy5kYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYXJldEFubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBJbmtBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MTEpIHtcbiAgX2luaGVyaXRzKElua0Fubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxMSk7XG5cbiAgdmFyIF9zdXBlcjE3ID0gX2NyZWF0ZVN1cGVyKElua0Fubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBJbmtBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7XG4gICAgdmFyIF90aGlzMTI7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5rQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICBfdGhpczEyID0gX3N1cGVyMTcuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICAgIF90aGlzMTIuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJpbmtBbm5vdGF0aW9uXCI7XG4gICAgX3RoaXMxMi5zdmdFbGVtZW50TmFtZSA9IFwic3ZnOnBvbHlsaW5lXCI7XG4gICAgcmV0dXJuIF90aGlzMTI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW5rQW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSB0aGlzLmNvbnRhaW5lckNsYXNzTmFtZTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgdmFyIHdpZHRoID0gZGF0YS5yZWN0WzJdIC0gZGF0YS5yZWN0WzBdO1xuICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTtcbiAgICAgIHZhciBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yMTIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkYXRhLmlua0xpc3RzKSxcbiAgICAgICAgICBfc3RlcDEyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjEyLnMoKTsgIShfc3RlcDEyID0gX2l0ZXJhdG9yMTIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBpbmtMaXN0ID0gX3N0ZXAxMi52YWx1ZTtcbiAgICAgICAgICB2YXIgcG9pbnRzID0gW107XG5cbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMTMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpbmtMaXN0KSxcbiAgICAgICAgICAgICAgX3N0ZXAxMztcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjEzLnMoKTsgIShfc3RlcDEzID0gX2l0ZXJhdG9yMTMubigpKS5kb25lOykge1xuICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IF9zdGVwMTMudmFsdWU7XG4gICAgICAgICAgICAgIHZhciB4ID0gY29vcmRpbmF0ZS54IC0gZGF0YS5yZWN0WzBdO1xuICAgICAgICAgICAgICB2YXIgeSA9IGRhdGEucmVjdFszXSAtIGNvb3JkaW5hdGUueTtcbiAgICAgICAgICAgICAgcG9pbnRzLnB1c2goXCJcIi5jb25jYXQoeCwgXCIsXCIpLmNvbmNhdCh5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IxMy5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjEzLmYoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwb2ludHMgPSBwb2ludHMuam9pbihcIiBcIik7XG4gICAgICAgICAgdmFyIHBvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7XG4gICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG5cbiAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChwb2x5bGluZSwgZGF0YSk7XG5cbiAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQocG9seWxpbmUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMTIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMTIuZigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW5rQW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQxMikge1xuICBfaW5oZXJpdHMoSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDEyKTtcblxuICB2YXIgX3N1cGVyMTggPSBfY3JlYXRlU3VwZXIoSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMTguY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZSxcbiAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJoaWdobGlnaHRBbm5vdGF0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImhpZ2hsaWdodEFubm90YXRpb25cIjtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFVuZGVybGluZUFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQxMykge1xuICBfaW5oZXJpdHMoVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDEzKTtcblxuICB2YXIgX3N1cGVyMTkgPSBfY3JlYXRlU3VwZXIoVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFVuZGVybGluZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMTkuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZSxcbiAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJ1bmRlcmxpbmVBbm5vdGF0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInVuZGVybGluZUFubm90YXRpb25cIjtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDE0KSB7XG4gIF9pbmhlcml0cyhTcXVpZ2dseUFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxNCk7XG5cbiAgdmFyIF9zdXBlcjIwID0gX2NyZWF0ZVN1cGVyKFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgcmV0dXJuIF9zdXBlcjIwLmNhbGwodGhpcywgcGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBpc1JlbmRlcmFibGUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWUsXG4gICAgICBjcmVhdGVRdWFkcmlsYXRlcmFsczogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJzcXVpZ2dseUFubm90YXRpb25cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwic3F1aWdnbHlBbm5vdGF0aW9uXCI7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQxNSkge1xuICBfaW5oZXJpdHMoU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDE1KTtcblxuICB2YXIgX3N1cGVyMjEgPSBfY3JlYXRlU3VwZXIoU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTtcbiAgICByZXR1cm4gX3N1cGVyMjEuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IGlzUmVuZGVyYWJsZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZSxcbiAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJzdHJpa2VvdXRBbm5vdGF0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInN0cmlrZW91dEFubm90YXRpb25cIjtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQ7XG59KEFubm90YXRpb25FbGVtZW50KTtcblxudmFyIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDE2KSB7XG4gIF9pbmhlcml0cyhTdGFtcEFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxNik7XG5cbiAgdmFyIF9zdXBlcjIyID0gX2NyZWF0ZVN1cGVyKFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGFtcEFubm90YXRpb25FbGVtZW50KTtcblxuICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7XG4gICAgcmV0dXJuIF9zdXBlcjIyLmNhbGwodGhpcywgcGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBpc1JlbmRlcmFibGUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdGFtcEFubm90YXRpb25FbGVtZW50LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJzdGFtcEFubm90YXRpb25cIjtcblxuICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAobnVsbCwgdGhpcy5kYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdGFtcEFubm90YXRpb25FbGVtZW50O1xufShBbm5vdGF0aW9uRWxlbWVudCk7XG5cbnZhciBGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQxNykge1xuICBfaW5oZXJpdHMoRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50MTcpO1xuXG4gIHZhciBfc3VwZXIyMyA9IF9jcmVhdGVTdXBlcihGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50KTtcblxuICBmdW5jdGlvbiBGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHtcbiAgICB2YXIgX3RoaXMxMyRsaW5rU2VydmljZSRlO1xuXG4gICAgdmFyIF90aGlzMTM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCk7XG5cbiAgICBfdGhpczEzID0gX3N1cGVyMjMuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICB2YXIgX3RoaXMxMyRkYXRhJGZpbGUgPSBfdGhpczEzLmRhdGEuZmlsZSxcbiAgICAgICAgZmlsZW5hbWUgPSBfdGhpczEzJGRhdGEkZmlsZS5maWxlbmFtZSxcbiAgICAgICAgY29udGVudCA9IF90aGlzMTMkZGF0YSRmaWxlLmNvbnRlbnQ7XG4gICAgX3RoaXMxMy5maWxlbmFtZSA9ICgwLCBfZGlzcGxheV91dGlscy5nZXRGaWxlbmFtZUZyb21VcmwpKGZpbGVuYW1lKTtcbiAgICBfdGhpczEzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIChfdGhpczEzJGxpbmtTZXJ2aWNlJGUgPSBfdGhpczEzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzKSA9PT0gbnVsbCB8fCBfdGhpczEzJGxpbmtTZXJ2aWNlJGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzMTMkbGlua1NlcnZpY2UkZS5kaXNwYXRjaChcImZpbGVhdHRhY2htZW50YW5ub3RhdGlvblwiLCB7XG4gICAgICBzb3VyY2U6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMxMyksXG4gICAgICBpZDogKDAsIF91dGlsLnN0cmluZ1RvUERGU3RyaW5nKShmaWxlbmFtZSksXG4gICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXG4gICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzMTM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uXCI7XG4gICAgICB2YXIgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0cmlnZ2VyLnN0eWxlLmhlaWdodCA9IHRoaXMuY29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aDtcbiAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIHRoaXMuX2Rvd25sb2FkLmJpbmQodGhpcykpO1xuXG4gICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCAmJiAodGhpcy5kYXRhLnRpdGxlIHx8IHRoaXMuZGF0YS5jb250ZW50cykpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodHJpZ2dlciwgdGhpcy5kYXRhKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlcik7XG4gICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kb3dubG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZG93bmxvYWQoKSB7XG4gICAgICB2YXIgX3RoaXMkZG93bmxvYWRNYW5hZ2VyO1xuXG4gICAgICAoX3RoaXMkZG93bmxvYWRNYW5hZ2VyID0gdGhpcy5kb3dubG9hZE1hbmFnZXIpID09PSBudWxsIHx8IF90aGlzJGRvd25sb2FkTWFuYWdlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZG93bmxvYWRNYW5hZ2VyLm9wZW5PckRvd25sb2FkRGF0YSh0aGlzLmNvbnRhaW5lciwgdGhpcy5jb250ZW50LCB0aGlzLmZpbGVuYW1lKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudDtcbn0oQW5ub3RhdGlvbkVsZW1lbnQpO1xuXG52YXIgQW5ub3RhdGlvbkxheWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5ub3RhdGlvbkxheWVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbm5vdGF0aW9uTGF5ZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFubm90YXRpb25MYXllciwgbnVsbCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihwYXJhbWV0ZXJzKSB7XG4gICAgICB2YXIgc29ydGVkQW5ub3RhdGlvbnMgPSBbXSxcbiAgICAgICAgICBwb3B1cEFubm90YXRpb25zID0gW107XG5cbiAgICAgIHZhciBfaXRlcmF0b3IxNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHBhcmFtZXRlcnMuYW5ub3RhdGlvbnMpLFxuICAgICAgICAgIF9zdGVwMTQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMTQucygpOyAhKF9zdGVwMTQgPSBfaXRlcmF0b3IxNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIF9kYXRhID0gX3N0ZXAxNC52YWx1ZTtcblxuICAgICAgICAgIGlmICghX2RhdGEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfZGF0YS5hbm5vdGF0aW9uVHlwZSA9PT0gX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9QVVApIHtcbiAgICAgICAgICAgIHBvcHVwQW5ub3RhdGlvbnMucHVzaChfZGF0YSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzb3J0ZWRBbm5vdGF0aW9ucy5wdXNoKF9kYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE0LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE0LmYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvcHVwQW5ub3RhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHNvcnRlZEFubm90YXRpb25zLnB1c2guYXBwbHkoc29ydGVkQW5ub3RhdGlvbnMsIHBvcHVwQW5ub3RhdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaTMgPSAwLCBfc29ydGVkQW5ub3RhdGlvbnMgPSBzb3J0ZWRBbm5vdGF0aW9uczsgX2kzIDwgX3NvcnRlZEFubm90YXRpb25zLmxlbmd0aDsgX2kzKyspIHtcbiAgICAgICAgdmFyIGRhdGEgPSBfc29ydGVkQW5ub3RhdGlvbnNbX2kzXTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBBbm5vdGF0aW9uRWxlbWVudEZhY3RvcnkuY3JlYXRlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGxheWVyOiBwYXJhbWV0ZXJzLmRpdixcbiAgICAgICAgICBwYWdlOiBwYXJhbWV0ZXJzLnBhZ2UsXG4gICAgICAgICAgdmlld3BvcnQ6IHBhcmFtZXRlcnMudmlld3BvcnQsXG4gICAgICAgICAgbGlua1NlcnZpY2U6IHBhcmFtZXRlcnMubGlua1NlcnZpY2UsXG4gICAgICAgICAgZG93bmxvYWRNYW5hZ2VyOiBwYXJhbWV0ZXJzLmRvd25sb2FkTWFuYWdlcixcbiAgICAgICAgICBpbWFnZVJlc291cmNlc1BhdGg6IHBhcmFtZXRlcnMuaW1hZ2VSZXNvdXJjZXNQYXRoIHx8IFwiXCIsXG4gICAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zICE9PSBmYWxzZSxcbiAgICAgICAgICBzdmdGYWN0b3J5OiBuZXcgX2Rpc3BsYXlfdXRpbHMuRE9NU1ZHRmFjdG9yeSgpLFxuICAgICAgICAgIGFubm90YXRpb25TdG9yYWdlOiBwYXJhbWV0ZXJzLmFubm90YXRpb25TdG9yYWdlIHx8IG5ldyBfYW5ub3RhdGlvbl9zdG9yYWdlLkFubm90YXRpb25TdG9yYWdlKCksXG4gICAgICAgICAgZW5hYmxlU2NyaXB0aW5nOiBwYXJhbWV0ZXJzLmVuYWJsZVNjcmlwdGluZyxcbiAgICAgICAgICBoYXNKU0FjdGlvbnM6IHBhcmFtZXRlcnMuaGFzSlNBY3Rpb25zLFxuICAgICAgICAgIG1vdXNlU3RhdGU6IHBhcmFtZXRlcnMubW91c2VTdGF0ZSB8fCB7XG4gICAgICAgICAgICBpc0Rvd246IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZWxlbWVudC5pc1JlbmRlcmFibGUpIHtcbiAgICAgICAgICB2YXIgcmVuZGVyZWQgPSBlbGVtZW50LnJlbmRlcigpO1xuXG4gICAgICAgICAgaWYgKGRhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICByZW5kZXJlZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZW5kZXJlZCkpIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3IxNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJlbmRlcmVkKSxcbiAgICAgICAgICAgICAgICBfc3RlcDE1O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE1LnMoKTsgIShfc3RlcDE1ID0gX2l0ZXJhdG9yMTUubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZEVsZW1lbnQgPSBfc3RlcDE1LnZhbHVlO1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZGl2LmFwcGVuZENoaWxkKHJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IxNS5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IxNS5mKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgUG9wdXBBbm5vdGF0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmRpdi5wcmVwZW5kKHJlbmRlcmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcmFtZXRlcnMuZGl2LmFwcGVuZENoaWxkKHJlbmRlcmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShwYXJhbWV0ZXJzKSB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gXCJtYXRyaXgoXCIuY29uY2F0KHBhcmFtZXRlcnMudmlld3BvcnQudHJhbnNmb3JtLmpvaW4oXCIsXCIpLCBcIilcIik7XG5cbiAgICAgIHZhciBfaXRlcmF0b3IxNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHBhcmFtZXRlcnMuYW5ub3RhdGlvbnMpLFxuICAgICAgICAgIF9zdGVwMTY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMTYucygpOyAhKF9zdGVwMTYgPSBfaXRlcmF0b3IxNi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBfc3RlcDE2LnZhbHVlO1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHBhcmFtZXRlcnMuZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1hbm5vdGF0aW9uLWlkPVxcXCJcIi5jb25jYXQoZGF0YS5pZCwgXCJcXFwiXVwiKSk7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3IxNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGVsZW1lbnRzKSxcbiAgICAgICAgICAgICAgICBfc3RlcDE3O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE3LnMoKTsgIShfc3RlcDE3ID0gX2l0ZXJhdG9yMTcubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3N0ZXAxNy52YWx1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjE3LmUoZXJyKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjE3LmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxNi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxNi5mKCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtZXRlcnMuZGl2LmhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBbm5vdGF0aW9uTGF5ZXI7XG59KCk7XG5cbmV4cG9ydHMuQW5ub3RhdGlvbkxheWVyID0gQW5ub3RhdGlvbkxheWVyO1xuXG4vKioqLyB9KSxcbi8qIDEyNiAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLkNvbG9yQ29udmVydGVycyA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIG1ha2VDb2xvckNvbXAobikge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBuKSkgKiAyNTUpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XG59XG5cbnZhciBDb2xvckNvbnZlcnRlcnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2xvckNvbnZlcnRlcnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9yQ29udmVydGVycyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sb3JDb252ZXJ0ZXJzLCBudWxsLCBbe1xuICAgIGtleTogXCJDTVlLX0dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ01ZS19HKF9yZWYpIHtcbiAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDQpLFxuICAgICAgICAgIGMgPSBfcmVmMlswXSxcbiAgICAgICAgICB5ID0gX3JlZjJbMV0sXG4gICAgICAgICAgbSA9IF9yZWYyWzJdLFxuICAgICAgICAgIGsgPSBfcmVmMlszXTtcblxuICAgICAgcmV0dXJuIFtcIkdcIiwgMSAtIE1hdGgubWluKDEsIDAuMyAqIGMgKyAwLjU5ICogbSArIDAuMTEgKiB5ICsgayldO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHX0NNWUtcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR19DTVlLKF9yZWYzKSB7XG4gICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMSksXG4gICAgICAgICAgZyA9IF9yZWY0WzBdO1xuXG4gICAgICByZXR1cm4gW1wiQ01ZS1wiLCAwLCAwLCAwLCAxIC0gZ107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdfUkdCXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdfUkdCKF9yZWY1KSB7XG4gICAgICB2YXIgX3JlZjYgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMSksXG4gICAgICAgICAgZyA9IF9yZWY2WzBdO1xuXG4gICAgICByZXR1cm4gW1wiUkdCXCIsIGcsIGcsIGddO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHX0hUTUxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR19IVE1MKF9yZWY3KSB7XG4gICAgICB2YXIgX3JlZjggPSBfc2xpY2VkVG9BcnJheShfcmVmNywgMSksXG4gICAgICAgICAgZyA9IF9yZWY4WzBdO1xuXG4gICAgICB2YXIgRyA9IG1ha2VDb2xvckNvbXAoZyk7XG4gICAgICByZXR1cm4gXCIjXCIuY29uY2F0KEcpLmNvbmNhdChHKS5jb25jYXQoRyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlJHQl9HXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFJHQl9HKF9yZWY5KSB7XG4gICAgICB2YXIgX3JlZjEwID0gX3NsaWNlZFRvQXJyYXkoX3JlZjksIDMpLFxuICAgICAgICAgIHIgPSBfcmVmMTBbMF0sXG4gICAgICAgICAgZyA9IF9yZWYxMFsxXSxcbiAgICAgICAgICBiID0gX3JlZjEwWzJdO1xuXG4gICAgICByZXR1cm4gW1wiR1wiLCAwLjMgKiByICsgMC41OSAqIGcgKyAwLjExICogYl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlJHQl9IVE1MXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFJHQl9IVE1MKF9yZWYxMSkge1xuICAgICAgdmFyIF9yZWYxMiA9IF9zbGljZWRUb0FycmF5KF9yZWYxMSwgMyksXG4gICAgICAgICAgciA9IF9yZWYxMlswXSxcbiAgICAgICAgICBnID0gX3JlZjEyWzFdLFxuICAgICAgICAgIGIgPSBfcmVmMTJbMl07XG5cbiAgICAgIHZhciBSID0gbWFrZUNvbG9yQ29tcChyKTtcbiAgICAgIHZhciBHID0gbWFrZUNvbG9yQ29tcChnKTtcbiAgICAgIHZhciBCID0gbWFrZUNvbG9yQ29tcChiKTtcbiAgICAgIHJldHVybiBcIiNcIi5jb25jYXQoUikuY29uY2F0KEcpLmNvbmNhdChCKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiVF9IVE1MXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRfSFRNTCgpIHtcbiAgICAgIHJldHVybiBcIiMwMDAwMDAwMFwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDTVlLX1JHQlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDTVlLX1JHQihfcmVmMTMpIHtcbiAgICAgIHZhciBfcmVmMTQgPSBfc2xpY2VkVG9BcnJheShfcmVmMTMsIDQpLFxuICAgICAgICAgIGMgPSBfcmVmMTRbMF0sXG4gICAgICAgICAgeSA9IF9yZWYxNFsxXSxcbiAgICAgICAgICBtID0gX3JlZjE0WzJdLFxuICAgICAgICAgIGsgPSBfcmVmMTRbM107XG5cbiAgICAgIHJldHVybiBbXCJSR0JcIiwgMSAtIE1hdGgubWluKDEsIGMgKyBrKSwgMSAtIE1hdGgubWluKDEsIG0gKyBrKSwgMSAtIE1hdGgubWluKDEsIHkgKyBrKV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNNWUtfSFRNTFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDTVlLX0hUTUwoY29tcG9uZW50cykge1xuICAgICAgcmV0dXJuIHRoaXMuUkdCX0hUTUwodGhpcy5DTVlLX1JHQihjb21wb25lbnRzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlJHQl9DTVlLXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFJHQl9DTVlLKF9yZWYxNSkge1xuICAgICAgdmFyIF9yZWYxNiA9IF9zbGljZWRUb0FycmF5KF9yZWYxNSwgMyksXG4gICAgICAgICAgciA9IF9yZWYxNlswXSxcbiAgICAgICAgICBnID0gX3JlZjE2WzFdLFxuICAgICAgICAgIGIgPSBfcmVmMTZbMl07XG5cbiAgICAgIHZhciBjID0gMSAtIHI7XG4gICAgICB2YXIgbSA9IDEgLSBnO1xuICAgICAgdmFyIHkgPSAxIC0gYjtcbiAgICAgIHZhciBrID0gTWF0aC5taW4oYywgbSwgeSk7XG4gICAgICByZXR1cm4gW1wiQ01ZS1wiLCBjLCBtLCB5LCBrXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sb3JDb252ZXJ0ZXJzO1xufSgpO1xuXG5leHBvcnRzLkNvbG9yQ29udmVydGVycyA9IENvbG9yQ29udmVydGVycztcblxuLyoqKi8gfSksXG4vKiAxMjcgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5yZW5kZXJUZXh0TGF5ZXIgPSByZW5kZXJUZXh0TGF5ZXI7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxudmFyIE1BWF9URVhUX0RJVlNfVE9fUkVOREVSID0gMTAwMDAwO1xudmFyIERFRkFVTFRfRk9OVF9TSVpFID0gMzA7XG52YXIgREVGQVVMVF9GT05UX0FTQ0VOVCA9IDAuODtcbnZhciBhc2NlbnRDYWNoZSA9IG5ldyBNYXAoKTtcbnZhciBBbGxXaGl0ZXNwYWNlUmVnZXhwID0gL15cXHMrJC9nO1xuXG5mdW5jdGlvbiBnZXRBc2NlbnQoZm9udEZhbWlseSwgY3R4KSB7XG4gIHZhciBjYWNoZWRBc2NlbnQgPSBhc2NlbnRDYWNoZS5nZXQoZm9udEZhbWlseSk7XG5cbiAgaWYgKGNhY2hlZEFzY2VudCkge1xuICAgIHJldHVybiBjYWNoZWRBc2NlbnQ7XG4gIH1cblxuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IFwiXCIuY29uY2F0KERFRkFVTFRfRk9OVF9TSVpFLCBcInB4IFwiKS5jb25jYXQoZm9udEZhbWlseSk7XG4gIHZhciBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KFwiXCIpO1xuICB2YXIgYXNjZW50ID0gbWV0cmljcy5mb250Qm91bmRpbmdCb3hBc2NlbnQ7XG4gIHZhciBkZXNjZW50ID0gTWF0aC5hYnMobWV0cmljcy5mb250Qm91bmRpbmdCb3hEZXNjZW50KTtcblxuICBpZiAoYXNjZW50KSB7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICB2YXIgcmF0aW8gPSBhc2NlbnQgLyAoYXNjZW50ICsgZGVzY2VudCk7XG4gICAgYXNjZW50Q2FjaGUuc2V0KGZvbnRGYW1pbHksIHJhdGlvKTtcbiAgICByZXR1cm4gcmF0aW87XG4gIH1cblxuICBjdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIERFRkFVTFRfRk9OVF9TSVpFLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gIGN0eC5zdHJva2VUZXh0KFwiZ1wiLCAwLCAwKTtcbiAgdmFyIHBpeGVscyA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgREVGQVVMVF9GT05UX1NJWkUsIERFRkFVTFRfRk9OVF9TSVpFKS5kYXRhO1xuICBkZXNjZW50ID0gMDtcblxuICBmb3IgKHZhciBpID0gcGl4ZWxzLmxlbmd0aCAtIDEgLSAzOyBpID49IDA7IGkgLT0gNCkge1xuICAgIGlmIChwaXhlbHNbaV0gPiAwKSB7XG4gICAgICBkZXNjZW50ID0gTWF0aC5jZWlsKGkgLyA0IC8gREVGQVVMVF9GT05UX1NJWkUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBERUZBVUxUX0ZPTlRfU0laRSwgREVGQVVMVF9GT05UX1NJWkUpO1xuICBjdHguc3Ryb2tlVGV4dChcIkFcIiwgMCwgREVGQVVMVF9GT05UX1NJWkUpO1xuICBwaXhlbHMgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIERFRkFVTFRfRk9OVF9TSVpFLCBERUZBVUxUX0ZPTlRfU0laRSkuZGF0YTtcbiAgYXNjZW50ID0gMDtcblxuICBmb3IgKHZhciBfaSA9IDAsIGlpID0gcGl4ZWxzLmxlbmd0aDsgX2kgPCBpaTsgX2kgKz0gNCkge1xuICAgIGlmIChwaXhlbHNbX2ldID4gMCkge1xuICAgICAgYXNjZW50ID0gREVGQVVMVF9GT05UX1NJWkUgLSBNYXRoLmZsb29yKF9pIC8gNCAvIERFRkFVTFRfRk9OVF9TSVpFKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5yZXN0b3JlKCk7XG5cbiAgaWYgKGFzY2VudCkge1xuICAgIHZhciBfcmF0aW8gPSBhc2NlbnQgLyAoYXNjZW50ICsgZGVzY2VudCk7XG5cbiAgICBhc2NlbnRDYWNoZS5zZXQoZm9udEZhbWlseSwgX3JhdGlvKTtcbiAgICByZXR1cm4gX3JhdGlvO1xuICB9XG5cbiAgYXNjZW50Q2FjaGUuc2V0KGZvbnRGYW1pbHksIERFRkFVTFRfRk9OVF9BU0NFTlQpO1xuICByZXR1cm4gREVGQVVMVF9GT05UX0FTQ0VOVDtcbn1cblxuZnVuY3Rpb24gYXBwZW5kVGV4dCh0YXNrLCBnZW9tLCBzdHlsZXMsIGN0eCkge1xuICB2YXIgdGV4dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICB2YXIgdGV4dERpdlByb3BlcnRpZXMgPSB7XG4gICAgYW5nbGU6IDAsXG4gICAgY2FudmFzV2lkdGg6IDAsXG4gICAgaGFzVGV4dDogZ2VvbS5zdHIgIT09IFwiXCIsXG4gICAgaGFzRU9MOiBnZW9tLmhhc0VPTCxcbiAgICBvcmlnaW5hbFRyYW5zZm9ybTogbnVsbCxcbiAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgIHBhZGRpbmdMZWZ0OiAwLFxuICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICBwYWRkaW5nVG9wOiAwLFxuICAgIHNjYWxlOiAxXG4gIH07XG5cbiAgdGFzay5fdGV4dERpdnMucHVzaCh0ZXh0RGl2KTtcblxuICB2YXIgdHggPSBfdXRpbC5VdGlsLnRyYW5zZm9ybSh0YXNrLl92aWV3cG9ydC50cmFuc2Zvcm0sIGdlb20udHJhbnNmb3JtKTtcblxuICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHR4WzFdLCB0eFswXSk7XG4gIHZhciBzdHlsZSA9IHN0eWxlc1tnZW9tLmZvbnROYW1lXTtcblxuICBpZiAoc3R5bGUudmVydGljYWwpIHtcbiAgICBhbmdsZSArPSBNYXRoLlBJIC8gMjtcbiAgfVxuXG4gIHZhciBmb250SGVpZ2h0ID0gTWF0aC5oeXBvdCh0eFsyXSwgdHhbM10pO1xuICB2YXIgZm9udEFzY2VudCA9IGZvbnRIZWlnaHQgKiBnZXRBc2NlbnQoc3R5bGUuZm9udEZhbWlseSwgY3R4KTtcbiAgdmFyIGxlZnQsIHRvcDtcblxuICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICBsZWZ0ID0gdHhbNF07XG4gICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSB0eFs0XSArIGZvbnRBc2NlbnQgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50ICogTWF0aC5jb3MoYW5nbGUpO1xuICB9XG5cbiAgdGV4dERpdi5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQobGVmdCwgXCJweFwiKTtcbiAgdGV4dERpdi5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIik7XG4gIHRleHREaXYuc3R5bGUuZm9udFNpemUgPSBcIlwiLmNvbmNhdChmb250SGVpZ2h0LCBcInB4XCIpO1xuICB0ZXh0RGl2LnN0eWxlLmZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xuICB0ZXh0RGl2LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJwcmVzZW50YXRpb25cIik7XG4gIHRleHREaXYudGV4dENvbnRlbnQgPSBnZW9tLnN0cjtcbiAgdGV4dERpdi5kaXIgPSBnZW9tLmRpcjtcblxuICBpZiAodGFzay5fZm9udEluc3BlY3RvckVuYWJsZWQpIHtcbiAgICB0ZXh0RGl2LmRhdGFzZXQuZm9udE5hbWUgPSBnZW9tLmZvbnROYW1lO1xuICB9XG5cbiAgaWYgKGFuZ2xlICE9PSAwKSB7XG4gICAgdGV4dERpdlByb3BlcnRpZXMuYW5nbGUgPSBhbmdsZSAqICgxODAgLyBNYXRoLlBJKTtcbiAgfVxuXG4gIHZhciBzaG91bGRTY2FsZVRleHQgPSBmYWxzZTtcblxuICBpZiAoZ2VvbS5zdHIubGVuZ3RoID4gMSB8fCB0YXNrLl9lbmhhbmNlVGV4dFNlbGVjdGlvbiAmJiBBbGxXaGl0ZXNwYWNlUmVnZXhwLnRlc3QoZ2VvbS5zdHIpKSB7XG4gICAgc2hvdWxkU2NhbGVUZXh0ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChnZW9tLnRyYW5zZm9ybVswXSAhPT0gZ2VvbS50cmFuc2Zvcm1bM10pIHtcbiAgICB2YXIgYWJzU2NhbGVYID0gTWF0aC5hYnMoZ2VvbS50cmFuc2Zvcm1bMF0pLFxuICAgICAgICBhYnNTY2FsZVkgPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVszXSk7XG5cbiAgICBpZiAoYWJzU2NhbGVYICE9PSBhYnNTY2FsZVkgJiYgTWF0aC5tYXgoYWJzU2NhbGVYLCBhYnNTY2FsZVkpIC8gTWF0aC5taW4oYWJzU2NhbGVYLCBhYnNTY2FsZVkpID4gMS41KSB7XG4gICAgICBzaG91bGRTY2FsZVRleHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzaG91bGRTY2FsZVRleHQpIHtcbiAgICBpZiAoc3R5bGUudmVydGljYWwpIHtcbiAgICAgIHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoID0gZ2VvbS5oZWlnaHQgKiB0YXNrLl92aWV3cG9ydC5zY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggPSBnZW9tLndpZHRoICogdGFzay5fdmlld3BvcnQuc2NhbGU7XG4gICAgfVxuICB9XG5cbiAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KHRleHREaXYsIHRleHREaXZQcm9wZXJ0aWVzKTtcblxuICBpZiAodGFzay5fdGV4dENvbnRlbnRTdHJlYW0pIHtcbiAgICB0YXNrLl9sYXlvdXRUZXh0KHRleHREaXYpO1xuICB9XG5cbiAgaWYgKHRhc2suX2VuaGFuY2VUZXh0U2VsZWN0aW9uICYmIHRleHREaXZQcm9wZXJ0aWVzLmhhc1RleHQpIHtcbiAgICB2YXIgYW5nbGVDb3MgPSAxLFxuICAgICAgICBhbmdsZVNpbiA9IDA7XG5cbiAgICBpZiAoYW5nbGUgIT09IDApIHtcbiAgICAgIGFuZ2xlQ29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgYW5nbGVTaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgfVxuXG4gICAgdmFyIGRpdldpZHRoID0gKHN0eWxlLnZlcnRpY2FsID8gZ2VvbS5oZWlnaHQgOiBnZW9tLndpZHRoKSAqIHRhc2suX3ZpZXdwb3J0LnNjYWxlO1xuICAgIHZhciBkaXZIZWlnaHQgPSBmb250SGVpZ2h0O1xuICAgIHZhciBtLCBiO1xuXG4gICAgaWYgKGFuZ2xlICE9PSAwKSB7XG4gICAgICBtID0gW2FuZ2xlQ29zLCBhbmdsZVNpbiwgLWFuZ2xlU2luLCBhbmdsZUNvcywgbGVmdCwgdG9wXTtcbiAgICAgIGIgPSBfdXRpbC5VdGlsLmdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KFswLCAwLCBkaXZXaWR0aCwgZGl2SGVpZ2h0XSwgbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSBbbGVmdCwgdG9wLCBsZWZ0ICsgZGl2V2lkdGgsIHRvcCArIGRpdkhlaWdodF07XG4gICAgfVxuXG4gICAgdGFzay5fYm91bmRzLnB1c2goe1xuICAgICAgbGVmdDogYlswXSxcbiAgICAgIHRvcDogYlsxXSxcbiAgICAgIHJpZ2h0OiBiWzJdLFxuICAgICAgYm90dG9tOiBiWzNdLFxuICAgICAgZGl2OiB0ZXh0RGl2LFxuICAgICAgc2l6ZTogW2RpdldpZHRoLCBkaXZIZWlnaHRdLFxuICAgICAgbTogbVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlcih0YXNrKSB7XG4gIGlmICh0YXNrLl9jYW5jZWxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0ZXh0RGl2cyA9IHRhc2suX3RleHREaXZzO1xuICB2YXIgY2FwYWJpbGl0eSA9IHRhc2suX2NhcGFiaWxpdHk7XG4gIHZhciB0ZXh0RGl2c0xlbmd0aCA9IHRleHREaXZzLmxlbmd0aDtcblxuICBpZiAodGV4dERpdnNMZW5ndGggPiBNQVhfVEVYVF9ESVZTX1RPX1JFTkRFUikge1xuICAgIHRhc2suX3JlbmRlcmluZ0RvbmUgPSB0cnVlO1xuICAgIGNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdGFzay5fdGV4dENvbnRlbnRTdHJlYW0pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHREaXZzTGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhc2suX2xheW91dFRleHQodGV4dERpdnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHRhc2suX3JlbmRlcmluZ0RvbmUgPSB0cnVlO1xuICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbn1cblxuZnVuY3Rpb24gZmluZFBvc2l0aXZlTWluKHRzLCBvZmZzZXQsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHZhciB0ID0gdHNbb2Zmc2V0KytdO1xuXG4gICAgaWYgKHQgPiAwKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPyBNYXRoLm1pbih0LCByZXN1bHQpIDogdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHBhbmQodGFzaykge1xuICB2YXIgYm91bmRzID0gdGFzay5fYm91bmRzO1xuICB2YXIgdmlld3BvcnQgPSB0YXNrLl92aWV3cG9ydDtcbiAgdmFyIGV4cGFuZGVkID0gZXhwYW5kQm91bmRzKHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQsIGJvdW5kcyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBhbmRlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaXYgPSBib3VuZHNbaV0uZGl2O1xuXG4gICAgdmFyIGRpdlByb3BlcnRpZXMgPSB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5nZXQoZGl2KTtcblxuICAgIGlmIChkaXZQcm9wZXJ0aWVzLmFuZ2xlID09PSAwKSB7XG4gICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gYm91bmRzW2ldLmxlZnQgLSBleHBhbmRlZFtpXS5sZWZ0O1xuICAgICAgZGl2UHJvcGVydGllcy5wYWRkaW5nVG9wID0gYm91bmRzW2ldLnRvcCAtIGV4cGFuZGVkW2ldLnRvcDtcbiAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ1JpZ2h0ID0gZXhwYW5kZWRbaV0ucmlnaHQgLSBib3VuZHNbaV0ucmlnaHQ7XG4gICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdCb3R0b20gPSBleHBhbmRlZFtpXS5ib3R0b20gLSBib3VuZHNbaV0uYm90dG9tO1xuXG4gICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQoZGl2LCBkaXZQcm9wZXJ0aWVzKTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGUgPSBleHBhbmRlZFtpXSxcbiAgICAgICAgYiA9IGJvdW5kc1tpXTtcbiAgICB2YXIgbSA9IGIubSxcbiAgICAgICAgYyA9IG1bMF0sXG4gICAgICAgIHMgPSBtWzFdO1xuICAgIHZhciBwb2ludHMgPSBbWzAsIDBdLCBbMCwgYi5zaXplWzFdXSwgW2Iuc2l6ZVswXSwgMF0sIGIuc2l6ZV07XG4gICAgdmFyIHRzID0gbmV3IEZsb2F0NjRBcnJheSg2NCk7XG5cbiAgICBmb3IgKHZhciBqID0gMCwgamogPSBwb2ludHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgdmFyIHQgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKHBvaW50c1tqXSwgbSk7XG5cbiAgICAgIHRzW2ogKyAwXSA9IGMgJiYgKGUubGVmdCAtIHRbMF0pIC8gYztcbiAgICAgIHRzW2ogKyA0XSA9IHMgJiYgKGUudG9wIC0gdFsxXSkgLyBzO1xuICAgICAgdHNbaiArIDhdID0gYyAmJiAoZS5yaWdodCAtIHRbMF0pIC8gYztcbiAgICAgIHRzW2ogKyAxMl0gPSBzICYmIChlLmJvdHRvbSAtIHRbMV0pIC8gcztcbiAgICAgIHRzW2ogKyAxNl0gPSBzICYmIChlLmxlZnQgLSB0WzBdKSAvIC1zO1xuICAgICAgdHNbaiArIDIwXSA9IGMgJiYgKGUudG9wIC0gdFsxXSkgLyBjO1xuICAgICAgdHNbaiArIDI0XSA9IHMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIC1zO1xuICAgICAgdHNbaiArIDI4XSA9IGMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBjO1xuICAgICAgdHNbaiArIDMyXSA9IGMgJiYgKGUubGVmdCAtIHRbMF0pIC8gLWM7XG4gICAgICB0c1tqICsgMzZdID0gcyAmJiAoZS50b3AgLSB0WzFdKSAvIC1zO1xuICAgICAgdHNbaiArIDQwXSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIC1jO1xuICAgICAgdHNbaiArIDQ0XSA9IHMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyAtcztcbiAgICAgIHRzW2ogKyA0OF0gPSBzICYmIChlLmxlZnQgLSB0WzBdKSAvIHM7XG4gICAgICB0c1tqICsgNTJdID0gYyAmJiAoZS50b3AgLSB0WzFdKSAvIC1jO1xuICAgICAgdHNbaiArIDU2XSA9IHMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIHM7XG4gICAgICB0c1tqICsgNjBdID0gYyAmJiAoZS5ib3R0b20gLSB0WzFdKSAvIC1jO1xuICAgIH1cblxuICAgIHZhciBib3hTY2FsZSA9IDEgKyBNYXRoLm1pbihNYXRoLmFicyhjKSwgTWF0aC5hYnMocykpO1xuICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ0xlZnQgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDMyLCAxNikgLyBib3hTY2FsZTtcbiAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdUb3AgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDQ4LCAxNikgLyBib3hTY2FsZTtcbiAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdSaWdodCA9IGZpbmRQb3NpdGl2ZU1pbih0cywgMCwgMTYpIC8gYm94U2NhbGU7XG4gICAgZGl2UHJvcGVydGllcy5wYWRkaW5nQm90dG9tID0gZmluZFBvc2l0aXZlTWluKHRzLCAxNiwgMTYpIC8gYm94U2NhbGU7XG5cbiAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQoZGl2LCBkaXZQcm9wZXJ0aWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHBhbmRCb3VuZHMod2lkdGgsIGhlaWdodCwgYm94ZXMpIHtcbiAgdmFyIGJvdW5kcyA9IGJveGVzLm1hcChmdW5jdGlvbiAoYm94LCBpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiBib3gubGVmdCxcbiAgICAgIHkxOiBib3gudG9wLFxuICAgICAgeDI6IGJveC5yaWdodCxcbiAgICAgIHkyOiBib3guYm90dG9tLFxuICAgICAgaW5kZXg6IGksXG4gICAgICB4MU5ldzogdW5kZWZpbmVkLFxuICAgICAgeDJOZXc6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0pO1xuICBleHBhbmRCb3VuZHNMVFIod2lkdGgsIGJvdW5kcyk7XG4gIHZhciBleHBhbmRlZCA9IG5ldyBBcnJheShib3hlcy5sZW5ndGgpO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihib3VuZHMpLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIGIgPSBfc3RlcC52YWx1ZTtcbiAgICAgIHZhciBpID0gYi5pbmRleDtcbiAgICAgIGV4cGFuZGVkW2ldID0ge1xuICAgICAgICBsZWZ0OiBiLngxTmV3LFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiBiLngyTmV3LFxuICAgICAgICBib3R0b206IDBcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICBib3hlcy5tYXAoZnVuY3Rpb24gKGJveCwgaSkge1xuICAgIHZhciBlID0gZXhwYW5kZWRbaV0sXG4gICAgICAgIGIgPSBib3VuZHNbaV07XG4gICAgYi54MSA9IGJveC50b3A7XG4gICAgYi55MSA9IHdpZHRoIC0gZS5yaWdodDtcbiAgICBiLngyID0gYm94LmJvdHRvbTtcbiAgICBiLnkyID0gd2lkdGggLSBlLmxlZnQ7XG4gICAgYi5pbmRleCA9IGk7XG4gICAgYi54MU5ldyA9IHVuZGVmaW5lZDtcbiAgICBiLngyTmV3ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgZXhwYW5kQm91bmRzTFRSKGhlaWdodCwgYm91bmRzKTtcblxuICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGJvdW5kcyksXG4gICAgICBfc3RlcDI7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgdmFyIF9iID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgdmFyIF9pMiA9IF9iLmluZGV4O1xuICAgICAgZXhwYW5kZWRbX2kyXS50b3AgPSBfYi54MU5ldztcbiAgICAgIGV4cGFuZGVkW19pMl0uYm90dG9tID0gX2IueDJOZXc7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IyLmYoKTtcbiAgfVxuXG4gIHJldHVybiBleHBhbmRlZDtcbn1cblxuZnVuY3Rpb24gZXhwYW5kQm91bmRzTFRSKHdpZHRoLCBib3VuZHMpIHtcbiAgYm91bmRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS54MSAtIGIueDEgfHwgYS5pbmRleCAtIGIuaW5kZXg7XG4gIH0pO1xuICB2YXIgZmFrZUJvdW5kYXJ5ID0ge1xuICAgIHgxOiAtSW5maW5pdHksXG4gICAgeTE6IC1JbmZpbml0eSxcbiAgICB4MjogMCxcbiAgICB5MjogSW5maW5pdHksXG4gICAgaW5kZXg6IC0xLFxuICAgIHgxTmV3OiAwLFxuICAgIHgyTmV3OiAwXG4gIH07XG4gIHZhciBob3Jpem9uID0gW3tcbiAgICBzdGFydDogLUluZmluaXR5LFxuICAgIGVuZDogSW5maW5pdHksXG4gICAgYm91bmRhcnk6IGZha2VCb3VuZGFyeVxuICB9XTtcblxuICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGJvdW5kcyksXG4gICAgICBfc3RlcDM7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgdmFyIGJvdW5kYXJ5ID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IGhvcml6b24ubGVuZ3RoICYmIGhvcml6b25baV0uZW5kIDw9IGJvdW5kYXJ5LnkxKSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cblxuICAgICAgdmFyIGogPSBob3Jpem9uLmxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChqID49IDAgJiYgaG9yaXpvbltqXS5zdGFydCA+PSBib3VuZGFyeS55Mikge1xuICAgICAgICBqLS07XG4gICAgICB9XG5cbiAgICAgIHZhciBfaG9yaXpvblBhcnQgPSB2b2lkIDAsXG4gICAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkgPSB2b2lkIDA7XG5cbiAgICAgIHZhciBxID0gdm9pZCAwLFxuICAgICAgICAgIGsgPSB2b2lkIDAsXG4gICAgICAgICAgbWF4WE5ldyA9IC1JbmZpbml0eTtcblxuICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHtcbiAgICAgICAgX2hvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkgPSBfaG9yaXpvblBhcnQuYm91bmRhcnk7XG4gICAgICAgIHZhciB4TmV3ID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChfYWZmZWN0ZWRCb3VuZGFyeS54MiA+IGJvdW5kYXJ5LngxKSB7XG4gICAgICAgICAgeE5ldyA9IF9hZmZlY3RlZEJvdW5kYXJ5LmluZGV4ID4gYm91bmRhcnkuaW5kZXggPyBfYWZmZWN0ZWRCb3VuZGFyeS54MU5ldyA6IGJvdW5kYXJ5LngxO1xuICAgICAgICB9IGVsc2UgaWYgKF9hZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB4TmV3ID0gKF9hZmZlY3RlZEJvdW5kYXJ5LngyICsgYm91bmRhcnkueDEpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4TmV3ID0gX2FmZmVjdGVkQm91bmRhcnkueDJOZXc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeE5ldyA+IG1heFhOZXcpIHtcbiAgICAgICAgICBtYXhYTmV3ID0geE5ldztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBib3VuZGFyeS54MU5ldyA9IG1heFhOZXc7XG5cbiAgICAgIGZvciAocSA9IGk7IHEgPD0gajsgcSsrKSB7XG4gICAgICAgIF9ob3Jpem9uUGFydCA9IGhvcml6b25bcV07XG4gICAgICAgIF9hZmZlY3RlZEJvdW5kYXJ5ID0gX2hvcml6b25QYXJ0LmJvdW5kYXJ5O1xuXG4gICAgICAgIGlmIChfYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKF9hZmZlY3RlZEJvdW5kYXJ5LngyID4gYm91bmRhcnkueDEpIHtcbiAgICAgICAgICAgIGlmIChfYWZmZWN0ZWRCb3VuZGFyeS5pbmRleCA+IGJvdW5kYXJ5LmluZGV4KSB7XG4gICAgICAgICAgICAgIF9hZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gX2FmZmVjdGVkQm91bmRhcnkueDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9hZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gbWF4WE5ldztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX2FmZmVjdGVkQm91bmRhcnkueDJOZXcgPiBtYXhYTmV3KSB7XG4gICAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkueDJOZXcgPSBNYXRoLm1heChtYXhYTmV3LCBfYWZmZWN0ZWRCb3VuZGFyeS54Mik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZWRIb3Jpem9uID0gW107XG4gICAgICB2YXIgbGFzdEJvdW5kYXJ5ID0gbnVsbDtcblxuICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHtcbiAgICAgICAgX2hvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkgPSBfaG9yaXpvblBhcnQuYm91bmRhcnk7XG4gICAgICAgIHZhciB1c2VCb3VuZGFyeSA9IF9hZmZlY3RlZEJvdW5kYXJ5LngyID4gYm91bmRhcnkueDIgPyBfYWZmZWN0ZWRCb3VuZGFyeSA6IGJvdW5kYXJ5O1xuXG4gICAgICAgIGlmIChsYXN0Qm91bmRhcnkgPT09IHVzZUJvdW5kYXJ5KSB7XG4gICAgICAgICAgY2hhbmdlZEhvcml6b25bY2hhbmdlZEhvcml6b24ubGVuZ3RoIC0gMV0uZW5kID0gX2hvcml6b25QYXJ0LmVuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkSG9yaXpvbi5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBfaG9yaXpvblBhcnQuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IF9ob3Jpem9uUGFydC5lbmQsXG4gICAgICAgICAgICBib3VuZGFyeTogdXNlQm91bmRhcnlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsYXN0Qm91bmRhcnkgPSB1c2VCb3VuZGFyeTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaG9yaXpvbltpXS5zdGFydCA8IGJvdW5kYXJ5LnkxKSB7XG4gICAgICAgIGNoYW5nZWRIb3Jpem9uWzBdLnN0YXJ0ID0gYm91bmRhcnkueTE7XG4gICAgICAgIGNoYW5nZWRIb3Jpem9uLnVuc2hpZnQoe1xuICAgICAgICAgIHN0YXJ0OiBob3Jpem9uW2ldLnN0YXJ0LFxuICAgICAgICAgIGVuZDogYm91bmRhcnkueTEsXG4gICAgICAgICAgYm91bmRhcnk6IGhvcml6b25baV0uYm91bmRhcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChib3VuZGFyeS55MiA8IGhvcml6b25bal0uZW5kKSB7XG4gICAgICAgIGNoYW5nZWRIb3Jpem9uW2NoYW5nZWRIb3Jpem9uLmxlbmd0aCAtIDFdLmVuZCA9IGJvdW5kYXJ5LnkyO1xuICAgICAgICBjaGFuZ2VkSG9yaXpvbi5wdXNoKHtcbiAgICAgICAgICBzdGFydDogYm91bmRhcnkueTIsXG4gICAgICAgICAgZW5kOiBob3Jpem9uW2pdLmVuZCxcbiAgICAgICAgICBib3VuZGFyeTogaG9yaXpvbltqXS5ib3VuZGFyeVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHtcbiAgICAgICAgX2hvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkgPSBfaG9yaXpvblBhcnQuYm91bmRhcnk7XG5cbiAgICAgICAgaWYgKF9hZmZlY3RlZEJvdW5kYXJ5LngyTmV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChrID0gaSAtIDE7ICF1c2VkICYmIGsgPj0gMCAmJiBob3Jpem9uW2tdLnN0YXJ0ID49IF9hZmZlY3RlZEJvdW5kYXJ5LnkxOyBrLS0pIHtcbiAgICAgICAgICB1c2VkID0gaG9yaXpvbltrXS5ib3VuZGFyeSA9PT0gX2FmZmVjdGVkQm91bmRhcnk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGsgPSBqICsgMTsgIXVzZWQgJiYgayA8IGhvcml6b24ubGVuZ3RoICYmIGhvcml6b25ba10uZW5kIDw9IF9hZmZlY3RlZEJvdW5kYXJ5LnkyOyBrKyspIHtcbiAgICAgICAgICB1c2VkID0gaG9yaXpvbltrXS5ib3VuZGFyeSA9PT0gX2FmZmVjdGVkQm91bmRhcnk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGsgPSAwOyAhdXNlZCAmJiBrIDwgY2hhbmdlZEhvcml6b24ubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICB1c2VkID0gY2hhbmdlZEhvcml6b25ba10uYm91bmRhcnkgPT09IF9hZmZlY3RlZEJvdW5kYXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1c2VkKSB7XG4gICAgICAgICAgX2FmZmVjdGVkQm91bmRhcnkueDJOZXcgPSBtYXhYTmV3O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoaG9yaXpvbiwgW2ksIGogLSBpICsgMV0uY29uY2F0KGNoYW5nZWRIb3Jpem9uKSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IzLmYoKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMyA9IDAsIF9ob3Jpem9uID0gaG9yaXpvbjsgX2kzIDwgX2hvcml6b24ubGVuZ3RoOyBfaTMrKykge1xuICAgIHZhciBob3Jpem9uUGFydCA9IF9ob3Jpem9uW19pM107XG4gICAgdmFyIGFmZmVjdGVkQm91bmRhcnkgPSBob3Jpem9uUGFydC5ib3VuZGFyeTtcblxuICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFmZmVjdGVkQm91bmRhcnkueDJOZXcgPSBNYXRoLm1heCh3aWR0aCwgYWZmZWN0ZWRCb3VuZGFyeS54Mik7XG4gICAgfVxuICB9XG59XG5cbnZhciBUZXh0TGF5ZXJSZW5kZXJUYXNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGV4dExheWVyUmVuZGVyVGFzayhfcmVmKSB7XG4gICAgdmFyIF9nbG9iYWxUaGlzJEZvbnRJbnNwZSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRleHRDb250ZW50ID0gX3JlZi50ZXh0Q29udGVudCxcbiAgICAgICAgdGV4dENvbnRlbnRTdHJlYW0gPSBfcmVmLnRleHRDb250ZW50U3RyZWFtLFxuICAgICAgICBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgICB0ZXh0RGl2cyA9IF9yZWYudGV4dERpdnMsXG4gICAgICAgIHRleHRDb250ZW50SXRlbXNTdHIgPSBfcmVmLnRleHRDb250ZW50SXRlbXNTdHIsXG4gICAgICAgIGVuaGFuY2VUZXh0U2VsZWN0aW9uID0gX3JlZi5lbmhhbmNlVGV4dFNlbGVjdGlvbjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0TGF5ZXJSZW5kZXJUYXNrKTtcblxuICAgIHRoaXMuX3RleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gICAgdGhpcy5fdGV4dENvbnRlbnRTdHJlYW0gPSB0ZXh0Q29udGVudFN0cmVhbTtcbiAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5fZG9jdW1lbnQgPSBjb250YWluZXIub3duZXJEb2N1bWVudDtcbiAgICB0aGlzLl92aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgIHRoaXMuX3RleHREaXZzID0gdGV4dERpdnMgfHwgW107XG4gICAgdGhpcy5fdGV4dENvbnRlbnRJdGVtc1N0ciA9IHRleHRDb250ZW50SXRlbXNTdHIgfHwgW107XG4gICAgdGhpcy5fZW5oYW5jZVRleHRTZWxlY3Rpb24gPSAhIWVuaGFuY2VUZXh0U2VsZWN0aW9uO1xuICAgIHRoaXMuX2ZvbnRJbnNwZWN0b3JFbmFibGVkID0gISEoKF9nbG9iYWxUaGlzJEZvbnRJbnNwZSA9IGdsb2JhbFRoaXMuRm9udEluc3BlY3RvcikgIT09IG51bGwgJiYgX2dsb2JhbFRoaXMkRm9udEluc3BlICE9PSB2b2lkIDAgJiYgX2dsb2JhbFRoaXMkRm9udEluc3BlLmVuYWJsZWQpO1xuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSA9IG51bGw7XG4gICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250RmFtaWx5ID0gbnVsbDtcbiAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4ID0gbnVsbDtcbiAgICB0aGlzLl90ZXh0RGl2UHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy5fcmVuZGVyaW5nRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9yZW5kZXJUaW1lciA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRzID0gW107XG5cbiAgICB0aGlzLl9jYXBhYmlsaXR5LnByb21pc2VbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5fbGF5b3V0VGV4dEN0eCkge1xuICAgICAgICBfdGhpcy5fbGF5b3V0VGV4dEN0eC5jYW52YXMud2lkdGggPSAwO1xuICAgICAgICBfdGhpcy5fbGF5b3V0VGV4dEN0eC5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMuX2xheW91dFRleHRDdHggPSBudWxsO1xuICAgICAgfVxuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge30pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRleHRMYXllclJlbmRlclRhc2ssIFt7XG4gICAga2V5OiBcInByb21pc2VcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhbmNlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICB0aGlzLl9jYW5jZWxlZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oXCJUZXh0TGF5ZXIgdGFzayBjYW5jZWxsZWQuXCIpKTtcblxuICAgICAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVuZGVyVGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlbmRlclRpbWVyKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyVGltZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoXCJUZXh0TGF5ZXIgdGFzayBjYW5jZWxsZWQuXCIpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3Byb2Nlc3NJdGVtc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvY2Vzc0l0ZW1zKGl0ZW1zLCBzdHlsZUNhY2hlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZW1zW2ldLnN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGl0ZW1zW2ldLnR5cGUgPT09IFwiYmVnaW5NYXJrZWRDb250ZW50UHJvcHNcIiB8fCBpdGVtc1tpXS50eXBlID09PSBcImJlZ2luTWFya2VkQ29udGVudFwiKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5fY29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFya2VkQ29udGVudFwiKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIlwiLmNvbmNhdChpdGVtc1tpXS5pZCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5cGUgPT09IFwiZW5kTWFya2VkQ29udGVudFwiKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIgPSB0aGlzLl9jb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RleHRDb250ZW50SXRlbXNTdHIucHVzaChpdGVtc1tpXS5zdHIpO1xuXG4gICAgICAgIGFwcGVuZFRleHQodGhpcywgaXRlbXNbaV0sIHN0eWxlQ2FjaGUsIHRoaXMuX2xheW91dFRleHRDdHgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfbGF5b3V0VGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbGF5b3V0VGV4dCh0ZXh0RGl2KSB7XG4gICAgICB2YXIgdGV4dERpdlByb3BlcnRpZXMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQodGV4dERpdik7XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBcIlwiO1xuXG4gICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggIT09IDAgJiYgdGV4dERpdlByb3BlcnRpZXMuaGFzVGV4dCkge1xuICAgICAgICB2YXIgX3RleHREaXYkc3R5bGUgPSB0ZXh0RGl2LnN0eWxlLFxuICAgICAgICAgICAgZm9udFNpemUgPSBfdGV4dERpdiRzdHlsZS5mb250U2l6ZSxcbiAgICAgICAgICAgIGZvbnRGYW1pbHkgPSBfdGV4dERpdiRzdHlsZS5mb250RmFtaWx5O1xuXG4gICAgICAgIGlmIChmb250U2l6ZSAhPT0gdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSB8fCBmb250RmFtaWx5ICE9PSB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRGYW1pbHkpIHtcbiAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4LmZvbnQgPSBcIlwiLmNvbmNhdChmb250U2l6ZSwgXCIgXCIpLmNvbmNhdChmb250RmFtaWx5KTtcbiAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRTaXplID0gZm9udFNpemU7XG4gICAgICAgICAgdGhpcy5fbGF5b3V0VGV4dExhc3RGb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdGhpcyRfbGF5b3V0VGV4dEN0eCQgPSB0aGlzLl9sYXlvdXRUZXh0Q3R4Lm1lYXN1cmVUZXh0KHRleHREaXYudGV4dENvbnRlbnQpLFxuICAgICAgICAgICAgd2lkdGggPSBfdGhpcyRfbGF5b3V0VGV4dEN0eCQud2lkdGg7XG5cbiAgICAgICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLnNjYWxlID0gdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggLyB3aWR0aDtcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBcInNjYWxlWChcIi5jb25jYXQodGV4dERpdlByb3BlcnRpZXMuc2NhbGUsIFwiKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuYW5nbGUgIT09IDApIHtcbiAgICAgICAgdHJhbnNmb3JtID0gXCJyb3RhdGUoXCIuY29uY2F0KHRleHREaXZQcm9wZXJ0aWVzLmFuZ2xlLCBcImRlZykgXCIpLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNmb3JtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgdGV4dERpdlByb3BlcnRpZXMub3JpZ2luYWxUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICB0ZXh0RGl2LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmhhc1RleHQpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHREaXYpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuaGFzRU9MKSB7XG4gICAgICAgIHZhciBiciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKTtcbiAgICAgICAgYnIuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInByZXNlbnRhdGlvblwiKTtcblxuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQoYnIpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHRpbWVvdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgIHZhciBzdHlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggPSBERUZBVUxUX0ZPTlRfU0laRTtcbiAgICAgIGNhbnZhcy5tb3pPcGFxdWUgPSB0cnVlO1xuICAgICAgdGhpcy5fbGF5b3V0VGV4dEN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwge1xuICAgICAgICBhbHBoYTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fdGV4dENvbnRlbnQpIHtcbiAgICAgICAgdmFyIHRleHRJdGVtcyA9IHRoaXMuX3RleHRDb250ZW50Lml0ZW1zO1xuICAgICAgICB2YXIgdGV4dFN0eWxlcyA9IHRoaXMuX3RleHRDb250ZW50LnN0eWxlcztcblxuICAgICAgICB0aGlzLl9wcm9jZXNzSXRlbXModGV4dEl0ZW1zLCB0ZXh0U3R5bGVzKTtcblxuICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGV4dENvbnRlbnRTdHJlYW0pIHtcbiAgICAgICAgdmFyIHB1bXAgPSBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICAgIF90aGlzMi5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjIudmFsdWUsXG4gICAgICAgICAgICAgICAgZG9uZSA9IF9yZWYyLmRvbmU7XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGVDYWNoZSwgdmFsdWUuc3R5bGVzKTtcblxuICAgICAgICAgICAgX3RoaXMyLl9wcm9jZXNzSXRlbXModmFsdWUuaXRlbXMsIHN0eWxlQ2FjaGUpO1xuXG4gICAgICAgICAgICBwdW1wKCk7XG4gICAgICAgICAgfSwgY2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IHRoaXMuX3RleHRDb250ZW50U3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICBwdW1wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05laXRoZXIgXCJ0ZXh0Q29udGVudFwiIG5vciBcInRleHRDb250ZW50U3RyZWFtXCInICsgXCIgcGFyYW1ldGVycyBzcGVjaWZpZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBjYXBhYmlsaXR5LnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0eWxlQ2FjaGUgPSBudWxsO1xuXG4gICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgIHJlbmRlcihfdGhpczIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5fcmVuZGVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlbmRlcihfdGhpczIpO1xuICAgICAgICAgICAgX3RoaXMyLl9yZW5kZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuX2NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXhwYW5kVGV4dERpdnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwYW5kVGV4dERpdnMoKSB7XG4gICAgICB2YXIgZXhwYW5kRGl2cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICAgIGlmICghdGhpcy5fZW5oYW5jZVRleHRTZWxlY3Rpb24gfHwgIXRoaXMuX3JlbmRlcmluZ0RvbmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm91bmRzICE9PSBudWxsKSB7XG4gICAgICAgIGV4cGFuZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYm91bmRzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zZm9ybUJ1ZiA9IFtdLFxuICAgICAgICAgIHBhZGRpbmdCdWYgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5fdGV4dERpdnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgZGl2ID0gdGhpcy5fdGV4dERpdnNbaV07XG5cbiAgICAgICAgdmFyIGRpdlByb3BzID0gdGhpcy5fdGV4dERpdlByb3BlcnRpZXMuZ2V0KGRpdik7XG5cbiAgICAgICAgaWYgKCFkaXZQcm9wcy5oYXNUZXh0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwYW5kRGl2cykge1xuICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5sZW5ndGggPSAwO1xuICAgICAgICAgIHBhZGRpbmdCdWYubGVuZ3RoID0gMDtcblxuICAgICAgICAgIGlmIChkaXZQcm9wcy5vcmlnaW5hbFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goZGl2UHJvcHMub3JpZ2luYWxUcmFuc2Zvcm0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXZQcm9wcy5wYWRkaW5nVG9wID4gMCkge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKFwiXCIuY29uY2F0KGRpdlByb3BzLnBhZGRpbmdUb3AsIFwicHhcIikpO1xuICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goXCJ0cmFuc2xhdGVZKFwiLmNvbmNhdCgtZGl2UHJvcHMucGFkZGluZ1RvcCwgXCJweClcIikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpdlByb3BzLnBhZGRpbmdSaWdodCA+IDApIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaChcIlwiLmNvbmNhdChkaXZQcm9wcy5wYWRkaW5nUmlnaHQgLyBkaXZQcm9wcy5zY2FsZSwgXCJweFwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0JvdHRvbSA+IDApIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaChcIlwiLmNvbmNhdChkaXZQcm9wcy5wYWRkaW5nQm90dG9tLCBcInB4XCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXZQcm9wcy5wYWRkaW5nTGVmdCA+IDApIHtcbiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaChcIlwiLmNvbmNhdChkaXZQcm9wcy5wYWRkaW5nTGVmdCAvIGRpdlByb3BzLnNjYWxlLCBcInB4XCIpKTtcbiAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKFwidHJhbnNsYXRlWChcIi5jb25jYXQoLWRpdlByb3BzLnBhZGRpbmdMZWZ0IC8gZGl2UHJvcHMuc2NhbGUsIFwicHgpXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gcGFkZGluZ0J1Zi5qb2luKFwiIFwiKTtcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm1CdWYubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtQnVmLmpvaW4oXCIgXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXYuc3R5bGUucGFkZGluZyA9IG51bGw7XG4gICAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRleHRMYXllclJlbmRlclRhc2s7XG59KCk7XG5cbmZ1bmN0aW9uIHJlbmRlclRleHRMYXllcihyZW5kZXJQYXJhbWV0ZXJzKSB7XG4gIHZhciB0YXNrID0gbmV3IFRleHRMYXllclJlbmRlclRhc2soe1xuICAgIHRleHRDb250ZW50OiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50LFxuICAgIHRleHRDb250ZW50U3RyZWFtOiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50U3RyZWFtLFxuICAgIGNvbnRhaW5lcjogcmVuZGVyUGFyYW1ldGVycy5jb250YWluZXIsXG4gICAgdmlld3BvcnQ6IHJlbmRlclBhcmFtZXRlcnMudmlld3BvcnQsXG4gICAgdGV4dERpdnM6IHJlbmRlclBhcmFtZXRlcnMudGV4dERpdnMsXG4gICAgdGV4dENvbnRlbnRJdGVtc1N0cjogcmVuZGVyUGFyYW1ldGVycy50ZXh0Q29udGVudEl0ZW1zU3RyLFxuICAgIGVuaGFuY2VUZXh0U2VsZWN0aW9uOiByZW5kZXJQYXJhbWV0ZXJzLmVuaGFuY2VUZXh0U2VsZWN0aW9uXG4gIH0pO1xuXG4gIHRhc2suX3JlbmRlcihyZW5kZXJQYXJhbWV0ZXJzLnRpbWVvdXQpO1xuXG4gIHJldHVybiB0YXNrO1xufVxuXG4vKioqLyB9KSxcbi8qIDEyOCAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLlNWR0dyYXBoaWNzID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyB0aHJvdyBfZTI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNWR0dyYXBoaWNzID0gZnVuY3Rpb24gU1ZHR3JhcGhpY3MoKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkdHcmFwaGljcyk7XG5cbiAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIk5vdCBpbXBsZW1lbnRlZDogU1ZHR3JhcGhpY3NcIik7XG59O1xuXG5leHBvcnRzLlNWR0dyYXBoaWNzID0gU1ZHR3JhcGhpY3M7XG57XG4gIHZhciBvcExpc3RUb1RyZWUgPSBmdW5jdGlvbiBvcExpc3RUb1RyZWUob3BMaXN0KSB7XG4gICAgdmFyIG9wVHJlZSA9IFtdO1xuICAgIHZhciB0bXAgPSBbXTtcblxuICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvcExpc3QpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgb3BMaXN0RWxlbWVudCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChvcExpc3RFbGVtZW50LmZuID09PSBcInNhdmVcIikge1xuICAgICAgICAgIG9wVHJlZS5wdXNoKHtcbiAgICAgICAgICAgIGZuSWQ6IDkyLFxuICAgICAgICAgICAgZm46IFwiZ3JvdXBcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRtcC5wdXNoKG9wVHJlZSk7XG4gICAgICAgICAgb3BUcmVlID0gb3BUcmVlW29wVHJlZS5sZW5ndGggLSAxXS5pdGVtcztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcExpc3RFbGVtZW50LmZuID09PSBcInJlc3RvcmVcIikge1xuICAgICAgICAgIG9wVHJlZSA9IHRtcC5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcFRyZWUucHVzaChvcExpc3RFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3BUcmVlO1xuICB9O1xuXG4gIHZhciBwZiA9IGZ1bmN0aW9uIHBmKHZhbHVlKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgcyA9IHZhbHVlLnRvRml4ZWQoMTApO1xuICAgIHZhciBpID0gcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHNbaV0gIT09IFwiMFwiKSB7XG4gICAgICByZXR1cm4gcztcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICBpLS07XG4gICAgfSB3aGlsZSAoc1tpXSA9PT0gXCIwXCIpO1xuXG4gICAgcmV0dXJuIHMuc3Vic3RyaW5nKDAsIHNbaV0gPT09IFwiLlwiID8gaSA6IGkgKyAxKTtcbiAgfTtcblxuICB2YXIgcG0gPSBmdW5jdGlvbiBwbShtKSB7XG4gICAgaWYgKG1bNF0gPT09IDAgJiYgbVs1XSA9PT0gMCkge1xuICAgICAgaWYgKG1bMV0gPT09IDAgJiYgbVsyXSA9PT0gMCkge1xuICAgICAgICBpZiAobVswXSA9PT0gMSAmJiBtWzNdID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCJzY2FsZShcIi5jb25jYXQocGYobVswXSksIFwiIFwiKS5jb25jYXQocGYobVszXSksIFwiKVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1bMF0gPT09IG1bM10gJiYgbVsxXSA9PT0gLW1bMl0pIHtcbiAgICAgICAgdmFyIGEgPSBNYXRoLmFjb3MobVswXSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICByZXR1cm4gXCJyb3RhdGUoXCIuY29uY2F0KHBmKGEpLCBcIilcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtWzBdID09PSAxICYmIG1bMV0gPT09IDAgJiYgbVsyXSA9PT0gMCAmJiBtWzNdID09PSAxKSB7XG4gICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIi5jb25jYXQocGYobVs0XSksIFwiIFwiKS5jb25jYXQocGYobVs1XSksIFwiKVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJtYXRyaXgoXCIuY29uY2F0KHBmKG1bMF0pLCBcIiBcIikuY29uY2F0KHBmKG1bMV0pLCBcIiBcIikuY29uY2F0KHBmKG1bMl0pLCBcIiBcIikuY29uY2F0KHBmKG1bM10pLCBcIiBcIikuY29uY2F0KHBmKG1bNF0pLCBcIiBcIikgKyBcIlwiLmNvbmNhdChwZihtWzVdKSwgXCIpXCIpO1xuICB9O1xuXG4gIHZhciBTVkdfREVGQVVMVFMgPSB7XG4gICAgZm9udFN0eWxlOiBcIm5vcm1hbFwiLFxuICAgIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCIsXG4gICAgZmlsbENvbG9yOiBcIiMwMDAwMDBcIlxuICB9O1xuICB2YXIgWE1MX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIjtcbiAgdmFyIFhMSU5LX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI7XG4gIHZhciBMSU5FX0NBUF9TVFlMRVMgPSBbXCJidXR0XCIsIFwicm91bmRcIiwgXCJzcXVhcmVcIl07XG4gIHZhciBMSU5FX0pPSU5fU1RZTEVTID0gW1wibWl0ZXJcIiwgXCJyb3VuZFwiLCBcImJldmVsXCJdO1xuXG4gIHZhciBjb252ZXJ0SW1nRGF0YVRvUG5nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBQTkdfSEVBREVSID0gbmV3IFVpbnQ4QXJyYXkoWzB4ODksIDB4NTAsIDB4NGUsIDB4NDcsIDB4MGQsIDB4MGEsIDB4MWEsIDB4MGFdKTtcbiAgICB2YXIgQ0hVTktfV1JBUFBFUl9TSVpFID0gMTI7XG4gICAgdmFyIGNyY1RhYmxlID0gbmV3IEludDMyQXJyYXkoMjU2KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgIHZhciBjID0gaTtcblxuICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCA4OyBoKyspIHtcbiAgICAgICAgaWYgKGMgJiAxKSB7XG4gICAgICAgICAgYyA9IDB4ZWRiODgzMjAgXiBjID4+IDEgJiAweDdmZmZmZmZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGMgPSBjID4+IDEgJiAweDdmZmZmZmZmO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNyY1RhYmxlW2ldID0gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmMzMihkYXRhLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgY3JjID0gLTE7XG5cbiAgICAgIGZvciAodmFyIF9pID0gc3RhcnQ7IF9pIDwgZW5kOyBfaSsrKSB7XG4gICAgICAgIHZhciBhID0gKGNyYyBeIGRhdGFbX2ldKSAmIDB4ZmY7XG4gICAgICAgIHZhciBiID0gY3JjVGFibGVbYV07XG4gICAgICAgIGNyYyA9IGNyYyA+Pj4gOCBeIGI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmMgXiAtMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZVBuZ0NodW5rKHR5cGUsIGJvZHksIGRhdGEsIG9mZnNldCkge1xuICAgICAgdmFyIHAgPSBvZmZzZXQ7XG4gICAgICB2YXIgbGVuID0gYm9keS5sZW5ndGg7XG4gICAgICBkYXRhW3BdID0gbGVuID4+IDI0ICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDFdID0gbGVuID4+IDE2ICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDJdID0gbGVuID4+IDggJiAweGZmO1xuICAgICAgZGF0YVtwICsgM10gPSBsZW4gJiAweGZmO1xuICAgICAgcCArPSA0O1xuICAgICAgZGF0YVtwXSA9IHR5cGUuY2hhckNvZGVBdCgwKSAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAxXSA9IHR5cGUuY2hhckNvZGVBdCgxKSAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAyXSA9IHR5cGUuY2hhckNvZGVBdCgyKSAmIDB4ZmY7XG4gICAgICBkYXRhW3AgKyAzXSA9IHR5cGUuY2hhckNvZGVBdCgzKSAmIDB4ZmY7XG4gICAgICBwICs9IDQ7XG4gICAgICBkYXRhLnNldChib2R5LCBwKTtcbiAgICAgIHAgKz0gYm9keS5sZW5ndGg7XG4gICAgICB2YXIgY3JjID0gY3JjMzIoZGF0YSwgb2Zmc2V0ICsgNCwgcCk7XG4gICAgICBkYXRhW3BdID0gY3JjID4+IDI0ICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDFdID0gY3JjID4+IDE2ICYgMHhmZjtcbiAgICAgIGRhdGFbcCArIDJdID0gY3JjID4+IDggJiAweGZmO1xuICAgICAgZGF0YVtwICsgM10gPSBjcmMgJiAweGZmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkbGVyMzIoZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGEgPSAxO1xuICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSBzdGFydDsgX2kyIDwgZW5kOyArK19pMikge1xuICAgICAgICBhID0gKGEgKyAoZGF0YVtfaTJdICYgMHhmZikpICUgNjU1MjE7XG4gICAgICAgIGIgPSAoYiArIGEpICUgNjU1MjE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiIDw8IDE2IHwgYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZsYXRlU3luYyhsaXRlcmFscykge1xuICAgICAgaWYgKCFfaXNfbm9kZS5pc05vZGVKUykge1xuICAgICAgICByZXR1cm4gZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQobGl0ZXJhbHMpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgaW5wdXQ7XG5cbiAgICAgICAgaWYgKHBhcnNlSW50KHByb2Nlc3MudmVyc2lvbnMubm9kZSkgPj0gOCkge1xuICAgICAgICAgIGlucHV0ID0gbGl0ZXJhbHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5wdXQgPSBCdWZmZXIuZnJvbShsaXRlcmFscyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0cHV0ID0gcmVxdWlyZShcInpsaWJcIikuZGVmbGF0ZVN5bmMoaW5wdXQsIHtcbiAgICAgICAgICBsZXZlbDogOVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb3V0cHV0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IG91dHB1dCA6IG5ldyBVaW50OEFycmF5KG91dHB1dCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICgwLCBfdXRpbC53YXJuKShcIk5vdCBjb21wcmVzc2luZyBQTkcgYmVjYXVzZSB6bGliLmRlZmxhdGVTeW5jIGlzIHVuYXZhaWxhYmxlOiBcIiArIGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQobGl0ZXJhbHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmxhdGVTeW5jVW5jb21wcmVzc2VkKGxpdGVyYWxzKSB7XG4gICAgICB2YXIgbGVuID0gbGl0ZXJhbHMubGVuZ3RoO1xuICAgICAgdmFyIG1heEJsb2NrTGVuZ3RoID0gMHhmZmZmO1xuICAgICAgdmFyIGRlZmxhdGVCbG9ja3MgPSBNYXRoLmNlaWwobGVuIC8gbWF4QmxvY2tMZW5ndGgpO1xuICAgICAgdmFyIGlkYXQgPSBuZXcgVWludDhBcnJheSgyICsgbGVuICsgZGVmbGF0ZUJsb2NrcyAqIDUgKyA0KTtcbiAgICAgIHZhciBwaSA9IDA7XG4gICAgICBpZGF0W3BpKytdID0gMHg3ODtcbiAgICAgIGlkYXRbcGkrK10gPSAweDljO1xuICAgICAgdmFyIHBvcyA9IDA7XG5cbiAgICAgIHdoaWxlIChsZW4gPiBtYXhCbG9ja0xlbmd0aCkge1xuICAgICAgICBpZGF0W3BpKytdID0gMHgwMDtcbiAgICAgICAgaWRhdFtwaSsrXSA9IDB4ZmY7XG4gICAgICAgIGlkYXRbcGkrK10gPSAweGZmO1xuICAgICAgICBpZGF0W3BpKytdID0gMHgwMDtcbiAgICAgICAgaWRhdFtwaSsrXSA9IDB4MDA7XG4gICAgICAgIGlkYXQuc2V0KGxpdGVyYWxzLnN1YmFycmF5KHBvcywgcG9zICsgbWF4QmxvY2tMZW5ndGgpLCBwaSk7XG4gICAgICAgIHBpICs9IG1heEJsb2NrTGVuZ3RoO1xuICAgICAgICBwb3MgKz0gbWF4QmxvY2tMZW5ndGg7XG4gICAgICAgIGxlbiAtPSBtYXhCbG9ja0xlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWRhdFtwaSsrXSA9IDB4MDE7XG4gICAgICBpZGF0W3BpKytdID0gbGVuICYgMHhmZjtcbiAgICAgIGlkYXRbcGkrK10gPSBsZW4gPj4gOCAmIDB4ZmY7XG4gICAgICBpZGF0W3BpKytdID0gfmxlbiAmIDB4ZmZmZiAmIDB4ZmY7XG4gICAgICBpZGF0W3BpKytdID0gKH5sZW4gJiAweGZmZmYpID4+IDggJiAweGZmO1xuICAgICAgaWRhdC5zZXQobGl0ZXJhbHMuc3ViYXJyYXkocG9zKSwgcGkpO1xuICAgICAgcGkgKz0gbGl0ZXJhbHMubGVuZ3RoIC0gcG9zO1xuICAgICAgdmFyIGFkbGVyID0gYWRsZXIzMihsaXRlcmFscywgMCwgbGl0ZXJhbHMubGVuZ3RoKTtcbiAgICAgIGlkYXRbcGkrK10gPSBhZGxlciA+PiAyNCAmIDB4ZmY7XG4gICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gMTYgJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9IGFkbGVyID4+IDggJiAweGZmO1xuICAgICAgaWRhdFtwaSsrXSA9IGFkbGVyICYgMHhmZjtcbiAgICAgIHJldHVybiBpZGF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuY29kZShpbWdEYXRhLCBraW5kLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzaykge1xuICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgIHZhciBiaXREZXB0aCwgY29sb3JUeXBlLCBsaW5lU2l6ZTtcbiAgICAgIHZhciBieXRlcyA9IGltZ0RhdGEuZGF0YTtcblxuICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOlxuICAgICAgICAgIGNvbG9yVHlwZSA9IDA7XG4gICAgICAgICAgYml0RGVwdGggPSAxO1xuICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKyA3ID4+IDM7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfdXRpbC5JbWFnZUtpbmQuUkdCXzI0QlBQOlxuICAgICAgICAgIGNvbG9yVHlwZSA9IDI7XG4gICAgICAgICAgYml0RGVwdGggPSA4O1xuICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKiAzO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX3V0aWwuSW1hZ2VLaW5kLlJHQkFfMzJCUFA6XG4gICAgICAgICAgY29sb3JUeXBlID0gNjtcbiAgICAgICAgICBiaXREZXB0aCA9IDg7XG4gICAgICAgICAgbGluZVNpemUgPSB3aWR0aCAqIDQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdFwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpdGVyYWxzID0gbmV3IFVpbnQ4QXJyYXkoKDEgKyBsaW5lU2l6ZSkgKiBoZWlnaHQpO1xuICAgICAgdmFyIG9mZnNldExpdGVyYWxzID0gMCxcbiAgICAgICAgICBvZmZzZXRCeXRlcyA9IDA7XG5cbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgbGl0ZXJhbHNbb2Zmc2V0TGl0ZXJhbHMrK10gPSAwO1xuICAgICAgICBsaXRlcmFscy5zZXQoYnl0ZXMuc3ViYXJyYXkob2Zmc2V0Qnl0ZXMsIG9mZnNldEJ5dGVzICsgbGluZVNpemUpLCBvZmZzZXRMaXRlcmFscyk7XG4gICAgICAgIG9mZnNldEJ5dGVzICs9IGxpbmVTaXplO1xuICAgICAgICBvZmZzZXRMaXRlcmFscyArPSBsaW5lU2l6ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtpbmQgPT09IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCAmJiBpc01hc2spIHtcbiAgICAgICAgb2Zmc2V0TGl0ZXJhbHMgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIF95ID0gMDsgX3kgPCBoZWlnaHQ7IF95KyspIHtcbiAgICAgICAgICBvZmZzZXRMaXRlcmFscysrO1xuXG4gICAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgbGluZVNpemU7IF9pMysrKSB7XG4gICAgICAgICAgICBsaXRlcmFsc1tvZmZzZXRMaXRlcmFscysrXSBePSAweGZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaWhkciA9IG5ldyBVaW50OEFycmF5KFt3aWR0aCA+PiAyNCAmIDB4ZmYsIHdpZHRoID4+IDE2ICYgMHhmZiwgd2lkdGggPj4gOCAmIDB4ZmYsIHdpZHRoICYgMHhmZiwgaGVpZ2h0ID4+IDI0ICYgMHhmZiwgaGVpZ2h0ID4+IDE2ICYgMHhmZiwgaGVpZ2h0ID4+IDggJiAweGZmLCBoZWlnaHQgJiAweGZmLCBiaXREZXB0aCwgY29sb3JUeXBlLCAweDAwLCAweDAwLCAweDAwXSk7XG4gICAgICB2YXIgaWRhdCA9IGRlZmxhdGVTeW5jKGxpdGVyYWxzKTtcbiAgICAgIHZhciBwbmdMZW5ndGggPSBQTkdfSEVBREVSLmxlbmd0aCArIENIVU5LX1dSQVBQRVJfU0laRSAqIDMgKyBpaGRyLmxlbmd0aCArIGlkYXQubGVuZ3RoO1xuICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShwbmdMZW5ndGgpO1xuICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICBkYXRhLnNldChQTkdfSEVBREVSLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IFBOR19IRUFERVIubGVuZ3RoO1xuICAgICAgd3JpdGVQbmdDaHVuayhcIklIRFJcIiwgaWhkciwgZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBDSFVOS19XUkFQUEVSX1NJWkUgKyBpaGRyLmxlbmd0aDtcbiAgICAgIHdyaXRlUG5nQ2h1bmsoXCJJREFUQVwiLCBpZGF0LCBkYXRhLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IENIVU5LX1dSQVBQRVJfU0laRSArIGlkYXQubGVuZ3RoO1xuICAgICAgd3JpdGVQbmdDaHVuayhcIklFTkRcIiwgbmV3IFVpbnQ4QXJyYXkoMCksIGRhdGEsIG9mZnNldCk7XG4gICAgICByZXR1cm4gKDAsIF91dGlsLmNyZWF0ZU9iamVjdFVSTCkoZGF0YSwgXCJpbWFnZS9wbmdcIiwgZm9yY2VEYXRhU2NoZW1hKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY29udmVydEltZ0RhdGFUb1BuZyhpbWdEYXRhLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzaykge1xuICAgICAgdmFyIGtpbmQgPSBpbWdEYXRhLmtpbmQgPT09IHVuZGVmaW5lZCA/IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCA6IGltZ0RhdGEua2luZDtcbiAgICAgIHJldHVybiBlbmNvZGUoaW1nRGF0YSwga2luZCwgZm9yY2VEYXRhU2NoZW1hLCBpc01hc2spO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgU1ZHRXh0cmFTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU1ZHRXh0cmFTdGF0ZSgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkdFeHRyYVN0YXRlKTtcblxuICAgICAgdGhpcy5mb250U2l6ZVNjYWxlID0gMTtcbiAgICAgIHRoaXMuZm9udFdlaWdodCA9IFNWR19ERUZBVUxUUy5mb250V2VpZ2h0O1xuICAgICAgdGhpcy5mb250U2l6ZSA9IDA7XG4gICAgICB0aGlzLnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICB0aGlzLmZvbnRNYXRyaXggPSBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICAgIHRoaXMubGVhZGluZyA9IDA7XG4gICAgICB0aGlzLnRleHRSZW5kZXJpbmdNb2RlID0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTDtcbiAgICAgIHRoaXMudGV4dE1hdHJpeFNjYWxlID0gMTtcbiAgICAgIHRoaXMueCA9IDA7XG4gICAgICB0aGlzLnkgPSAwO1xuICAgICAgdGhpcy5saW5lWCA9IDA7XG4gICAgICB0aGlzLmxpbmVZID0gMDtcbiAgICAgIHRoaXMuY2hhclNwYWNpbmcgPSAwO1xuICAgICAgdGhpcy53b3JkU3BhY2luZyA9IDA7XG4gICAgICB0aGlzLnRleHRIU2NhbGUgPSAxO1xuICAgICAgdGhpcy50ZXh0UmlzZSA9IDA7XG4gICAgICB0aGlzLmZpbGxDb2xvciA9IFNWR19ERUZBVUxUUy5maWxsQ29sb3I7XG4gICAgICB0aGlzLnN0cm9rZUNvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgICB0aGlzLmZpbGxBbHBoYSA9IDE7XG4gICAgICB0aGlzLnN0cm9rZUFscGhhID0gMTtcbiAgICAgIHRoaXMubGluZVdpZHRoID0gMTtcbiAgICAgIHRoaXMubGluZUpvaW4gPSBcIlwiO1xuICAgICAgdGhpcy5saW5lQ2FwID0gXCJcIjtcbiAgICAgIHRoaXMubWl0ZXJMaW1pdCA9IDA7XG4gICAgICB0aGlzLmRhc2hBcnJheSA9IFtdO1xuICAgICAgdGhpcy5kYXNoUGhhc2UgPSAwO1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgIHRoaXMuYWN0aXZlQ2xpcFVybCA9IG51bGw7XG4gICAgICB0aGlzLmNsaXBHcm91cCA9IG51bGw7XG4gICAgICB0aGlzLm1hc2tJZCA9IFwiXCI7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNWR0V4dHJhU3RhdGUsIFt7XG4gICAgICBrZXk6IFwiY2xvbmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldEN1cnJlbnRQb2ludFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRQb2ludCh4LCB5KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNWR0V4dHJhU3RhdGU7XG4gIH0oKTtcblxuICB2YXIgY2xpcENvdW50ID0gMDtcbiAgdmFyIG1hc2tDb3VudCA9IDA7XG4gIHZhciBzaGFkaW5nQ291bnQgPSAwO1xuXG4gIGV4cG9ydHMuU1ZHR3JhcGhpY3MgPSBTVkdHcmFwaGljcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU1ZHR3JhcGhpY3MoY29tbW9uT2Jqcywgb2Jqcykge1xuICAgICAgdmFyIGZvcmNlRGF0YVNjaGVtYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkdHcmFwaGljcyk7XG5cbiAgICAgIHRoaXMuc3ZnRmFjdG9yeSA9IG5ldyBfZGlzcGxheV91dGlscy5ET01TVkdGYWN0b3J5KCk7XG4gICAgICB0aGlzLmN1cnJlbnQgPSBuZXcgU1ZHRXh0cmFTdGF0ZSgpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICB0aGlzLnRyYW5zZm9ybVN0YWNrID0gW107XG4gICAgICB0aGlzLmV4dHJhU3RhY2sgPSBbXTtcbiAgICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7XG4gICAgICB0aGlzLm9ianMgPSBvYmpzO1xuICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1iZWRGb250cyA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWJlZGRlZEZvbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuY3NzU3R5bGUgPSBudWxsO1xuICAgICAgdGhpcy5mb3JjZURhdGFTY2hlbWEgPSAhIWZvcmNlRGF0YVNjaGVtYTtcbiAgICAgIHRoaXMuX29wZXJhdG9ySWRNYXBwaW5nID0gW107XG5cbiAgICAgIGZvciAodmFyIG9wIGluIF91dGlsLk9QUykge1xuICAgICAgICB0aGlzLl9vcGVyYXRvcklkTWFwcGluZ1tfdXRpbC5PUFNbb3BdXSA9IG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTVkdHcmFwaGljcywgW3tcbiAgICAgIGtleTogXCJzYXZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1TdGFjay5wdXNoKHRoaXMudHJhbnNmb3JtTWF0cml4KTtcbiAgICAgICAgdmFyIG9sZCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgdGhpcy5leHRyYVN0YWNrLnB1c2gob2xkKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gb2xkLmNsb25lKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlc3RvcmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IHRoaXMudHJhbnNmb3JtU3RhY2sucG9wKCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuZXh0cmFTdGFjay5wb3AoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7XG4gICAgICAgIHRoaXMudGdycCA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdyb3VwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoaXRlbXMpIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHRoaXMuZXhlY3V0ZU9wVHJlZShpdGVtcyk7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkRGVwZW5kZW5jaWVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZERlcGVuZGVuY2llcyhvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgICB2YXIgYXJnc0FycmF5ID0gb3BlcmF0b3JMaXN0LmFyZ3NBcnJheTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBmbkFycmF5Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBpZiAoZm5BcnJheVtpXSAhPT0gX3V0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYXJnc0FycmF5W2ldKSxcbiAgICAgICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICAgICAgICB2YXIgb2JqID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgICB2YXIgb2Jqc1Bvb2wgPSBvYmouc3RhcnRzV2l0aChcImdfXCIpID8gX3RoaXMuY29tbW9uT2JqcyA6IF90aGlzLm9ianM7XG4gICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBvYmpzUG9vbC5nZXQob2JqLCByZXNvbHZlKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgX3RoaXMuY3VycmVudC5kZXBlbmRlbmNpZXMucHVzaChwcm9taXNlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIF9sb29wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuY3VycmVudC5kZXBlbmRlbmNpZXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0cmFuc2Zvcm1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICB2YXIgdHJhbnNmb3JtTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4LCB0cmFuc2Zvcm1NYXRyaXgpO1xuICAgICAgICB0aGlzLnRncnAgPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRTVkdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTVkcob3BlcmF0b3JMaXN0LCB2aWV3cG9ydCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG5cbiAgICAgICAgdmFyIHN2Z0VsZW1lbnQgPSB0aGlzLl9pbml0aWFsaXplKHZpZXdwb3J0KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkRGVwZW5kZW5jaWVzKG9wZXJhdG9yTGlzdCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnRyYW5zZm9ybU1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcblxuICAgICAgICAgIF90aGlzMi5leGVjdXRlT3BUcmVlKF90aGlzMi5jb252ZXJ0T3BMaXN0KG9wZXJhdG9yTGlzdCkpO1xuXG4gICAgICAgICAgcmV0dXJuIHN2Z0VsZW1lbnQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb252ZXJ0T3BMaXN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydE9wTGlzdChvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9ySWRNYXBwaW5nID0gdGhpcy5fb3BlcmF0b3JJZE1hcHBpbmc7XG4gICAgICAgIHZhciBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5O1xuICAgICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgICB2YXIgb3BMaXN0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZm5BcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIGZuSWQgPSBmbkFycmF5W2ldO1xuICAgICAgICAgIG9wTGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGZuSWQ6IGZuSWQsXG4gICAgICAgICAgICBmbjogb3BlcmF0b3JJZE1hcHBpbmdbZm5JZF0sXG4gICAgICAgICAgICBhcmdzOiBhcmdzQXJyYXlbaV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcExpc3RUb1RyZWUob3BMaXN0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXhlY3V0ZU9wVHJlZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVPcFRyZWUob3BUcmVlKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIob3BUcmVlKSxcbiAgICAgICAgICAgIF9zdGVwMztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgb3BUcmVlRWxlbWVudCA9IF9zdGVwMy52YWx1ZTtcbiAgICAgICAgICAgIHZhciBmbiA9IG9wVHJlZUVsZW1lbnQuZm47XG4gICAgICAgICAgICB2YXIgZm5JZCA9IG9wVHJlZUVsZW1lbnQuZm5JZDtcbiAgICAgICAgICAgIHZhciBhcmdzID0gb3BUcmVlRWxlbWVudC5hcmdzO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGZuSWQgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmJlZ2luVGV4dDpcbiAgICAgICAgICAgICAgICB0aGlzLmJlZ2luVGV4dCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmRlcGVuZGVuY3k6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmcoYXJncyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZ01vdmVUZXh0OlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGVhZGluZ01vdmVUZXh0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZvbnQ6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGb250KGFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNob3dUZXh0OlxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2hvd1NwYWNlZFRleHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93VGV4dChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lbmRUZXh0OlxuICAgICAgICAgICAgICAgIHRoaXMuZW5kVGV4dCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUZXh0OlxuICAgICAgICAgICAgICAgIHRoaXMubW92ZVRleHQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0Q2hhclNwYWNpbmc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGFyU3BhY2luZyhhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRXb3JkU3BhY2luZzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFdvcmRTcGFjaW5nKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEhTY2FsZTpcbiAgICAgICAgICAgICAgICB0aGlzLnNldEhTY2FsZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRUZXh0TWF0cml4OlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dE1hdHJpeChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRUZXh0UmlzZTpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRSaXNlKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRSZW5kZXJpbmdNb2RlOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJlbmRlcmluZ01vZGUoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZVdpZHRoOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZVdpZHRoKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldExpbmVKb2luOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZUpvaW4oYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZUNhcDpcbiAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVDYXAoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TWl0ZXJMaW1pdDpcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1pdGVyTGltaXQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RmlsbFJHQkNvbG9yOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsbFJHQkNvbG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFN0cm9rZVJHQkNvbG9yOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Ryb2tlUkdCQ29sb3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0U3Ryb2tlQ29sb3JOOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Ryb2tlQ29sb3JOKGFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZpbGxDb2xvck46XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGaWxsQ29sb3JOKGFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNoYWRpbmdGaWxsOlxuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGluZ0ZpbGwoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RGFzaDpcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhc2goYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0UmVuZGVyaW5nSW50ZW50OlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZsYXRuZXNzOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3MoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0R1N0YXRlOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0R1N0YXRlKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmZpbGw6XG4gICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9GaWxsOlxuICAgICAgICAgICAgICAgIHRoaXMuZW9GaWxsKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc3Ryb2tlOlxuICAgICAgICAgICAgICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZmlsbFN0cm9rZTpcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxTdHJva2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0ZpbGxTdHJva2U6XG4gICAgICAgICAgICAgICAgdGhpcy5lb0ZpbGxTdHJva2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbGlwOlxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcChcIm5vbnplcm9cIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9DbGlwOlxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcChcImV2ZW5vZGRcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOlxuICAgICAgICAgICAgICAgIHRoaXMucGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRJbWFnZVhPYmplY3Q6XG4gICAgICAgICAgICAgICAgdGhpcy5wYWludEltYWdlWE9iamVjdChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdDpcbiAgICAgICAgICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDpcbiAgICAgICAgICAgICAgICB0aGlzLnBhaW50SW1hZ2VNYXNrWE9iamVjdChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludEZvcm1YT2JqZWN0QmVnaW46XG4gICAgICAgICAgICAgICAgdGhpcy5wYWludEZvcm1YT2JqZWN0QmVnaW4oYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRGb3JtWE9iamVjdEVuZDpcbiAgICAgICAgICAgICAgICB0aGlzLnBhaW50Rm9ybVhPYmplY3RFbmQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVBhdGg6XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVN0cm9rZTpcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VGaWxsU3Ryb2tlOlxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VGaWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VFT0ZpbGxTdHJva2U6XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVPRmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm5leHRMaW5lOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dExpbmUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy50cmFuc2Zvcm06XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY29uc3RydWN0UGF0aDpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdFBhdGgoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW5kUGF0aDpcbiAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDkyOlxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAob3BUcmVlRWxlbWVudC5pdGVtcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJVbmltcGxlbWVudGVkIG9wZXJhdG9yIFwiLmNvbmNhdChmbikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0V29yZFNwYWNpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXb3JkU3BhY2luZyh3b3JkU3BhY2luZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQud29yZFNwYWNpbmcgPSB3b3JkU3BhY2luZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0Q2hhclNwYWNpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDaGFyU3BhY2luZyhjaGFyU3BhY2luZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQuY2hhclNwYWNpbmcgPSBjaGFyU3BhY2luZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmV4dExpbmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0TGluZSgpIHtcbiAgICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFRleHRNYXRyaXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUZXh0TWF0cml4KGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQudGV4dE1hdHJpeCA9IGN1cnJlbnQubGluZU1hdHJpeCA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgICAgY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSBNYXRoLmh5cG90KGEsIGIpO1xuICAgICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgY3VycmVudC55ID0gY3VycmVudC5saW5lWSA9IDA7XG4gICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1mYW1pbHlcIiwgY3VycmVudC5mb250RmFtaWx5KTtcbiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtc2l6ZVwiLCBcIlwiLmNvbmNhdChwZihjdXJyZW50LmZvbnRTaXplKSwgXCJweFwiKSk7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgICAgY3VycmVudC50eHRFbGVtZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6dGV4dFwiKTtcbiAgICAgICAgY3VycmVudC50eHRFbGVtZW50LmFwcGVuZENoaWxkKGN1cnJlbnQudHNwYW4pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJiZWdpblRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWdpblRleHQoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgY3VycmVudC55ID0gY3VycmVudC5saW5lWSA9IDA7XG4gICAgICAgIGN1cnJlbnQudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgICAgY3VycmVudC5saW5lTWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgICAgICBjdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgICAgIGN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgICAgY3VycmVudC50eHRFbGVtZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6dGV4dFwiKTtcbiAgICAgICAgY3VycmVudC50eHRncnAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICBjdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgICAgY3VycmVudC55Y29vcmRzID0gW107XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm1vdmVUZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRleHQoeCwgeSkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgY3VycmVudC54ID0gY3VycmVudC5saW5lWCArPSB4O1xuICAgICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZICs9IHk7XG4gICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1mYW1pbHlcIiwgY3VycmVudC5mb250RmFtaWx5KTtcbiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtc2l6ZVwiLCBcIlwiLmNvbmNhdChwZihjdXJyZW50LmZvbnRTaXplKSwgXCJweFwiKSk7XG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hvd1RleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93VGV4dChnbHlwaHMpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIHZhciBmb250ID0gY3VycmVudC5mb250O1xuICAgICAgICB2YXIgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuXG4gICAgICAgIGlmIChmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlO1xuICAgICAgICB2YXIgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nO1xuICAgICAgICB2YXIgd29yZFNwYWNpbmcgPSBjdXJyZW50LndvcmRTcGFjaW5nO1xuICAgICAgICB2YXIgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjtcbiAgICAgICAgdmFyIHRleHRIU2NhbGUgPSBjdXJyZW50LnRleHRIU2NhbGUgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICB2YXIgdmVydGljYWwgPSBmb250LnZlcnRpY2FsO1xuICAgICAgICB2YXIgc3BhY2luZ0RpciA9IHZlcnRpY2FsID8gMSA6IC0xO1xuICAgICAgICB2YXIgZGVmYXVsdFZNZXRyaWNzID0gZm9udC5kZWZhdWx0Vk1ldHJpY3M7XG4gICAgICAgIHZhciB3aWR0aEFkdmFuY2VTY2FsZSA9IGZvbnRTaXplICogY3VycmVudC5mb250TWF0cml4WzBdO1xuICAgICAgICB2YXIgeCA9IDA7XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihnbHlwaHMpLFxuICAgICAgICAgICAgX3N0ZXA0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGdseXBoID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHggKz0gZm9udERpcmVjdGlvbiAqIHdvcmRTcGFjaW5nO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlsLmlzTnVtKShnbHlwaCkpIHtcbiAgICAgICAgICAgICAgeCArPSBzcGFjaW5nRGlyICogZ2x5cGggKiBmb250U2l6ZSAvIDEwMDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3BhY2luZyA9IChnbHlwaC5pc1NwYWNlID8gd29yZFNwYWNpbmcgOiAwKSArIGNoYXJTcGFjaW5nO1xuICAgICAgICAgICAgdmFyIGNoYXJhY3RlciA9IGdseXBoLmZvbnRDaGFyO1xuICAgICAgICAgICAgdmFyIHNjYWxlZFggPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgc2NhbGVkWSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGdseXBoLndpZHRoO1xuXG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgdmFyIHZ4ID0gdm9pZCAwO1xuICAgICAgICAgICAgICB2YXIgdm1ldHJpYyA9IGdseXBoLnZtZXRyaWMgfHwgZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICAgICAgICB2eCA9IGdseXBoLnZtZXRyaWMgPyB2bWV0cmljWzFdIDogd2lkdGggKiAwLjU7XG4gICAgICAgICAgICAgIHZ4ID0gLXZ4ICogd2lkdGhBZHZhbmNlU2NhbGU7XG4gICAgICAgICAgICAgIHZhciB2eSA9IHZtZXRyaWNbMl0gKiB3aWR0aEFkdmFuY2VTY2FsZTtcbiAgICAgICAgICAgICAgd2lkdGggPSB2bWV0cmljID8gLXZtZXRyaWNbMF0gOiB3aWR0aDtcbiAgICAgICAgICAgICAgc2NhbGVkWCA9IHZ4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgc2NhbGVkWSA9ICh4ICsgdnkpIC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgc2NhbGVkWSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChnbHlwaC5pc0luRm9udCB8fCBmb250Lm1pc3NpbmdGaWxlKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnQueGNvb3Jkcy5wdXNoKGN1cnJlbnQueCArIHNjYWxlZFgpO1xuXG4gICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQueWNvb3Jkcy5wdXNoKC1jdXJyZW50LnkgKyBzY2FsZWRZKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4udGV4dENvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgfSBlbHNlIHt9XG5cbiAgICAgICAgICAgIHZhciBjaGFyV2lkdGggPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlIC0gc3BhY2luZyAqIGZvbnREaXJlY3Rpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlICsgc3BhY2luZyAqIGZvbnREaXJlY3Rpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHggKz0gY2hhcldpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBjdXJyZW50Lnhjb29yZHMubWFwKHBmKS5qb2luKFwiIFwiKSk7XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgY3VycmVudC55Y29vcmRzLm1hcChwZikuam9pbihcIiBcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgIGN1cnJlbnQueSAtPSB4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnQueCArPSB4ICogdGV4dEhTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LWZhbWlseVwiLCBjdXJyZW50LmZvbnRGYW1pbHkpO1xuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1zaXplXCIsIFwiXCIuY29uY2F0KHBmKGN1cnJlbnQuZm9udFNpemUpLCBcInB4XCIpKTtcblxuICAgICAgICBpZiAoY3VycmVudC5mb250U3R5bGUgIT09IFNWR19ERUZBVUxUUy5mb250U3R5bGUpIHtcbiAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1zdHlsZVwiLCBjdXJyZW50LmZvbnRTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudC5mb250V2VpZ2h0ICE9PSBTVkdfREVGQVVMVFMuZm9udFdlaWdodCkge1xuICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LXdlaWdodFwiLCBjdXJyZW50LmZvbnRXZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG5cbiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgIGlmIChjdXJyZW50LmZpbGxDb2xvciAhPT0gU1ZHX0RFRkFVTFRTLmZpbGxDb2xvcikge1xuICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgY3VycmVudC5maWxsQ29sb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50LmZpbGxBbHBoYSA8IDEpIHtcbiAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLW9wYWNpdHlcIiwgY3VycmVudC5maWxsQWxwaGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSCkge1xuICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgdmFyIGxpbmVXaWR0aFNjYWxlID0gMSAvIChjdXJyZW50LnRleHRNYXRyaXhTY2FsZSB8fCAxKTtcblxuICAgICAgICAgIHRoaXMuX3NldFN0cm9rZUF0dHJpYnV0ZXMoY3VycmVudC50c3BhbiwgbGluZVdpZHRoU2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHRNYXRyaXggPSBjdXJyZW50LnRleHRNYXRyaXg7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQudGV4dFJpc2UgIT09IDApIHtcbiAgICAgICAgICB0ZXh0TWF0cml4ID0gdGV4dE1hdHJpeC5zbGljZSgpO1xuICAgICAgICAgIHRleHRNYXRyaXhbNV0gKz0gY3VycmVudC50ZXh0UmlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInRyYW5zZm9ybVwiLCBcIlwiLmNvbmNhdChwbSh0ZXh0TWF0cml4KSwgXCIgc2NhbGUoXCIpLmNvbmNhdChwZih0ZXh0SFNjYWxlKSwgXCIsIC0xKVwiKSk7XG4gICAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhYTUxfTlMsIFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG4gICAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50LnRzcGFuKTtcbiAgICAgICAgY3VycmVudC50eHRncnAuYXBwZW5kQ2hpbGQoY3VycmVudC50eHRFbGVtZW50KTtcblxuICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKGN1cnJlbnQudHh0RWxlbWVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldExlYWRpbmdNb3ZlVGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExlYWRpbmdNb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgIHRoaXMuc2V0TGVhZGluZygteSk7XG4gICAgICAgIHRoaXMubW92ZVRleHQoeCwgeSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZEZvbnRTdHlsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEZvbnRTdHlsZShmb250T2JqKSB7XG4gICAgICAgIGlmICghZm9udE9iai5kYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkRm9udFN0eWxlOiBObyBmb250IGRhdGEgYXZhaWxhYmxlLCBcIiArICdlbnN1cmUgdGhhdCB0aGUgXCJmb250RXh0cmFQcm9wZXJ0aWVzXCIgQVBJIHBhcmFtZXRlciBpcyBzZXQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuY3NzU3R5bGUpIHtcbiAgICAgICAgICB0aGlzLmNzc1N0eWxlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6c3R5bGVcIik7XG4gICAgICAgICAgdGhpcy5jc3NTdHlsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcbiAgICAgICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQodGhpcy5jc3NTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXJsID0gKDAsIF91dGlsLmNyZWF0ZU9iamVjdFVSTCkoZm9udE9iai5kYXRhLCBmb250T2JqLm1pbWV0eXBlLCB0aGlzLmZvcmNlRGF0YVNjaGVtYSk7XG4gICAgICAgIHRoaXMuY3NzU3R5bGUudGV4dENvbnRlbnQgKz0gXCJAZm9udC1mYWNlIHsgZm9udC1mYW1pbHk6IFxcXCJcIi5jb25jYXQoZm9udE9iai5sb2FkZWROYW1lLCBcIlxcXCI7XCIpICsgXCIgc3JjOiB1cmwoXCIuY29uY2F0KHVybCwgXCIpOyB9XFxuXCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRGb250XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Rm9udChkZXRhaWxzKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICB2YXIgZm9udE9iaiA9IHRoaXMuY29tbW9uT2Jqcy5nZXQoZGV0YWlsc1swXSk7XG4gICAgICAgIHZhciBzaXplID0gZGV0YWlsc1sxXTtcbiAgICAgICAgY3VycmVudC5mb250ID0gZm9udE9iajtcblxuICAgICAgICBpZiAodGhpcy5lbWJlZEZvbnRzICYmICFmb250T2JqLm1pc3NpbmdGaWxlICYmICF0aGlzLmVtYmVkZGVkRm9udHNbZm9udE9iai5sb2FkZWROYW1lXSkge1xuICAgICAgICAgIHRoaXMuYWRkRm9udFN0eWxlKGZvbnRPYmopO1xuICAgICAgICAgIHRoaXMuZW1iZWRkZWRGb250c1tmb250T2JqLmxvYWRlZE5hbWVdID0gZm9udE9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQuZm9udE1hdHJpeCA9IGZvbnRPYmouZm9udE1hdHJpeCB8fCBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICAgICAgdmFyIGJvbGQgPSBcIm5vcm1hbFwiO1xuXG4gICAgICAgIGlmIChmb250T2JqLmJsYWNrKSB7XG4gICAgICAgICAgYm9sZCA9IFwiOTAwXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udE9iai5ib2xkKSB7XG4gICAgICAgICAgYm9sZCA9IFwiYm9sZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGl0YWxpYyA9IGZvbnRPYmouaXRhbGljID8gXCJpdGFsaWNcIiA6IFwibm9ybWFsXCI7XG5cbiAgICAgICAgaWYgKHNpemUgPCAwKSB7XG4gICAgICAgICAgc2l6ZSA9IC1zaXplO1xuICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50LmZvbnRTaXplID0gc2l6ZTtcbiAgICAgICAgY3VycmVudC5mb250RmFtaWx5ID0gZm9udE9iai5sb2FkZWROYW1lO1xuICAgICAgICBjdXJyZW50LmZvbnRXZWlnaHQgPSBib2xkO1xuICAgICAgICBjdXJyZW50LmZvbnRTdHlsZSA9IGl0YWxpYztcbiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBwZigtY3VycmVudC55KSk7XG4gICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZW5kVGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuZFRleHQoKSB7XG4gICAgICAgIHZhciBfY3VycmVudCR0eHRFbGVtZW50O1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlICYgX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuQUREX1RPX1BBVEhfRkxBRyAmJiAoX2N1cnJlbnQkdHh0RWxlbWVudCA9IGN1cnJlbnQudHh0RWxlbWVudCkgIT09IG51bGwgJiYgX2N1cnJlbnQkdHh0RWxlbWVudCAhPT0gdm9pZCAwICYmIF9jdXJyZW50JHR4dEVsZW1lbnQuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3VycmVudC5lbGVtZW50ID0gY3VycmVudC50eHRFbGVtZW50O1xuICAgICAgICAgIHRoaXMuY2xpcChcIm5vbnplcm9cIik7XG4gICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGluZVdpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoKSB7XG4gICAgICAgIGlmICh3aWR0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGluZUNhcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExpbmVDYXAoc3R5bGUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmxpbmVDYXAgPSBMSU5FX0NBUF9TVFlMRVNbc3R5bGVdO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRMaW5lSm9pblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExpbmVKb2luKHN0eWxlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5saW5lSm9pbiA9IExJTkVfSk9JTl9TVFlMRVNbc3R5bGVdO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRNaXRlckxpbWl0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TWl0ZXJMaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLmN1cnJlbnQubWl0ZXJMaW1pdCA9IGxpbWl0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRTdHJva2VBbHBoYVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0cm9rZUFscGhhKHN0cm9rZUFscGhhKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VBbHBoYSA9IHN0cm9rZUFscGhhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRTdHJva2VSR0JDb2xvclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0cm9rZVJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IociwgZywgYik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldEZpbGxBbHBoYVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxBbHBoYShmaWxsQWxwaGEpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxBbHBoYSA9IGZpbGxBbHBoYTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RmlsbFJHQkNvbG9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbFJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKHIsIGcsIGIpO1xuICAgICAgICB0aGlzLmN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgICAgdGhpcy5jdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0U3Ryb2tlQ29sb3JOXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3Ryb2tlQ29sb3JOKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gdGhpcy5fbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRGaWxsQ29sb3JOXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbENvbG9yTihhcmdzKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSB0aGlzLl9tYWtlQ29sb3JOX1BhdHRlcm4oYXJncyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNoYWRpbmdGaWxsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hhZGluZ0ZpbGwoYXJncykge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnZpZXdwb3J0LndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIGludiA9IF91dGlsLlV0aWwuaW52ZXJzZVRyYW5zZm9ybSh0aGlzLnRyYW5zZm9ybU1hdHJpeCk7XG5cbiAgICAgICAgdmFyIGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7XG5cbiAgICAgICAgdmFyIGJyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgaGVpZ2h0XSwgaW52KTtcblxuICAgICAgICB2YXIgdWwgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt3aWR0aCwgMF0sIGludik7XG5cbiAgICAgICAgdmFyIHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgdmFyIHgwID0gTWF0aC5taW4oYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pO1xuICAgICAgICB2YXIgeTAgPSBNYXRoLm1pbihibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7XG4gICAgICAgIHZhciB4MSA9IE1hdGgubWF4KGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgdmFyIHkxID0gTWF0aC5tYXgoYmxbMV0sIGJyWzFdLCB1bFsxXSwgdXJbMV0pO1xuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIHgwKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgeTApO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwid2lkdGhcIiwgeDEgLSB4MCk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgeTEgLSB5MCk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIHRoaXMuX21ha2VTaGFkaW5nUGF0dGVybihhcmdzKSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5maWxsQWxwaGEgPCAxKSB7XG4gICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtb3BhY2l0eVwiLCB0aGlzLmN1cnJlbnQuZmlsbEFscGhhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQocmVjdCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tYWtlQ29sb3JOX1BhdHRlcm5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3NbMF0gPT09IFwiVGlsaW5nUGF0dGVyblwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VUaWxpbmdQYXR0ZXJuKGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VTaGFkaW5nUGF0dGVybihhcmdzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX21ha2VUaWxpbmdQYXR0ZXJuXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX21ha2VUaWxpbmdQYXR0ZXJuKGFyZ3MpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIG9wZXJhdG9yTGlzdCA9IGFyZ3NbMl07XG4gICAgICAgIHZhciBtYXRyaXggPSBhcmdzWzNdIHx8IF91dGlsLklERU5USVRZX01BVFJJWDtcblxuICAgICAgICB2YXIgX2FyZ3MkID0gX3NsaWNlZFRvQXJyYXkoYXJnc1s0XSwgNCksXG4gICAgICAgICAgICB4MCA9IF9hcmdzJFswXSxcbiAgICAgICAgICAgIHkwID0gX2FyZ3MkWzFdLFxuICAgICAgICAgICAgeDEgPSBfYXJncyRbMl0sXG4gICAgICAgICAgICB5MSA9IF9hcmdzJFszXTtcblxuICAgICAgICB2YXIgeHN0ZXAgPSBhcmdzWzVdO1xuICAgICAgICB2YXIgeXN0ZXAgPSBhcmdzWzZdO1xuICAgICAgICB2YXIgcGFpbnRUeXBlID0gYXJnc1s3XTtcbiAgICAgICAgdmFyIHRpbGluZ0lkID0gXCJzaGFkaW5nXCIuY29uY2F0KHNoYWRpbmdDb3VudCsrKTtcblxuICAgICAgICB2YXIgX1V0aWwkYXBwbHlUcmFuc2Zvcm0gPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt4MCwgeTBdLCBtYXRyaXgpLFxuICAgICAgICAgICAgX1V0aWwkYXBwbHlUcmFuc2Zvcm0yID0gX3NsaWNlZFRvQXJyYXkoX1V0aWwkYXBwbHlUcmFuc2Zvcm0sIDIpLFxuICAgICAgICAgICAgdHgwID0gX1V0aWwkYXBwbHlUcmFuc2Zvcm0yWzBdLFxuICAgICAgICAgICAgdHkwID0gX1V0aWwkYXBwbHlUcmFuc2Zvcm0yWzFdO1xuXG4gICAgICAgIHZhciBfVXRpbCRhcHBseVRyYW5zZm9ybTMgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt4MSwgeTFdLCBtYXRyaXgpLFxuICAgICAgICAgICAgX1V0aWwkYXBwbHlUcmFuc2Zvcm00ID0gX3NsaWNlZFRvQXJyYXkoX1V0aWwkYXBwbHlUcmFuc2Zvcm0zLCAyKSxcbiAgICAgICAgICAgIHR4MSA9IF9VdGlsJGFwcGx5VHJhbnNmb3JtNFswXSxcbiAgICAgICAgICAgIHR5MSA9IF9VdGlsJGFwcGx5VHJhbnNmb3JtNFsxXTtcblxuICAgICAgICB2YXIgX1V0aWwkc2luZ3VsYXJWYWx1ZURlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShtYXRyaXgpLFxuICAgICAgICAgICAgX1V0aWwkc2luZ3VsYXJWYWx1ZURlMiA9IF9zbGljZWRUb0FycmF5KF9VdGlsJHNpbmd1bGFyVmFsdWVEZSwgMiksXG4gICAgICAgICAgICB4c2NhbGUgPSBfVXRpbCRzaW5ndWxhclZhbHVlRGUyWzBdLFxuICAgICAgICAgICAgeXNjYWxlID0gX1V0aWwkc2luZ3VsYXJWYWx1ZURlMlsxXTtcblxuICAgICAgICB2YXIgdHhzdGVwID0geHN0ZXAgKiB4c2NhbGU7XG4gICAgICAgIHZhciB0eXN0ZXAgPSB5c3RlcCAqIHlzY2FsZTtcbiAgICAgICAgdmFyIHRpbGluZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnBhdHRlcm5cIik7XG4gICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImlkXCIsIHRpbGluZ0lkKTtcbiAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwicGF0dGVyblVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIik7XG4gICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHR4c3RlcCk7XG4gICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCB0eXN0ZXApO1xuICAgICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIFwiXCIuY29uY2F0KHR4MCkpO1xuICAgICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIFwiXCIuY29uY2F0KHR5MCkpO1xuICAgICAgICB2YXIgc3ZnID0gdGhpcy5zdmc7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1NYXRyaXggPSB0aGlzLnRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjtcbiAgICAgICAgdmFyIGJib3ggPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHR4MSAtIHR4MCwgdHkxIC0gdHkwKTtcbiAgICAgICAgdGhpcy5zdmcgPSBiYm94O1xuICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IG1hdHJpeDtcblxuICAgICAgICBpZiAocGFpbnRUeXBlID09PSAyKSB7XG4gICAgICAgICAgdmFyIGNzc0NvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IuYXBwbHkoX3V0aWwuVXRpbCwgX3RvQ29uc3VtYWJsZUFycmF5KGNvbG9yKSk7XG5cbiAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gY3NzQ29sb3I7XG4gICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gY3NzQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV4ZWN1dGVPcFRyZWUodGhpcy5jb252ZXJ0T3BMaXN0KG9wZXJhdG9yTGlzdCkpO1xuICAgICAgICB0aGlzLnN2ZyA9IHN2ZztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBmaWxsQ29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IHN0cm9rZUNvbG9yO1xuICAgICAgICB0aWxpbmcuYXBwZW5kQ2hpbGQoYmJveC5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKHRpbGluZyk7XG4gICAgICAgIHJldHVybiBcInVybCgjXCIuY29uY2F0KHRpbGluZ0lkLCBcIilcIik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tYWtlU2hhZGluZ1BhdHRlcm5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZVNoYWRpbmdQYXR0ZXJuKGFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChhcmdzWzBdKSB7XG4gICAgICAgICAgY2FzZSBcIlJhZGlhbEF4aWFsXCI6XG4gICAgICAgICAgICB2YXIgc2hhZGluZ0lkID0gXCJzaGFkaW5nXCIuY29uY2F0KHNoYWRpbmdDb3VudCsrKTtcbiAgICAgICAgICAgIHZhciBjb2xvclN0b3BzID0gYXJnc1szXTtcbiAgICAgICAgICAgIHZhciBncmFkaWVudDtcblxuICAgICAgICAgICAgc3dpdGNoIChhcmdzWzFdKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJheGlhbFwiOlxuICAgICAgICAgICAgICAgIHZhciBwb2ludDAgPSBhcmdzWzRdO1xuICAgICAgICAgICAgICAgIHZhciBwb2ludDEgPSBhcmdzWzVdO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6bGluZWFyR3JhZGllbnRcIik7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJpZFwiLCBzaGFkaW5nSWQpO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieDFcIiwgcG9pbnQwWzBdKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInkxXCIsIHBvaW50MFsxXSk7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4MlwiLCBwb2ludDFbMF0pO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieTJcIiwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwicmFkaWFsXCI6XG4gICAgICAgICAgICAgICAgdmFyIGZvY2FsUG9pbnQgPSBhcmdzWzRdO1xuICAgICAgICAgICAgICAgIHZhciBjaXJjbGVQb2ludCA9IGFyZ3NbNV07XG4gICAgICAgICAgICAgICAgdmFyIGZvY2FsUmFkaXVzID0gYXJnc1s2XTtcbiAgICAgICAgICAgICAgICB2YXIgY2lyY2xlUmFkaXVzID0gYXJnc1s3XTtcbiAgICAgICAgICAgICAgICBncmFkaWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJhZGlhbEdyYWRpZW50XCIpO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgc2hhZGluZ0lkKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImN4XCIsIGNpcmNsZVBvaW50WzBdKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImN5XCIsIGNpcmNsZVBvaW50WzFdKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInJcIiwgY2lyY2xlUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZ4XCIsIGZvY2FsUG9pbnRbMF0pO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZnlcIiwgZm9jYWxQb2ludFsxXSk7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmclwiLCBmb2NhbFJhZGl1cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFJhZGlhbEF4aWFsIHR5cGU6IFwiLmNvbmNhdChhcmdzWzFdKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY29sb3JTdG9wcyksXG4gICAgICAgICAgICAgICAgX3N0ZXA1O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciBjb2xvclN0b3AgPSBfc3RlcDUudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIHN0b3AgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpzdG9wXCIpO1xuICAgICAgICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlTlMobnVsbCwgXCJvZmZzZXRcIiwgY29sb3JTdG9wWzBdKTtcbiAgICAgICAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3RvcC1jb2xvclwiLCBjb2xvclN0b3BbMV0pO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LmFwcGVuZENoaWxkKHN0b3ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKGdyYWRpZW50KTtcbiAgICAgICAgICAgIHJldHVybiBcInVybCgjXCIuY29uY2F0KHNoYWRpbmdJZCwgXCIpXCIpO1xuXG4gICAgICAgICAgY2FzZSBcIk1lc2hcIjpcbiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlVuaW1wbGVtZW50ZWQgcGF0dGVybiBNZXNoXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImhvdHBpbmtcIjtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIElSIHR5cGU6IFwiLmNvbmNhdChhcmdzWzBdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RGFzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmRhc2hBcnJheSA9IGRhc2hBcnJheTtcbiAgICAgICAgdGhpcy5jdXJyZW50LmRhc2hQaGFzZSA9IGRhc2hQaGFzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29uc3RydWN0UGF0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnN0cnVjdFBhdGgob3BzLCBhcmdzKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICB2YXIgeCA9IGN1cnJlbnQueCxcbiAgICAgICAgICAgIHkgPSBjdXJyZW50Lnk7XG4gICAgICAgIHZhciBkID0gW107XG4gICAgICAgIHZhciBqID0gMDtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG9wcyksXG4gICAgICAgICAgICBfc3RlcDY7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIG9wID0gX3N0ZXA2LnZhbHVlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG9wIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5yZWN0YW5nbGU6XG4gICAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgIHZhciB4dyA9IHggKyB3aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgeWggPSB5ICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGQucHVzaChcIk1cIiwgcGYoeCksIHBmKHkpLCBcIkxcIiwgcGYoeHcpLCBwZih5KSwgXCJMXCIsIHBmKHh3KSwgcGYoeWgpLCBcIkxcIiwgcGYoeCksIHBmKHloKSwgXCJaXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzpcbiAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICAgICAgZC5wdXNoKFwiTVwiLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmxpbmVUbzpcbiAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICAgICAgZC5wdXNoKFwiTFwiLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG86XG4gICAgICAgICAgICAgICAgeCA9IGFyZ3NbaiArIDRdO1xuICAgICAgICAgICAgICAgIHkgPSBhcmdzW2ogKyA1XTtcbiAgICAgICAgICAgICAgICBkLnB1c2goXCJDXCIsIHBmKGFyZ3Nbal0pLCBwZihhcmdzW2ogKyAxXSksIHBmKGFyZ3NbaiArIDJdKSwgcGYoYXJnc1tqICsgM10pLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgICAgIGogKz0gNjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvMjpcbiAgICAgICAgICAgICAgICBkLnB1c2goXCJDXCIsIHBmKHgpLCBwZih5KSwgcGYoYXJnc1tqXSksIHBmKGFyZ3NbaiArIDFdKSwgcGYoYXJnc1tqICsgMl0pLCBwZihhcmdzW2ogKyAzXSkpO1xuICAgICAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICAgICAgaiArPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG8zOlxuICAgICAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICAgICAgZC5wdXNoKFwiQ1wiLCBwZihhcmdzW2pdKSwgcGYoYXJnc1tqICsgMV0pLCBwZih4KSwgcGYoeSksIHBmKHgpLCBwZih5KSk7XG4gICAgICAgICAgICAgICAgaiArPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmNsb3NlUGF0aDpcbiAgICAgICAgICAgICAgICBkLnB1c2goXCJaXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNi5mKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkID0gZC5qb2luKFwiIFwiKTtcblxuICAgICAgICBpZiAoY3VycmVudC5wYXRoICYmIG9wcy5sZW5ndGggPiAwICYmIG9wc1swXSAhPT0gX3V0aWwuT1BTLnJlY3RhbmdsZSAmJiBvcHNbMF0gIT09IF91dGlsLk9QUy5tb3ZlVG8pIHtcbiAgICAgICAgICBkID0gY3VycmVudC5wYXRoLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKSArIGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudC5wYXRoID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cGF0aFwiKTtcblxuICAgICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoY3VycmVudC5wYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImRcIiwgZCk7XG4gICAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICBjdXJyZW50LmVsZW1lbnQgPSBjdXJyZW50LnBhdGg7XG4gICAgICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbmRQYXRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kUGF0aCgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQucGF0aCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGlwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xpcElkID0gXCJjbGlwcGF0aFwiLmNvbmNhdChjbGlwQ291bnQrKyk7XG4gICAgICAgIHZhciBjbGlwUGF0aCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmNsaXBQYXRoXCIpO1xuICAgICAgICBjbGlwUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImlkXCIsIGNsaXBJZCk7XG4gICAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHJhbnNmb3JtXCIsIHBtKHRoaXMudHJhbnNmb3JtTWF0cml4KSk7XG4gICAgICAgIHZhciBjbGlwRWxlbWVudCA9IGN1cnJlbnQuZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0NsaXAgPT09IFwiZXZlbm9kZFwiKSB7XG4gICAgICAgICAgY2xpcEVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjbGlwLXJ1bGVcIiwgXCJldmVub2RkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsaXBFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiY2xpcC1ydWxlXCIsIFwibm9uemVyb1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsO1xuICAgICAgICBjbGlwUGF0aC5hcHBlbmRDaGlsZChjbGlwRWxlbWVudCk7XG4gICAgICAgIHRoaXMuZGVmcy5hcHBlbmRDaGlsZChjbGlwUGF0aCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuYWN0aXZlQ2xpcFVybCkge1xuICAgICAgICAgIGN1cnJlbnQuY2xpcEdyb3VwID0gbnVsbDtcblxuICAgICAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5leHRyYVN0YWNrKSxcbiAgICAgICAgICAgICAgX3N0ZXA3O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBwcmV2ID0gX3N0ZXA3LnZhbHVlO1xuICAgICAgICAgICAgICBwcmV2LmNsaXBHcm91cCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNy5mKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2xpcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjbGlwLXBhdGhcIiwgY3VycmVudC5hY3RpdmVDbGlwVXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQuYWN0aXZlQ2xpcFVybCA9IFwidXJsKCNcIi5jb25jYXQoY2xpcElkLCBcIilcIik7XG4gICAgICAgIHRoaXMudGdycCA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsaXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlwKHR5cGUpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IHR5cGU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsb3NlUGF0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlUGF0aCgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQucGF0aCkge1xuICAgICAgICAgIHZhciBkID0gXCJcIi5jb25jYXQoY3VycmVudC5wYXRoLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKSwgXCJaXCIpO1xuICAgICAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImRcIiwgZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0TGVhZGluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExlYWRpbmcobGVhZGluZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQubGVhZGluZyA9IC1sZWFkaW5nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRUZXh0UmlzZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRleHRSaXNlKHRleHRSaXNlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC50ZXh0UmlzZSA9IHRleHRSaXNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRUZXh0UmVuZGVyaW5nTW9kZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRleHRSZW5kZXJpbmdNb2RlKHRleHRSZW5kZXJpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9IHRleHRSZW5kZXJpbmdNb2RlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRIU2NhbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIU2NhbGUoc2NhbGUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0UmVuZGVyaW5nSW50ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmVuZGVyaW5nSW50ZW50KGludGVudCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0RmxhdG5lc3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGbGF0bmVzcyhmbGF0bmVzcykge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0R1N0YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0R1N0YXRlKHN0YXRlcykge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlcyksXG4gICAgICAgICAgICBfc3RlcDg7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIF9zdGVwOCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwOC52YWx1ZSwgMiksXG4gICAgICAgICAgICAgICAga2V5ID0gX3N0ZXA4JHZhbHVlWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gX3N0ZXA4JHZhbHVlWzFdO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICBjYXNlIFwiTFdcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcIkxDXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiTEpcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVKb2luKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiTUxcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1pdGVyTGltaXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJEXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcIlJJXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJGTFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3ModmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiQ0FcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0cm9rZUFscGhhKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiY2FcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZpbGxBbHBoYSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJVbmltcGxlbWVudGVkIGdyYXBoaWMgc3RhdGUgb3BlcmF0b3IgXCIuY29uY2F0KGtleSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOC5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlsbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGwoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgICBjdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIGN1cnJlbnQuZmlsbENvbG9yKTtcbiAgICAgICAgICBjdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLW9wYWNpdHlcIiwgY3VycmVudC5maWxsQWxwaGEpO1xuICAgICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0cm9rZSgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuZWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuX3NldFN0cm9rZUF0dHJpYnV0ZXMoY3VycmVudC5lbGVtZW50KTtcblxuICAgICAgICAgIGN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9zZXRTdHJva2VBdHRyaWJ1dGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFN0cm9rZUF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgICAgICB2YXIgbGluZVdpZHRoU2NhbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICB2YXIgZGFzaEFycmF5ID0gY3VycmVudC5kYXNoQXJyYXk7XG5cbiAgICAgICAgaWYgKGxpbmVXaWR0aFNjYWxlICE9PSAxICYmIGRhc2hBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGFzaEFycmF5ID0gZGFzaEFycmF5Lm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5lV2lkdGhTY2FsZSAqIHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZVwiLCBjdXJyZW50LnN0cm9rZUNvbG9yKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1vcGFjaXR5XCIsIGN1cnJlbnQuc3Ryb2tlQWxwaGEpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3Ryb2tlLW1pdGVybGltaXRcIiwgcGYoY3VycmVudC5taXRlckxpbWl0KSk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtbGluZWNhcFwiLCBjdXJyZW50LmxpbmVDYXApO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3Ryb2tlLWxpbmVqb2luXCIsIGN1cnJlbnQubGluZUpvaW4pO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3Ryb2tlLXdpZHRoXCIsIHBmKGxpbmVXaWR0aFNjYWxlICogY3VycmVudC5saW5lV2lkdGgpICsgXCJweFwiKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1kYXNoYXJyYXlcIiwgZGFzaEFycmF5Lm1hcChwZikuam9pbihcIiBcIikpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3Ryb2tlLWRhc2hvZmZzZXRcIiwgcGYobGluZVdpZHRoU2NhbGUgKiBjdXJyZW50LmRhc2hQaGFzZSkgKyBcInB4XCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlb0ZpbGxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlb0ZpbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQuZWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbC1ydWxlXCIsIFwiZXZlbm9kZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmaWxsU3Ryb2tlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbFN0cm9rZSgpIHtcbiAgICAgICAgdGhpcy5zdHJva2UoKTtcbiAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImVvRmlsbFN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVvRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5lbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLXJ1bGVcIiwgXCJldmVub2RkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsb3NlU3Ryb2tlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsb3NlRmlsbFN0cm9rZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsb3NlRU9GaWxsU3Ryb2tlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VFT0ZpbGxTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgICAgIHRoaXMuZW9GaWxsU3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhaW50U29saWRDb2xvckltYWdlTWFza1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50U29saWRDb2xvckltYWdlTWFzaygpIHtcbiAgICAgICAgdmFyIHJlY3QgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpyZWN0XCIpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIFwiMFwiKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIFwiMXB4XCIpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIFwiMXB4XCIpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbFwiLCB0aGlzLmN1cnJlbnQuZmlsbENvbG9yKTtcblxuICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKHJlY3QpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludEltYWdlWE9iamVjdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50SW1hZ2VYT2JqZWN0KG9iaklkKSB7XG4gICAgICAgIHZhciBpbWdEYXRhID0gb2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTtcblxuICAgICAgICBpZiAoIWltZ0RhdGEpIHtcbiAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJEZXBlbmRlbnQgaW1hZ2Ugd2l0aCBvYmplY3QgSUQgXCIuY29uY2F0KG9iaklkLCBcIiBpcyBub3QgcmVhZHkgeWV0XCIpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludElubGluZUltYWdlWE9iamVjdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEsIG1hc2spIHtcbiAgICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgICB2YXIgaW1nU3JjID0gY29udmVydEltZ0RhdGFUb1BuZyhpbWdEYXRhLCB0aGlzLmZvcmNlRGF0YVNjaGVtYSwgISFtYXNrKTtcbiAgICAgICAgdmFyIGNsaXByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIFwiMFwiKTtcbiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkpO1xuICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBwZihoZWlnaHQpKTtcbiAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQgPSBjbGlwcmVjdDtcbiAgICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgICAgdmFyIGltZ0VsID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6aW1hZ2VcIik7XG4gICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKFhMSU5LX05TLCBcInhsaW5rOmhyZWZcIiwgaW1nU3JjKTtcbiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1oZWlnaHQpKTtcbiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkgKyBcInB4XCIpO1xuICAgICAgICBpbWdFbC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBwZihoZWlnaHQpICsgXCJweFwiKTtcbiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgXCJzY2FsZShcIi5jb25jYXQocGYoMSAvIHdpZHRoKSwgXCIgXCIpLmNvbmNhdChwZigtMSAvIGhlaWdodCksIFwiKVwiKSk7XG5cbiAgICAgICAgaWYgKG1hc2spIHtcbiAgICAgICAgICBtYXNrLmFwcGVuZENoaWxkKGltZ0VsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKGltZ0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwYWludEltYWdlTWFza1hPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludEltYWdlTWFza1hPYmplY3QoaW1nRGF0YSkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgICB2YXIgZmlsbENvbG9yID0gY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgIGN1cnJlbnQubWFza0lkID0gXCJtYXNrXCIuY29uY2F0KG1hc2tDb3VudCsrKTtcbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzptYXNrXCIpO1xuICAgICAgICBtYXNrLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgY3VycmVudC5tYXNrSWQpO1xuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgXCIwXCIpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwid2lkdGhcIiwgcGYod2lkdGgpKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBwZihoZWlnaHQpKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgZmlsbENvbG9yKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIm1hc2tcIiwgXCJ1cmwoI1wiLmNvbmNhdChjdXJyZW50Lm1hc2tJZCwgXCIpXCIpKTtcbiAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKG1hc2spO1xuXG4gICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQocmVjdCk7XG5cbiAgICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhLCBtYXNrKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFpbnRGb3JtWE9iamVjdEJlZ2luXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRGb3JtWE9iamVjdEJlZ2luKG1hdHJpeCwgYmJveCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRyaXgpICYmIG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybShtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gICAgICAgICAgdmFyIGhlaWdodCA9IGJib3hbM10gLSBiYm94WzFdO1xuICAgICAgICAgIHZhciBjbGlwcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4XCIsIGJib3hbMF0pO1xuICAgICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBiYm94WzFdKTtcbiAgICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHBmKHdpZHRoKSk7XG4gICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgcGYoaGVpZ2h0KSk7XG4gICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQgPSBjbGlwcmVjdDtcbiAgICAgICAgICB0aGlzLmNsaXAoXCJub256ZXJvXCIpO1xuICAgICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhaW50Rm9ybVhPYmplY3RFbmRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludEZvcm1YT2JqZWN0RW5kKCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2luaXRpYWxpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZSh2aWV3cG9ydCkge1xuICAgICAgICB2YXIgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0KTtcbiAgICAgICAgdmFyIGRlZmluaXRpb25zID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6ZGVmc1wiKTtcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKGRlZmluaXRpb25zKTtcbiAgICAgICAgdGhpcy5kZWZzID0gZGVmaW5pdGlvbnM7XG4gICAgICAgIHZhciByb290R3JvdXAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICByb290R3JvdXAuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgcG0odmlld3BvcnQudHJhbnNmb3JtKSk7XG4gICAgICAgIHN2Zy5hcHBlbmRDaGlsZChyb290R3JvdXApO1xuICAgICAgICB0aGlzLnN2ZyA9IHJvb3RHcm91cDtcbiAgICAgICAgcmV0dXJuIHN2ZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2Vuc3VyZUNsaXBHcm91cFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnN1cmVDbGlwR3JvdXAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50LmNsaXBHcm91cCkge1xuICAgICAgICAgIHZhciBjbGlwR3JvdXAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICAgIGNsaXBHcm91cC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImNsaXAtcGF0aFwiLCB0aGlzLmN1cnJlbnQuYWN0aXZlQ2xpcFVybCk7XG4gICAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoY2xpcEdyb3VwKTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnQuY2xpcEdyb3VwID0gY2xpcEdyb3VwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudC5jbGlwR3JvdXA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9lbnN1cmVUcmFuc2Zvcm1Hcm91cFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRncnApIHtcbiAgICAgICAgICB0aGlzLnRncnAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICAgIHRoaXMudGdycC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInRyYW5zZm9ybVwiLCBwbSh0aGlzLnRyYW5zZm9ybU1hdHJpeCkpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVDbGlwVXJsKSB7XG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVDbGlwR3JvdXAoKS5hcHBlbmRDaGlsZCh0aGlzLnRncnApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnRncnApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRncnA7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNWR0dyYXBoaWNzO1xuICB9KCk7XG59XG5cbi8qKiovIH0pLFxuLyogMTI5ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuWGZhTGF5ZXIgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMykgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTM7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgWGZhTGF5ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBYZmFMYXllcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWGZhTGF5ZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFhmYUxheWVyLCBudWxsLCBbe1xuICAgIGtleTogXCJzZXR1cFN0b3JhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBTdG9yYWdlKGh0bWwsIGZpZWxkSWQsIGVsZW1lbnQsIHN0b3JhZ2UpIHtcbiAgICAgIHZhciBzdG9yZWREYXRhID0gc3RvcmFnZS5nZXRWYWx1ZShmaWVsZElkLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9KTtcblxuICAgICAgc3dpdGNoIChlbGVtZW50Lm5hbWUpIHtcbiAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgaHRtbC50ZXh0Q29udGVudCA9IHN0b3JlZERhdGEudmFsdWUgIT09IG51bGwgPyBzdG9yZWREYXRhLnZhbHVlIDogXCJcIjtcbiAgICAgICAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoZmllbGRJZCwge1xuICAgICAgICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICBpZiAoc3RvcmVkRGF0YS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaHRtbC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBzdG9yZWREYXRhLnZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5hdHRyaWJ1dGVzLnR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgICAgICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSh0YXJnZXQubmFtZSkpLFxuICAgICAgICAgICAgICAgICAgX3N0ZXA7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhZGlvID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChyYWRpbyAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHJhZGlvLmlkO1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLnNwbGl0KFwiLVwiKVswXSwge1xuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoZmllbGRJZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShmaWVsZElkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICBpZiAoc3RvcmVkRGF0YS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlbGVtZW50LmNoaWxkcmVuKSxcbiAgICAgICAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24uYXR0cmlidXRlcy52YWx1ZSA9PT0gc3RvcmVkRGF0YS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgb3B0aW9uLmF0dHJpYnV0ZXMuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGV2ZW50LnRhcmdldC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9ucy5zZWxlY3RlZEluZGV4ID09PSAtMSA/IG51bGwgOiBvcHRpb25zW29wdGlvbnMuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGZpZWxkSWQsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0QXR0cmlidXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGh0bWwsIGVsZW1lbnQsIHN0b3JhZ2UpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDAsIF9PYmplY3QkZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpOyBfaSA8IF9PYmplY3QkZW50cmllcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIF9PYmplY3QkZW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KF9PYmplY3QkZW50cmllc1tfaV0sIDIpLFxuICAgICAgICAgICAga2V5ID0gX09iamVjdCRlbnRyaWVzJF9pWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBfT2JqZWN0JGVudHJpZXMkX2lbMV07XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwga2V5ID09PSBcImZpZWxkSWRcIikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSAhPT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gXCJ0ZXh0Q29udGVudFwiKSB7XG4gICAgICAgICAgICBodG1sLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0bWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGh0bWwuc3R5bGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RvcmFnZSAmJiBhdHRyaWJ1dGVzLmZpZWxkSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldHVwU3RvcmFnZShodG1sLCBhdHRyaWJ1dGVzLmZpZWxkSWQsIGVsZW1lbnQsIHN0b3JhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHBhcmFtZXRlcnMpIHtcbiAgICAgIHZhciBzdG9yYWdlID0gcGFyYW1ldGVycy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICAgIHZhciByb290ID0gcGFyYW1ldGVycy54ZmE7XG4gICAgICB2YXIgcm9vdEh0bWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHJvb3QubmFtZSk7XG5cbiAgICAgIGlmIChyb290LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHJvb3RIdG1sLCByb290KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YWNrID0gW1tyb290LCAtMSwgcm9vdEh0bWxdXTtcbiAgICAgIHZhciByb290RGl2ID0gcGFyYW1ldGVycy5kaXY7XG4gICAgICByb290RGl2LmFwcGVuZENoaWxkKHJvb3RIdG1sKTtcbiAgICAgIHZhciBjb2VmZnMgPSBwYXJhbWV0ZXJzLnZpZXdwb3J0LnRyYW5zZm9ybS5qb2luKFwiLFwiKTtcbiAgICAgIHJvb3REaXYuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgoXCIuY29uY2F0KGNvZWZmcywgXCIpXCIpO1xuICAgICAgcm9vdERpdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInhmYUxheWVyIHhmYUZvbnRcIik7XG5cbiAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBfc3RhY2sgPSBfc2xpY2VkVG9BcnJheShzdGFja1tzdGFjay5sZW5ndGggLSAxXSwgMyksXG4gICAgICAgICAgICBwYXJlbnQgPSBfc3RhY2tbMF0sXG4gICAgICAgICAgICBpID0gX3N0YWNrWzFdLFxuICAgICAgICAgICAgaHRtbCA9IF9zdGFja1syXTtcblxuICAgICAgICBpZiAoaSArIDEgPT09IHBhcmVudC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC5jaGlsZHJlblsrK3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdWzFdXTtcblxuICAgICAgICBpZiAoY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuYW1lID0gY2hpbGQubmFtZTtcblxuICAgICAgICBpZiAobmFtZSA9PT0gXCIjdGV4dFwiKSB7XG4gICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZC52YWx1ZSkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkSHRtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG4gICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2hpbGRIdG1sKTtcblxuICAgICAgICBpZiAoY2hpbGQuYXR0cmlidXRlcykge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhjaGlsZEh0bWwsIGNoaWxkLCBzdG9yYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiBjaGlsZC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChbY2hpbGQsIC0xLCBjaGlsZEh0bWxdKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZC52YWx1ZSkge1xuICAgICAgICAgIGNoaWxkSHRtbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZC52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUocGFyYW1ldGVycykge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IFwibWF0cml4KFwiLmNvbmNhdChwYXJhbWV0ZXJzLnZpZXdwb3J0LnRyYW5zZm9ybS5qb2luKFwiLFwiKSwgXCIpXCIpO1xuICAgICAgcGFyYW1ldGVycy5kaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgcGFyYW1ldGVycy5kaXYuaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFhmYUxheWVyO1xufSgpO1xuXG5leHBvcnRzLlhmYUxheWVyID0gWGZhTGF5ZXI7XG5cbi8qKiovIH0pLFxuLyogMTMwICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5QREZOb2RlU3RyZWFtID0gdm9pZCAwO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxudmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG47XG5cbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcblxudmFyIGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG52YXIgdXJsID0gcmVxdWlyZShcInVybFwiKTtcblxudmFyIGZpbGVVcmlSZWdleCA9IC9eZmlsZTpcXC9cXC9cXC9bYS16QS1aXTpcXC8vO1xuXG5mdW5jdGlvbiBwYXJzZVVybChzb3VyY2VVcmwpIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybC5wYXJzZShzb3VyY2VVcmwpO1xuXG4gIGlmIChwYXJzZWRVcmwucHJvdG9jb2wgPT09IFwiZmlsZTpcIiB8fCBwYXJzZWRVcmwuaG9zdCkge1xuICAgIHJldHVybiBwYXJzZWRVcmw7XG4gIH1cblxuICBpZiAoL15bYS16XTpbL1xcXFxdL2kudGVzdChzb3VyY2VVcmwpKSB7XG4gICAgcmV0dXJuIHVybC5wYXJzZShcImZpbGU6Ly8vXCIuY29uY2F0KHNvdXJjZVVybCkpO1xuICB9XG5cbiAgaWYgKCFwYXJzZWRVcmwuaG9zdCkge1xuICAgIHBhcnNlZFVybC5wcm90b2NvbCA9IFwiZmlsZTpcIjtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWRVcmw7XG59XG5cbnZhciBQREZOb2RlU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbShzb3VyY2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTm9kZVN0cmVhbSk7XG5cbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLnVybCA9IHBhcnNlVXJsKHNvdXJjZS51cmwpO1xuICAgIHRoaXMuaXNIdHRwID0gdGhpcy51cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIiB8fCB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJodHRwczpcIjtcbiAgICB0aGlzLmlzRnNVcmwgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJmaWxlOlwiO1xuICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZOb2RlU3RyZWFtLCBbe1xuICAgIGtleTogXCJfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhLCBfdGhpcyRfZnVsbFJlcXVlc3RSZWEyO1xuXG4gICAgICByZXR1cm4gKF90aGlzJF9mdWxsUmVxdWVzdFJlYSA9IChfdGhpcyRfZnVsbFJlcXVlc3RSZWEyID0gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpID09PSBudWxsIHx8IF90aGlzJF9mdWxsUmVxdWVzdFJlYTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9mdWxsUmVxdWVzdFJlYTIuX2xvYWRlZCkgIT09IG51bGwgJiYgX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhICE9PSB2b2lkIDAgPyBfdGhpcyRfZnVsbFJlcXVlc3RSZWEgOiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGdWxsUmVhZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZ1bGxSZWFkZXIoKSB7XG4gICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGTm9kZVN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gdGhpcy5pc0ZzVXJsID8gbmV3IFBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIodGhpcykgOiBuZXcgUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJhbmdlUmVhZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmdlUmVhZGVyKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmFuZ2VSZWFkZXIgPSB0aGlzLmlzRnNVcmwgPyBuZXcgUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIodGhpcywgc3RhcnQsIGVuZCkgOiBuZXcgUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyKHRoaXMsIHN0YXJ0LCBlbmQpO1xuXG4gICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmFuZ2VSZWFkZXIpO1xuXG4gICAgICByZXR1cm4gcmFuZ2VSZWFkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhbmNlbEFsbFJlcXVlc3RzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlYWRlciA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZOb2RlU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLlBERk5vZGVTdHJlYW0gPSBQREZOb2RlU3RyZWFtO1xuXG52YXIgQmFzZUZ1bGxSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlRnVsbFJlYWRlcihzdHJlYW0pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUZ1bGxSZWFkZXIpO1xuXG4gICAgdGhpcy5fdXJsID0gc3RyZWFtLnVybDtcbiAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBudWxsO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5fY29udGVudExlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgdGhpcy5fbG9hZGVkID0gMDtcbiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gc291cmNlLmRpc2FibGVSYW5nZSB8fCBmYWxzZTtcbiAgICB0aGlzLl9yYW5nZUNodW5rU2l6ZSA9IHNvdXJjZS5yYW5nZUNodW5rU2l6ZTtcblxuICAgIGlmICghdGhpcy5fcmFuZ2VDaHVua1NpemUgJiYgIXRoaXMuX2Rpc2FibGVSYW5nZSkge1xuICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVN0cmVhbTtcbiAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlUmFuZ2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSBudWxsO1xuICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VGdWxsUmVhZGVyLCBbe1xuICAgIGtleTogXCJoZWFkZXJzUmVhZHlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaWxlbmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb250ZW50TGVuZ3RoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudExlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNSYW5nZVN1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU3RyZWFtaW5nU3VwcG9ydGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWFkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIGNodW5rLCBidWZmZXI7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9uZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGNodW5rID0gdGhpcy5fcmVhZGFibGVTdHJlYW0ucmVhZCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEoY2h1bmsgPT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHRoaXMucmVhZCgpKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRoaXMuX2NvbnRlbnRMZW5ndGhcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGNodW5rKS5idWZmZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICByZXR1cm4gX3JlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2Vycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lcnJvcihyZWFzb24pIHtcbiAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuXG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRSZWFkYWJsZVN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gcmVhZGFibGVTdHJlYW07XG4gICAgICByZWFkYWJsZVN0cmVhbS5vbihcInJlYWRhYmxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWFkYWJsZVN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIF90aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgICAgICBfdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICByZWFkYWJsZVN0cmVhbS5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgX3RoaXMuX2Vycm9yKHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKG5ldyBfdXRpbC5BYm9ydEV4Y2VwdGlvbihcInN0cmVhbWluZyBpcyBkaXNhYmxlZFwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbS5kZXN0cm95KHRoaXMuX3N0b3JlZEVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZUZ1bGxSZWFkZXI7XG59KCk7XG5cbnZhciBCYXNlUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlUmFuZ2VSZWFkZXIoc3RyZWFtKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VSYW5nZVJlYWRlcik7XG5cbiAgICB0aGlzLl91cmwgPSBzdHJlYW0udXJsO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICB0aGlzLl9sb2FkZWQgPSAwO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDtcbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB2YXIgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVN0cmVhbTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlUmFuZ2VSZWFkZXIsIFt7XG4gICAga2V5OiBcImlzU3RyZWFtaW5nU3VwcG9ydGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWFkMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xuICAgICAgICB2YXIgY2h1bmssIGJ1ZmZlcjtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5wcm9taXNlO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IHRoaXMuX3N0b3JlZEVycm9yO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBjaHVuayA9IHRoaXMuX3JlYWRhYmxlU3RyZWFtLnJlYWQoKTtcblxuICAgICAgICAgICAgICAgIGlmICghKGNodW5rID09PSBudWxsKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIHRoaXMucmVhZCgpKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmspLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgIHJldHVybiBfcmVhZDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2Vycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lcnJvcihyZWFzb24pIHtcbiAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuXG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRSZWFkYWJsZVN0cmVhbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbSA9IHJlYWRhYmxlU3RyZWFtO1xuICAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJyZWFkYWJsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICByZWFkYWJsZVN0cmVhbS5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgX3RoaXMyLl9kb25lID0gdHJ1ZTtcblxuICAgICAgICBfdGhpczIuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIF90aGlzMi5fZXJyb3IocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveSh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VSYW5nZVJlYWRlcjtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE9wdGlvbnMocGFyc2VkVXJsLCBoZWFkZXJzKSB7XG4gIHJldHVybiB7XG4gICAgcHJvdG9jb2w6IHBhcnNlZFVybC5wcm90b2NvbCxcbiAgICBhdXRoOiBwYXJzZWRVcmwuYXV0aCxcbiAgICBob3N0OiBwYXJzZWRVcmwuaG9zdG5hbWUsXG4gICAgcG9ydDogcGFyc2VkVXJsLnBvcnQsXG4gICAgcGF0aDogcGFyc2VkVXJsLnBhdGgsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgfTtcbn1cblxudmFyIFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUZ1bGxSZWFkZXIpIHtcbiAgX2luaGVyaXRzKFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyLCBfQmFzZUZ1bGxSZWFkZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIpO1xuXG4gIGZ1bmN0aW9uIFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyKHN0cmVhbSkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIpO1xuXG4gICAgX3RoaXMzID0gX3N1cGVyLmNhbGwodGhpcywgc3RyZWFtKTtcblxuICAgIHZhciBoYW5kbGVSZXNwb25zZSA9IGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDA0KSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKFwiTWlzc2luZyBQREYgXFxcIlwiLmNvbmNhdChfdGhpczMuX3VybCwgXCJcXFwiLlwiKSk7XG4gICAgICAgIF90aGlzMy5fc3RvcmVkRXJyb3IgPSBlcnJvcjtcblxuICAgICAgICBfdGhpczMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdChlcnJvcik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlc29sdmUoKTtcblxuICAgICAgX3RoaXMzLl9zZXRSZWFkYWJsZVN0cmVhbShyZXNwb25zZSk7XG5cbiAgICAgIHZhciBnZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5fcmVhZGFibGVTdHJlYW0uaGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgfTtcblxuICAgICAgdmFyIF92YWxpZGF0ZVJhbmdlUmVxdWVzdCA9ICgwLCBfbmV0d29ya191dGlscy52YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcykoe1xuICAgICAgICBnZXRSZXNwb25zZUhlYWRlcjogZ2V0UmVzcG9uc2VIZWFkZXIsXG4gICAgICAgIGlzSHR0cDogc3RyZWFtLmlzSHR0cCxcbiAgICAgICAgcmFuZ2VDaHVua1NpemU6IF90aGlzMy5fcmFuZ2VDaHVua1NpemUsXG4gICAgICAgIGRpc2FibGVSYW5nZTogX3RoaXMzLl9kaXNhYmxlUmFuZ2VcbiAgICAgIH0pLFxuICAgICAgICAgIGFsbG93UmFuZ2VSZXF1ZXN0cyA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5hbGxvd1JhbmdlUmVxdWVzdHMsXG4gICAgICAgICAgc3VnZ2VzdGVkTGVuZ3RoID0gX3ZhbGlkYXRlUmFuZ2VSZXF1ZXN0LnN1Z2dlc3RlZExlbmd0aDtcblxuICAgICAgX3RoaXMzLl9pc1JhbmdlU3VwcG9ydGVkID0gYWxsb3dSYW5nZVJlcXVlc3RzO1xuICAgICAgX3RoaXMzLl9jb250ZW50TGVuZ3RoID0gc3VnZ2VzdGVkTGVuZ3RoIHx8IF90aGlzMy5fY29udGVudExlbmd0aDtcbiAgICAgIF90aGlzMy5fZmlsZW5hbWUgPSAoMCwgX25ldHdvcmtfdXRpbHMuZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcikoZ2V0UmVzcG9uc2VIZWFkZXIpO1xuICAgIH07XG5cbiAgICBfdGhpczMuX3JlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKF90aGlzMy5fdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICAgIF90aGlzMy5fcmVxdWVzdCA9IGh0dHAucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyhfdGhpczMuX3VybCwgc3RyZWFtLmh0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMuX3JlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKF90aGlzMy5fdXJsLCBzdHJlYW0uaHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgX3RoaXMzLl9yZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgX3RoaXMzLl9zdG9yZWRFcnJvciA9IHJlYXNvbjtcblxuICAgICAgX3RoaXMzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTtcbiAgICB9KTtcblxuICAgIF90aGlzMy5fcmVxdWVzdC5lbmQoKTtcblxuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICByZXR1cm4gUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXI7XG59KEJhc2VGdWxsUmVhZGVyKTtcblxudmFyIFBERk5vZGVTdHJlYW1SYW5nZVJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VSYW5nZVJlYWRlcikge1xuICBfaW5oZXJpdHMoUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyLCBfQmFzZVJhbmdlUmVhZGVyKTtcblxuICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXIpO1xuXG4gIGZ1bmN0aW9uIFBERk5vZGVTdHJlYW1SYW5nZVJlYWRlcihzdHJlYW0sIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgX3RoaXM0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERk5vZGVTdHJlYW1SYW5nZVJlYWRlcik7XG5cbiAgICBfdGhpczQgPSBfc3VwZXIyLmNhbGwodGhpcywgc3RyZWFtKTtcbiAgICBfdGhpczQuX2h0dHBIZWFkZXJzID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHJlYW0uaHR0cEhlYWRlcnMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0cmVhbS5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIF90aGlzNC5faHR0cEhlYWRlcnNbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgX3RoaXM0Ll9odHRwSGVhZGVycy5SYW5nZSA9IFwiYnl0ZXM9XCIuY29uY2F0KHN0YXJ0LCBcIi1cIikuY29uY2F0KGVuZCAtIDEpO1xuXG4gICAgdmFyIGhhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oXCJNaXNzaW5nIFBERiBcXFwiXCIuY29uY2F0KF90aGlzNC5fdXJsLCBcIlxcXCIuXCIpKTtcbiAgICAgICAgX3RoaXM0Ll9zdG9yZWRFcnJvciA9IGVycm9yO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzNC5fc2V0UmVhZGFibGVTdHJlYW0ocmVzcG9uc2UpO1xuICAgIH07XG5cbiAgICBfdGhpczQuX3JlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKF90aGlzNC5fdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICAgIF90aGlzNC5fcmVxdWVzdCA9IGh0dHAucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyhfdGhpczQuX3VybCwgX3RoaXM0Ll9odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXM0Ll9yZXF1ZXN0ID0gaHR0cHMucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyhfdGhpczQuX3VybCwgX3RoaXM0Ll9odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBfdGhpczQuX3JlcXVlc3Qub24oXCJlcnJvclwiLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBfdGhpczQuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuICAgIH0pO1xuXG4gICAgX3RoaXM0Ll9yZXF1ZXN0LmVuZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzNDtcbiAgfVxuXG4gIHJldHVybiBQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXI7XG59KEJhc2VSYW5nZVJlYWRlcik7XG5cbnZhciBQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUZ1bGxSZWFkZXIyKSB7XG4gIF9pbmhlcml0cyhQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyLCBfQmFzZUZ1bGxSZWFkZXIyKTtcblxuICB2YXIgX3N1cGVyMyA9IF9jcmVhdGVTdXBlcihQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyKTtcblxuICBmdW5jdGlvbiBQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyKHN0cmVhbSkge1xuICAgIHZhciBfdGhpczU7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlcik7XG5cbiAgICBfdGhpczUgPSBfc3VwZXIzLmNhbGwodGhpcywgc3RyZWFtKTtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChfdGhpczUuX3VybC5wYXRoKTtcblxuICAgIGlmIChmaWxlVXJpUmVnZXgudGVzdChfdGhpczUuX3VybC5ocmVmKSkge1xuICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sIFwiXCIpO1xuICAgIH1cblxuICAgIGZzLmxzdGF0KHBhdGgsIGZ1bmN0aW9uIChlcnJvciwgc3RhdCkge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSBcIkVOT0VOVFwiKSB7XG4gICAgICAgICAgZXJyb3IgPSBuZXcgX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbihcIk1pc3NpbmcgUERGIFxcXCJcIi5jb25jYXQocGF0aCwgXCJcXFwiLlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczUuX3N0b3JlZEVycm9yID0gZXJyb3I7XG5cbiAgICAgICAgX3RoaXM1Ll9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXM1Ll9jb250ZW50TGVuZ3RoID0gc3RhdC5zaXplO1xuXG4gICAgICBfdGhpczUuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCkpO1xuXG4gICAgICBfdGhpczUuX2hlYWRlcnNDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM1O1xuICB9XG5cbiAgcmV0dXJuIFBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXI7XG59KEJhc2VGdWxsUmVhZGVyKTtcblxudmFyIFBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVJhbmdlUmVhZGVyMikge1xuICBfaW5oZXJpdHMoUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIsIF9CYXNlUmFuZ2VSZWFkZXIyKTtcblxuICB2YXIgX3N1cGVyNCA9IF9jcmVhdGVTdXBlcihQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcik7XG5cbiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIoc3RyZWFtLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIF90aGlzNjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcik7XG5cbiAgICBfdGhpczYgPSBfc3VwZXI0LmNhbGwodGhpcywgc3RyZWFtKTtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChfdGhpczYuX3VybC5wYXRoKTtcblxuICAgIGlmIChmaWxlVXJpUmVnZXgudGVzdChfdGhpczYuX3VybC5ocmVmKSkge1xuICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sIFwiXCIpO1xuICAgIH1cblxuICAgIF90aGlzNi5fc2V0UmVhZGFibGVTdHJlYW0oZnMuY3JlYXRlUmVhZFN0cmVhbShwYXRoLCB7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZCAtIDFcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gX3RoaXM2O1xuICB9XG5cbiAgcmV0dXJuIFBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyO1xufShCYXNlUmFuZ2VSZWFkZXIpO1xuXG4vKioqLyB9KSxcbi8qIDEzMSAqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IgPSBjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yO1xuZXhwb3J0cy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyID0gZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcjtcbmV4cG9ydHMudmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMgPSB2YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcztcbmV4cG9ydHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cyA9IHZhbGlkYXRlUmVzcG9uc2VTdGF0dXM7XG5cbnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbnZhciBfY29udGVudF9kaXNwb3NpdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMyKTtcblxudmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMoX3JlZikge1xuICB2YXIgZ2V0UmVzcG9uc2VIZWFkZXIgPSBfcmVmLmdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgaXNIdHRwID0gX3JlZi5pc0h0dHAsXG4gICAgICByYW5nZUNodW5rU2l6ZSA9IF9yZWYucmFuZ2VDaHVua1NpemUsXG4gICAgICBkaXNhYmxlUmFuZ2UgPSBfcmVmLmRpc2FibGVSYW5nZTtcbiAgKDAsIF91dGlsLmFzc2VydCkocmFuZ2VDaHVua1NpemUgPiAwLCBcIlJhbmdlIGNodW5rIHNpemUgbXVzdCBiZSBsYXJnZXIgdGhhbiB6ZXJvXCIpO1xuICB2YXIgcmV0dXJuVmFsdWVzID0ge1xuICAgIGFsbG93UmFuZ2VSZXF1ZXN0czogZmFsc2UsXG4gICAgc3VnZ2VzdGVkTGVuZ3RoOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIGxlbmd0aCA9IHBhcnNlSW50KGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1MZW5ndGhcIiksIDEwKTtcblxuICBpZiAoIU51bWJlci5pc0ludGVnZXIobGVuZ3RoKSkge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gIH1cblxuICByZXR1cm5WYWx1ZXMuc3VnZ2VzdGVkTGVuZ3RoID0gbGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPD0gMiAqIHJhbmdlQ2h1bmtTaXplKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuXG4gIGlmIChkaXNhYmxlUmFuZ2UgfHwgIWlzSHR0cCkge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gIH1cblxuICBpZiAoZ2V0UmVzcG9uc2VIZWFkZXIoXCJBY2NlcHQtUmFuZ2VzXCIpICE9PSBcImJ5dGVzXCIpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICB9XG5cbiAgdmFyIGNvbnRlbnRFbmNvZGluZyA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSB8fCBcImlkZW50aXR5XCI7XG5cbiAgaWYgKGNvbnRlbnRFbmNvZGluZyAhPT0gXCJpZGVudGl0eVwiKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuXG4gIHJldHVyblZhbHVlcy5hbGxvd1JhbmdlUmVxdWVzdHMgPSB0cnVlO1xuICByZXR1cm4gcmV0dXJuVmFsdWVzO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKGdldFJlc3BvbnNlSGVhZGVyKSB7XG4gIHZhciBjb250ZW50RGlzcG9zaXRpb24gPSBnZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtRGlzcG9zaXRpb25cIik7XG5cbiAgaWYgKGNvbnRlbnREaXNwb3NpdGlvbikge1xuICAgIHZhciBmaWxlbmFtZSA9ICgwLCBfY29udGVudF9kaXNwb3NpdGlvbi5nZXRGaWxlbmFtZUZyb21Db250ZW50RGlzcG9zaXRpb25IZWFkZXIpKGNvbnRlbnREaXNwb3NpdGlvbik7XG5cbiAgICBpZiAoZmlsZW5hbWUuaW5jbHVkZXMoXCIlXCIpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmaWxlbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSk7XG4gICAgICB9IGNhdGNoIChleCkge31cbiAgICB9XG5cbiAgICBpZiAoKDAsIF9kaXNwbGF5X3V0aWxzLmlzUGRmRmlsZSkoZmlsZW5hbWUpKSB7XG4gICAgICByZXR1cm4gZmlsZW5hbWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3Ioc3RhdHVzLCB1cmwpIHtcbiAgaWYgKHN0YXR1cyA9PT0gNDA0IHx8IHN0YXR1cyA9PT0gMCAmJiB1cmwuc3RhcnRzV2l0aChcImZpbGU6XCIpKSB7XG4gICAgcmV0dXJuIG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKCdNaXNzaW5nIFBERiBcIicgKyB1cmwgKyAnXCIuJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihcIlVuZXhwZWN0ZWQgc2VydmVyIHJlc3BvbnNlIChcIi5jb25jYXQoc3RhdHVzLCBcIikgd2hpbGUgcmV0cmlldmluZyBQREYgXFxcIlwiKS5jb25jYXQodXJsLCBcIlxcXCIuXCIpLCBzdGF0dXMpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVJlc3BvbnNlU3RhdHVzKHN0YXR1cykge1xuICByZXR1cm4gc3RhdHVzID09PSAyMDAgfHwgc3RhdHVzID09PSAyMDY7XG59XG5cbi8qKiovIH0pLFxuLyogMTMyICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyID0gZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIGdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlcihjb250ZW50RGlzcG9zaXRpb24pIHtcbiAgdmFyIG5lZWRzRW5jb2RpbmdGaXh1cCA9IHRydWU7XG4gIHZhciB0bXAgPSB0b1BhcmFtUmVnRXhwKFwiZmlsZW5hbWVcXFxcKlwiLCBcImlcIikuZXhlYyhjb250ZW50RGlzcG9zaXRpb24pO1xuXG4gIGlmICh0bXApIHtcbiAgICB0bXAgPSB0bXBbMV07XG4gICAgdmFyIGZpbGVuYW1lID0gcmZjMjYxNnVucXVvdGUodG1wKTtcbiAgICBmaWxlbmFtZSA9IHVuZXNjYXBlKGZpbGVuYW1lKTtcbiAgICBmaWxlbmFtZSA9IHJmYzU5ODdkZWNvZGUoZmlsZW5hbWUpO1xuICAgIGZpbGVuYW1lID0gcmZjMjA0N2RlY29kZShmaWxlbmFtZSk7XG4gICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoZmlsZW5hbWUpO1xuICB9XG5cbiAgdG1wID0gcmZjMjIzMWdldHBhcmFtKGNvbnRlbnREaXNwb3NpdGlvbik7XG5cbiAgaWYgKHRtcCkge1xuICAgIHZhciBfZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKHRtcCk7XG5cbiAgICByZXR1cm4gZml4dXBFbmNvZGluZyhfZmlsZW5hbWUpO1xuICB9XG5cbiAgdG1wID0gdG9QYXJhbVJlZ0V4cChcImZpbGVuYW1lXCIsIFwiaVwiKS5leGVjKGNvbnRlbnREaXNwb3NpdGlvbik7XG5cbiAgaWYgKHRtcCkge1xuICAgIHRtcCA9IHRtcFsxXTtcblxuICAgIHZhciBfZmlsZW5hbWUyID0gcmZjMjYxNnVucXVvdGUodG1wKTtcblxuICAgIF9maWxlbmFtZTIgPSByZmMyMDQ3ZGVjb2RlKF9maWxlbmFtZTIpO1xuICAgIHJldHVybiBmaXh1cEVuY29kaW5nKF9maWxlbmFtZTIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9QYXJhbVJlZ0V4cChhdHRyaWJ1dGVQYXR0ZXJuLCBmbGFncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86Xnw7KVxcXFxzKlwiICsgYXR0cmlidXRlUGF0dGVybiArIFwiXFxcXHMqPVxcXFxzKlwiICsgXCIoXCIgKyAnW15cIjtcXFxcc11bXjtcXFxcc10qJyArIFwifFwiICsgJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXFwiPykrXCI/JyArIFwiKVwiLCBmbGFncyk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0ZGVjb2RlKGVuY29kaW5nLCB2YWx1ZSkge1xuICAgIGlmIChlbmNvZGluZykge1xuICAgICAgaWYgKCEvXltcXHgwMC1cXHhGRl0rJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZywge1xuICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgYnVmZmVyID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHZhbHVlKTtcbiAgICAgICAgdmFsdWUgPSBkZWNvZGVyLmRlY29kZShidWZmZXIpO1xuICAgICAgICBuZWVkc0VuY29kaW5nRml4dXAgPSBmYWxzZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKC9edXRmLT84JC9pLnRlc3QoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZSh2YWx1ZSkpO1xuICAgICAgICAgICAgbmVlZHNFbmNvZGluZ0ZpeHVwID0gZmFsc2U7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZml4dXBFbmNvZGluZyh2YWx1ZSkge1xuICAgIGlmIChuZWVkc0VuY29kaW5nRml4dXAgJiYgL1tcXHg4MC1cXHhmZl0vLnRlc3QodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHRleHRkZWNvZGUoXCJ1dGYtOFwiLCB2YWx1ZSk7XG5cbiAgICAgIGlmIChuZWVkc0VuY29kaW5nRml4dXApIHtcbiAgICAgICAgdmFsdWUgPSB0ZXh0ZGVjb2RlKFwiaXNvLTg4NTktMVwiLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmZjMjIzMWdldHBhcmFtKGNvbnRlbnREaXNwb3NpdGlvblN0cikge1xuICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgdmFyIG1hdGNoO1xuICAgIHZhciBpdGVyID0gdG9QYXJhbVJlZ0V4cChcImZpbGVuYW1lXFxcXCooKD8hMFxcXFxkKVxcXFxkKykoXFxcXCo/KVwiLCBcImlnXCIpO1xuXG4gICAgd2hpbGUgKChtYXRjaCA9IGl0ZXIuZXhlYyhjb250ZW50RGlzcG9zaXRpb25TdHIpKSAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9tYXRjaCA9IG1hdGNoLFxuICAgICAgICAgIF9tYXRjaDIgPSBfc2xpY2VkVG9BcnJheShfbWF0Y2gsIDQpLFxuICAgICAgICAgIG4gPSBfbWF0Y2gyWzFdLFxuICAgICAgICAgIHF1b3QgPSBfbWF0Y2gyWzJdLFxuICAgICAgICAgIHBhcnQgPSBfbWF0Y2gyWzNdO1xuXG4gICAgICBuID0gcGFyc2VJbnQobiwgMTApO1xuXG4gICAgICBpZiAobiBpbiBtYXRjaGVzKSB7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbWF0Y2hlc1tuXSA9IFtxdW90LCBwYXJ0XTtcbiAgICB9XG5cbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIGZvciAodmFyIF9uMiA9IDA7IF9uMiA8IG1hdGNoZXMubGVuZ3RoOyArK19uMikge1xuICAgICAgaWYgKCEoX24yIGluIG1hdGNoZXMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgX21hdGNoZXMkX24gPSBfc2xpY2VkVG9BcnJheShtYXRjaGVzW19uMl0sIDIpLFxuICAgICAgICAgIF9xdW90ID0gX21hdGNoZXMkX25bMF0sXG4gICAgICAgICAgX3BhcnQgPSBfbWF0Y2hlcyRfblsxXTtcblxuICAgICAgX3BhcnQgPSByZmMyNjE2dW5xdW90ZShfcGFydCk7XG5cbiAgICAgIGlmIChfcXVvdCkge1xuICAgICAgICBfcGFydCA9IHVuZXNjYXBlKF9wYXJ0KTtcblxuICAgICAgICBpZiAoX24yID09PSAwKSB7XG4gICAgICAgICAgX3BhcnQgPSByZmM1OTg3ZGVjb2RlKF9wYXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXJ0cy5wdXNoKF9wYXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFydHMuam9pbihcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJmYzI2MTZ1bnF1b3RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1wiJykpIHtcbiAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNsaWNlKDEpLnNwbGl0KCdcXFxcXCInKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcXVvdGluZGV4ID0gcGFydHNbaV0uaW5kZXhPZignXCInKTtcblxuICAgICAgICBpZiAocXVvdGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHBhcnRzW2ldID0gcGFydHNbaV0uc2xpY2UoMCwgcXVvdGluZGV4KTtcbiAgICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnRzW2ldID0gcGFydHNbaV0ucmVwbGFjZSgvXFxcXCguKS9nLCBcIiQxXCIpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHBhcnRzLmpvaW4oJ1wiJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmZjNTk4N2RlY29kZShleHR2YWx1ZSkge1xuICAgIHZhciBlbmNvZGluZ2VuZCA9IGV4dHZhbHVlLmluZGV4T2YoXCInXCIpO1xuXG4gICAgaWYgKGVuY29kaW5nZW5kID09PSAtMSkge1xuICAgICAgcmV0dXJuIGV4dHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGluZyA9IGV4dHZhbHVlLnNsaWNlKDAsIGVuY29kaW5nZW5kKTtcbiAgICB2YXIgbGFuZ3ZhbHVlID0gZXh0dmFsdWUuc2xpY2UoZW5jb2RpbmdlbmQgKyAxKTtcbiAgICB2YXIgdmFsdWUgPSBsYW5ndmFsdWUucmVwbGFjZSgvXlteJ10qJy8sIFwiXCIpO1xuICAgIHJldHVybiB0ZXh0ZGVjb2RlKGVuY29kaW5nLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZmMyMDQ3ZGVjb2RlKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKFwiPT9cIikgfHwgL1tcXHgwMC1cXHgxOVxceDgwLVxceGZmXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvPVxcPyhbXFx3LV0qKVxcPyhbUXFCYl0pXFw/KCg/OlteP118XFw/KD8hPSkpKilcXD89L2csIGZ1bmN0aW9uIChtYXRjaGVzLCBjaGFyc2V0LCBlbmNvZGluZywgdGV4dCkge1xuICAgICAgaWYgKGVuY29kaW5nID09PSBcInFcIiB8fCBlbmNvZGluZyA9PT0gXCJRXCIpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXy9nLCBcIiBcIik7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz0oWzAtOWEtZkEtRl17Mn0pL2csIGZ1bmN0aW9uIChtYXRjaCwgaGV4KSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRleHQgPSBhdG9iKHRleHQpO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqKi8gfSksXG4vKiAxMzMgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5QREZOZXR3b3JrU3RyZWFtID0gdm9pZCAwO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTtcblxudmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg0KTtcblxudmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG47XG52YXIgT0tfUkVTUE9OU0UgPSAyMDA7XG52YXIgUEFSVElBTF9DT05URU5UX1JFU1BPTlNFID0gMjA2O1xuXG5mdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcih4aHIpIHtcbiAgdmFyIGRhdGEgPSB4aHIucmVzcG9uc2U7XG5cbiAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyYXkgPSAoMCwgX3V0aWwuc3RyaW5nVG9CeXRlcykoZGF0YSk7XG4gIHJldHVybiBhcnJheS5idWZmZXI7XG59XG5cbnZhciBOZXR3b3JrTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE5ldHdvcmtNYW5hZ2VyKHVybCwgYXJncykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOZXR3b3JrTWFuYWdlcik7XG5cbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICB0aGlzLmlzSHR0cCA9IC9eaHR0cHM/Oi9pLnRlc3QodXJsKTtcbiAgICB0aGlzLmh0dHBIZWFkZXJzID0gdGhpcy5pc0h0dHAgJiYgYXJncy5odHRwSGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IGFyZ3Mud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuXG4gICAgdGhpcy5nZXRYaHIgPSBhcmdzLmdldFhociB8fCBmdW5jdGlvbiBOZXR3b3JrTWFuYWdlcl9nZXRYaHIoKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfTtcblxuICAgIHRoaXMuY3VyclhocklkID0gMDtcbiAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTmV0d29ya01hbmFnZXIsIFt7XG4gICAga2V5OiBcInJlcXVlc3RSYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0UmFuZ2UoYmVnaW4sIGVuZCwgbGlzdGVuZXJzKSB7XG4gICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICBlbmQ6IGVuZFxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgYXJnc1twcm9wXSA9IGxpc3RlbmVyc1twcm9wXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVxdWVzdEZ1bGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdEZ1bGwobGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGxpc3RlbmVycyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdChhcmdzKSB7XG4gICAgICB2YXIgeGhyID0gdGhpcy5nZXRYaHIoKTtcbiAgICAgIHZhciB4aHJJZCA9IHRoaXMuY3VyclhocklkKys7XG4gICAgICB2YXIgcGVuZGluZ1JlcXVlc3QgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF0gPSB7XG4gICAgICAgIHhocjogeGhyXG4gICAgICB9O1xuICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgdGhpcy51cmwpO1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuXG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzLmh0dHBIZWFkZXJzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuaHR0cEhlYWRlcnNbcHJvcGVydHldO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzSHR0cCAmJiBcImJlZ2luXCIgaW4gYXJncyAmJiBcImVuZFwiIGluIGFyZ3MpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLCBcImJ5dGVzPVwiLmNvbmNhdChhcmdzLmJlZ2luLCBcIi1cIikuY29uY2F0KGFyZ3MuZW5kIC0gMSkpO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdC5leHBlY3RlZFN0YXR1cyA9IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzID0gT0tfUkVTUE9OU0U7XG4gICAgICB9XG5cbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG5cbiAgICAgIGlmIChhcmdzLm9uRXJyb3IpIHtcbiAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgYXJncy5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcywgeGhySWQpO1xuICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzLCB4aHJJZCk7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCA9IGFyZ3Mub25IZWFkZXJzUmVjZWl2ZWQ7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkRvbmUgPSBhcmdzLm9uRG9uZTtcbiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IgPSBhcmdzLm9uRXJyb3I7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzID0gYXJncy5vblByb2dyZXNzO1xuICAgICAgeGhyLnNlbmQobnVsbCk7XG4gICAgICByZXR1cm4geGhySWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyh4aHJJZCwgZXZ0KSB7XG4gICAgICB2YXIgcGVuZGluZ1JlcXVlc3QgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGVuZGluZ1JlcXVlc3Qub25Qcm9ncmVzcykge1xuICAgICAgICBwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzKGV2dCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uU3RhdGVDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSh4aHJJZCwgZXZ0KSB7XG4gICAgICB2YXIgcGVuZGluZ1JlcXVlc3QgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gcGVuZGluZ1JlcXVlc3QueGhyO1xuXG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPj0gMiAmJiBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCkge1xuICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCgpO1xuICAgICAgICBkZWxldGUgcGVuZGluZ1JlcXVlc3Qub25IZWFkZXJzUmVjZWl2ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghKHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSAwICYmIHRoaXMuaXNIdHRwKSB7XG4gICAgICAgIGlmIChwZW5kaW5nUmVxdWVzdC5vbkVycm9yKSB7XG4gICAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHhoclN0YXR1cyA9IHhoci5zdGF0dXMgfHwgT0tfUkVTUE9OU0U7XG4gICAgICB2YXIgb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCA9IHhoclN0YXR1cyA9PT0gT0tfUkVTUE9OU0UgJiYgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPT09IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRTtcblxuICAgICAgaWYgKCFva19yZXNwb25zZV9vbl9yYW5nZV9yZXF1ZXN0ICYmIHhoclN0YXR1cyAhPT0gcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMpIHtcbiAgICAgICAgaWYgKHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IpIHtcbiAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2h1bmsgPSBnZXRBcnJheUJ1ZmZlcih4aHIpO1xuXG4gICAgICBpZiAoeGhyU3RhdHVzID09PSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UpIHtcbiAgICAgICAgdmFyIHJhbmdlSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAvYnl0ZXMgKFxcZCspLShcXGQrKVxcLyhcXGQrKS8uZXhlYyhyYW5nZUhlYWRlcik7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSh7XG4gICAgICAgICAgYmVnaW46IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKSxcbiAgICAgICAgICBjaHVuazogY2h1bmtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGNodW5rKSB7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSh7XG4gICAgICAgICAgYmVnaW46IDAsXG4gICAgICAgICAgY2h1bms6IGNodW5rXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwZW5kaW5nUmVxdWVzdC5vbkVycm9yKSB7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IoeGhyLnN0YXR1cyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlcXVlc3RYaHJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVxdWVzdFhocih4aHJJZCkge1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXS54aHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzUGVuZGluZ1JlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQZW5kaW5nUmVxdWVzdCh4aHJJZCkge1xuICAgICAgcmV0dXJuIHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhYm9ydFJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWJvcnRSZXF1ZXN0KHhocklkKSB7XG4gICAgICB2YXIgeGhyID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdLnhocjtcbiAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG4gICAgICB4aHIuYWJvcnQoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmV0d29ya01hbmFnZXI7XG59KCk7XG5cbnZhciBQREZOZXR3b3JrU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGTmV0d29ya1N0cmVhbShzb3VyY2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTmV0d29ya1N0cmVhbSk7XG5cbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fbWFuYWdlciA9IG5ldyBOZXR3b3JrTWFuYWdlcihzb3VyY2UudXJsLCB7XG4gICAgICBodHRwSGVhZGVyczogc291cmNlLmh0dHBIZWFkZXJzLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBzb3VyY2Uud2l0aENyZWRlbnRpYWxzXG4gICAgfSk7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZOZXR3b3JrU3RyZWFtLCBbe1xuICAgIGtleTogXCJfb25SYW5nZVJlcXVlc3RSZWFkZXJDbG9zZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmFuZ2VSZXF1ZXN0UmVhZGVyQ2xvc2VkKHJlYWRlcikge1xuICAgICAgdmFyIGkgPSB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLmluZGV4T2YocmVhZGVyKTtcblxuICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RnVsbFJlYWRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGdWxsUmVhZGVyKCkge1xuICAgICAgKDAsIF91dGlsLmFzc2VydCkoIXRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLCBcIlBERk5ldHdvcmtTdHJlYW0uZ2V0RnVsbFJlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZS5cIik7XG4gICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG5ldyBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIodGhpcy5fbWFuYWdlciwgdGhpcy5fc291cmNlKTtcbiAgICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UmFuZ2VSZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHJlYWRlciA9IG5ldyBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyKHRoaXMuX21hbmFnZXIsIGJlZ2luLCBlbmQpO1xuICAgICAgcmVhZGVyLm9uQ2xvc2VkID0gdGhpcy5fb25SYW5nZVJlcXVlc3RSZWFkZXJDbG9zZWQuYmluZCh0aGlzKTtcblxuICAgICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKHJlYWRlcik7XG5cbiAgICAgIHJldHVybiByZWFkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhbmNlbEFsbFJlcXVlc3RzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlYWRlciA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZOZXR3b3JrU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLlBERk5ldHdvcmtTdHJlYW0gPSBQREZOZXR3b3JrU3RyZWFtO1xuXG52YXIgUERGTmV0d29ya1N0cmVhbUZ1bGxSZXF1ZXN0UmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGTmV0d29ya1N0cmVhbUZ1bGxSZXF1ZXN0UmVhZGVyKG1hbmFnZXIsIHNvdXJjZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIpO1xuXG4gICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdmFyIGFyZ3MgPSB7XG4gICAgICBvbkhlYWRlcnNSZWNlaXZlZDogdGhpcy5fb25IZWFkZXJzUmVjZWl2ZWQuYmluZCh0aGlzKSxcbiAgICAgIG9uRG9uZTogdGhpcy5fb25Eb25lLmJpbmQodGhpcyksXG4gICAgICBvbkVycm9yOiB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyksXG4gICAgICBvblByb2dyZXNzOiB0aGlzLl9vblByb2dyZXNzLmJpbmQodGhpcylcbiAgICB9O1xuICAgIHRoaXMuX3VybCA9IHNvdXJjZS51cmw7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RJZCA9IG1hbmFnZXIucmVxdWVzdEZ1bGwoYXJncyk7XG4gICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlO1xuICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuXG4gICAgaWYgKCF0aGlzLl9yYW5nZUNodW5rU2l6ZSAmJiAhdGhpcy5fZGlzYWJsZVJhbmdlKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2NhY2hlZENodW5rcyA9IFtdO1xuICAgIHRoaXMuX3JlcXVlc3RzID0gW107XG4gICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX3N0b3JlZEVycm9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZpbGVuYW1lID0gbnVsbDtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlciwgW3tcbiAgICBrZXk6IFwiX29uSGVhZGVyc1JlY2VpdmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkhlYWRlcnNSZWNlaXZlZCgpIHtcbiAgICAgIHZhciBmdWxsUmVxdWVzdFhocklkID0gdGhpcy5fZnVsbFJlcXVlc3RJZDtcblxuICAgICAgdmFyIGZ1bGxSZXF1ZXN0WGhyID0gdGhpcy5fbWFuYWdlci5nZXRSZXF1ZXN0WGhyKGZ1bGxSZXF1ZXN0WGhySWQpO1xuXG4gICAgICB2YXIgZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbiBnZXRSZXNwb25zZUhlYWRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdWxsUmVxdWVzdFhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBfdmFsaWRhdGVSYW5nZVJlcXVlc3QgPSAoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMpKHtcbiAgICAgICAgZ2V0UmVzcG9uc2VIZWFkZXI6IGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICBpc0h0dHA6IHRoaXMuX21hbmFnZXIuaXNIdHRwLFxuICAgICAgICByYW5nZUNodW5rU2l6ZTogdGhpcy5fcmFuZ2VDaHVua1NpemUsXG4gICAgICAgIGRpc2FibGVSYW5nZTogdGhpcy5fZGlzYWJsZVJhbmdlXG4gICAgICB9KSxcbiAgICAgICAgICBhbGxvd1JhbmdlUmVxdWVzdHMgPSBfdmFsaWRhdGVSYW5nZVJlcXVlc3QuYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICAgIHN1Z2dlc3RlZExlbmd0aCA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5zdWdnZXN0ZWRMZW5ndGg7XG5cbiAgICAgIGlmIChhbGxvd1JhbmdlUmVxdWVzdHMpIHtcbiAgICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9uZXR3b3JrX3V0aWxzLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIpKGdldFJlc3BvbnNlSGVhZGVyKTtcblxuICAgICAgaWYgKHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QoZnVsbFJlcXVlc3RYaHJJZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfb25Eb25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRvbmUoYXJncykge1xuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogYXJncy5jaHVuayxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzLnB1c2goYXJncy5jaHVuayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmVxdWVzdHMpLFxuICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgX3JlcXVlc3RDYXBhYmlsaXR5ID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgX3JlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkVycm9yKHN0YXR1cykge1xuICAgICAgdmFyIHVybCA9IHRoaXMuX3VybDtcbiAgICAgIHZhciBleGNlcHRpb24gPSAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikoc3RhdHVzLCB1cmwpO1xuICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBleGNlcHRpb247XG5cbiAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVqZWN0KGV4Y2VwdGlvbik7XG5cbiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmVxdWVzdHMpLFxuICAgICAgICAgIF9zdGVwMztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjMuZigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzKGRhdGEpIHtcbiAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5vblByb2dyZXNzKHtcbiAgICAgICAgICBsb2FkZWQ6IGRhdGEubG9hZGVkLFxuICAgICAgICAgIHRvdGFsOiBkYXRhLmxlbmd0aENvbXB1dGFibGUgPyBkYXRhLnRvdGFsIDogdGhpcy5fY29udGVudExlbmd0aFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmlsZW5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNSYW5nZVN1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU3RyZWFtaW5nU3VwcG9ydGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbnRlbnRMZW5ndGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoZWFkZXJzUmVhZHlcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWFkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIGNodW5rLCByZXF1ZXN0Q2FwYWJpbGl0eTtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IHRoaXMuX3N0b3JlZEVycm9yO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9jYWNoZWRDaHVua3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9uZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2UpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgIHJldHVybiBfcmVhZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVhZDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJjYW5jZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikge1xuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG5cbiAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmVxdWVzdHMpLFxuICAgICAgICAgIF9zdGVwNDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSBfc3RlcDQudmFsdWU7XG4gICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcblxuICAgICAgaWYgKHRoaXMuX21hbmFnZXIuaXNQZW5kaW5nUmVxdWVzdCh0aGlzLl9mdWxsUmVxdWVzdElkKSkge1xuICAgICAgICB0aGlzLl9tYW5hZ2VyLmFib3J0UmVxdWVzdCh0aGlzLl9mdWxsUmVxdWVzdElkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXI7XG59KCk7XG5cbnZhciBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlcihtYW5hZ2VyLCBiZWdpbiwgZW5kKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIpO1xuXG4gICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdmFyIGFyZ3MgPSB7XG4gICAgICBvbkRvbmU6IHRoaXMuX29uRG9uZS5iaW5kKHRoaXMpLFxuICAgICAgb25Qcm9ncmVzczogdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpXG4gICAgfTtcbiAgICB0aGlzLl9yZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBhcmdzKTtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICB0aGlzLm9uQ2xvc2VkID0gbnVsbDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyLCBbe1xuICAgIGtleTogXCJfY2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Nsb3NlKCkge1xuICAgICAgaWYgKHRoaXMub25DbG9zZWQpIHtcbiAgICAgICAgdGhpcy5vbkNsb3NlZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX29uRG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Eb25lKGRhdGEpIHtcbiAgICAgIHZhciBjaHVuayA9IGRhdGEuY2h1bms7XG5cbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciByZXF1ZXN0Q2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7XG5cbiAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBjaHVuaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmVxdWVzdHMpLFxuICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgX3JlcXVlc3RDYXBhYmlsaXR5MiA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgICAgIF9yZXF1ZXN0Q2FwYWJpbGl0eTIucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcblxuICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX29uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUHJvZ3Jlc3MoZXZ0KSB7XG4gICAgICBpZiAoIXRoaXMuaXNTdHJlYW1pbmdTdXBwb3J0ZWQgJiYgdGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyh7XG4gICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1N0cmVhbWluZ1N1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVhZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcbiAgICAgICAgdmFyIGNodW5rLCByZXF1ZXN0Q2FwYWJpbGl0eTtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fcXVldWVkQ2h1bmsgIT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjaHVuayA9IHRoaXMuX3F1ZXVlZENodW5rO1xuICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlKTtcblxuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFkMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVhZDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJjYW5jZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikge1xuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmVxdWVzdHMpLFxuICAgICAgICAgIF9zdGVwNjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSBfc3RlcDYudmFsdWU7XG4gICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I2LmYoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcblxuICAgICAgaWYgKHRoaXMuX21hbmFnZXIuaXNQZW5kaW5nUmVxdWVzdCh0aGlzLl9yZXF1ZXN0SWQpKSB7XG4gICAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX3JlcXVlc3RJZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuLyogMTM0ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuUERGRmV0Y2hTdHJlYW0gPSB2b2lkIDA7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG52YXIgX25ldHdvcmtfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbjtcblxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hPcHRpb25zKGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscywgYWJvcnRDb250cm9sbGVyKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIgPT09IG51bGwgfHwgYWJvcnRDb250cm9sbGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIGNyZWRlbnRpYWxzOiB3aXRoQ3JlZGVudGlhbHMgPyBcImluY2x1ZGVcIiA6IFwic2FtZS1vcmlnaW5cIixcbiAgICByZWRpcmVjdDogXCJmb2xsb3dcIlxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJzKGh0dHBIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBodHRwSGVhZGVycykge1xuICAgIHZhciB2YWx1ZSA9IGh0dHBIZWFkZXJzW3Byb3BlcnR5XTtcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGhlYWRlcnMuYXBwZW5kKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gaGVhZGVycztcbn1cblxudmFyIFBERkZldGNoU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUERGRmV0Y2hTdHJlYW0oc291cmNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkZldGNoU3RyZWFtKTtcblxuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuaXNIdHRwID0gL15odHRwcz86L2kudGVzdChzb3VyY2UudXJsKTtcbiAgICB0aGlzLmh0dHBIZWFkZXJzID0gdGhpcy5pc0h0dHAgJiYgc291cmNlLmh0dHBIZWFkZXJzIHx8IHt9O1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbnVsbDtcbiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUERGRmV0Y2hTdHJlYW0sIFt7XG4gICAga2V5OiBcIl9wcm9ncmVzc2l2ZURhdGFMZW5ndGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRfZnVsbFJlcXVlc3RSZWEsIF90aGlzJF9mdWxsUmVxdWVzdFJlYTI7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhID0gKF90aGlzJF9mdWxsUmVxdWVzdFJlYTIgPSB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgPT09IG51bGwgfHwgX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX2Z1bGxSZXF1ZXN0UmVhMi5fbG9hZGVkKSAhPT0gbnVsbCAmJiBfdGhpcyRfZnVsbFJlcXVlc3RSZWEgIT09IHZvaWQgMCA/IF90aGlzJF9mdWxsUmVxdWVzdFJlYSA6IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZ1bGxSZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZGZXRjaFN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbmV3IFBERkZldGNoU3RyZWFtUmVhZGVyKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSYW5nZVJlYWRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7XG4gICAgICBpZiAoZW5kIDw9IHRoaXMuX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlYWRlciA9IG5ldyBQREZGZXRjaFN0cmVhbVJhbmdlUmVhZGVyKHRoaXMsIGJlZ2luLCBlbmQpO1xuXG4gICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmVhZGVyKTtcblxuICAgICAgcmV0dXJuIHJlYWRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsQWxsUmVxdWVzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNsaWNlKDApKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgcmVhZGVyID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERkZldGNoU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLlBERkZldGNoU3RyZWFtID0gUERGRmV0Y2hTdHJlYW07XG5cbnZhciBQREZGZXRjaFN0cmVhbVJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBERkZldGNoU3RyZWFtUmVhZGVyKHN0cmVhbSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRmV0Y2hTdHJlYW1SZWFkZXIpO1xuXG4gICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fbG9hZGVkID0gMDtcbiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gc291cmNlLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuXG4gICAgaWYgKCF0aGlzLl9yYW5nZUNodW5rU2l6ZSAmJiAhdGhpcy5fZGlzYWJsZVJhbmdlKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBjcmVhdGVIZWFkZXJzKHRoaXMuX3N0cmVhbS5odHRwSGVhZGVycyk7XG4gICAgdmFyIHVybCA9IHNvdXJjZS51cmw7XG4gICAgZmV0Y2godXJsLCBjcmVhdGVGZXRjaE9wdGlvbnModGhpcy5faGVhZGVycywgdGhpcy5fd2l0aENyZWRlbnRpYWxzLCB0aGlzLl9hYm9ydENvbnRyb2xsZXIpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKCEoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cykocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgICB0aHJvdyAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcblxuICAgICAgX3RoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlc29sdmUoKTtcblxuICAgICAgdmFyIGdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycy5nZXQobmFtZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgX3ZhbGlkYXRlUmFuZ2VSZXF1ZXN0ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBnZXRSZXNwb25zZUhlYWRlcixcbiAgICAgICAgaXNIdHRwOiBfdGhpcy5fc3RyZWFtLmlzSHR0cCxcbiAgICAgICAgcmFuZ2VDaHVua1NpemU6IF90aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgZGlzYWJsZVJhbmdlOiBfdGhpcy5fZGlzYWJsZVJhbmdlXG4gICAgICB9KSxcbiAgICAgICAgICBhbGxvd1JhbmdlUmVxdWVzdHMgPSBfdmFsaWRhdGVSYW5nZVJlcXVlc3QuYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICAgIHN1Z2dlc3RlZExlbmd0aCA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5zdWdnZXN0ZWRMZW5ndGg7XG5cbiAgICAgIF90aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gYWxsb3dSYW5nZVJlcXVlc3RzO1xuICAgICAgX3RoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgX3RoaXMuX2NvbnRlbnRMZW5ndGg7XG4gICAgICBfdGhpcy5fZmlsZW5hbWUgPSAoMCwgX25ldHdvcmtfdXRpbHMuZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcikoZ2V0UmVzcG9uc2VIZWFkZXIpO1xuXG4gICAgICBpZiAoIV90aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiBfdGhpcy5faXNSYW5nZVN1cHBvcnRlZCkge1xuICAgICAgICBfdGhpcy5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwiU3RyZWFtaW5nIGlzIGRpc2FibGVkLlwiKSk7XG4gICAgICB9XG4gICAgfSlbXCJjYXRjaFwiXSh0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QpO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUERGRmV0Y2hTdHJlYW1SZWFkZXIsIFt7XG4gICAga2V5OiBcImhlYWRlcnNSZWFkeVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbGVuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmlsZW5hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbnRlbnRMZW5ndGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1JhbmdlU3VwcG9ydGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNTdHJlYW1pbmdTdXBwb3J0ZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICB2YXIgX3lpZWxkJHRoaXMkX3JlYWRlciRyLCB2YWx1ZSwgZG9uZSwgYnVmZmVyO1xuXG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIucmVhZCgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBfeWllbGQkdGhpcyRfcmVhZGVyJHIgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHZhbHVlID0gX3lpZWxkJHRoaXMkX3JlYWRlciRyLnZhbHVlO1xuICAgICAgICAgICAgICAgIGRvbmUgPSBfeWllbGQkdGhpcyRfcmVhZGVyJHIuZG9uZTtcblxuICAgICAgICAgICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGRvbmU6IGRvbmVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZGVkICs9IHZhbHVlLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRoaXMuX2NvbnRlbnRMZW5ndGhcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHZhbHVlKS5idWZmZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICByZXR1cm4gX3JlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuX2Fib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQREZGZXRjaFN0cmVhbVJlYWRlcjtcbn0oKTtcblxudmFyIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQREZGZXRjaFN0cmVhbVJhbmdlUmVhZGVyKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIpO1xuXG4gICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fbG9hZGVkID0gMDtcbiAgICB2YXIgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICB0aGlzLl93aXRoQ3JlZGVudGlhbHMgPSBzb3VyY2Uud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlU3RyZWFtO1xuXG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuX2Fib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oZWFkZXJzID0gY3JlYXRlSGVhZGVycyh0aGlzLl9zdHJlYW0uaHR0cEhlYWRlcnMpO1xuXG4gICAgdGhpcy5faGVhZGVycy5hcHBlbmQoXCJSYW5nZVwiLCBcImJ5dGVzPVwiLmNvbmNhdChiZWdpbiwgXCItXCIpLmNvbmNhdChlbmQgLSAxKSk7XG5cbiAgICB2YXIgdXJsID0gc291cmNlLnVybDtcbiAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoISgwLCBfbmV0d29ya191dGlscy52YWxpZGF0ZVJlc3BvbnNlU3RhdHVzKShyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgICAgIHRocm93ICgwLCBfbmV0d29ya191dGlscy5jcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKShyZXNwb25zZS5zdGF0dXMsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICBfdGhpczIuX3JlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoKHJlYXNvbiA9PT0gbnVsbCB8fCByZWFzb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlYXNvbi5uYW1lKSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyByZWFzb247XG4gICAgfSk7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQREZGZXRjaFN0cmVhbVJhbmdlUmVhZGVyLCBbe1xuICAgIGtleTogXCJpc1N0cmVhbWluZ1N1cHBvcnRlZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVhZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcbiAgICAgICAgdmFyIF95aWVsZCR0aGlzJF9yZWFkZXIkcjIsIHZhbHVlLCBkb25lLCBidWZmZXI7XG5cbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcltcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5wcm9taXNlO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5yZWFkKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIF95aWVsZCR0aGlzJF9yZWFkZXIkcjIgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF95aWVsZCR0aGlzJF9yZWFkZXIkcjIudmFsdWU7XG4gICAgICAgICAgICAgICAgZG9uZSA9IF95aWVsZCR0aGlzJF9yZWFkZXIkcjIuZG9uZTtcblxuICAgICAgICAgICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgZG9uZTogZG9uZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyh7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlZDogdGhpcy5fbG9hZGVkXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheSh2YWx1ZSkuYnVmZmVyO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFkMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVhZDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJjYW5jZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikge1xuICAgICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXI7XG59KCk7XG5cbi8qKiovIH0pXG4vKioqKioqLyBcdF0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dfcGRmanNfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHRfX3dfcGRmanNfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcbi8qKioqKiovIFx0XHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuLyoqKioqKi8gXHRcdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIG1vZHVsZTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaW4gc3RyaWN0IG1vZGUuXG4oKCkgPT4ge1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXhwb3J0cyA9IF9fd2VicGFja19leHBvcnRzX187XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkTGlua0F0dHJpYnV0ZXNcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLmFkZExpbmtBdHRyaWJ1dGVzO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRGaWxlbmFtZUZyb21VcmxcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLmdldEZpbGVuYW1lRnJvbVVybDtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UGRmRmlsZW5hbWVGcm9tVXJsXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGlzcGxheV91dGlscy5nZXRQZGZGaWxlbmFtZUZyb21Vcmw7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzUGRmRmlsZVwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuaXNQZGZGaWxlO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rVGFyZ2V0XCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGlzcGxheV91dGlscy5MaW5rVGFyZ2V0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2FkU2NyaXB0XCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGlzcGxheV91dGlscy5sb2FkU2NyaXB0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQREZEYXRlU3RyaW5nXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGlzcGxheV91dGlscy5QREZEYXRlU3RyaW5nO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb25cIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbjtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVpbGRcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hcGkuYnVpbGQ7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldERvY3VtZW50XCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYXBpLmdldERvY3VtZW50O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb29wYmFja1BvcnRcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hcGkuTG9vcGJhY2tQb3J0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQREZEYXRhUmFuZ2VUcmFuc3BvcnRcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hcGkuUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQREZXb3JrZXJcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hcGkuUERGV29ya2VyO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2ZXJzaW9uXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYXBpLnZlcnNpb247XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNNYXBDb21wcmVzc2lvblR5cGVcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLkNNYXBDb21wcmVzc2lvblR5cGU7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZU9iamVjdFVSTFwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWwuY3JlYXRlT2JqZWN0VVJMO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eVwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHk7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVZhbGlkQWJzb2x1dGVVcmxcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmw7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludmFsaWRQREZFeGNlcHRpb25cIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLkludmFsaWRQREZFeGNlcHRpb247XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pc3NpbmdQREZFeGNlcHRpb25cIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb247XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9QU1wiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWwuT1BTO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXNzd29yZFJlc3BvbnNlc1wiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWwuUGFzc3dvcmRSZXNwb25zZXM7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBlcm1pc3Npb25GbGFnXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXRpbC5QZXJtaXNzaW9uRmxhZztcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlTnVsbENoYXJhY3RlcnNcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLnJlbW92ZU51bGxDaGFyYWN0ZXJzO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGFkb3dcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLnNoYWRvdztcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXRpbC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb247XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVOU1VQUE9SVEVEX0ZFQVRVUkVTXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUztcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVXRpbFwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWwuVXRpbDtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmVyYm9zaXR5TGV2ZWxcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlsLlZlcmJvc2l0eUxldmVsO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBbm5vdGF0aW9uTGF5ZXJcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hbm5vdGF0aW9uX2xheWVyLkFubm90YXRpb25MYXllcjtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXBpQ29tcGF0aWJpbGl0eVBhcmFtc1wiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2FwaV9jb21wYXRpYmlsaXR5LmFwaUNvbXBhdGliaWxpdHlQYXJhbXM7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdsb2JhbFdvcmtlck9wdGlvbnNcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zO1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW5kZXJUZXh0TGF5ZXJcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90ZXh0X2xheWVyLnJlbmRlclRleHRMYXllcjtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU1ZHR3JhcGhpY3NcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zdmcuU1ZHR3JhcGhpY3M7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlhmYUxheWVyXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfeGZhX2xheWVyLlhmYUxheWVyO1xuICB9XG59KSk7XG5cbnZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbnZhciBfYXBpID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTMpO1xuXG52YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Fubm90YXRpb25fbGF5ZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNSk7XG5cbnZhciBfYXBpX2NvbXBhdGliaWxpdHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExNyk7XG5cbnZhciBfd29ya2VyX29wdGlvbnMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMCk7XG5cbnZhciBfdGV4dF9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTI3KTtcblxudmFyIF9zdmcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyOCk7XG5cbnZhciBfeGZhX2xheWVyID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjkpO1xuXG52YXIgcGRmanNWZXJzaW9uID0gJzIuOS4zNTknO1xudmFyIHBkZmpzQnVpbGQgPSAnZTY2N2M4Y2JjJztcbntcbiAgdmFyIF9yZXF1aXJlID0gX193X3BkZmpzX3JlcXVpcmVfXyg2KSxcbiAgICAgIGlzTm9kZUpTID0gX3JlcXVpcmUuaXNOb2RlSlM7XG5cbiAgaWYgKGlzTm9kZUpTKSB7XG4gICAgdmFyIFBERk5vZGVTdHJlYW0gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzMCkuUERGTm9kZVN0cmVhbTtcblxuICAgICgwLCBfYXBpLnNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5KShmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICByZXR1cm4gbmV3IFBERk5vZGVTdHJlYW0ocGFyYW1zKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgUERGTmV0d29ya1N0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMzKS5QREZOZXR3b3JrU3RyZWFtO1xuXG4gICAgdmFyIFBERkZldGNoU3RyZWFtO1xuXG4gICAgaWYgKCgwLCBfZGlzcGxheV91dGlscy5pc0ZldGNoU3VwcG9ydGVkKSgpKSB7XG4gICAgICBQREZGZXRjaFN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTM0KS5QREZGZXRjaFN0cmVhbTtcbiAgICB9XG5cbiAgICAoMCwgX2FwaS5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSkoZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgaWYgKFBERkZldGNoU3RyZWFtICYmICgwLCBfZGlzcGxheV91dGlscy5pc1ZhbGlkRmV0Y2hVcmwpKHBhcmFtcy51cmwpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGRmV0Y2hTdHJlYW0ocGFyYW1zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQREZOZXR3b3JrU3RyZWFtKHBhcmFtcyk7XG4gICAgfSk7XG4gIH1cbn1cbn0pKCk7XG5cbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG4vKioqKioqLyB9KSgpXG47XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBkZi5qcy5tYXAiLCIvLyBBcyBkZWZpbmVkIG9uIHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBldmVudHM6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ldmVudHMuaHRtbFxuZXhwb3J0IHZhciBjbGlwYm9hcmRFdmVudHMgPSBbJ29uQ29weScsICdvbkN1dCcsICdvblBhc3RlJ107XG5leHBvcnQgdmFyIGNvbXBvc2l0aW9uRXZlbnRzID0gWydvbkNvbXBvc2l0aW9uRW5kJywgJ29uQ29tcG9zaXRpb25TdGFydCcsICdvbkNvbXBvc2l0aW9uVXBkYXRlJ107XG5leHBvcnQgdmFyIGtleWJvYXJkRXZlbnRzID0gWydvbktleURvd24nLCAnb25LZXlQcmVzcycsICdvbktleVVwJ107XG5leHBvcnQgdmFyIGZvY3VzRXZlbnRzID0gWydvbkZvY3VzJywgJ29uQmx1ciddO1xuZXhwb3J0IHZhciBmb3JtRXZlbnRzID0gWydvbkNoYW5nZScsICdvbklucHV0JywgJ29uSW52YWxpZCcsICdvblJlc2V0JywgJ29uU3VibWl0J107XG5leHBvcnQgdmFyIGdlbmVyaWNFdmVudHMgPSBbJ29uRXJyb3InLCAnb25Mb2FkJ107XG5leHBvcnQgdmFyIG1vdXNlRXZlbnRzID0gWydvbkNsaWNrJywgJ29uQ29udGV4dE1lbnUnLCAnb25Eb3VibGVDbGljaycsICdvbkRyYWcnLCAnb25EcmFnRW5kJywgJ29uRHJhZ0VudGVyJywgJ29uRHJhZ0V4aXQnLCAnb25EcmFnTGVhdmUnLCAnb25EcmFnT3ZlcicsICdvbkRyYWdTdGFydCcsICdvbkRyb3AnLCAnb25Nb3VzZURvd24nLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdvbk1vdXNlTW92ZScsICdvbk1vdXNlT3V0JywgJ29uTW91c2VPdmVyJywgJ29uTW91c2VVcCddO1xuZXhwb3J0IHZhciBwb2ludGVyRXZlbnRzID0gWydvblBvaW50ZXJEb3duJywgJ29uUG9pbnRlck1vdmUnLCAnb25Qb2ludGVyVXAnLCAnb25Qb2ludGVyQ2FuY2VsJywgJ29uR290UG9pbnRlckNhcHR1cmUnLCAnb25Mb3N0UG9pbnRlckNhcHR1cmUnLCAnb25Qb2ludGVyRW50ZXInLCAnb25Qb2ludGVyTGVhdmUnLCAnb25Qb2ludGVyT3ZlcicsICdvblBvaW50ZXJPdXQnXTtcbmV4cG9ydCB2YXIgc2VsZWN0aW9uRXZlbnRzID0gWydvblNlbGVjdCddO1xuZXhwb3J0IHZhciB0b3VjaEV2ZW50cyA9IFsnb25Ub3VjaENhbmNlbCcsICdvblRvdWNoRW5kJywgJ29uVG91Y2hNb3ZlJywgJ29uVG91Y2hTdGFydCddO1xuZXhwb3J0IHZhciB1aUV2ZW50cyA9IFsnb25TY3JvbGwnXTtcbmV4cG9ydCB2YXIgd2hlZWxFdmVudHMgPSBbJ29uV2hlZWwnXTtcbmV4cG9ydCB2YXIgbWVkaWFFdmVudHMgPSBbJ29uQWJvcnQnLCAnb25DYW5QbGF5JywgJ29uQ2FuUGxheVRocm91Z2gnLCAnb25EdXJhdGlvbkNoYW5nZScsICdvbkVtcHRpZWQnLCAnb25FbmNyeXB0ZWQnLCAnb25FbmRlZCcsICdvbkVycm9yJywgJ29uTG9hZGVkRGF0YScsICdvbkxvYWRlZE1ldGFkYXRhJywgJ29uTG9hZFN0YXJ0JywgJ29uUGF1c2UnLCAnb25QbGF5JywgJ29uUGxheWluZycsICdvblByb2dyZXNzJywgJ29uUmF0ZUNoYW5nZScsICdvblNlZWtlZCcsICdvblNlZWtpbmcnLCAnb25TdGFsbGVkJywgJ29uU3VzcGVuZCcsICdvblRpbWVVcGRhdGUnLCAnb25Wb2x1bWVDaGFuZ2UnLCAnb25XYWl0aW5nJ107XG5leHBvcnQgdmFyIGltYWdlRXZlbnRzID0gWydvbkxvYWQnLCAnb25FcnJvciddO1xuZXhwb3J0IHZhciBhbmltYXRpb25FdmVudHMgPSBbJ29uQW5pbWF0aW9uU3RhcnQnLCAnb25BbmltYXRpb25FbmQnLCAnb25BbmltYXRpb25JdGVyYXRpb24nXTtcbmV4cG9ydCB2YXIgdHJhbnNpdGlvbkV2ZW50cyA9IFsnb25UcmFuc2l0aW9uRW5kJ107XG5leHBvcnQgdmFyIG90aGVyRXZlbnRzID0gWydvblRvZ2dsZSddO1xuZXhwb3J0IHZhciBhbGxFdmVudHMgPSBbXS5jb25jYXQoY2xpcGJvYXJkRXZlbnRzLCBjb21wb3NpdGlvbkV2ZW50cywga2V5Ym9hcmRFdmVudHMsIGZvY3VzRXZlbnRzLCBmb3JtRXZlbnRzLCBnZW5lcmljRXZlbnRzLCBtb3VzZUV2ZW50cywgcG9pbnRlckV2ZW50cywgc2VsZWN0aW9uRXZlbnRzLCB0b3VjaEV2ZW50cywgdWlFdmVudHMsIHdoZWVsRXZlbnRzLCBtZWRpYUV2ZW50cywgaW1hZ2VFdmVudHMsIGFuaW1hdGlvbkV2ZW50cywgdHJhbnNpdGlvbkV2ZW50cywgb3RoZXJFdmVudHMpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIG9uLWV2ZW50IGNhbGxiYWNrIHByb3BzIGN1cnJpZWQgd2l0aCBwcm92aWRlZCBhcmdzLlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BzIHBhc3NlZCB0byBhIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBnZXRBcmdzIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFyZ3VtZW50KHMpIG9uLWV2ZW50IGNhbGxiYWNrc1xuICogICBzaGFsbCBiZSBjdXJyaWVkIHdpdGguXG4gKi9cblxudmFyIG1ha2VFdmVudFByb3BzID0gZnVuY3Rpb24gbWFrZUV2ZW50UHJvcHMocHJvcHMsIGdldEFyZ3MpIHtcbiAgdmFyIGV2ZW50UHJvcHMgPSB7fTtcbiAgYWxsRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIGlmICghKGV2ZW50TmFtZSBpbiBwcm9wcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWdldEFyZ3MpIHtcbiAgICAgIGV2ZW50UHJvcHNbZXZlbnROYW1lXSA9IHByb3BzW2V2ZW50TmFtZV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnRQcm9wc1tldmVudE5hbWVdID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gcHJvcHNbZXZlbnROYW1lXShldmVudCwgZ2V0QXJncyhldmVudE5hbWUpKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGV2ZW50UHJvcHM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYWtlRXZlbnRQcm9wczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlQ2FuY2VsbGFibGVQcm9taXNlKHByb21pc2UpIHtcbiAgdmFyIGlzQ2FuY2VsbGVkID0gZmFsc2U7XG4gIHZhciB3cmFwcGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFpc0NhbmNlbGxlZCAmJiByZXNvbHZlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuICFpc0NhbmNlbGxlZCAmJiByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlOiB3cmFwcGVkUHJvbWlzZSxcbiAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgIGlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDbGFzc05hbWVzKCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGNsYXNzTGlzdCwgYXJnKSB7XG4gICAgcmV0dXJuIGNsYXNzTGlzdC5jb25jYXQoYXJnKTtcbiAgfSwgW10pLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xuICB9KS5qb2luKCcgJyk7XG59IiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWVzc2FnZShfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICB0eXBlID0gX3JlZi50eXBlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyZWFjdC1wZGZfX21lc3NhZ2UgcmVhY3QtcGRmX19tZXNzYWdlLS1cIi5jb25jYXQodHlwZSlcbiAgfSwgY2hpbGRyZW4pO1xufVxuTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnZXJyb3InLCAnbG9hZGluZycsICduby1kYXRhJ10pLmlzUmVxdWlyZWRcbn07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5cbi8qIENvcHlyaWdodCAyMDE1IE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBuby1lbXB0eS1mdW5jdGlvbiAqL1xudmFyIExpbmtTZXJ2aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGlua1NlcnZpY2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmtTZXJ2aWNlKTtcblxuICAgIHRoaXMuZXh0ZXJuYWxMaW5rVGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLmV4dGVybmFsTGlua1JlbCA9IG51bGw7XG4gICAgdGhpcy5leHRlcm5hbExpbmtFbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaW5rU2VydmljZSwgW3tcbiAgICBrZXk6IFwic2V0RG9jdW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RG9jdW1lbnQocGRmRG9jdW1lbnQpIHtcbiAgICAgIHRoaXMucGRmRG9jdW1lbnQgPSBwZGZEb2N1bWVudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vmlld2VyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpZXdlcihwZGZWaWV3ZXIpIHtcbiAgICAgIHRoaXMucGRmVmlld2VyID0gcGRmVmlld2VyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRIaXN0b3J5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhpc3RvcnkoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcInBhZ2VzQ291bnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBkZkRvY3VtZW50ID8gdGhpcy5wZGZEb2N1bWVudC5udW1QYWdlcyA6IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhZ2VcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBkZlZpZXdlci5jdXJyZW50UGFnZU51bWJlcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB0aGlzLnBkZlZpZXdlci5jdXJyZW50UGFnZU51bWJlciA9IHZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyb3RhdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge31cbiAgfSwge1xuICAgIGtleTogXCJnb1RvRGVzdGluYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ29Ub0Rlc3RpbmF0aW9uKGRlc3QpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBfdGhpcy5wZGZEb2N1bWVudC5nZXREZXN0aW5hdGlvbihkZXN0KS50aGVuKHJlc29sdmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlc3QudGhlbihyZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZXhwbGljaXREZXN0KSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShleHBsaWNpdERlc3QpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiLmNvbmNhdChleHBsaWNpdERlc3QsIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBkZXN0aW5hdGlvbiBhcnJheS5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlc3RSZWYgPSBleHBsaWNpdERlc3RbMF07XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaWYgKGRlc3RSZWYgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnBkZkRvY3VtZW50LmdldFBhZ2VJbmRleChkZXN0UmVmKS50aGVuKGZ1bmN0aW9uIChwYWdlSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShwYWdlSW5kZXggKyAxKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXFwiXCIuY29uY2F0KGRlc3RSZWYsIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBwYWdlIHJlZmVyZW5jZS5cIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVzdFJlZiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGVzdFJlZiArIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXFwiXCIuY29uY2F0KGRlc3RSZWYsIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBkZXN0aW5hdGlvbiByZWZlcmVuY2UuXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHBhZ2VOdW1iZXIpIHtcbiAgICAgICAgICBpZiAoIXBhZ2VOdW1iZXIgfHwgcGFnZU51bWJlciA8IDEgfHwgcGFnZU51bWJlciA+IF90aGlzLnBhZ2VzQ291bnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlxcXCJcIi5jb25jYXQocGFnZU51bWJlciwgXCJcXFwiIGlzIG5vdCBhIHZhbGlkIHBhZ2UgbnVtYmVyLlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMucGRmVmlld2VyLnNjcm9sbFBhZ2VJbnRvVmlldyh7XG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdmlnYXRlVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmF2aWdhdGVUbyhkZXN0KSB7XG4gICAgICB0aGlzLmdvVG9EZXN0aW5hdGlvbihkZXN0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ29Ub1BhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ29Ub1BhZ2UoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcImdldERlc3RpbmF0aW9uSGFzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXN0aW5hdGlvbkhhc2goKSB7XG4gICAgICByZXR1cm4gJyMnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbmNob3JVcmxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5jaG9yVXJsKCkge1xuICAgICAgcmV0dXJuICcjJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0SGFzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIYXNoKCkge31cbiAgfSwge1xuICAgIGtleTogXCJleGVjdXRlTmFtZWRBY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZU5hbWVkQWN0aW9uKCkge31cbiAgfSwge1xuICAgIGtleTogXCJjYWNoZVBhZ2VSZWZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FjaGVQYWdlUmVmKCkge31cbiAgfSwge1xuICAgIGtleTogXCJpc1BhZ2VWaXNpYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzUGFnZVZpc2libGUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNQYWdlQ2FjaGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzUGFnZUNhY2hlZCgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaW5rU2VydmljZTtcbn0oKTtcblxuZXhwb3J0IHsgTGlua1NlcnZpY2UgYXMgZGVmYXVsdCB9OyIsIi8vIEFzIGRlZmluZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcGRmLmpzL2Jsb2IvbWFzdGVyL3NyYy9zaGFyZWQvdXRpbC5qcyNMMzc4LUwzODFcbnZhciBQYXNzd29yZFJlc3BvbnNlcyA9IHtcbiAgTkVFRF9QQVNTV09SRDogMSxcbiAgSU5DT1JSRUNUX1BBU1NXT1JEOiAyXG59O1xuZXhwb3J0IGRlZmF1bHQgUGFzc3dvcmRSZXNwb25zZXM7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIGVudmlyb25tZW50LlxuICovXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBydW5uaW5nIGZyb20gYSBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqL1xuXG5leHBvcnQgdmFyIGlzTG9jYWxGaWxlU3lzdGVtID0gaXNCcm93c2VyICYmIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6Jztcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgd2UncmUgcnVubmluZyBvbiBhIHByb2R1Y3Rpb24gYnVpbGQgb3Igbm90LlxuICovXG5cbmV4cG9ydCB2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFyaWFibGUgVmFyaWFibGUgdG8gY2hlY2tcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgIT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHZhcmlhYmxlIGlzIGRlZmluZWQgYW5kIG5vdCBudWxsLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFyaWFibGUgVmFyaWFibGUgdG8gY2hlY2tcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm92aWRlZCh2YXJpYWJsZSkge1xuICByZXR1cm4gaXNEZWZpbmVkKHZhcmlhYmxlKSAmJiB2YXJpYWJsZSAhPT0gbnVsbDtcbn1cbi8qKlxuICogQ2hlY2tlcyB3aGV0aGVyIGEgdmFyaWFibGUgcHJvdmlkZWQgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHsqfSB2YXJpYWJsZSBWYXJpYWJsZSB0byBjaGVja1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09PSAnc3RyaW5nJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSB2YXJpYWJsZSBwcm92aWRlZCBpcyBhbiBBcnJheUJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0geyp9IHZhcmlhYmxlIFZhcmlhYmxlIHRvIGNoZWNrXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFyaWFibGUpIHtcbiAgcmV0dXJuIHZhcmlhYmxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59XG4vKipcbiAqIENoZWNrZXMgd2hldGhlciBhIHZhcmlhYmxlIHByb3ZpZGVkIGlzIGEgQmxvYi5cbiAqXG4gKiBAcGFyYW0geyp9IHZhcmlhYmxlIFZhcmlhYmxlIHRvIGNoZWNrXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmxvYih2YXJpYWJsZSkge1xuICBpZiAoIWlzQnJvd3Nlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGNoZWNrIGlmIGEgdmFyaWFibGUgaXMgYSBCbG9iIG9uIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuJyk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGUgaW5zdGFuY2VvZiBCbG9iO1xufVxuLyoqXG4gKiBDaGVja2VzIHdoZXRoZXIgYSB2YXJpYWJsZSBwcm92aWRlZCBpcyBhIEZpbGUuXG4gKlxuICogQHBhcmFtIHsqfSB2YXJpYWJsZSBWYXJpYWJsZSB0byBjaGVja1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGUodmFyaWFibGUpIHtcbiAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byBjaGVjayBpZiBhIHZhcmlhYmxlIGlzIGEgRmlsZSBvbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIHZhcmlhYmxlIGluc3RhbmNlb2YgRmlsZTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBzdHJpbmcgcHJvdmlkZWQgaXMgYSBkYXRhIFVSSS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjaGVja1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFVUkkoc3RyKSB7XG4gIHJldHVybiBpc1N0cmluZyhzdHIpICYmIC9eZGF0YTovLnRlc3Qoc3RyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkYXRhVVJJdG9CeXRlU3RyaW5nKGRhdGFVUkkpIHtcbiAgaWYgKCFpc0RhdGFVUkkoZGF0YVVSSSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YSBVUkkuJyk7XG4gIH1cblxuICB2YXIgX2RhdGFVUkkkc3BsaXQgPSBkYXRhVVJJLnNwbGl0KCcsJyksXG4gICAgICBfZGF0YVVSSSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfZGF0YVVSSSRzcGxpdCwgMiksXG4gICAgICBoZWFkZXJzU3RyaW5nID0gX2RhdGFVUkkkc3BsaXQyWzBdLFxuICAgICAgZGF0YVN0cmluZyA9IF9kYXRhVVJJJHNwbGl0MlsxXTtcblxuICB2YXIgaGVhZGVycyA9IGhlYWRlcnNTdHJpbmcuc3BsaXQoJzsnKTtcblxuICBpZiAoaGVhZGVycy5pbmRleE9mKCdiYXNlNjQnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gYXRvYihkYXRhU3RyaW5nKTtcbiAgfVxuXG4gIHJldHVybiB1bmVzY2FwZShkYXRhU3RyaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQaXhlbFJhdGlvKCkge1xuICByZXR1cm4gaXNCcm93c2VyICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVPbkRldihtZXRob2QpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBtZXNzYWdlW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIChfY29uc29sZSA9IGNvbnNvbGUpW21ldGhvZF0uYXBwbHkoX2NvbnNvbGUsIG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuT25EZXYoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIG1lc3NhZ2VbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGNvbnNvbGVPbkRldi5hcHBseSh2b2lkIDAsIFsnd2FybiddLmNvbmNhdChtZXNzYWdlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JPbkRldigpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBtZXNzYWdlID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgbWVzc2FnZVtfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgY29uc29sZU9uRGV2LmFwcGx5KHZvaWQgMCwgWydlcnJvciddLmNvbmNhdChtZXNzYWdlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheUNPUlNXYXJuaW5nKCkge1xuICBpZiAoaXNMb2NhbEZpbGVTeXN0ZW0pIHtcbiAgICB3YXJuT25EZXYoJ0xvYWRpbmcgUERGIGFzIGJhc2U2NCBzdHJpbmdzL1VSTHMgbWlnaHQgbm90IHdvcmsgb24gcHJvdG9jb2xzIG90aGVyIHRoYW4gSFRUUC9IVFRQUy4gT24gR29vZ2xlIENocm9tZSwgeW91IGNhbiB1c2UgLS1hbGxvdy1maWxlLWFjY2Vzcy1mcm9tLWZpbGVzIGZsYWcgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4nKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbFJ1bm5pbmdUYXNrKHJ1bm5pbmdUYXNrKSB7XG4gIGlmIChydW5uaW5nVGFzayAmJiBydW5uaW5nVGFzay5jYW5jZWwpIHJ1bm5pbmdUYXNrLmNhbmNlbCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYWdlQ2FsbGJhY2socGFnZSwgc2NhbGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhZ2UsICd3aWR0aCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXdbMl0gKiBzY2FsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhZ2UsICdoZWlnaHQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3WzNdICogc2NhbGU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYWdlLCAnb3JpZ2luYWxXaWR0aCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXdbMl07XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYWdlLCAnb3JpZ2luYWxIZWlnaHQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3WzNdO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gcGFnZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbEV4Y2VwdGlvbihlcnJvcikge1xuICByZXR1cm4gZXJyb3IubmFtZSA9PT0gJ1JlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbic7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9hZEZyb21GaWxlKGZpbGUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0KSk7XG4gICAgfTtcblxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldC5lcnJvci5jb2RlKSB7XG4gICAgICAgIGNhc2UgZXZlbnQudGFyZ2V0LmVycm9yLk5PVF9GT1VORF9FUlI6XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIHJlYWRpbmcgYSBmaWxlOiBGaWxlIG5vdCBmb3VuZC4nKSk7XG5cbiAgICAgICAgY2FzZSBldmVudC50YXJnZXQuZXJyb3IuTk9UX1JFQURBQkxFX0VSUjpcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignRXJyb3Igd2hpbGUgcmVhZGluZyBhIGZpbGU6IEZpbGUgbm90IHJlYWRhYmxlLicpKTtcblxuICAgICAgICBjYXNlIGV2ZW50LnRhcmdldC5lcnJvci5TRUNVUklUWV9FUlI6XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIHJlYWRpbmcgYSBmaWxlOiBTZWN1cml0eSBlcnJvci4nKSk7XG5cbiAgICAgICAgY2FzZSBldmVudC50YXJnZXQuZXJyb3IuQUJPUlRfRVJSOlxuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdFcnJvciB3aGlsZSByZWFkaW5nIGEgZmlsZTogQWJvcnRlZC4nKSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignRXJyb3Igd2hpbGUgcmVhZGluZyBhIGZpbGUuJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbW91c2VFdmVudHMsIHRvdWNoRXZlbnRzLCBrZXlib2FyZEV2ZW50cyB9IGZyb20gJ21ha2UtZXZlbnQtcHJvcHMnO1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgTGlua1NlcnZpY2UgZnJvbSAnLi4vTGlua1NlcnZpY2UnO1xuZXhwb3J0IHZhciBldmVudFByb3BzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobW91c2VFdmVudHMpLCBfdG9Db25zdW1hYmxlQXJyYXkodG91Y2hFdmVudHMpLCBfdG9Db25zdW1hYmxlQXJyYXkoa2V5Ym9hcmRFdmVudHMpKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICByZXN1bHRbZXZlbnROYW1lXSA9IFByb3BUeXBlcy5mdW5jO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0oKTtcbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzICovXG5cbnZhciBmaWxlVHlwZXMgPSBbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXlCdWZmZXIpLCBQcm9wVHlwZXMuc2hhcGUoe1xuICBkYXRhOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGh0dHBIZWFkZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxuICByYW5nZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgdXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB3aXRoQ3JlZGVudGlhbHM6IFByb3BUeXBlcy5ib29sXG59KV07XG5cbmlmICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZmlsZVR5cGVzLnB1c2goUHJvcFR5cGVzLmluc3RhbmNlT2YoRmlsZSkpO1xufVxuXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XG4gIGZpbGVUeXBlcy5wdXNoKFByb3BUeXBlcy5pbnN0YW5jZU9mKEJsb2IpKTtcbn1cblxuZXhwb3J0IHZhciBpc0NsYXNzTmFtZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSk7XG5leHBvcnQgdmFyIGlzRmlsZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoZmlsZVR5cGVzKTtcbmV4cG9ydCB2YXIgaXNMaW5rU2VydmljZSA9IFByb3BUeXBlcy5pbnN0YW5jZU9mKExpbmtTZXJ2aWNlKTtcbmV4cG9ydCB2YXIgaXNMaW5rVGFyZ2V0ID0gUHJvcFR5cGVzLm9uZU9mKFsnX3NlbGYnLCAnX2JsYW5rJywgJ19wYXJlbnQnLCAnX3RvcCddKTtcbmV4cG9ydCB2YXIgaXNQYWdlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgX3RyYW5zcG9ydDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBmb250TG9hZGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZCxcbiAgY29tbW9uT2JqczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBfb2JqczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIGdldEFubm90YXRpb25zOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRUZXh0Q29udGVudDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0Vmlld3BvcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5leHBvcnQgdmFyIGlzUGFnZUluZGV4ID0gZnVuY3Rpb24gaXNQYWdlSW5kZXgocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciBwYWdlSW5kZXggPSBwcm9wc1twcm9wTmFtZV0sXG4gICAgICBwYWdlTnVtYmVyID0gcHJvcHMucGFnZU51bWJlcixcbiAgICAgIHBkZiA9IHByb3BzLnBkZjtcblxuICBpZiAoIWlzRGVmaW5lZChwZGYpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKHBhZ2VJbmRleCkpIHtcbiAgICBpZiAodHlwZW9mIHBhZ2VJbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgb2YgdHlwZSBgXCIpLmNvbmNhdChfdHlwZW9mKHBhZ2VJbmRleCksIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIGV4cGVjdGVkIGBudW1iZXJgLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhZ2VJbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJFeHBlY3RlZCBgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgdG8gYmUgZ3JlYXRlciBvciBlcXVhbCB0byAwLlwiKSk7XG4gICAgfVxuXG4gICAgdmFyIG51bVBhZ2VzID0gcGRmLm51bVBhZ2VzO1xuXG4gICAgaWYgKHBhZ2VJbmRleCArIDEgPiBudW1QYWdlcykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkV4cGVjdGVkIGBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCB0byBiZSBsZXNzIG9yIGVxdWFsIHRvIFwiKS5jb25jYXQobnVtUGFnZXMgLSAxLCBcIi5cIikpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghaXNEZWZpbmVkKHBhZ2VOdW1iZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcImBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCBub3Qgc3VwcGxpZWQuIEVpdGhlciBwYWdlSW5kZXggb3IgcGFnZU51bWJlciBtdXN0IGJlIHN1cHBsaWVkIHRvIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYC5cIikpO1xuICB9IC8vIEV2ZXJ5dGhpbmcgaXMgZmluZVxuXG5cbiAgcmV0dXJuIG51bGw7XG59O1xuZXhwb3J0IHZhciBpc1BhZ2VOdW1iZXIgPSBmdW5jdGlvbiBpc1BhZ2VOdW1iZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciBwYWdlTnVtYmVyID0gcHJvcHNbcHJvcE5hbWVdLFxuICAgICAgcGFnZUluZGV4ID0gcHJvcHMucGFnZUluZGV4LFxuICAgICAgcGRmID0gcHJvcHMucGRmO1xuXG4gIGlmICghaXNEZWZpbmVkKHBkZikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0RlZmluZWQocGFnZU51bWJlcikpIHtcbiAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFwiYFwiLmNvbmNhdChwcm9wTmFtZSwgXCJgIG9mIHR5cGUgYFwiKS5jb25jYXQoX3R5cGVvZihwYWdlTnVtYmVyKSwgXCJgIHN1cHBsaWVkIHRvIGBcIikuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiYCwgZXhwZWN0ZWQgYG51bWJlcmAuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAocGFnZU51bWJlciA8IDEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJFeHBlY3RlZCBgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgdG8gYmUgZ3JlYXRlciBvciBlcXVhbCB0byAxLlwiKSk7XG4gICAgfVxuXG4gICAgdmFyIG51bVBhZ2VzID0gcGRmLm51bVBhZ2VzO1xuXG4gICAgaWYgKHBhZ2VOdW1iZXIgPiBudW1QYWdlcykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkV4cGVjdGVkIGBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCB0byBiZSBsZXNzIG9yIGVxdWFsIHRvIFwiKS5jb25jYXQobnVtUGFnZXMsIFwiLlwiKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc0RlZmluZWQocGFnZUluZGV4KSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgbm90IHN1cHBsaWVkLiBFaXRoZXIgcGFnZUluZGV4IG9yIHBhZ2VOdW1iZXIgbXVzdCBiZSBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAuXCIpKTtcbiAgfSAvLyBFdmVyeXRoaW5nIGlzIGZpbmVcblxuXG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgaXNQZGYgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXREZXN0aW5hdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0T3V0bGluZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0UGFnZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbnVtUGFnZXM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSksIFByb3BUeXBlcy5ib29sXSk7XG5leHBvcnQgdmFyIGlzUmVmID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbn0pXSk7XG5leHBvcnQgdmFyIGlzUmVuZGVyTW9kZSA9IFByb3BUeXBlcy5vbmVPZihbJ2NhbnZhcycsICdub25lJywgJ3N2ZyddKTtcbmV4cG9ydCB2YXIgaXNSb3RhdGUgPSBQcm9wVHlwZXMub25lT2YoWzAsIDkwLCAxODAsIDI3MF0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX2V4Y2x1ZGVkID0gW1widXJsXCJdO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG4vKipcbiAqIExvYWRzIGEgUERGIGRvY3VtZW50LiBQYXNzZXMgaXQgdG8gYWxsIGNoaWxkcmVuLlxuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWFrZUV2ZW50UHJvcHMgZnJvbSAnbWFrZS1ldmVudC1wcm9wcyc7XG5pbXBvcnQgbWFrZUNhbmNlbGxhYmxlIGZyb20gJ21ha2UtY2FuY2VsbGFibGUtcHJvbWlzZSc7XG5pbXBvcnQgbWVyZ2VDbGFzc05hbWVzIGZyb20gJ21lcmdlLWNsYXNzLW5hbWVzJztcbmltcG9ydCAqIGFzIHBkZmpzIGZyb20gJ3BkZmpzLWRpc3QvbGVnYWN5L2J1aWxkL3BkZic7XG5pbXBvcnQgRG9jdW1lbnRDb250ZXh0IGZyb20gJy4vRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCBNZXNzYWdlIGZyb20gJy4vTWVzc2FnZSc7XG5pbXBvcnQgTGlua1NlcnZpY2UgZnJvbSAnLi9MaW5rU2VydmljZSc7XG5pbXBvcnQgUGFzc3dvcmRSZXNwb25zZXMgZnJvbSAnLi9QYXNzd29yZFJlc3BvbnNlcyc7XG5pbXBvcnQgeyBjYW5jZWxSdW5uaW5nVGFzaywgZGF0YVVSSXRvQnl0ZVN0cmluZywgZGlzcGxheUNPUlNXYXJuaW5nLCBlcnJvck9uRGV2LCBpc0FycmF5QnVmZmVyLCBpc0Jsb2IsIGlzQnJvd3NlciwgaXNEYXRhVVJJLCBpc0ZpbGUsIGxvYWRGcm9tRmlsZSwgd2Fybk9uRGV2IH0gZnJvbSAnLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRQcm9wcywgaXNDbGFzc05hbWUsIGlzRmlsZSBhcyBpc0ZpbGVQcm9wLCBpc1JlZiB9IGZyb20gJy4vc2hhcmVkL3Byb3BUeXBlcyc7XG52YXIgUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gcGRmanMuUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuXG52YXIgRG9jdW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEb2N1bWVudCwgX1B1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRG9jdW1lbnQpO1xuXG4gIGZ1bmN0aW9uIERvY3VtZW50KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb2N1bWVudCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIHBkZjogbnVsbFxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInZpZXdlclwiLCB7XG4gICAgICBzY3JvbGxQYWdlSW50b1ZpZXc6IGZ1bmN0aW9uIHNjcm9sbFBhZ2VJbnRvVmlldyhfcmVmKSB7XG4gICAgICAgIHZhciBwYWdlTnVtYmVyID0gX3JlZi5wYWdlTnVtYmVyO1xuICAgICAgICAvLyBIYW5kbGluZyBqdW1waW5nIHRvIGludGVybmFsIGxpbmtzIHRhcmdldFxuICAgICAgICB2YXIgb25JdGVtQ2xpY2sgPSBfdGhpcy5wcm9wcy5vbkl0ZW1DbGljazsgLy8gRmlyc3QsIGNoZWNrIGlmIGN1c3RvbSBoYW5kbGluZyBvZiBvbkl0ZW1DbGljayB3YXMgcHJvdmlkZWRcblxuICAgICAgICBpZiAob25JdGVtQ2xpY2spIHtcbiAgICAgICAgICBvbkl0ZW1DbGljayh7XG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIElmIG5vdCwgdHJ5IHRvIGxvb2sgZm9yIHRhcmdldCBwYWdlIHdpdGhpbiB0aGUgPERvY3VtZW50Pi5cblxuXG4gICAgICAgIHZhciBwYWdlID0gX3RoaXMucGFnZXNbcGFnZU51bWJlciAtIDFdO1xuXG4gICAgICAgIGlmIChwYWdlKSB7XG4gICAgICAgICAgLy8gU2Nyb2xsIHRvIHRoZSBwYWdlIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICBwYWdlLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgd2Fybk9uRGV2KFwiV2FybmluZzogQW4gaW50ZXJuYWwgbGluayBsZWFkaW5nIHRvIHBhZ2UgXCIuY29uY2F0KHBhZ2VOdW1iZXIsIFwiIHdhcyBjbGlja2VkLCBidXQgbmVpdGhlciA8RG9jdW1lbnQ+IHdhcyBwcm92aWRlZCB3aXRoIG9uSXRlbUNsaWNrIG5vciBpdCB3YXMgYWJsZSB0byBmaW5kIHRoZSBwYWdlIHdpdGhpbiBpdHNlbGYuIEVpdGhlciBwcm92aWRlIG9uSXRlbUNsaWNrIHRvIDxEb2N1bWVudD4gYW5kIGhhbmRsZSBuYXZpZ2F0aW5nIGJ5IHlvdXJzZWxmIG9yIGVuc3VyZSB0aGF0IGFsbCBwYWdlcyBhcmUgcmVuZGVyZWQgd2l0aGluIDxEb2N1bWVudD4uXCIpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsaW5rU2VydmljZVwiLCBuZXcgTGlua1NlcnZpY2UoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibG9hZERvY3VtZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmZpbmREb2N1bWVudFNvdXJjZSgpLnRoZW4oZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBfdGhpcy5vblNvdXJjZVN1Y2Nlc3MoKTtcblxuICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAoIXByZXZTdGF0ZS5wZGYpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwZGY6IG51bGxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wcy5vcHRpb25zLFxuICAgICAgICAgICAgb25Mb2FkUHJvZ3Jlc3MgPSBfdGhpcyRwcm9wcy5vbkxvYWRQcm9ncmVzcyxcbiAgICAgICAgICAgIG9uUGFzc3dvcmQgPSBfdGhpcyRwcm9wcy5vblBhc3N3b3JkOyAvLyBJZiBhbm90aGVyIHJlbmRlcmluZyBpcyBpbiBwcm9ncmVzcywgbGV0J3MgY2FuY2VsIGl0XG5cbiAgICAgICAgY2FuY2VsUnVubmluZ1Rhc2soX3RoaXMucnVubmluZ1Rhc2spOyAvLyBJZiBhbm90aGVyIGxvYWRpbmcgaXMgaW4gcHJvZ3Jlc3MsIGxldCdzIGRlc3Ryb3kgaXRcblxuICAgICAgICBpZiAoX3RoaXMubG9hZGluZ1Rhc2spIF90aGlzLmxvYWRpbmdUYXNrLmRlc3Ryb3koKTtcbiAgICAgICAgX3RoaXMubG9hZGluZ1Rhc2sgPSBwZGZqcy5nZXREb2N1bWVudChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNvdXJjZSksIG9wdGlvbnMpKTtcbiAgICAgICAgX3RoaXMubG9hZGluZ1Rhc2sub25QYXNzd29yZCA9IG9uUGFzc3dvcmQ7XG5cbiAgICAgICAgaWYgKG9uTG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgX3RoaXMubG9hZGluZ1Rhc2sub25Qcm9ncmVzcyA9IG9uTG9hZFByb2dyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhbmNlbGxhYmxlID0gbWFrZUNhbmNlbGxhYmxlKF90aGlzLmxvYWRpbmdUYXNrLnByb21pc2UpO1xuICAgICAgICBfdGhpcy5ydW5uaW5nVGFzayA9IGNhbmNlbGxhYmxlO1xuICAgICAgICBjYW5jZWxsYWJsZS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBkZikge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUucGRmICYmIHByZXZTdGF0ZS5wZGYuZmluZ2VycHJpbnQgPT09IHBkZi5maW5nZXJwcmludCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcGRmOiBwZGZcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSwgX3RoaXMub25Mb2FkU3VjY2Vzcyk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgX3RoaXMub25Mb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIF90aGlzLm9uU291cmNlRXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0dXBMaW5rU2VydmljZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5saW5rU2VydmljZS5zZXRWaWV3ZXIoX3RoaXMudmlld2VyKTtcblxuICAgICAgdmFyIGRvY3VtZW50SW5zdGFuY2UgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLmxpbmtTZXJ2aWNlLCAnZXh0ZXJuYWxMaW5rVGFyZ2V0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB2YXIgZXh0ZXJuYWxMaW5rVGFyZ2V0ID0gZG9jdW1lbnRJbnN0YW5jZS5wcm9wcy5leHRlcm5hbExpbmtUYXJnZXQ7XG5cbiAgICAgICAgICBzd2l0Y2ggKGV4dGVybmFsTGlua1RhcmdldCkge1xuICAgICAgICAgICAgY2FzZSAnX3NlbGYnOlxuICAgICAgICAgICAgICByZXR1cm4gMTtcblxuICAgICAgICAgICAgY2FzZSAnX2JsYW5rJzpcbiAgICAgICAgICAgICAgcmV0dXJuIDI7XG5cbiAgICAgICAgICAgIGNhc2UgJ19wYXJlbnQnOlxuICAgICAgICAgICAgICByZXR1cm4gMztcblxuICAgICAgICAgICAgY2FzZSAnX3RvcCc6XG4gICAgICAgICAgICAgIHJldHVybiA0O1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uU291cmNlU3VjY2Vzc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25Tb3VyY2VTdWNjZXNzID0gX3RoaXMucHJvcHMub25Tb3VyY2VTdWNjZXNzO1xuICAgICAgaWYgKG9uU291cmNlU3VjY2Vzcykgb25Tb3VyY2VTdWNjZXNzKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Tb3VyY2VFcnJvclwiLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGVycm9yT25EZXYoZXJyb3IpO1xuICAgICAgdmFyIG9uU291cmNlRXJyb3IgPSBfdGhpcy5wcm9wcy5vblNvdXJjZUVycm9yO1xuICAgICAgaWYgKG9uU291cmNlRXJyb3IpIG9uU291cmNlRXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTG9hZFN1Y2Nlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9uTG9hZFN1Y2Nlc3MgPSBfdGhpcy5wcm9wcy5vbkxvYWRTdWNjZXNzO1xuICAgICAgdmFyIHBkZiA9IF90aGlzLnN0YXRlLnBkZjtcbiAgICAgIGlmIChvbkxvYWRTdWNjZXNzKSBvbkxvYWRTdWNjZXNzKHBkZik7XG4gICAgICBfdGhpcy5wYWdlcyA9IG5ldyBBcnJheShwZGYubnVtUGFnZXMpO1xuXG4gICAgICBfdGhpcy5saW5rU2VydmljZS5zZXREb2N1bWVudChwZGYpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTG9hZEVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwZGY6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgZXJyb3JPbkRldihlcnJvcik7XG4gICAgICB2YXIgb25Mb2FkRXJyb3IgPSBfdGhpcy5wcm9wcy5vbkxvYWRFcnJvcjtcbiAgICAgIGlmIChvbkxvYWRFcnJvcikgb25Mb2FkRXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImZpbmREb2N1bWVudFNvdXJjZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGZpbGUgPSBfdGhpcy5wcm9wcy5maWxlO1xuXG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH0gLy8gRmlsZSBpcyBhIHN0cmluZ1xuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChpc0RhdGFVUkkoZmlsZSkpIHtcbiAgICAgICAgICAgIHZhciBmaWxlQnl0ZVN0cmluZyA9IGRhdGFVUkl0b0J5dGVTdHJpbmcoZmlsZSk7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgZGF0YTogZmlsZUJ5dGVTdHJpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpc3BsYXlDT1JTV2FybmluZygpO1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgdXJsOiBmaWxlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gRmlsZSBpcyBQREZEYXRhUmFuZ2VUcmFuc3BvcnRcblxuXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgUERGRGF0YVJhbmdlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICByYW5nZTogZmlsZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIEZpbGUgaXMgYW4gQXJyYXlCdWZmZXJcblxuXG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGZpbGUpKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICBkYXRhOiBmaWxlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjYXNlcyBiZWxvdyBhcmUgYnJvd3Nlci1vbmx5LlxuICAgICAgICAgKiBJZiB5b3UncmUgcnVubmluZyBvbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LCB0aGVzZSBjYXNlcyB3aWxsIGJlIG9mIG5vIHVzZS5cbiAgICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAgICAgLy8gRmlsZSBpcyBhIEJsb2JcbiAgICAgICAgICBpZiAoaXNCbG9iKGZpbGUpIHx8IGlzRmlsZShmaWxlKSkge1xuICAgICAgICAgICAgbG9hZEZyb21GaWxlKGZpbGUpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBBdCB0aGlzIHBvaW50LCBmaWxlIG11c3QgYmUgYW4gb2JqZWN0XG5cblxuICAgICAgICBpZiAoX3R5cGVvZihmaWxlKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFyYW1ldGVyIGluIGZpbGUsIG5lZWQgZWl0aGVyIFVpbnQ4QXJyYXksIHN0cmluZyBvciBhIHBhcmFtZXRlciBvYmplY3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZmlsZS51cmwgJiYgIWZpbGUuZGF0YSAmJiAhZmlsZS5yYW5nZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYXJhbWV0ZXIgb2JqZWN0OiBuZWVkIGVpdGhlciAuZGF0YSwgLnJhbmdlIG9yIC51cmwnKTtcbiAgICAgICAgfSAvLyBGaWxlIC51cmwgaXMgYSBzdHJpbmdcblxuXG4gICAgICAgIGlmICh0eXBlb2YgZmlsZS51cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGlzRGF0YVVSSShmaWxlLnVybCkpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBmaWxlLnVybCxcbiAgICAgICAgICAgICAgICBvdGhlclBhcmFtcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhmaWxlLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgICAgICB2YXIgX2ZpbGVCeXRlU3RyaW5nID0gZGF0YVVSSXRvQnl0ZVN0cmluZyh1cmwpO1xuXG4gICAgICAgICAgICByZXNvbHZlKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgICAgICBkYXRhOiBfZmlsZUJ5dGVTdHJpbmdcbiAgICAgICAgICAgIH0sIG90aGVyUGFyYW1zKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzcGxheUNPUlNXYXJuaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKGZpbGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVnaXN0ZXJQYWdlXCIsIGZ1bmN0aW9uIChwYWdlSW5kZXgsIHJlZikge1xuICAgICAgX3RoaXMucGFnZXNbcGFnZUluZGV4XSA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bnJlZ2lzdGVyUGFnZVwiLCBmdW5jdGlvbiAocGFnZUluZGV4KSB7XG4gICAgICBkZWxldGUgX3RoaXMucGFnZXNbcGFnZUluZGV4XTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEb2N1bWVudCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmxvYWREb2N1bWVudCgpO1xuICAgICAgdGhpcy5zZXR1cExpbmtTZXJ2aWNlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgZmlsZSA9IHRoaXMucHJvcHMuZmlsZTtcblxuICAgICAgaWYgKGZpbGUgIT09IHByZXZQcm9wcy5maWxlKSB7XG4gICAgICAgIHRoaXMubG9hZERvY3VtZW50KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgLy8gSWYgcmVuZGVyaW5nIGlzIGluIHByb2dyZXNzLCBsZXQncyBjYW5jZWwgaXRcbiAgICAgIGNhbmNlbFJ1bm5pbmdUYXNrKHRoaXMucnVubmluZ1Rhc2spOyAvLyBJZiBsb2FkaW5nIGlzIGluIHByb2dyZXNzLCBsZXQncyBkZXN0cm95IGl0XG5cbiAgICAgIGlmICh0aGlzLmxvYWRpbmdUYXNrKSB0aGlzLmxvYWRpbmdUYXNrLmRlc3Ryb3koKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hpbGRDb250ZXh0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlua1NlcnZpY2UgPSB0aGlzLmxpbmtTZXJ2aWNlLFxuICAgICAgICAgIHJlZ2lzdGVyUGFnZSA9IHRoaXMucmVnaXN0ZXJQYWdlLFxuICAgICAgICAgIHVucmVnaXN0ZXJQYWdlID0gdGhpcy51bnJlZ2lzdGVyUGFnZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGltYWdlUmVzb3VyY2VzUGF0aCA9IF90aGlzJHByb3BzMi5pbWFnZVJlc291cmNlc1BhdGgsXG4gICAgICAgICAgcmVuZGVyTW9kZSA9IF90aGlzJHByb3BzMi5yZW5kZXJNb2RlLFxuICAgICAgICAgIHJvdGF0ZSA9IF90aGlzJHByb3BzMi5yb3RhdGU7XG4gICAgICB2YXIgcGRmID0gdGhpcy5zdGF0ZS5wZGY7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbWFnZVJlc291cmNlc1BhdGg6IGltYWdlUmVzb3VyY2VzUGF0aCxcbiAgICAgICAgbGlua1NlcnZpY2U6IGxpbmtTZXJ2aWNlLFxuICAgICAgICBwZGY6IHBkZixcbiAgICAgICAgcmVnaXN0ZXJQYWdlOiByZWdpc3RlclBhZ2UsXG4gICAgICAgIHJlbmRlck1vZGU6IHJlbmRlck1vZGUsXG4gICAgICAgIHJvdGF0ZTogcm90YXRlLFxuICAgICAgICB1bnJlZ2lzdGVyUGFnZTogdW5yZWdpc3RlclBhZ2VcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV2ZW50UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50XG4gICAgICByZXR1cm4gbWFrZUV2ZW50UHJvcHModGhpcy5wcm9wcywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnN0YXRlLnBkZjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIGRvY3VtZW50IHNvdXJjZSBpcyByZXNvbHZlZCBjb3JyZWN0bHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckNoaWxkcmVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY2hpbGRDb250ZXh0XG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckNvbnRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29udGVudCgpIHtcbiAgICAgIHZhciBmaWxlID0gdGhpcy5wcm9wcy5maWxlO1xuICAgICAgdmFyIHBkZiA9IHRoaXMuc3RhdGUucGRmO1xuXG4gICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgdmFyIG5vRGF0YSA9IHRoaXMucHJvcHMubm9EYXRhO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwge1xuICAgICAgICAgIHR5cGU6IFwibm8tZGF0YVwiXG4gICAgICAgIH0sIHR5cGVvZiBub0RhdGEgPT09ICdmdW5jdGlvbicgPyBub0RhdGEoKSA6IG5vRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwZGYgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZXNzYWdlLCB7XG4gICAgICAgICAgdHlwZTogXCJsb2FkaW5nXCJcbiAgICAgICAgfSwgdHlwZW9mIGxvYWRpbmcgPT09ICdmdW5jdGlvbicgPyBsb2FkaW5nKCkgOiBsb2FkaW5nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBkZiA9PT0gZmFsc2UpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5wcm9wcy5lcnJvcjtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lc3NhZ2UsIHtcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgICAgfSwgdHlwZW9mIGVycm9yID09PSAnZnVuY3Rpb24nID8gZXJyb3IoKSA6IGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ2hpbGRyZW4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMy5jbGFzc05hbWUsXG4gICAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wczMuaW5wdXRSZWY7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NOYW1lcygncmVhY3QtcGRmX19Eb2N1bWVudCcsIGNsYXNzTmFtZSksXG4gICAgICAgIHJlZjogaW5wdXRSZWZcbiAgICAgIH0sIHRoaXMuZXZlbnRQcm9wcyksIHRoaXMucmVuZGVyQ29udGVudCgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRG9jdW1lbnQ7XG59KFB1cmVDb21wb25lbnQpO1xuXG5leHBvcnQgeyBEb2N1bWVudCBhcyBkZWZhdWx0IH07XG5Eb2N1bWVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGVycm9yOiAnRmFpbGVkIHRvIGxvYWQgUERGIGZpbGUuJyxcbiAgbG9hZGluZzogJ0xvYWRpbmcgUERG4oCmJyxcbiAgbm9EYXRhOiAnTm8gUERGIGZpbGUgc3BlY2lmaWVkLicsXG4gIG9uUGFzc3dvcmQ6IGZ1bmN0aW9uIG9uUGFzc3dvcmQoY2FsbGJhY2ssIHJlYXNvbikge1xuICAgIHN3aXRjaCAocmVhc29uKSB7XG4gICAgICBjYXNlIFBhc3N3b3JkUmVzcG9uc2VzLk5FRURfUEFTU1dPUkQ6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYWxlcnRcbiAgICAgICAgICB2YXIgcGFzc3dvcmQgPSBwcm9tcHQoJ0VudGVyIHRoZSBwYXNzd29yZCB0byBvcGVuIHRoaXMgUERGIGZpbGUuJyk7XG4gICAgICAgICAgY2FsbGJhY2socGFzc3dvcmQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgUGFzc3dvcmRSZXNwb25zZXMuSU5DT1JSRUNUX1BBU1NXT1JEOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XG4gICAgICAgICAgdmFyIF9wYXNzd29yZCA9IHByb21wdCgnSW52YWxpZCBwYXNzd29yZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nKTtcblxuICAgICAgICAgIGNhbGxiYWNrKF9wYXNzd29yZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cbn07XG52YXIgaXNGdW5jdGlvbk9yTm9kZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pO1xuRG9jdW1lbnQucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBldmVudFByb3BzKSwge30sIHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjbGFzc05hbWU6IGlzQ2xhc3NOYW1lLFxuICBlcnJvcjogaXNGdW5jdGlvbk9yTm9kZSxcbiAgZmlsZTogaXNGaWxlUHJvcCxcbiAgaW1hZ2VSZXNvdXJjZXNQYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbnB1dFJlZjogaXNSZWYsXG4gIGxvYWRpbmc6IGlzRnVuY3Rpb25Pck5vZGUsXG4gIG5vRGF0YTogaXNGdW5jdGlvbk9yTm9kZSxcbiAgb25JdGVtQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxvYWRFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTG9hZFByb2dyZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Mb2FkU3VjY2VzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUGFzc3dvcmQ6IFByb3BUeXBlcy5mdW5jLFxuICBvblNvdXJjZUVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Tb3VyY2VTdWNjZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgcm90YXRlOiBQcm9wVHlwZXMubnVtYmVyXG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiaXRlbVwiXTtcblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBEb2N1bWVudENvbnRleHQgZnJvbSAnLi9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IE91dGxpbmVDb250ZXh0IGZyb20gJy4vT3V0bGluZUNvbnRleHQnO1xuaW1wb3J0IFJlZiBmcm9tICcuL1JlZic7XG5pbXBvcnQgeyBpc0RlZmluZWQgfSBmcm9tICcuL3NoYXJlZC91dGlscyc7XG5pbXBvcnQgeyBpc1BkZiB9IGZyb20gJy4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgdmFyIE91dGxpbmVJdGVtSW50ZXJuYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhPdXRsaW5lSXRlbUludGVybmFsLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihPdXRsaW5lSXRlbUludGVybmFsKTtcblxuICBmdW5jdGlvbiBPdXRsaW5lSXRlbUludGVybmFsKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdXRsaW5lSXRlbUludGVybmFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0RGVzdGluYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBpdGVtID0gX3RoaXMkcHJvcHMuaXRlbSxcbiAgICAgICAgICAgIHBkZiA9IF90aGlzJHByb3BzLnBkZjtcblxuICAgICAgICBpZiAoIWlzRGVmaW5lZChfdGhpcy5kZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0uZGVzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHBkZi5nZXREZXN0aW5hdGlvbihpdGVtLmRlc3QpLnRoZW4ocmVzb2x2ZSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW0uZGVzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0UGFnZUluZGV4XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBwZGYgPSBfdGhpcy5wcm9wcy5wZGY7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChfdGhpcy5wYWdlSW5kZXgpKSB7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wYWdlSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZ2V0RGVzdGluYXRpb24oKS50aGVuKGZ1bmN0aW9uIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgIGlmICghZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2Rlc3RpbmF0aW9uID0gX3NsaWNlZFRvQXJyYXkoZGVzdGluYXRpb24sIDEpLFxuICAgICAgICAgICAgICByZWYgPSBfZGVzdGluYXRpb25bMF07XG5cbiAgICAgICAgICBwZGYuZ2V0UGFnZUluZGV4KG5ldyBSZWYocmVmKSkudGhlbihyZXNvbHZlKVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAocGFnZUluZGV4KSB7XG4gICAgICAgIF90aGlzLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBhZ2VJbmRleDtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFBhZ2VOdW1iZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChfdGhpcy5wYWdlTnVtYmVyKSkge1xuICAgICAgICAgIHJlc29sdmUoX3RoaXMucGFnZU51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5nZXRQYWdlSW5kZXgoKS50aGVuKGZ1bmN0aW9uIChwYWdlSW5kZXgpIHtcbiAgICAgICAgICByZXNvbHZlKHBhZ2VJbmRleCArIDEpO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChwYWdlTnVtYmVyKSB7XG4gICAgICAgIF90aGlzLnBhZ2VOdW1iZXIgPSBwYWdlTnVtYmVyO1xuICAgICAgICByZXR1cm4gcGFnZU51bWJlcjtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoIW9uQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW190aGlzLmdldFBhZ2VJbmRleCgpLCBfdGhpcy5nZXRQYWdlTnVtYmVyKCldKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgcGFnZUluZGV4ID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBwYWdlTnVtYmVyID0gX3JlZjJbMV07XG5cbiAgICAgICAgb25DbGljayh7XG4gICAgICAgICAgcGFnZUluZGV4OiBwYWdlSW5kZXgsXG4gICAgICAgICAgcGFnZU51bWJlcjogcGFnZU51bWJlclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE91dGxpbmVJdGVtSW50ZXJuYWwsIFt7XG4gICAga2V5OiBcInJlbmRlclN1Yml0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclN1Yml0ZW1zKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXRlbSA9IF90aGlzJHByb3BzMi5pdGVtLFxuICAgICAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBfZXhjbHVkZWQpO1xuXG4gICAgICBpZiAoIWl0ZW0uaXRlbXMgfHwgIWl0ZW0uaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3ViaXRlbXMgPSBpdGVtLml0ZW1zO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgbnVsbCwgc3ViaXRlbXMubWFwKGZ1bmN0aW9uIChzdWJpdGVtLCBzdWJpdGVtSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxpbmVJdGVtSW50ZXJuYWwsIF9leHRlbmRzKHtcbiAgICAgICAgICBrZXk6IHR5cGVvZiBzdWJpdGVtLmRlc3RpbmF0aW9uID09PSAnc3RyaW5nJyA/IHN1Yml0ZW0uZGVzdGluYXRpb24gOiBzdWJpdGVtSW5kZXgsXG4gICAgICAgICAgaXRlbTogc3ViaXRlbVxuICAgICAgICB9LCBvdGhlclByb3BzKSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMucHJvcHMuaXRlbTtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FuY2hvci1pcy12YWxpZCAqL1xuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICBocmVmOiBcIiNcIixcbiAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrXG4gICAgICB9LCBpdGVtLnRpdGxlKSwgdGhpcy5yZW5kZXJTdWJpdGVtcygpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3V0bGluZUl0ZW1JbnRlcm5hbDtcbn0oUHVyZUNvbXBvbmVudCk7XG52YXIgaXNEZXN0aW5hdGlvbiA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpXSk7XG5PdXRsaW5lSXRlbUludGVybmFsLnByb3BUeXBlcyA9IHtcbiAgaXRlbTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBkZXN0OiBpc0Rlc3RpbmF0aW9uLFxuICAgIGl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGVzdDogaXNEZXN0aW5hdGlvbixcbiAgICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSkpLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBwZGY6IGlzUGRmLmlzUmVxdWlyZWRcbn07XG5cbnZhciBPdXRsaW5lSXRlbSA9IGZ1bmN0aW9uIE91dGxpbmVJdGVtKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudENvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChkb2N1bWVudENvbnRleHQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGluZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChvdXRsaW5lQ29udGV4dCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxpbmVJdGVtSW50ZXJuYWwsIF9leHRlbmRzKHt9LCBkb2N1bWVudENvbnRleHQsIG91dGxpbmVDb250ZXh0LCBwcm9wcykpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE91dGxpbmVJdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1ha2VDYW5jZWxsYWJsZSBmcm9tICdtYWtlLWNhbmNlbGxhYmxlLXByb21pc2UnO1xuaW1wb3J0IG1ha2VFdmVudFByb3BzIGZyb20gJ21ha2UtZXZlbnQtcHJvcHMnO1xuaW1wb3J0IG1lcmdlQ2xhc3NOYW1lcyBmcm9tICdtZXJnZS1jbGFzcy1uYW1lcyc7XG5pbXBvcnQgRG9jdW1lbnRDb250ZXh0IGZyb20gJy4vRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCBPdXRsaW5lQ29udGV4dCBmcm9tICcuL091dGxpbmVDb250ZXh0JztcbmltcG9ydCBPdXRsaW5lSXRlbSBmcm9tICcuL091dGxpbmVJdGVtJztcbmltcG9ydCB7IGNhbmNlbFJ1bm5pbmdUYXNrLCBlcnJvck9uRGV2IH0gZnJvbSAnLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRQcm9wcywgaXNDbGFzc05hbWUsIGlzUGRmLCBpc1JlZiB9IGZyb20gJy4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgdmFyIE91dGxpbmVJbnRlcm5hbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE91dGxpbmVJbnRlcm5hbCwgX1B1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoT3V0bGluZUludGVybmFsKTtcblxuICBmdW5jdGlvbiBPdXRsaW5lSW50ZXJuYWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE91dGxpbmVJbnRlcm5hbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIG91dGxpbmU6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsb2FkT3V0bGluZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGRmID0gX3RoaXMucHJvcHMucGRmO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgIGlmICghcHJldlN0YXRlLm91dGxpbmUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3V0bGluZTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYW5jZWxsYWJsZSA9IG1ha2VDYW5jZWxsYWJsZShwZGYuZ2V0T3V0bGluZSgpKTtcbiAgICAgIF90aGlzLnJ1bm5pbmdUYXNrID0gY2FuY2VsbGFibGU7XG4gICAgICBjYW5jZWxsYWJsZS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKG91dGxpbmUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG91dGxpbmU6IG91dGxpbmVcbiAgICAgICAgfSwgX3RoaXMub25Mb2FkU3VjY2Vzcyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBfdGhpcy5vbkxvYWRFcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkxvYWRTdWNjZXNzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvbkxvYWRTdWNjZXNzID0gX3RoaXMucHJvcHMub25Mb2FkU3VjY2VzcztcbiAgICAgIHZhciBvdXRsaW5lID0gX3RoaXMuc3RhdGUub3V0bGluZTtcbiAgICAgIGlmIChvbkxvYWRTdWNjZXNzKSBvbkxvYWRTdWNjZXNzKG91dGxpbmUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTG9hZEVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvdXRsaW5lOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGVycm9yT25EZXYoZXJyb3IpO1xuICAgICAgdmFyIG9uTG9hZEVycm9yID0gX3RoaXMucHJvcHMub25Mb2FkRXJyb3I7XG4gICAgICBpZiAob25Mb2FkRXJyb3IpIG9uTG9hZEVycm9yKGVycm9yKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkl0ZW1DbGlja1wiLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHBhZ2VJbmRleCA9IF9yZWYucGFnZUluZGV4LFxuICAgICAgICAgIHBhZ2VOdW1iZXIgPSBfcmVmLnBhZ2VOdW1iZXI7XG4gICAgICB2YXIgb25JdGVtQ2xpY2sgPSBfdGhpcy5wcm9wcy5vbkl0ZW1DbGljaztcblxuICAgICAgaWYgKG9uSXRlbUNsaWNrKSB7XG4gICAgICAgIG9uSXRlbUNsaWNrKHtcbiAgICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleCxcbiAgICAgICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE91dGxpbmVJbnRlcm5hbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgcGRmID0gdGhpcy5wcm9wcy5wZGY7XG5cbiAgICAgIGlmICghcGRmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGxvYWQgYW4gb3V0bGluZSwgYnV0IG5vIGRvY3VtZW50IHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9hZE91dGxpbmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBwZGYgPSB0aGlzLnByb3BzLnBkZjtcblxuICAgICAgaWYgKHByZXZQcm9wcy5wZGYgJiYgcGRmICE9PSBwcmV2UHJvcHMucGRmKSB7XG4gICAgICAgIHRoaXMubG9hZE91dGxpbmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjYW5jZWxSdW5uaW5nVGFzayh0aGlzLnJ1bm5pbmdUYXNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hpbGRDb250ZXh0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uSXRlbUNsaWNrXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJldmVudFByb3BzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudFxuICAgICAgcmV0dXJuIG1ha2VFdmVudFByb3BzKHRoaXMucHJvcHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zdGF0ZS5vdXRsaW5lO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGFuIG91dGxpbmUgaXMgcmVhZCBzdWNjZXNzZnVsbHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlck91dGxpbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyT3V0bGluZSgpIHtcbiAgICAgIHZhciBvdXRsaW5lID0gdGhpcy5zdGF0ZS5vdXRsaW5lO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgbnVsbCwgb3V0bGluZS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGl0ZW1JbmRleCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGluZUl0ZW0sIHtcbiAgICAgICAgICBrZXk6IHR5cGVvZiBpdGVtLmRlc3RpbmF0aW9uID09PSAnc3RyaW5nJyA/IGl0ZW0uZGVzdGluYXRpb24gOiBpdGVtSW5kZXgsXG4gICAgICAgICAgaXRlbTogaXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwZGYgPSB0aGlzLnByb3BzLnBkZjtcbiAgICAgIHZhciBvdXRsaW5lID0gdGhpcy5zdGF0ZS5vdXRsaW5lO1xuXG4gICAgICBpZiAoIXBkZiB8fCAhb3V0bGluZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogbWVyZ2VDbGFzc05hbWVzKCdyZWFjdC1wZGZfX091dGxpbmUnLCBjbGFzc05hbWUpLFxuICAgICAgICByZWY6IGlucHV0UmVmXG4gICAgICB9LCB0aGlzLmV2ZW50UHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsaW5lQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogdGhpcy5jaGlsZENvbnRleHRcbiAgICAgIH0sIHRoaXMucmVuZGVyT3V0bGluZSgpKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE91dGxpbmVJbnRlcm5hbDtcbn0oUHVyZUNvbXBvbmVudCk7XG5PdXRsaW5lSW50ZXJuYWwucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZCh7XG4gIGNsYXNzTmFtZTogaXNDbGFzc05hbWUsXG4gIGlucHV0UmVmOiBpc1JlZixcbiAgb25JdGVtQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxvYWRFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTG9hZFN1Y2Nlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBwZGY6IGlzUGRmXG59LCBldmVudFByb3BzKTtcblxuZnVuY3Rpb24gT3V0bGluZShwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudENvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxpbmVJbnRlcm5hbCwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBjb250ZXh0LCBwcm9wcykpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoT3V0bGluZSk7IiwiLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgbWVyZ2VzIFJlYWN0IHJlZnMgaW50byBvbmUuXG4gKiBTdXBwb3J0cyBib3RoIGZ1bmN0aW9ucyBhbmQgcmVmIG9iamVjdHMgY3JlYXRlZCB1c2luZyBjcmVhdGVSZWYoKSBhbmQgdXNlUmVmKCkuXG4gKlxuICogVXNhZ2U6XG4gKiBgYGBqc3hcbiAqIDxkaXYgcmVmPXttZXJnZVJlZnMocmVmMSwgcmVmMiwgcmVmMyl9IC8+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gey4uLkFycmF5PEZ1bmN0aW9ufG9iamVjdD59IGlucHV0UmVmcyBBcnJheSBvZiByZWZzXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IE1lcmdlZCByZWZzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUmVmcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGlucHV0UmVmcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnB1dFJlZnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgZmlsdGVyZWRJbnB1dFJlZnMgPSBpbnB1dFJlZnMuZmlsdGVyKEJvb2xlYW4pO1xuXG4gIGlmIChmaWx0ZXJlZElucHV0UmVmcy5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBmaWx0ZXJlZElucHV0UmVmc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZWZzKHJlZikge1xuICAgIGZpbHRlcmVkSW5wdXRSZWZzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0UmVmKSB7XG4gICAgICBpZiAodHlwZW9mIGlucHV0UmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlucHV0UmVmKHJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgaW5wdXRSZWYuY3VycmVudCA9IHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlUmVmcyBmcm9tICdtZXJnZS1yZWZzJztcbmltcG9ydCBQYWdlQ29udGV4dCBmcm9tICcuLi9QYWdlQ29udGV4dCc7XG5pbXBvcnQgeyBlcnJvck9uRGV2LCBnZXRQaXhlbFJhdGlvLCBpc0NhbmNlbEV4Y2VwdGlvbiwgbWFrZVBhZ2VDYWxsYmFjayB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XG5pbXBvcnQgeyBpc1BhZ2UsIGlzUmVmLCBpc1JvdGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xuZXhwb3J0IHZhciBQYWdlQ2FudmFzSW50ZXJuYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdlQ2FudmFzSW50ZXJuYWwsIF9QdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBhZ2VDYW52YXNJbnRlcm5hbCk7XG5cbiAgZnVuY3Rpb24gUGFnZUNhbnZhc0ludGVybmFsKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdlQ2FudmFzSW50ZXJuYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblJlbmRlclN1Y2Nlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25SZW5kZXJTdWNjZXNzID0gX3RoaXMkcHJvcHMub25SZW5kZXJTdWNjZXNzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wcy5wYWdlLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHMuc2NhbGU7XG4gICAgICBpZiAob25SZW5kZXJTdWNjZXNzKSBvblJlbmRlclN1Y2Nlc3MobWFrZVBhZ2VDYWxsYmFjayhwYWdlLCBzY2FsZSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUmVuZGVyRXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoaXNDYW5jZWxFeGNlcHRpb24oZXJyb3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXJyb3JPbkRldihlcnJvcik7XG4gICAgICB2YXIgb25SZW5kZXJFcnJvciA9IF90aGlzLnByb3BzLm9uUmVuZGVyRXJyb3I7XG4gICAgICBpZiAob25SZW5kZXJFcnJvcikgb25SZW5kZXJFcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZHJhd1BhZ2VPbkNhbnZhc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgICAgY2FudmFzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplLmNhbnZhc0xheWVyO1xuXG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZTIgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSxcbiAgICAgICAgICByZW5kZXJWaWV3cG9ydCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZTIucmVuZGVyVmlld3BvcnQsXG4gICAgICAgICAgdmlld3BvcnQgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUyLnZpZXdwb3J0O1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcGFnZSA9IF90aGlzJHByb3BzMi5wYWdlLFxuICAgICAgICAgIHJlbmRlckludGVyYWN0aXZlRm9ybXMgPSBfdGhpcyRwcm9wczIucmVuZGVySW50ZXJhY3RpdmVGb3JtcztcbiAgICAgIGNhbnZhcy53aWR0aCA9IHJlbmRlclZpZXdwb3J0LndpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHJlbmRlclZpZXdwb3J0LmhlaWdodDtcbiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KE1hdGguZmxvb3Iodmlld3BvcnQud2lkdGgpLCBcInB4XCIpO1xuICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KE1hdGguZmxvb3Iodmlld3BvcnQuaGVpZ2h0KSwgXCJweFwiKTtcbiAgICAgIHZhciByZW5kZXJDb250ZXh0ID0ge1xuICAgICAgICBnZXQgY2FudmFzQ29udGV4dCgpIHtcbiAgICAgICAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmlld3BvcnQ6IHJlbmRlclZpZXdwb3J0LFxuICAgICAgICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zOiByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zXG4gICAgICB9OyAvLyBJZiBhbm90aGVyIHJlbmRlciBpcyBpbiBwcm9ncmVzcywgbGV0J3MgY2FuY2VsIGl0XG5cbiAgICAgIF90aGlzLmNhbmNlbFJlbmRlcmluZ1Rhc2soKTtcblxuICAgICAgX3RoaXMucmVuZGVyZXIgPSBwYWdlLnJlbmRlcihyZW5kZXJDb250ZXh0KTtcbiAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJlci5wcm9taXNlLnRoZW4oX3RoaXMub25SZW5kZXJTdWNjZXNzKVtcImNhdGNoXCJdKF90aGlzLm9uUmVuZGVyRXJyb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBhZ2VDYW52YXNJbnRlcm5hbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmRyYXdQYWdlT25DYW52YXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wczMucGFnZSxcbiAgICAgICAgICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zID0gX3RoaXMkcHJvcHMzLnJlbmRlckludGVyYWN0aXZlRm9ybXM7XG5cbiAgICAgIGlmIChyZW5kZXJJbnRlcmFjdGl2ZUZvcm1zICE9PSBwcmV2UHJvcHMucmVuZGVySW50ZXJhY3RpdmVGb3Jtcykge1xuICAgICAgICAvLyBFbnN1cmVzIHRoZSBjYW52YXMgd2lsbCBiZSByZS1yZW5kZXJlZCBmcm9tIHNjcmF0Y2guIE90aGVyd2lzZSBhbGwgZm9ybSBkYXRhIHdpbGwgc3RheS5cbiAgICAgICAgcGFnZS5jbGVhbnVwKCk7XG4gICAgICAgIHRoaXMuZHJhd1BhZ2VPbkNhbnZhcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2FuY2VsUmVuZGVyaW5nVGFzaygpO1xuICAgICAgLyoqXG4gICAgICAgKiBaZXJvaW5nIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGNhdXNlIG1vc3QgYnJvd3NlcnMgdG8gcmVsZWFzZSBncmFwaGljc1xuICAgICAgICogcmVzb3VyY2VzIGltbWVkaWF0ZWx5LCB3aGljaCBjYW4gZ3JlYXRseSByZWR1Y2UgbWVtb3J5IGNvbnN1bXB0aW9uLlxuICAgICAgICovXG5cbiAgICAgIGlmICh0aGlzLmNhbnZhc0xheWVyKSB7XG4gICAgICAgIHRoaXMuY2FudmFzTGF5ZXIud2lkdGggPSAwO1xuICAgICAgICB0aGlzLmNhbnZhc0xheWVyLmhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuY2FudmFzTGF5ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjYW5jZWxSZW5kZXJpbmdUYXNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbFJlbmRlcmluZ1Rhc2soKSB7XG4gICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gYSBwYWdlIGlzIHJlbmRlcmVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclZpZXdwb3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwYWdlID0gX3RoaXMkcHJvcHM0LnBhZ2UsXG4gICAgICAgICAgcm90YXRlID0gX3RoaXMkcHJvcHM0LnJvdGF0ZSxcbiAgICAgICAgICBzY2FsZSA9IF90aGlzJHByb3BzNC5zY2FsZTtcbiAgICAgIHZhciBwaXhlbFJhdGlvID0gZ2V0UGl4ZWxSYXRpbygpO1xuICAgICAgcmV0dXJuIHBhZ2UuZ2V0Vmlld3BvcnQoe1xuICAgICAgICBzY2FsZTogc2NhbGUgKiBwaXhlbFJhdGlvLFxuICAgICAgICByb3RhdGlvbjogcm90YXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmlld3BvcnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wczUucGFnZSxcbiAgICAgICAgICByb3RhdGUgPSBfdGhpcyRwcm9wczUucm90YXRlLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHM1LnNjYWxlO1xuICAgICAgcmV0dXJuIHBhZ2UuZ2V0Vmlld3BvcnQoe1xuICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgIHJvdGF0aW9uOiByb3RhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjYW52YXNSZWYgPSB0aGlzLnByb3BzLmNhbnZhc1JlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1wZGZfX1BhZ2VfX2NhbnZhc1wiLFxuICAgICAgICBkaXI6IFwibHRyXCIsXG4gICAgICAgIHJlZjogbWVyZ2VSZWZzKGNhbnZhc1JlZiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgIF90aGlzMi5jYW52YXNMYXllciA9IHJlZjtcbiAgICAgICAgfSksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2VDYW52YXNJbnRlcm5hbDtcbn0oUHVyZUNvbXBvbmVudCk7XG5QYWdlQ2FudmFzSW50ZXJuYWwucHJvcFR5cGVzID0ge1xuICBjYW52YXNSZWY6IGlzUmVmLFxuICBvblJlbmRlckVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SZW5kZXJTdWNjZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgcGFnZTogaXNQYWdlLmlzUmVxdWlyZWQsXG4gIHJlbmRlckludGVyYWN0aXZlRm9ybXM6IFByb3BUeXBlcy5ib29sLFxuICByb3RhdGU6IGlzUm90YXRlLFxuICBzY2FsZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZUNhbnZhcyhwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VDYW52YXNJbnRlcm5hbCwgX2V4dGVuZHMoe30sIGNvbnRleHQsIHByb3BzKSk7XG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIHBkZmpzIGZyb20gJ3BkZmpzLWRpc3QvbGVnYWN5L2J1aWxkL3BkZic7XG5pbXBvcnQgUGFnZUNvbnRleHQgZnJvbSAnLi4vUGFnZUNvbnRleHQnO1xuaW1wb3J0IHsgZXJyb3JPbkRldiwgaXNDYW5jZWxFeGNlcHRpb24sIG1ha2VQYWdlQ2FsbGJhY2sgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgaXNQYWdlLCBpc1JvdGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xuZXhwb3J0IHZhciBQYWdlU1ZHSW50ZXJuYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdlU1ZHSW50ZXJuYWwsIF9QdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBhZ2VTVkdJbnRlcm5hbCk7XG5cbiAgZnVuY3Rpb24gUGFnZVNWR0ludGVybmFsKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdlU1ZHSW50ZXJuYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBzdmc6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblJlbmRlclN1Y2Nlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25SZW5kZXJTdWNjZXNzID0gX3RoaXMkcHJvcHMub25SZW5kZXJTdWNjZXNzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wcy5wYWdlLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHMuc2NhbGU7XG4gICAgICBpZiAob25SZW5kZXJTdWNjZXNzKSBvblJlbmRlclN1Y2Nlc3MobWFrZVBhZ2VDYWxsYmFjayhwYWdlLCBzY2FsZSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUmVuZGVyRXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoaXNDYW5jZWxFeGNlcHRpb24oZXJyb3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXJyb3JPbkRldihlcnJvcik7XG4gICAgICB2YXIgb25SZW5kZXJFcnJvciA9IF90aGlzLnByb3BzLm9uUmVuZGVyRXJyb3I7XG4gICAgICBpZiAob25SZW5kZXJFcnJvcikgb25SZW5kZXJFcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyU1ZHXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYWdlID0gX3RoaXMucHJvcHMucGFnZTtcbiAgICAgIF90aGlzLnJlbmRlcmVyID0gcGFnZS5nZXRPcGVyYXRvckxpc3QoKTtcbiAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJlci50aGVuKGZ1bmN0aW9uIChvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgdmFyIHN2Z0dmeCA9IG5ldyBwZGZqcy5TVkdHcmFwaGljcyhwYWdlLmNvbW1vbk9ianMsIHBhZ2Uub2Jqcyk7XG4gICAgICAgIF90aGlzLnJlbmRlcmVyID0gc3ZnR2Z4LmdldFNWRyhvcGVyYXRvckxpc3QsIF90aGlzLnZpZXdwb3J0KS50aGVuKGZ1bmN0aW9uIChzdmcpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzdmc6IHN2Z1xuICAgICAgICAgIH0sIF90aGlzLm9uUmVuZGVyU3VjY2Vzcyk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oX3RoaXMub25SZW5kZXJFcnJvcik7XG4gICAgICB9KVtcImNhdGNoXCJdKF90aGlzLm9uUmVuZGVyRXJyb3IpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRyYXdQYWdlT25Db250YWluZXJcIiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHZhciBzdmcgPSBfdGhpcy5zdGF0ZS5zdmc7XG5cbiAgICAgIGlmICghZWxlbWVudCB8fCAhc3ZnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gQXBwZW5kIFNWRyBlbGVtZW50IHRvIHRoZSBtYWluIGNvbnRhaW5lciwgaWYgdGhpcyBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHlcblxuXG4gICAgICBpZiAoIWVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkdmlld3BvcnQgPSBfdGhpcy52aWV3cG9ydCxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHZpZXdwb3J0LndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHZpZXdwb3J0LmhlaWdodDtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdlU1ZHSW50ZXJuYWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5yZW5kZXJTVkcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gYSBwYWdlIGlzIHJlbmRlcmVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInZpZXdwb3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwYWdlID0gX3RoaXMkcHJvcHMyLnBhZ2UsXG4gICAgICAgICAgcm90YXRlID0gX3RoaXMkcHJvcHMyLnJvdGF0ZSxcbiAgICAgICAgICBzY2FsZSA9IF90aGlzJHByb3BzMi5zY2FsZTtcbiAgICAgIHJldHVybiBwYWdlLmdldFZpZXdwb3J0KHtcbiAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICByb3RhdGlvbjogcm90YXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkdmlld3BvcnQyID0gdGhpcy52aWV3cG9ydCxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHZpZXdwb3J0Mi53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyR2aWV3cG9ydDIuaGVpZ2h0O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBkZl9fUGFnZV9fc3ZnXCIgLy8gTm90ZTogVGhpcyBjYW5ub3QgYmUgc2hvcnRlbmVkLCBhcyB3ZSBuZWVkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggZWFjaCByZW5kZXIuXG4gICAgICAgICxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuZHJhd1BhZ2VPbkNvbnRhaW5lcihfcmVmKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFnZVNWR0ludGVybmFsO1xufShQdXJlQ29tcG9uZW50KTtcblBhZ2VTVkdJbnRlcm5hbC5wcm9wVHlwZXMgPSB7XG4gIG9uUmVuZGVyRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvblJlbmRlclN1Y2Nlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBwYWdlOiBpc1BhZ2UuaXNSZXF1aXJlZCxcbiAgcm90YXRlOiBpc1JvdGF0ZSxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZ2VTVkcocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlU1ZHSW50ZXJuYWwsIF9leHRlbmRzKHt9LCBjb250ZXh0LCBwcm9wcykpO1xuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQYWdlQ29udGV4dCBmcm9tICcuLi9QYWdlQ29udGV4dCc7XG5pbXBvcnQgeyBpc1BhZ2UsIGlzUm90YXRlIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgdmFyIFRleHRMYXllckl0ZW1JbnRlcm5hbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRleHRMYXllckl0ZW1JbnRlcm5hbCwgX1B1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGV4dExheWVySXRlbUludGVybmFsKTtcblxuICBmdW5jdGlvbiBUZXh0TGF5ZXJJdGVtSW50ZXJuYWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHRMYXllckl0ZW1JbnRlcm5hbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldEVsZW1lbnRXaWR0aFwiLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIHNpZGV3YXlzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplLnNpZGV3YXlzO1xuXG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzaWRld2F5cyA/ICdoZWlnaHQnIDogJ3dpZHRoJ107XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV4dExheWVySXRlbUludGVybmFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYWxpZ25UZXh0SXRlbSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5hbGlnblRleHRJdGVtKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVucm90YXRlZFZpZXdwb3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wcy5wYWdlLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHMuc2NhbGU7XG4gICAgICByZXR1cm4gcGFnZS5nZXRWaWV3cG9ydCh7XG4gICAgICAgIHNjYWxlOiBzY2FsZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0IG1pZ2h0IGhhcHBlbiB0aGF0IHRoZSBwYWdlIGlzIHJvdGF0ZWQgYnkgZGVmYXVsdC4gSW4gc3VjaCBjYXNlcywgd2Ugc2hvdWxkbid0IHJvdGF0ZVxuICAgICAqIHRleHQgY29udGVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJvdGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGFnZSA9IF90aGlzJHByb3BzMi5wYWdlLFxuICAgICAgICAgIHJvdGF0ZSA9IF90aGlzJHByb3BzMi5yb3RhdGU7XG4gICAgICByZXR1cm4gcm90YXRlIC0gcGFnZS5yb3RhdGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpZGV3YXlzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcm90YXRlID0gdGhpcy5yb3RhdGU7XG4gICAgICByZXR1cm4gcm90YXRlICUgMTgwICE9PSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWZhdWx0U2lkZXdheXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciByb3RhdGlvbiA9IHRoaXMudW5yb3RhdGVkVmlld3BvcnQucm90YXRpb247XG4gICAgICByZXR1cm4gcm90YXRpb24gJSAxODAgIT09IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvbnRTaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5wcm9wcy50cmFuc2Zvcm07XG4gICAgICB2YXIgZGVmYXVsdFNpZGV3YXlzID0gdGhpcy5kZWZhdWx0U2lkZXdheXM7XG5cbiAgICAgIHZhciBfdHJhbnNmb3JtID0gX3NsaWNlZFRvQXJyYXkodHJhbnNmb3JtLCAyKSxcbiAgICAgICAgICBmb250SGVpZ2h0UHggPSBfdHJhbnNmb3JtWzBdLFxuICAgICAgICAgIGZvbnRXaWR0aFB4ID0gX3RyYW5zZm9ybVsxXTtcblxuICAgICAgcmV0dXJuIGRlZmF1bHRTaWRld2F5cyA/IGZvbnRXaWR0aFB4IDogZm9udEhlaWdodFB4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b3BcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnByb3BzLnRyYW5zZm9ybTtcbiAgICAgIHZhciB2aWV3cG9ydCA9IHRoaXMudW5yb3RhdGVkVmlld3BvcnQsXG4gICAgICAgICAgZGVmYXVsdFNpZGV3YXlzID0gdGhpcy5kZWZhdWx0U2lkZXdheXM7XG5cbiAgICAgIHZhciBfdHJhbnNmb3JtMiA9IF9zbGljZWRUb0FycmF5KHRyYW5zZm9ybSwgNiksXG4gICAgICAgICAgb2Zmc2V0WCA9IF90cmFuc2Zvcm0yWzJdLFxuICAgICAgICAgIG9mZnNldFkgPSBfdHJhbnNmb3JtMlszXSxcbiAgICAgICAgICB4ID0gX3RyYW5zZm9ybTJbNF0sXG4gICAgICAgICAgeSA9IF90cmFuc2Zvcm0yWzVdO1xuXG4gICAgICB2YXIgX3ZpZXdwb3J0JHZpZXdCb3ggPSBfc2xpY2VkVG9BcnJheSh2aWV3cG9ydC52aWV3Qm94LCA0KSxcbiAgICAgICAgICB5TWluID0gX3ZpZXdwb3J0JHZpZXdCb3hbMV0sXG4gICAgICAgICAgeU1heCA9IF92aWV3cG9ydCR2aWV3Qm94WzNdO1xuXG4gICAgICByZXR1cm4gZGVmYXVsdFNpZGV3YXlzID8geCArIG9mZnNldFggKyB5TWluIDogeU1heCAtICh5ICsgb2Zmc2V0WSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlZnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnByb3BzLnRyYW5zZm9ybTtcbiAgICAgIHZhciB2aWV3cG9ydCA9IHRoaXMudW5yb3RhdGVkVmlld3BvcnQsXG4gICAgICAgICAgZGVmYXVsdFNpZGV3YXlzID0gdGhpcy5kZWZhdWx0U2lkZXdheXM7XG5cbiAgICAgIHZhciBfdHJhbnNmb3JtMyA9IF9zbGljZWRUb0FycmF5KHRyYW5zZm9ybSwgNiksXG4gICAgICAgICAgeCA9IF90cmFuc2Zvcm0zWzRdLFxuICAgICAgICAgIHkgPSBfdHJhbnNmb3JtM1s1XTtcblxuICAgICAgdmFyIF92aWV3cG9ydCR2aWV3Qm94MiA9IF9zbGljZWRUb0FycmF5KHZpZXdwb3J0LnZpZXdCb3gsIDEpLFxuICAgICAgICAgIHhNaW4gPSBfdmlld3BvcnQkdmlld0JveDJbMF07XG5cbiAgICAgIHJldHVybiBkZWZhdWx0U2lkZXdheXMgPyB5IC0geE1pbiA6IHggLSB4TWluO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGb250RGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb250RGF0YShmb250TmFtZSkge1xuICAgICAgdmFyIHBhZ2UgPSB0aGlzLnByb3BzLnBhZ2U7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgcGFnZS5jb21tb25PYmpzLmdldChmb250TmFtZSwgcmVzb2x2ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWxpZ25UZXh0SXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbGlnblRleHRJdGVtKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5pdGVtO1xuXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZm9udE5hbWUgPSBfdGhpcyRwcm9wczMuZm9udE5hbWUsXG4gICAgICAgICAgc2NhbGUgPSBfdGhpcyRwcm9wczMuc2NhbGUsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczMud2lkdGg7XG4gICAgICBlbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIlwiLmNvbmNhdChmb250TmFtZSwgXCIsIHNhbnMtc2VyaWZcIik7XG4gICAgICB0aGlzLmdldEZvbnREYXRhKGZvbnROYW1lKS50aGVuKGZ1bmN0aW9uIChmb250RGF0YSkge1xuICAgICAgICB2YXIgZmFsbGJhY2tGb250TmFtZSA9IGZvbnREYXRhID8gZm9udERhdGEuZmFsbGJhY2tOYW1lIDogJ3NhbnMtc2VyaWYnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIlwiLmNvbmNhdChmb250TmFtZSwgXCIsIFwiKS5jb25jYXQoZmFsbGJhY2tGb250TmFtZSk7XG4gICAgICAgIHZhciB0YXJnZXRXaWR0aCA9IHdpZHRoICogc2NhbGU7XG5cbiAgICAgICAgdmFyIGFjdHVhbFdpZHRoID0gX3RoaXMyLmdldEVsZW1lbnRXaWR0aChlbGVtZW50KTtcblxuICAgICAgICB2YXIgdHJhbnNmb3JtID0gXCJzY2FsZVgoXCIuY29uY2F0KHRhcmdldFdpZHRoIC8gYWN0dWFsV2lkdGgsIFwiKVwiKTtcbiAgICAgICAgdmFyIGFzY2VudCA9IGZvbnREYXRhID8gZm9udERhdGEuYXNjZW50IDogMDtcblxuICAgICAgICBpZiAoYXNjZW50KSB7XG4gICAgICAgICAgdHJhbnNmb3JtICs9IFwiIHRyYW5zbGF0ZVkoXCIuY29uY2F0KCgxIC0gYXNjZW50KSAqIDEwMCwgXCIlKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICBlbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuZm9udFNpemUsXG4gICAgICAgICAgdG9wID0gdGhpcy50b3AsXG4gICAgICAgICAgbGVmdCA9IHRoaXMubGVmdDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbVRleHRSZW5kZXJlciA9IF90aGlzJHByb3BzNC5jdXN0b21UZXh0UmVuZGVyZXIsXG4gICAgICAgICAgc2NhbGUgPSBfdGhpcyRwcm9wczQuc2NhbGUsXG4gICAgICAgICAgdGV4dCA9IF90aGlzJHByb3BzNC5zdHI7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgIF90aGlzMy5pdGVtID0gX3JlZjtcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcbiAgICAgICAgICBmb250U2l6ZTogXCJcIi5jb25jYXQoZm9udFNpemUgKiBzY2FsZSwgXCJweFwiKSxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IFwiXCIuY29uY2F0KHRvcCAqIHNjYWxlLCBcInB4XCIpLFxuICAgICAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KGxlZnQgKiBzY2FsZSwgXCJweFwiKSxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGJvdHRvbScsXG4gICAgICAgICAgd2hpdGVTcGFjZTogJ3ByZScsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogJ2FsbCdcbiAgICAgICAgfVxuICAgICAgfSwgY3VzdG9tVGV4dFJlbmRlcmVyID8gY3VzdG9tVGV4dFJlbmRlcmVyKHRoaXMucHJvcHMpIDogdGV4dCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRleHRMYXllckl0ZW1JbnRlcm5hbDtcbn0oUHVyZUNvbXBvbmVudCk7XG5UZXh0TGF5ZXJJdGVtSW50ZXJuYWwucHJvcFR5cGVzID0ge1xuICBjdXN0b21UZXh0UmVuZGVyZXI6IFByb3BUeXBlcy5mdW5jLFxuICBmb250TmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBpdGVtSW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlc1xuICBwYWdlOiBpc1BhZ2UuaXNSZXF1aXJlZCxcbiAgcm90YXRlOiBpc1JvdGF0ZSxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXIsXG4gIHN0cjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0cmFuc2Zvcm06IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLmlzUmVxdWlyZWQsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0TGF5ZXJJdGVtKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dExheWVySXRlbUludGVybmFsLCBfZXh0ZW5kcyh7fSwgY29udGV4dCwgcHJvcHMpKTtcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1ha2VDYW5jZWxsYWJsZSBmcm9tICdtYWtlLWNhbmNlbGxhYmxlLXByb21pc2UnO1xuaW1wb3J0IFBhZ2VDb250ZXh0IGZyb20gJy4uL1BhZ2VDb250ZXh0JztcbmltcG9ydCBUZXh0TGF5ZXJJdGVtIGZyb20gJy4vVGV4dExheWVySXRlbSc7XG5pbXBvcnQgeyBjYW5jZWxSdW5uaW5nVGFzaywgZXJyb3JPbkRldiB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XG5pbXBvcnQgeyBpc1BhZ2UsIGlzUm90YXRlIH0gZnJvbSAnLi4vc2hhcmVkL3Byb3BUeXBlcyc7XG5leHBvcnQgdmFyIFRleHRMYXllckludGVybmFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGV4dExheWVySW50ZXJuYWwsIF9QdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRleHRMYXllckludGVybmFsKTtcblxuICBmdW5jdGlvbiBUZXh0TGF5ZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dExheWVySW50ZXJuYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICB0ZXh0SXRlbXM6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsb2FkVGV4dEl0ZW1zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYWdlID0gX3RoaXMucHJvcHMucGFnZTtcbiAgICAgIHZhciBjYW5jZWxsYWJsZSA9IG1ha2VDYW5jZWxsYWJsZShwYWdlLmdldFRleHRDb250ZW50KCkpO1xuICAgICAgX3RoaXMucnVubmluZ1Rhc2sgPSBjYW5jZWxsYWJsZTtcbiAgICAgIGNhbmNlbGxhYmxlLnByb21pc2UudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgdGV4dEl0ZW1zID0gX3JlZi5pdGVtcztcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdGV4dEl0ZW1zOiB0ZXh0SXRlbXNcbiAgICAgICAgfSwgX3RoaXMub25Mb2FkU3VjY2Vzcyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBfdGhpcy5vbkxvYWRFcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkxvYWRTdWNjZXNzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvbkdldFRleHRTdWNjZXNzID0gX3RoaXMucHJvcHMub25HZXRUZXh0U3VjY2VzcztcbiAgICAgIHZhciB0ZXh0SXRlbXMgPSBfdGhpcy5zdGF0ZS50ZXh0SXRlbXM7XG4gICAgICBpZiAob25HZXRUZXh0U3VjY2Vzcykgb25HZXRUZXh0U3VjY2Vzcyh0ZXh0SXRlbXMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTG9hZEVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0ZXh0SXRlbXM6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgZXJyb3JPbkRldihlcnJvcik7XG4gICAgICB2YXIgb25HZXRUZXh0RXJyb3IgPSBfdGhpcy5wcm9wcy5vbkdldFRleHRFcnJvcjtcbiAgICAgIGlmIChvbkdldFRleHRFcnJvcikgb25HZXRUZXh0RXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRleHRMYXllckludGVybmFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5wcm9wcy5wYWdlO1xuXG4gICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gbG9hZCBwYWdlIHRleHQgY29udGVudCwgYnV0IG5vIHBhZ2Ugd2FzIHNwZWNpZmllZC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2FkVGV4dEl0ZW1zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgcGFnZSA9IHRoaXMucHJvcHMucGFnZTtcblxuICAgICAgaWYgKHByZXZQcm9wcy5wYWdlICYmIHBhZ2UgIT09IHByZXZQcm9wcy5wYWdlKSB7XG4gICAgICAgIHRoaXMubG9hZFRleHRJdGVtcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNhbmNlbFJ1bm5pbmdUYXNrKHRoaXMucnVubmluZ1Rhc2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnJvdGF0ZWRWaWV3cG9ydFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwYWdlID0gX3RoaXMkcHJvcHMucGFnZSxcbiAgICAgICAgICBzY2FsZSA9IF90aGlzJHByb3BzLnNjYWxlO1xuICAgICAgcmV0dXJuIHBhZ2UuZ2V0Vmlld3BvcnQoe1xuICAgICAgICBzY2FsZTogc2NhbGVcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdCBtaWdodCBoYXBwZW4gdGhhdCB0aGUgcGFnZSBpcyByb3RhdGVkIGJ5IGRlZmF1bHQuIEluIHN1Y2ggY2FzZXMsIHdlIHNob3VsZG4ndCByb3RhdGVcbiAgICAgKiB0ZXh0IGNvbnRlbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyb3RhdGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wczIucGFnZSxcbiAgICAgICAgICByb3RhdGUgPSBfdGhpcyRwcm9wczIucm90YXRlO1xuICAgICAgcmV0dXJuIHJvdGF0ZSAtIHBhZ2Uucm90YXRlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJUZXh0SXRlbXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGV4dEl0ZW1zKCkge1xuICAgICAgdmFyIHRleHRJdGVtcyA9IHRoaXMuc3RhdGUudGV4dEl0ZW1zO1xuXG4gICAgICBpZiAoIXRleHRJdGVtcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRleHRJdGVtcy5tYXAoZnVuY3Rpb24gKHRleHRJdGVtLCBpdGVtSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRleHRMYXllckl0ZW0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAsIF9leHRlbmRzKHtcbiAgICAgICAgICBrZXk6IGl0ZW1JbmRleCxcbiAgICAgICAgICBpdGVtSW5kZXg6IGl0ZW1JbmRleFxuICAgICAgICB9LCB0ZXh0SXRlbSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLnVucm90YXRlZFZpZXdwb3J0LFxuICAgICAgICAgIHJvdGF0ZSA9IHRoaXMucm90YXRlO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBkZl9fUGFnZV9fdGV4dENvbnRlbnRcIixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCh2aWV3cG9ydC53aWR0aCwgXCJweFwiKSxcbiAgICAgICAgICBoZWlnaHQ6IFwiXCIuY29uY2F0KHZpZXdwb3J0LmhlaWdodCwgXCJweFwiKSxcbiAgICAgICAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIiksXG4gICAgICAgICAgV2Via2l0VHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGUoXCIuY29uY2F0KHJvdGF0ZSwgXCJkZWcpXCIpLFxuICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLnJlbmRlclRleHRJdGVtcygpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV4dExheWVySW50ZXJuYWw7XG59KFB1cmVDb21wb25lbnQpO1xuVGV4dExheWVySW50ZXJuYWwucHJvcFR5cGVzID0ge1xuICBvbkdldFRleHRFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uR2V0VGV4dFN1Y2Nlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBwYWdlOiBpc1BhZ2UuaXNSZXF1aXJlZCxcbiAgcm90YXRlOiBpc1JvdGF0ZSxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXJcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0TGF5ZXIocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0TGF5ZXJJbnRlcm5hbCwgX2V4dGVuZHMoe30sIGNvbnRleHQsIHByb3BzKSk7XG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIHBkZmpzIGZyb20gJ3BkZmpzLWRpc3QvbGVnYWN5L2J1aWxkL3BkZic7XG5pbXBvcnQgbWFrZUNhbmNlbGxhYmxlIGZyb20gJ21ha2UtY2FuY2VsbGFibGUtcHJvbWlzZSc7XG5pbXBvcnQgRG9jdW1lbnRDb250ZXh0IGZyb20gJy4uL0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgUGFnZUNvbnRleHQgZnJvbSAnLi4vUGFnZUNvbnRleHQnO1xuaW1wb3J0IHsgY2FuY2VsUnVubmluZ1Rhc2ssIGVycm9yT25EZXYgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgaXNMaW5rU2VydmljZSwgaXNQYWdlLCBpc1JvdGF0ZSB9IGZyb20gJy4uL3NoYXJlZC9wcm9wVHlwZXMnO1xuZXhwb3J0IHZhciBBbm5vdGF0aW9uTGF5ZXJJbnRlcm5hbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEFubm90YXRpb25MYXllckludGVybmFsLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBbm5vdGF0aW9uTGF5ZXJJbnRlcm5hbCk7XG5cbiAgZnVuY3Rpb24gQW5ub3RhdGlvbkxheWVySW50ZXJuYWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25MYXllckludGVybmFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge1xuICAgICAgYW5ub3RhdGlvbnM6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsb2FkQW5ub3RhdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhZ2UgPSBfdGhpcy5wcm9wcy5wYWdlO1xuICAgICAgdmFyIGNhbmNlbGxhYmxlID0gbWFrZUNhbmNlbGxhYmxlKHBhZ2UuZ2V0QW5ub3RhdGlvbnMoKSk7XG4gICAgICBfdGhpcy5ydW5uaW5nVGFzayA9IGNhbmNlbGxhYmxlO1xuICAgICAgY2FuY2VsbGFibGUucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhbm5vdGF0aW9ucykge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYW5ub3RhdGlvbnM6IGFubm90YXRpb25zXG4gICAgICAgIH0sIF90aGlzLm9uTG9hZFN1Y2Nlc3MpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgX3RoaXMub25Mb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Mb2FkU3VjY2Vzc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25HZXRBbm5vdGF0aW9uc1N1Y2Nlc3MgPSBfdGhpcy5wcm9wcy5vbkdldEFubm90YXRpb25zU3VjY2VzcztcbiAgICAgIHZhciBhbm5vdGF0aW9ucyA9IF90aGlzLnN0YXRlLmFubm90YXRpb25zO1xuICAgICAgaWYgKG9uR2V0QW5ub3RhdGlvbnNTdWNjZXNzKSBvbkdldEFubm90YXRpb25zU3VjY2Vzcyhhbm5vdGF0aW9ucyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Mb2FkRXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFubm90YXRpb25zOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGVycm9yT25EZXYoZXJyb3IpO1xuICAgICAgdmFyIG9uR2V0QW5ub3RhdGlvbnNFcnJvciA9IF90aGlzLnByb3BzLm9uR2V0QW5ub3RhdGlvbnNFcnJvcjtcbiAgICAgIGlmIChvbkdldEFubm90YXRpb25zRXJyb3IpIG9uR2V0QW5ub3RhdGlvbnNFcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25SZW5kZXJTdWNjZXNzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvblJlbmRlckFubm90YXRpb25MYXllclN1Y2Nlc3MgPSBfdGhpcy5wcm9wcy5vblJlbmRlckFubm90YXRpb25MYXllclN1Y2Nlc3M7XG4gICAgICBpZiAob25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJTdWNjZXNzKSBvblJlbmRlckFubm90YXRpb25MYXllclN1Y2Nlc3MoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblJlbmRlckVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgZXJyb3JPbkRldihlcnJvcik7XG4gICAgICB2YXIgb25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJFcnJvciA9IF90aGlzLnByb3BzLm9uUmVuZGVyQW5ub3RhdGlvbkxheWVyRXJyb3I7XG4gICAgICBpZiAob25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJFcnJvcikgb25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJFcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQW5ub3RhdGlvbkxheWVySW50ZXJuYWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIHBhZ2UgPSB0aGlzLnByb3BzLnBhZ2U7XG5cbiAgICAgIGlmICghcGFnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byBsb2FkIHBhZ2UgYW5ub3RhdGlvbnMsIGJ1dCBubyBwYWdlIHdhcyBzcGVjaWZpZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9hZEFubm90YXRpb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wcy5wYWdlLFxuICAgICAgICAgIHJlbmRlckludGVyYWN0aXZlRm9ybXMgPSBfdGhpcyRwcm9wcy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zO1xuXG4gICAgICBpZiAocHJldlByb3BzLnBhZ2UgJiYgcGFnZSAhPT0gcHJldlByb3BzLnBhZ2UgfHwgcmVuZGVySW50ZXJhY3RpdmVGb3JtcyAhPT0gcHJldlByb3BzLnJlbmRlckludGVyYWN0aXZlRm9ybXMpIHtcbiAgICAgICAgdGhpcy5sb2FkQW5ub3RhdGlvbnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjYW5jZWxSdW5uaW5nVGFzayh0aGlzLnJ1bm5pbmdUYXNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmlld3BvcnRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBhZ2UgPSBfdGhpcyRwcm9wczIucGFnZSxcbiAgICAgICAgICByb3RhdGUgPSBfdGhpcyRwcm9wczIucm90YXRlLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHMyLnNjYWxlO1xuICAgICAgcmV0dXJuIHBhZ2UuZ2V0Vmlld3BvcnQoe1xuICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgIHJvdGF0aW9uOiByb3RhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJBbm5vdGF0aW9uTGF5ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQW5ub3RhdGlvbkxheWVyKCkge1xuICAgICAgdmFyIGFubm90YXRpb25zID0gdGhpcy5zdGF0ZS5hbm5vdGF0aW9ucztcblxuICAgICAgaWYgKCFhbm5vdGF0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGltYWdlUmVzb3VyY2VzUGF0aCA9IF90aGlzJHByb3BzMy5pbWFnZVJlc291cmNlc1BhdGgsXG4gICAgICAgICAgbGlua1NlcnZpY2UgPSBfdGhpcyRwcm9wczMubGlua1NlcnZpY2UsXG4gICAgICAgICAgcGFnZSA9IF90aGlzJHByb3BzMy5wYWdlLFxuICAgICAgICAgIHJlbmRlckludGVyYWN0aXZlRm9ybXMgPSBfdGhpcyRwcm9wczMucmVuZGVySW50ZXJhY3RpdmVGb3JtcztcbiAgICAgIHZhciB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQuY2xvbmUoe1xuICAgICAgICBkb250RmxpcDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgYW5ub3RhdGlvbnM6IGFubm90YXRpb25zLFxuICAgICAgICBkaXY6IHRoaXMuYW5ub3RhdGlvbkxheWVyLFxuICAgICAgICBpbWFnZVJlc291cmNlc1BhdGg6IGltYWdlUmVzb3VyY2VzUGF0aCxcbiAgICAgICAgbGlua1NlcnZpY2U6IGxpbmtTZXJ2aWNlLFxuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zOiByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zLFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICAgIH07XG4gICAgICB0aGlzLmFubm90YXRpb25MYXllci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcGRmanMuQW5ub3RhdGlvbkxheWVyLnJlbmRlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5vblJlbmRlclN1Y2Nlc3MoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRoaXMub25SZW5kZXJFcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBkZl9fUGFnZV9fYW5ub3RhdGlvbnMgYW5ub3RhdGlvbkxheWVyXCIsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICBfdGhpczIuYW5ub3RhdGlvbkxheWVyID0gX3JlZjtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5yZW5kZXJBbm5vdGF0aW9uTGF5ZXIoKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFubm90YXRpb25MYXllckludGVybmFsO1xufShQdXJlQ29tcG9uZW50KTtcbkFubm90YXRpb25MYXllckludGVybmFsLnByb3BUeXBlcyA9IHtcbiAgaW1hZ2VSZXNvdXJjZXNQYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsaW5rU2VydmljZTogaXNMaW5rU2VydmljZS5pc1JlcXVpcmVkLFxuICBvbkdldEFubm90YXRpb25zRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvbkdldEFubm90YXRpb25zU3VjY2VzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUmVuZGVyQW5ub3RhdGlvbkxheWVyRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvblJlbmRlckFubm90YXRpb25MYXllclN1Y2Nlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBwYWdlOiBpc1BhZ2UsXG4gIHJlbmRlckludGVyYWN0aXZlRm9ybXM6IFByb3BUeXBlcy5ib29sLFxuICByb3RhdGU6IGlzUm90YXRlLFxuICBzY2FsZTogUHJvcFR5cGVzLm51bWJlclxufTtcblxudmFyIEFubm90YXRpb25MYXllciA9IGZ1bmN0aW9uIEFubm90YXRpb25MYXllcihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAocGFnZUNvbnRleHQpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbm5vdGF0aW9uTGF5ZXJJbnRlcm5hbCwgX2V4dGVuZHMoe30sIGRvY3VtZW50Q29udGV4dCwgcGFnZUNvbnRleHQsIHByb3BzKSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQW5ub3RhdGlvbkxheWVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1ha2VDYW5jZWxsYWJsZSBmcm9tICdtYWtlLWNhbmNlbGxhYmxlLXByb21pc2UnO1xuaW1wb3J0IG1ha2VFdmVudFByb3BzIGZyb20gJ21ha2UtZXZlbnQtcHJvcHMnO1xuaW1wb3J0IG1lcmdlQ2xhc3NOYW1lcyBmcm9tICdtZXJnZS1jbGFzcy1uYW1lcyc7XG5pbXBvcnQgbWVyZ2VSZWZzIGZyb20gJ21lcmdlLXJlZnMnO1xuaW1wb3J0IERvY3VtZW50Q29udGV4dCBmcm9tICcuL0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgUGFnZUNvbnRleHQgZnJvbSAnLi9QYWdlQ29udGV4dCc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL01lc3NhZ2UnO1xuaW1wb3J0IFBhZ2VDYW52YXMgZnJvbSAnLi9QYWdlL1BhZ2VDYW52YXMnO1xuaW1wb3J0IFBhZ2VTVkcgZnJvbSAnLi9QYWdlL1BhZ2VTVkcnO1xuaW1wb3J0IFRleHRMYXllciBmcm9tICcuL1BhZ2UvVGV4dExheWVyJztcbmltcG9ydCBBbm5vdGF0aW9uTGF5ZXIgZnJvbSAnLi9QYWdlL0Fubm90YXRpb25MYXllcic7XG5pbXBvcnQgeyBjYW5jZWxSdW5uaW5nVGFzaywgZXJyb3JPbkRldiwgaXNQcm92aWRlZCwgbWFrZVBhZ2VDYWxsYmFjayB9IGZyb20gJy4vc2hhcmVkL3V0aWxzJztcbmltcG9ydCB7IGV2ZW50UHJvcHMsIGlzQ2xhc3NOYW1lLCBpc1BhZ2VJbmRleCwgaXNQYWdlTnVtYmVyLCBpc1BkZiwgaXNSZWYsIGlzUmVuZGVyTW9kZSwgaXNSb3RhdGUgfSBmcm9tICcuL3NoYXJlZC9wcm9wVHlwZXMnO1xudmFyIGRlZmF1bHRTY2FsZSA9IDE7XG5leHBvcnQgdmFyIFBhZ2VJbnRlcm5hbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBhZ2VJbnRlcm5hbCwgX1B1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGFnZUludGVybmFsKTtcblxuICBmdW5jdGlvbiBQYWdlSW50ZXJuYWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VJbnRlcm5hbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIHBhZ2U6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkxvYWRTdWNjZXNzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uTG9hZFN1Y2Nlc3MgPSBfdGhpcyRwcm9wcy5vbkxvYWRTdWNjZXNzLFxuICAgICAgICAgIHJlZ2lzdGVyUGFnZSA9IF90aGlzJHByb3BzLnJlZ2lzdGVyUGFnZTtcbiAgICAgIHZhciBwYWdlID0gX3RoaXMuc3RhdGUucGFnZTtcbiAgICAgIGlmIChvbkxvYWRTdWNjZXNzKSBvbkxvYWRTdWNjZXNzKG1ha2VQYWdlQ2FsbGJhY2socGFnZSwgX3RoaXMuc2NhbGUpKTtcbiAgICAgIGlmIChyZWdpc3RlclBhZ2UpIHJlZ2lzdGVyUGFnZShfdGhpcy5wYWdlSW5kZXgsIF90aGlzLnJlZik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Mb2FkRXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBlcnJvck9uRGV2KGVycm9yKTtcbiAgICAgIHZhciBvbkxvYWRFcnJvciA9IF90aGlzLnByb3BzLm9uTG9hZEVycm9yO1xuICAgICAgaWYgKG9uTG9hZEVycm9yKSBvbkxvYWRFcnJvcihlcnJvcik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibG9hZFBhZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBkZiA9IF90aGlzLnByb3BzLnBkZjtcblxuICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBfdGhpcy5nZXRQYWdlTnVtYmVyKCk7XG5cbiAgICAgIGlmICghcGFnZU51bWJlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKCFwcmV2U3RhdGUucGFnZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYWdlOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhbmNlbGxhYmxlID0gbWFrZUNhbmNlbGxhYmxlKHBkZi5nZXRQYWdlKHBhZ2VOdW1iZXIpKTtcbiAgICAgIF90aGlzLnJ1bm5pbmdUYXNrID0gY2FuY2VsbGFibGU7XG4gICAgICBjYW5jZWxsYWJsZS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgICAgfSwgX3RoaXMub25Mb2FkU3VjY2Vzcyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGFnZTogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMub25Mb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFnZUludGVybmFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBwZGYgPSB0aGlzLnByb3BzLnBkZjtcblxuICAgICAgaWYgKCFwZGYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gbG9hZCBhIHBhZ2UsIGJ1dCBubyBkb2N1bWVudCB3YXMgc3BlY2lmaWVkLicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvYWRQYWdlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgcGRmID0gdGhpcy5wcm9wcy5wZGY7XG5cbiAgICAgIGlmIChwcmV2UHJvcHMucGRmICYmIHBkZiAhPT0gcHJldlByb3BzLnBkZiB8fCB0aGlzLmdldFBhZ2VOdW1iZXIoKSAhPT0gdGhpcy5nZXRQYWdlTnVtYmVyKHByZXZQcm9wcykpIHtcbiAgICAgICAgdmFyIHVucmVnaXN0ZXJQYWdlID0gdGhpcy5wcm9wcy51bnJlZ2lzdGVyUGFnZTtcbiAgICAgICAgaWYgKHVucmVnaXN0ZXJQYWdlKSB1bnJlZ2lzdGVyUGFnZSh0aGlzLmdldFBhZ2VJbmRleChwcmV2UHJvcHMpKTtcbiAgICAgICAgdGhpcy5sb2FkUGFnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciB1bnJlZ2lzdGVyUGFnZSA9IHRoaXMucHJvcHMudW5yZWdpc3RlclBhZ2U7XG4gICAgICBpZiAodW5yZWdpc3RlclBhZ2UpIHVucmVnaXN0ZXJQYWdlKHRoaXMucGFnZUluZGV4KTtcbiAgICAgIGNhbmNlbFJ1bm5pbmdUYXNrKHRoaXMucnVubmluZ1Rhc2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGlsZENvbnRleHRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlO1xuXG4gICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjdXN0b21UZXh0UmVuZGVyZXIgPSBfdGhpcyRwcm9wczIuY3VzdG9tVGV4dFJlbmRlcmVyLFxuICAgICAgICAgIG9uR2V0QW5ub3RhdGlvbnNFcnJvciA9IF90aGlzJHByb3BzMi5vbkdldEFubm90YXRpb25zRXJyb3IsXG4gICAgICAgICAgb25HZXRBbm5vdGF0aW9uc1N1Y2Nlc3MgPSBfdGhpcyRwcm9wczIub25HZXRBbm5vdGF0aW9uc1N1Y2Nlc3MsXG4gICAgICAgICAgb25HZXRUZXh0RXJyb3IgPSBfdGhpcyRwcm9wczIub25HZXRUZXh0RXJyb3IsXG4gICAgICAgICAgb25HZXRUZXh0U3VjY2VzcyA9IF90aGlzJHByb3BzMi5vbkdldFRleHRTdWNjZXNzLFxuICAgICAgICAgIG9uUmVuZGVyQW5ub3RhdGlvbkxheWVyRXJyb3IgPSBfdGhpcyRwcm9wczIub25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJFcnJvcixcbiAgICAgICAgICBvblJlbmRlckFubm90YXRpb25MYXllclN1Y2Nlc3MgPSBfdGhpcyRwcm9wczIub25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJTdWNjZXNzLFxuICAgICAgICAgIG9uUmVuZGVyRXJyb3IgPSBfdGhpcyRwcm9wczIub25SZW5kZXJFcnJvcixcbiAgICAgICAgICBvblJlbmRlclN1Y2Nlc3MgPSBfdGhpcyRwcm9wczIub25SZW5kZXJTdWNjZXNzLFxuICAgICAgICAgIHJlbmRlckludGVyYWN0aXZlRm9ybXMgPSBfdGhpcyRwcm9wczIucmVuZGVySW50ZXJhY3RpdmVGb3JtcztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1c3RvbVRleHRSZW5kZXJlcjogY3VzdG9tVGV4dFJlbmRlcmVyLFxuICAgICAgICBvbkdldEFubm90YXRpb25zRXJyb3I6IG9uR2V0QW5ub3RhdGlvbnNFcnJvcixcbiAgICAgICAgb25HZXRBbm5vdGF0aW9uc1N1Y2Nlc3M6IG9uR2V0QW5ub3RhdGlvbnNTdWNjZXNzLFxuICAgICAgICBvbkdldFRleHRFcnJvcjogb25HZXRUZXh0RXJyb3IsXG4gICAgICAgIG9uR2V0VGV4dFN1Y2Nlc3M6IG9uR2V0VGV4dFN1Y2Nlc3MsXG4gICAgICAgIG9uUmVuZGVyQW5ub3RhdGlvbkxheWVyRXJyb3I6IG9uUmVuZGVyQW5ub3RhdGlvbkxheWVyRXJyb3IsXG4gICAgICAgIG9uUmVuZGVyQW5ub3RhdGlvbkxheWVyU3VjY2Vzczogb25SZW5kZXJBbm5vdGF0aW9uTGF5ZXJTdWNjZXNzLFxuICAgICAgICBvblJlbmRlckVycm9yOiBvblJlbmRlckVycm9yLFxuICAgICAgICBvblJlbmRlclN1Y2Nlc3M6IG9uUmVuZGVyU3VjY2VzcyxcbiAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogcmVuZGVySW50ZXJhY3RpdmVGb3JtcyxcbiAgICAgICAgcm90YXRlOiB0aGlzLnJvdGF0ZSxcbiAgICAgICAgc2NhbGU6IHRoaXMuc2NhbGVcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGEgcGFnZSBpcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQYWdlSW5kZXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUluZGV4KCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNQcm92aWRlZChwcm9wcy5wYWdlTnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gcHJvcHMucGFnZU51bWJlciAtIDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Byb3ZpZGVkKHByb3BzLnBhZ2VJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnBhZ2VJbmRleDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBhZ2VOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZU51bWJlcigpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5wcm9wcztcblxuICAgICAgaWYgKGlzUHJvdmlkZWQocHJvcHMucGFnZU51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnBhZ2VOdW1iZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Byb3ZpZGVkKHByb3BzLnBhZ2VJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnBhZ2VJbmRleCArIDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYWdlSW5kZXhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFBhZ2VJbmRleCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYWdlTnVtYmVyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQYWdlTnVtYmVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJvdGF0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHJvdGF0ZSA9IHRoaXMucHJvcHMucm90YXRlO1xuXG4gICAgICBpZiAoaXNQcm92aWRlZChyb3RhdGUpKSB7XG4gICAgICAgIHJldHVybiByb3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlO1xuXG4gICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYWdlLnJvdGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2NhbGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlO1xuXG4gICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHNjYWxlID0gX3RoaXMkcHJvcHMzLnNjYWxlLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMzLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzMy5oZWlnaHQ7XG4gICAgICB2YXIgcm90YXRlID0gdGhpcy5yb3RhdGU7IC8vIEJlIGRlZmF1bHQsIHdlJ2xsIHJlbmRlciBwYWdlIGF0IDEwMCUgKiBzY2FsZSB3aWR0aC5cblxuICAgICAgdmFyIHBhZ2VTY2FsZSA9IDE7IC8vIFBhc3Npbmcgc2NhbGUgZXhwbGljaXRseSBudWxsIHdvdWxkIGNhdXNlIHRoZSBwYWdlIG5vdCB0byByZW5kZXJcblxuICAgICAgdmFyIHNjYWxlV2l0aERlZmF1bHQgPSBzY2FsZSA9PT0gbnVsbCA/IGRlZmF1bHRTY2FsZSA6IHNjYWxlOyAvLyBJZiB3aWR0aC9oZWlnaHQgaXMgZGVmaW5lZCwgY2FsY3VsYXRlIHRoZSBzY2FsZSBvZiB0aGUgcGFnZSBzbyBpdCBjb3VsZCBiZSBvZiBkZXNpcmVkIHdpZHRoLlxuXG4gICAgICBpZiAod2lkdGggfHwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciB2aWV3cG9ydCA9IHBhZ2UuZ2V0Vmlld3BvcnQoe1xuICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGVcbiAgICAgICAgfSk7XG4gICAgICAgIHBhZ2VTY2FsZSA9IHdpZHRoID8gd2lkdGggLyB2aWV3cG9ydC53aWR0aCA6IGhlaWdodCAvIHZpZXdwb3J0LmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjYWxlV2l0aERlZmF1bHQgKiBwYWdlU2NhbGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV2ZW50UHJvcHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbWFrZUV2ZW50UHJvcHModGhpcy5wcm9wcywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFnZSA9IF90aGlzMi5zdGF0ZS5wYWdlO1xuXG4gICAgICAgIGlmICghcGFnZSkge1xuICAgICAgICAgIHJldHVybiBwYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1ha2VQYWdlQ2FsbGJhY2socGFnZSwgX3RoaXMyLnNjYWxlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYWdlS2V5XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFnZSA9IHRoaXMuc3RhdGUucGFnZTtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwYWdlLnBhZ2VJbmRleCwgXCJAXCIpLmNvbmNhdCh0aGlzLnNjYWxlLCBcIi9cIikuY29uY2F0KHRoaXMucm90YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGFnZUtleU5vU2NhbGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlO1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHBhZ2UucGFnZUluZGV4LCBcIi9cIikuY29uY2F0KHRoaXMucm90YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTWFpbkxheWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck1haW5MYXllcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhbnZhc1JlZiA9IF90aGlzJHByb3BzNC5jYW52YXNSZWYsXG4gICAgICAgICAgcmVuZGVyTW9kZSA9IF90aGlzJHByb3BzNC5yZW5kZXJNb2RlO1xuXG4gICAgICBzd2l0Y2ggKHJlbmRlck1vZGUpIHtcbiAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY2FzZSAnc3ZnJzpcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZVNWRywge1xuICAgICAgICAgICAga2V5OiBcIlwiLmNvbmNhdCh0aGlzLnBhZ2VLZXlOb1NjYWxlLCBcIl9zdmdcIilcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdjYW52YXMnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlQ2FudmFzLCB7XG4gICAgICAgICAgICBrZXk6IFwiXCIuY29uY2F0KHRoaXMucGFnZUtleSwgXCJfY2FudmFzXCIpLFxuICAgICAgICAgICAgY2FudmFzUmVmOiBjYW52YXNSZWZcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyVGV4dExheWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRleHRMYXllcigpIHtcbiAgICAgIHZhciByZW5kZXJUZXh0TGF5ZXIgPSB0aGlzLnByb3BzLnJlbmRlclRleHRMYXllcjtcblxuICAgICAgaWYgKCFyZW5kZXJUZXh0TGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0TGF5ZXIsIHtcbiAgICAgICAga2V5OiBcIlwiLmNvbmNhdCh0aGlzLnBhZ2VLZXksIFwiX3RleHRcIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJBbm5vdGF0aW9uTGF5ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQW5ub3RhdGlvbkxheWVyKCkge1xuICAgICAgdmFyIHJlbmRlckFubm90YXRpb25MYXllciA9IHRoaXMucHJvcHMucmVuZGVyQW5ub3RhdGlvbkxheWVyO1xuXG4gICAgICBpZiAoIXJlbmRlckFubm90YXRpb25MYXllcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQXMgb2Ygbm93LCBQREYuanMgMi4wLjk0MyByZXR1cm5zIHdhcm5pbmdzIG9uIHVuaW1wbGVtZW50ZWQgYW5ub3RhdGlvbnMgaW4gU1ZHIG1vZGUuXG4gICAgICAgKiBUaGVyZWZvcmUsIGFzIGEgZmFsbGJhY2ssIHdlIHJlbmRlciBcInRyYWRpdGlvbmFsXCIgQW5ub3RhdGlvbkxheWVyIGNvbXBvbmVudC5cbiAgICAgICAqL1xuXG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbm5vdGF0aW9uTGF5ZXIsIHtcbiAgICAgICAga2V5OiBcIlwiLmNvbmNhdCh0aGlzLnBhZ2VLZXksIFwiX2Fubm90YXRpb25zXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyQ2hpbGRyZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmNoaWxkQ29udGV4dFxuICAgICAgfSwgdGhpcy5yZW5kZXJNYWluTGF5ZXIoKSwgdGhpcy5yZW5kZXJUZXh0TGF5ZXIoKSwgdGhpcy5yZW5kZXJBbm5vdGF0aW9uTGF5ZXIoKSwgY2hpbGRyZW4pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDb250ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICB2YXIgcGFnZU51bWJlciA9IHRoaXMucGFnZU51bWJlcjtcbiAgICAgIHZhciBwZGYgPSB0aGlzLnByb3BzLnBkZjtcbiAgICAgIHZhciBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlO1xuXG4gICAgICBpZiAoIXBhZ2VOdW1iZXIpIHtcbiAgICAgICAgdmFyIG5vRGF0YSA9IHRoaXMucHJvcHMubm9EYXRhO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwge1xuICAgICAgICAgIHR5cGU6IFwibm8tZGF0YVwiXG4gICAgICAgIH0sIHR5cGVvZiBub0RhdGEgPT09ICdmdW5jdGlvbicgPyBub0RhdGEoKSA6IG5vRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwZGYgPT09IG51bGwgfHwgcGFnZSA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lc3NhZ2UsIHtcbiAgICAgICAgICB0eXBlOiBcImxvYWRpbmdcIlxuICAgICAgICB9LCB0eXBlb2YgbG9hZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IGxvYWRpbmcoKSA6IGxvYWRpbmcpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGRmID09PSBmYWxzZSB8fCBwYWdlID09PSBmYWxzZSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnByb3BzLmVycm9yO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwge1xuICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIlxuICAgICAgICB9LCB0eXBlb2YgZXJyb3IgPT09ICdmdW5jdGlvbicgPyBlcnJvcigpIDogZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJDaGlsZHJlbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHBhZ2VOdW1iZXIgPSB0aGlzLnBhZ2VOdW1iZXI7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczUuY2xhc3NOYW1lLFxuICAgICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHM1LmlucHV0UmVmO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBtZXJnZUNsYXNzTmFtZXMoJ3JlYWN0LXBkZl9fUGFnZScsIGNsYXNzTmFtZSksXG4gICAgICAgIFwiZGF0YS1wYWdlLW51bWJlclwiOiBwYWdlTnVtYmVyLFxuICAgICAgICByZWY6IG1lcmdlUmVmcyhpbnB1dFJlZiwgdGhpcy5yZWYpLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMuZXZlbnRQcm9wcyksIHRoaXMucmVuZGVyQ29udGVudCgpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFnZUludGVybmFsO1xufShQdXJlQ29tcG9uZW50KTtcblBhZ2VJbnRlcm5hbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGVycm9yOiAnRmFpbGVkIHRvIGxvYWQgdGhlIHBhZ2UuJyxcbiAgbG9hZGluZzogJ0xvYWRpbmcgcGFnZeKApicsXG4gIG5vRGF0YTogJ05vIHBhZ2Ugc3BlY2lmaWVkLicsXG4gIHJlbmRlckFubm90YXRpb25MYXllcjogdHJ1ZSxcbiAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogZmFsc2UsXG4gIHJlbmRlck1vZGU6ICdjYW52YXMnLFxuICByZW5kZXJUZXh0TGF5ZXI6IHRydWUsXG4gIHNjYWxlOiBkZWZhdWx0U2NhbGVcbn07XG52YXIgaXNGdW5jdGlvbk9yTm9kZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pO1xuUGFnZUludGVybmFsLnByb3BUeXBlcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZXZlbnRQcm9wcyksIHt9LCB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgY2xhc3NOYW1lOiBpc0NsYXNzTmFtZSxcbiAgY3VzdG9tVGV4dFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZXJyb3I6IGlzRnVuY3Rpb25Pck5vZGUsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgaW1hZ2VSZXNvdXJjZXNQYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbnB1dFJlZjogaXNSZWYsXG4gIGxvYWRpbmc6IGlzRnVuY3Rpb25Pck5vZGUsXG4gIG5vRGF0YTogaXNGdW5jdGlvbk9yTm9kZSxcbiAgb25HZXRUZXh0RXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvbkdldFRleHRTdWNjZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Mb2FkRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxvYWRTdWNjZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SZW5kZXJFcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUmVuZGVyU3VjY2VzczogUHJvcFR5cGVzLmZ1bmMsXG4gIHBhZ2VJbmRleDogaXNQYWdlSW5kZXgsXG4gIHBhZ2VOdW1iZXI6IGlzUGFnZU51bWJlcixcbiAgcGRmOiBpc1BkZixcbiAgcmVnaXN0ZXJQYWdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyQW5ub3RhdGlvbkxheWVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogUHJvcFR5cGVzLmJvb2wsXG4gIHJlbmRlck1vZGU6IGlzUmVuZGVyTW9kZSxcbiAgcmVuZGVyVGV4dExheWVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcm90YXRlOiBpc1JvdGF0ZSxcbiAgc2NhbGU6IFByb3BUeXBlcy5udW1iZXIsXG4gIHVucmVnaXN0ZXJQYWdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXJcbn0pO1xuXG5mdW5jdGlvbiBQYWdlKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERvY3VtZW50Q29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZUludGVybmFsLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZlxuICAgIH0sIGNvbnRleHQsIHByb3BzKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihQYWdlKTsiLCJpbXBvcnQgKiBhcyBwZGZqcyBmcm9tICdwZGZqcy1kaXN0L2xlZ2FjeS9idWlsZC9wZGYnO1xuaW1wb3J0IERvY3VtZW50IGZyb20gJy4vRG9jdW1lbnQnO1xuaW1wb3J0IE91dGxpbmUgZnJvbSAnLi9PdXRsaW5lJztcbmltcG9ydCBQYWdlIGZyb20gJy4vUGFnZSc7XG5pbXBvcnQgeyBpc0xvY2FsRmlsZVN5c3RlbSwgd2Fybk9uRGV2IH0gZnJvbSAnLi9zaGFyZWQvdXRpbHMnO1xuXG5pZiAoaXNMb2NhbEZpbGVTeXN0ZW0pIHtcbiAgd2Fybk9uRGV2KCdZb3UgYXJlIHJ1bm5pbmcgUmVhY3QtUERGIGZyb20geW91ciBsb2NhbCBmaWxlIHN5c3RlbS4gUERGLmpzIFdvcmtlciBtYXkgZmFpbCB0byBsb2FkIGR1ZSB0byBicm93c2VyXFwncyBzZWN1cml0eSBwb2xpY2llcy4gSWYgeW91XFwncmUgb24gR29vZ2xlIENocm9tZSwgeW91IGNhbiB1c2UgLS1hbGxvdy1maWxlLWFjY2Vzcy1mcm9tLWZpbGVzIGZsYWcgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4nKTtcbn1cblxucGRmanMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSAncGRmLndvcmtlci5qcyc7XG5leHBvcnQgeyBwZGZqcywgRG9jdW1lbnQsIE91dGxpbmUsIFBhZ2UgfTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIC8vIFRTIHRoaW5rcyBgaXRlbSBpcyBwb3NzaWJseSBudWxsYCBldmVuIHRob3VnaCB0aGlzIHdhcyBvdXIgZmlyc3QgZ3VhcmQuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgLy8gU2luY2UgYG91dHB1dGAgaXMgYSBjbG9uZSBvZiBgdGFyZ2V0YCBhbmQgd2UgaGF2ZSBuYXJyb3dlZCBgdGFyZ2V0YCBpbiB0aGlzIGJsb2NrIHdlIGNhbiBjYXN0IHRvIHRoZSBzYW1lIHR5cGUuXG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIi4vZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYGNhcGl0YWxpemUoc3RyaW5nKVxcYCBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzLCByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNvbnRyb2xsZWQoe1xuICBjb250cm9sbGVkLFxuICBkZWZhdWx0OiBkZWZhdWx0UHJvcCxcbiAgbmFtZSxcbiAgc3RhdGUgPSAndmFsdWUnXG59KSB7XG4gIC8vIGlzQ29udHJvbGxlZCBpcyBpZ25vcmVkIGluIHRoZSBob29rIGRlcGVuZGVuY3kgbGlzdHMgYXMgaXQgc2hvdWxkIG5ldmVyIGNoYW5nZS5cbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCk7XG4gIGNvbnN0IFt2YWx1ZVN0YXRlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0UHJvcCk7XG4gIGNvbnN0IHZhbHVlID0gaXNDb250cm9sbGVkID8gY29udHJvbGxlZCA6IHZhbHVlU3RhdGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCAhPT0gKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlICR7aXNDb250cm9sbGVkID8gJycgOiAndW4nfWNvbnRyb2xsZWQgJHtzdGF0ZX0gc3RhdGUgb2YgJHtuYW1lfSB0byBiZSAke2lzQ29udHJvbGxlZCA/ICd1bicgOiAnJ31jb250cm9sbGVkLmAsICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBgRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAke25hbWV9IGAgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuJywgXCJUaGUgbmF0dXJlIG9mIHRoZSBzdGF0ZSBpcyBkZXRlcm1pbmVkIGR1cmluZyB0aGUgZmlyc3QgcmVuZGVyLiBJdCdzIGNvbnNpZGVyZWQgY29udHJvbGxlZCBpZiB0aGUgdmFsdWUgaXMgbm90IGB1bmRlZmluZWRgLlwiLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbc3RhdGUsIG5hbWUsIGNvbnRyb2xsZWRdKTtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgICB9ID0gUmVhY3QudXNlUmVmKGRlZmF1bHRQcm9wKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCAke3N0YXRlfSBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgJHtuYW1lfSBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gYCArIGBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgJHtuYW1lfS5gXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG5cbiAgY29uc3Qgc2V0VmFsdWVJZlVuY29udHJvbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+IHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IC8vIEB0cy1leHBlY3QtZXJyb3IgaGlkZSBgdGhpc2BcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi1jb21tYS1vcGVyYXRvclxuICAoMCwgcmVmLmN1cnJlbnQpKC4uLmFyZ3MpLCBbXSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmVmFsdWUgPT4ge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG5sZXQgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xuY29uc3QgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgdGV4dDogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxufTtcbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KG5vZGUpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgdGFnTmFtZVxuICB9ID0gbm9kZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogS2VlcCB0cmFjayBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlKGRvYykge1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikgey8vIEJyb3dzZXJzIG5vdCBpbXBsZW1lbnRpbmcgOmZvY3VzLXZpc2libGUgd2lsbCB0aHJvdyBhIFN5bnRheEVycm9yLlxuICAgIC8vIFdlIHVzZSBvdXIgb3duIGhldXJpc3RpYyBmb3IgdGhvc2UgYnJvd3NlcnMuXG4gICAgLy8gUmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgfSAvLyBObyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiBUaGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seS5cblxuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGlzRm9jdXNWaXNpYmxlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAgIC8vIGNoZWNraW5nIGFnYWluc3QgcG90ZW50aWFsIHN0YXRlIHZhcmlhYmxlIGRvZXMgbm90IHN1ZmZpY2UgaWYgd2UgZm9jdXMgYW5kIGJsdXIgc3luY2hyb25vdXNseS5cbiAgICAvLyBSZWFjdCB3b3VsZG4ndCBoYXZlIHRpbWUgdG8gdHJpZ2dlciBhIHJlLXJlbmRlciBzbyBgZm9jdXNWaXNpYmxlYCB3b3VsZCBiZSBzdGFsZS5cbiAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIGFkanVzdCBgaXNGb2N1c1Zpc2libGUoZXZlbnQpYCB0byBsb29rIGF0IGByZWxhdGVkVGFyZ2V0YCBmb3IgYmx1ciBldmVudHMuXG4gICAgLy8gVGhpcyBkb2Vzbid0IHdvcmsgaW4gSUUxMSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zNzUxXG4gICAgLy8gVE9ETzogY2hlY2sgYWdhaW4gaWYgUmVhY3QgcmVsZWFzZXMgdGhlaXIgaW50ZXJuYWwgY2hhbmdlcyB0byBmb2N1cyBldmVudCBoYW5kbGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTkxODYpLlxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICB9LCAxMDApO1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWZcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzbG90cykuZm9yRWFjaCggLy8gYE9iamV0LmtleXMoc2xvdHMpYCBjYW4ndCBiZSB3aWRlciB0aGFuIGBUYCBiZWNhdXNlIHdlIGluZmVyIGBUYCBmcm9tIGBzbG90c2AuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTIyNTMjaXNzdWVjb21tZW50LTI2MzEzMjIwOFxuICBzbG90ID0+IHtcbiAgICBvdXRwdXRbc2xvdF0gPSBzbG90c1tzbG90XS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXNba2V5XSkge1xuICAgICAgICAgIGFjYy5wdXNoKGNsYXNzZXNba2V5XSk7XG4gICAgICAgIH1cblxuICAgICAgICBhY2MucHVzaChnZXRVdGlsaXR5Q2xhc3Moa2V5KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLmpvaW4oJyAnKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiY29uc3QgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyA9IHtcbiAgYWN0aXZlOiAnTXVpLWFjdGl2ZScsXG4gIGNoZWNrZWQ6ICdNdWktY2hlY2tlZCcsXG4gIGNvbXBsZXRlZDogJ011aS1jb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ011aS1kaXNhYmxlZCcsXG4gIGVycm9yOiAnTXVpLWVycm9yJyxcbiAgZXhwYW5kZWQ6ICdNdWktZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnTXVpLWZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdNdWktZm9jdXNWaXNpYmxlJyxcbiAgcmVxdWlyZWQ6ICdNdWktcmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ011aS1zZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyB8fCBgJHtjb21wb25lbnROYW1lfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztyZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKTt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksZz02MDEwMztleHBvcnRzLkZyYWdtZW50PTYwMTA3O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBoPVN5bWJvbC5mb3I7Zz1oKFwicmVhY3QuZWxlbWVudFwiKTtleHBvcnRzLkZyYWdtZW50PWgoXCJyZWFjdC5mcmFnbWVudFwiKX12YXIgbT1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxrKXt2YXIgYixkPXt9LGU9bnVsbCxsPW51bGw7dm9pZCAwIT09ayYmKGU9XCJcIitrKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihsPWEucmVmKTtmb3IoYiBpbiBhKW4uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjpnLHR5cGU6YyxrZXk6ZSxyZWY6bCxwcm9wczpkLF9vd25lcjptLmN1cnJlbnR9fWV4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnByZXBlbmQgPyBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCA6IF90aGlzLmJlZm9yZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXIpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkgKHZhbHVlLCByb290LCB0eXBlKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LnJvb3QsIHJvb3QucGFyZW50LCB0eXBlLCByb290LnByb3BzLCByb290LmNoaWxkcmVuLCAwKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRyZXR1cm4gZGVsaW1pdGVyKHR5cGUgPT09IDM0IHx8IHR5cGUgPT09IDM5ID8gdHlwZSA6IGNoYXJhY3Rlcilcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCB0cmltLCBmcm9tLCBzaXplb2YsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIHJlcGxhY2V9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7bm9kZSwgY2hhciwgcHJldiwgbmV4dCwgcGVlaywgY2FyZXQsIGFsbG9jLCBkZWFsbG9jLCBkZWxpbWl0LCB3aGl0ZXNwYWNlLCBlc2NhcGluZywgaWRlbnRpZmllciwgY29tbWVudGVyfSBmcm9tICcuL1Rva2VuaXplci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge29iamVjdFtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2MocGFyc2UoJycsIG51bGwsIG51bGwsIG51bGwsIFsnJ10sIHZhbHVlID0gYWxsb2ModmFsdWUpLCAwLCBbMF0sIHZhbHVlKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzZXRzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwc2V1ZG9cbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmdbXX0gZGVjbGFyYXRpb25zXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgcnVsZSwgcnVsZXMsIHJ1bGVzZXRzLCBwc2V1ZG8sIHBvaW50cywgZGVjbGFyYXRpb25zKSB7XG5cdHZhciBpbmRleCA9IDBcblx0dmFyIG9mZnNldCA9IDBcblx0dmFyIGxlbmd0aCA9IHBzZXVkb1xuXHR2YXIgYXRydWxlID0gMFxuXHR2YXIgcHJvcGVydHkgPSAwXG5cdHZhciBwcmV2aW91cyA9IDBcblx0dmFyIHZhcmlhYmxlID0gMVxuXHR2YXIgc2Nhbm5pbmcgPSAxXG5cdHZhciBhbXBlcnNhbmQgPSAxXG5cdHZhciBjaGFyYWN0ZXIgPSAwXG5cdHZhciB0eXBlID0gJydcblx0dmFyIHByb3BzID0gcnVsZXNcblx0dmFyIGNoaWxkcmVuID0gcnVsZXNldHNcblx0dmFyIHJlZmVyZW5jZSA9IHJ1bGVcblx0dmFyIGNoYXJhY3RlcnMgPSB0eXBlXG5cblx0d2hpbGUgKHNjYW5uaW5nKVxuXHRcdHN3aXRjaCAocHJldmlvdXMgPSBjaGFyYWN0ZXIsIGNoYXJhY3RlciA9IG5leHQoKSkge1xuXHRcdFx0Ly8gXCIgJyBbIChcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6IGNhc2UgNDA6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGQgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDk6IGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZSh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJ1bGUgJiYgYXBwZW5kKHJ1bGVzZXQodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCAwLCAwLCBydWxlcywgcG9pbnRzLCB0eXBlLCBydWxlcywgcHJvcHMgPSBbXSwgbGVuZ3RoKSwgY2hpbGRyZW4pLCBydWxlcywgY2hpbGRyZW4sIGxlbmd0aCwgcG9pbnRzLCBydWxlID8gcHJvcHMgOiBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIFsnJ10sIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVR9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7aGFzaCwgY2hhcmF0LCBzdHJsZW4sIGluZGV4b2YsIHJlcGxhY2V9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeCAodmFsdWUsIGxlbmd0aCkge1xuXHRzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcblx0XHQvLyBjb2xvci1hZGp1c3Rcblx0XHRjYXNlIDUxMDM6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cdFx0Y2FzZSA1NzM3OiBjYXNlIDQyMDE6IGNhc2UgMzE3NzogY2FzZSAzNDMzOiBjYXNlIDE2NDE6IGNhc2UgNDQ1NzogY2FzZSAyOTIxOlxuXHRcdC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblx0XHRjYXNlIDU1NzI6IGNhc2UgNjM1NjogY2FzZSA1ODQ0OiBjYXNlIDMxOTE6IGNhc2UgNjY0NTogY2FzZSAzMDA1OlxuXHRcdC8vIG1hc2ssIG1hc2staW1hZ2UsIG1hc2stKG1vZGV8Y2xpcHxzaXplKSwgbWFzay0ocmVwZWF0fG9yaWdpbiksIG1hc2stcG9zaXRpb24sIG1hc2stY29tcG9zaXRlLFxuXHRcdGNhc2UgNjM5MTogY2FzZSA1ODc5OiBjYXNlIDU2MjM6IGNhc2UgNjEzNTogY2FzZSA0NTk5OiBjYXNlIDQ4NTU6XG5cdFx0Ly8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblx0XHRjYXNlIDQyMTU6IGNhc2UgNjM4OTogY2FzZSA1MTA5OiBjYXNlIDUzNjU6IGNhc2UgNTYyMTogY2FzZSAzODI5OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cdFx0Y2FzZSA1MzQ5OiBjYXNlIDQyNDY6IGNhc2UgNDgxMDogY2FzZSA2OTY4OiBjYXNlIDI3NTY6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNT1ogKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cdFx0Y2FzZSA2ODI4OiBjYXNlIDQyNjg6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBvcmRlclxuXHRcdGNhc2UgNjE2NTpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBhbGlnbi1pdGVtc1xuXHRcdGNhc2UgNTE4Nzpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZVxuXHRcdC8vIGFsaWduLXNlbGZcblx0XHRjYXNlIDU0NDM6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24tY29udGVudFxuXHRcdGNhc2UgNDY3NTpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWVcblx0XHQvLyBmbGV4LXNocmlua1xuXHRcdGNhc2UgNTU0ODpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWVcblx0XHQvLyBmbGV4LWJhc2lzXG5cdFx0Y2FzZSA1MjkyOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1ncm93XG5cdFx0Y2FzZSA2MDYwOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWVcblx0XHQvLyB0cmFuc2l0aW9uXG5cdFx0Y2FzZSA0NTU0OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZVxuXHRcdC8vIGN1cnNvclxuXHRcdGNhc2UgNjE4Nzpcblx0XHRcdHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlXG5cdFx0Ly8gYmFja2dyb3VuZCwgYmFja2dyb3VuZC1pbWFnZVxuXHRcdGNhc2UgNTQ5NTogY2FzZSAzOTU5OlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKVxuXHRcdC8vIGp1c3RpZnktY29udGVudFxuXHRcdGNhc2UgNDk2ODpcblx0XHRcdHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cdFx0Y2FzZSA0MDk1OiBjYXNlIDM1ODM6IGNhc2UgNDA2ODogY2FzZSAyNTMyOlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWVcblx0XHQvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXHRcdGNhc2UgODExNjogY2FzZSA3MDU5OiBjYXNlIDU3NTM6IGNhc2UgNTUzNTpcblx0XHRjYXNlIDU0NDU6IGNhc2UgNTcwMTogY2FzZSA0OTMzOiBjYXNlIDQ2Nzc6XG5cdFx0Y2FzZSA1NTMzOiBjYXNlIDU3ODk6IGNhc2UgNTAyMTogY2FzZSA0NzY1OlxuXHRcdFx0Ly8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuXHRcdFx0aWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNilcblx0XHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG5cdFx0XHRcdFx0Ly8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuXHRcdFx0XHRcdGNhc2UgMTA5OlxuXHRcdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZVxuXHRcdFx0XHRcdC8vIChzKXRyZXRjaFxuXHRcdFx0XHRcdGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0cmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlXG5cdFx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Ly8gcG9zaXRpb246IHN0aWNreVxuXHRcdGNhc2UgNDk0OTpcblx0XHRcdC8vIChzKXRpY2t5P1xuXHRcdFx0aWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSlcblx0XHRcdFx0YnJlYWtcblx0XHQvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblx0XHRjYXNlIDY0NDQ6XG5cdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuXHRcdFx0XHQvLyBzdGljKGspeVxuXHRcdFx0XHRjYXNlIDEwNzpcblx0XHRcdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWVcblx0XHRcdFx0Ly8gKGlubGluZS0pP2ZsKGUpeFxuXHRcdFx0XHRjYXNlIDEwMTpcblx0XHRcdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWVcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Ly8gd3JpdGluZy1tb2RlXG5cdFx0Y2FzZSA1OTM2OlxuXHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuXHRcdFx0XHQvLyB2ZXJ0aWNhbC1sKHIpXG5cdFx0XHRcdGNhc2UgMTE0OlxuXHRcdFx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlXG5cdFx0XHRcdC8vIHZlcnRpY2FsLXIobClcblx0XHRcdFx0Y2FzZSAxMDg6XG5cdFx0XHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWVcblx0XHRcdFx0Ly8gaG9yaXpvbnRhbCgtKXRiXG5cdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWVcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdH1cblxuXHRyZXR1cm4gdmFsdWVcbn1cbiIsImltcG9ydCB7SU1QT1JULCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmV9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7Y29weSwgdG9rZW5pemV9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vU2VyaWFsaXplci5qcydcbmltcG9ydCB7cHJlZml4fSBmcm9tICcuL1ByZWZpeGVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gY29sbGVjdGlvblxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWRkbGV3YXJlIChjb2xsZWN0aW9uKSB7XG5cdHZhciBsZW5ndGggPSBzaXplb2YoY29sbGVjdGlvbilcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0XHR2YXIgb3V0cHV0ID0gJydcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRvdXRwdXQgKz0gY29sbGVjdGlvbltpXShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNoZWV0IChjYWxsYmFjaykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQucm9vdClcblx0XHRcdGlmIChlbGVtZW50ID0gZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRcdGNhbGxiYWNrKGVsZW1lbnQpXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVyIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdGlmICghZWxlbWVudC5yZXR1cm4pXG5cdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkocmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVCksIGVsZW1lbnQsICcnKV0sIGNhbGxiYWNrKVxuXHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0cmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0Y2FzZSAnOnJlYWQtb25seSc6IGNhc2UgJzpyZWFkLXdyaXRlJzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KHJlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKSwgZWxlbWVudCwgJycpXSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtcblx0XHRcdFx0XHRcdFx0XHRcdGNvcHkocmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyksIGVsZW1lbnQsICcnKSxcblx0XHRcdFx0XHRcdFx0XHRcdGNvcHkocmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyksIGVsZW1lbnQsICcnKSxcblx0XHRcdFx0XHRcdFx0XHRcdGNvcHkocmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKSwgZWxlbWVudCwgJycpXG5cdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiAnJ1xuXHRcdFx0XHRcdH0pXG5cdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBpZGVudGlmaWVyLCBwb3NpdGlvbiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIHByZWZpeGVyLCBzZXJpYWxpemUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGxhc3QgPSBmdW5jdGlvbiBsYXN0KGFycikge1xuICByZXR1cm4gYXJyLmxlbmd0aCA/IGFyclthcnIubGVuZ3RoIC0gMV0gOiBudWxsO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gLmxlbmd0aCBpbmRpY2F0ZXMgaWYgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkbyBvciBub3RcbiAgIWVsZW1lbnQubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiAhIWVsZW1lbnQgJiYgZWxlbWVudC50eXBlID09PSAnY29tbScgJiYgZWxlbWVudC5jaGlsZHJlbi5pbmRleE9mKGlnbm9yZUZsYWcpID4gLTE7XG59O1xuXG52YXIgY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0gPSBmdW5jdGlvbiBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybShjYWNoZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICAgIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJykgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3NlcyAmJiBjYWNoZS5jb21wYXQgIT09IHRydWUpIHtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IGluZGV4ID4gMCA/IGNoaWxkcmVuW2luZGV4IC0gMV0gOiBudWxsO1xuXG4gICAgICBpZiAocHJldkVsZW1lbnQgJiYgaXNJZ25vcmluZ0NvbW1lbnQobGFzdChwcmV2RWxlbWVudC5jaGlsZHJlbikpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoIGtleSA9PT0gJ2NzcycpIHtcbiAgICB2YXIgc3NyU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl06bm90KFtkYXRhLXNdKVwiKTsgLy8gZ2V0IFNTUmVkIHN0eWxlcyBvdXQgb2YgdGhlIHdheSBvZiBSZWFjdCdzIGh5ZHJhdGlvblxuICAgIC8vIGRvY3VtZW50LmhlYWQgaXMgYSBzYWZlIHBsYWNlIHRvIG1vdmUgdGhlbSB0byh0aG91Z2ggbm90ZSBkb2N1bWVudC5oZWFkIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBwbGFjZSB0aGV5IHdpbGwgYmUpXG4gICAgLy8gbm90ZSB0aGlzIHZlcnkgdmVyeSBpbnRlbnRpb25hbGx5IHRhcmdldHMgYWxsIHN0eWxlIGVsZW1lbnRzIHJlZ2FyZGxlc3Mgb2YgdGhlIGtleSB0byBlbnN1cmVcbiAgICAvLyB0aGF0IGNyZWF0aW5nIGEgY2FjaGUgd29ya3MgaW5zaWRlIG9mIHJlbmRlciBvZiBhIFJlYWN0IGNvbXBvbmVudFxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzc3JTdHlsZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyB3ZSB3YW50IHRvIG9ubHkgbW92ZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgc3BhY2UgaW4gdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIC8vIGJlY2F1c2UgdGhhdCBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhbiBFbW90aW9uIDExIHNlcnZlci1zaWRlIHJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgICAvLyB3aGlsZSB3ZSB3aWxsIGFscmVhZHkgaWdub3JlIEVtb3Rpb24gMTEgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGJlY2F1c2Ugb2YgdGhlIDpub3QoW2RhdGEtc10pIHBhcnQgaW4gdGhlIHNlbGVjdG9yXG4gICAgICAvLyBFbW90aW9uIDEwIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBkaWQgbm90IGhhdmUgZGF0YS1zIChidXQgaW1wb3J0YW50bHkgZGlkIG5vdCBoYXZlIGEgc3BhY2UgaW4gdGhlaXIgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBzbyBjaGVja2luZyBmb3IgdGhlIHNwYWNlIGVuc3VyZXMgdGhhdCBsb2FkaW5nIEVtb3Rpb24gMTEgYWZ0ZXIgRW1vdGlvbiAxMCBoYXMgaW5zZXJ0ZWQgc29tZSBzdHlsZXNcbiAgICAgIC8vIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgRW1vdGlvbiAxMCBzdHlsZXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICB2YXIgZGF0YUVtb3Rpb25BdHRyaWJ1dGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJyk7XG5cbiAgICAgIGlmIChkYXRhRW1vdGlvbkF0dHJpYnV0ZS5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9OyAvLyAkRmxvd0ZpeE1lXG5cbiAgdmFyIGNvbnRhaW5lcjtcbiAgdmFyIG5vZGVzVG9IeWRyYXRlID0gW107XG5cbiAge1xuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyIHx8IGRvY3VtZW50LmhlYWQ7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCggLy8gdGhpcyBtZWFucyB3ZSB3aWxsIGlnbm9yZSBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGEgc3BhY2UgaW4gdGhlbSB3aGljaFxuICAgIC8vIG1lYW5zIHRoYXQgdGhlIHN0eWxlIGVsZW1lbnRzIHdlJ3JlIGxvb2tpbmcgYXQgYXJlIG9ubHkgRW1vdGlvbiAxMSBzZXJ2ZXItcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXj1cXFwiXCIgKyBrZXkgKyBcIiBcXFwiXVwiKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvblwiKS5zcGxpdCgnICcpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXR0cmliLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydGVkW2F0dHJpYltpXV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2Rlc1RvSHlkcmF0ZS5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgdmFyIG9tbmlwcmVzZW50UGx1Z2lucyA9IFtjb21wYXQsIHJlbW92ZUxhYmVsXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIG9tbmlwcmVzZW50UGx1Z2lucy5wdXNoKGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKHtcbiAgICAgIGdldCBjb21wYXQoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5jb21wYXQ7XG4gICAgICB9XG5cbiAgICB9KSwgaW5jb3JyZWN0SW1wb3J0QWxhcm0pO1xuICB9XG5cbiAge1xuICAgIHZhciBjdXJyZW50U2hlZXQ7XG4gICAgdmFyIGZpbmFsaXppbmdQbHVnaW5zID0gW3N0cmluZ2lmeSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQucm9vdCkge1xuICAgICAgICBpZiAoZWxlbWVudFtcInJldHVyblwiXSkge1xuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudFtcInJldHVyblwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnR5cGUgIT09IENPTU1FTlQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgZW1wdHkgcnVsZSBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudHNcbiAgICAgICAgICAvLyBzbyBAZW1vdGlvbi9qZXN0IGNhbiBncmFiIGBrZXlgIGZyb20gdGhlIChKUylET00gZm9yIGNhY2hlcyB3aXRob3V0IGFueSBydWxlcyBpbnNlcnRlZCB5ZXRcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnQudmFsdWUgKyBcInt9XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VycmVudFNoZWV0ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgc2VyaWFsaXplZC5tYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yID8gc2VsZWN0b3IgKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCIgOiBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kXG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8oYXR0cnxjb3VudGVycz98dXJsfCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIEBlbW90aW9uL2JhYmVsLXBsdWdpbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0pICsgXCI7XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBAZW1vdGlvbi9iYWJlbC1wbHVnaW4uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vaXNvbGF0ZWQtaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MtZG8tbm90LXVzZS10aGlzLWluLXlvdXItY29kZS9kaXN0L2Vtb3Rpb24tcmVhY3QtaXNvbGF0ZWQtaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MtZG8tbm90LXVzZS10aGlzLWluLXlvdXItY29kZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG52YXIgVGhlbWVDb250ZXh0ID0gLyogI19fUFVSRV9fICovY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uVGhlbWVDb250ZXh0Jztcbn1cblxudmFyIHVzZVRoZW1lID0gZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59O1xuXG52YXIgZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSkge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgbWVyZ2VkVGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuIHRoZW1lPXsoKSA9PiAoe30pfSEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAodGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSBtYWtlIHlvdXIgdGhlbWUgcHJvcCBhIHBsYWluIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG59O1xuXG52YXIgY3JlYXRlQ2FjaGVXaXRoVGhlbWUgPSAvKiAjX19QVVJFX18gKi93ZWFrTWVtb2l6ZShmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICByZXR1cm4gd2Vha01lbW9pemUoZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgcmV0dXJuIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfSk7XG59KTtcbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb3BzLnRoZW1lICE9PSB0aGVtZSkge1xuICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpKTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIFdpdGhUaGVtZSA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKHJlbmRlcik7XG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiICsgY29tcG9uZW50TmFtZSArIFwiKVwiO1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xufVxuXG4vLyB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLCBidXQgbm90IGZvciBDU1NcblxudmFyIHNhbml0aXplSWRlbnRpZmllciA9IGZ1bmN0aW9uIHNhbml0aXplSWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBpZGVudGlmaWVyLnJlcGxhY2UoL1xcJC9nLCAnLScpO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIC8vIGNocm9tZVxuICAgICAgdmFyIG1hdGNoID0gZXJyb3Iuc3RhY2subWF0Y2goL2F0ICg/Ok9iamVjdFxcLnxNb2R1bGVcXC58KSg/OmpzeHxjcmVhdGVFbW90aW9uUHJvcHMpLipcXG5cXHMrYXQgKD86T2JqZWN0XFwufCkoW0EtWl1bQS1aYS16MC05JF0rKSAvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAvLyBzYWZhcmkgYW5kIGZpcmVmb3hcbiAgICAgICAgbWF0Y2ggPSBlcnJvci5zdGFjay5tYXRjaCgvLipcXG4oW0EtWl1bQS1aYS16MC05JF0rKUAvKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gc2FuaXRpemVJZGVudGlmaWVyKG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyk7XG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KHR5cGUsIG5ld1Byb3BzKTtcblxuICByZXR1cm4gZWxlO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIgYXMgQywgRW1vdGlvbiBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtOTkyODliMjEuYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTk5Mjg5YjIxLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9pc29sYXRlZC1ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy1kby1ub3QtdXNlLXRoaXMtaW4teW91ci1jb2RlL2Rpc3QvZW1vdGlvbi1yZWFjdC1pc29sYXRlZC1ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy1kby1ub3QtdXNlLXRoaXMtaW4teW91ci1jb2RlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGluc2VydFN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuXG52YXIgcGtnID0ge1xuXHRuYW1lOiBcIkBlbW90aW9uL3JlYWN0XCIsXG5cdHZlcnNpb246IFwiMTEuNC4xXCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmNqcy5qc1wiLFxuXHRcdFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIlxuXHR9LFxuXHR0eXBlczogXCJ0eXBlcy9pbmRleC5kLnRzXCIsXG5cdGZpbGVzOiBbXG5cdFx0XCJzcmNcIixcblx0XHRcImRpc3RcIixcblx0XHRcImpzeC1ydW50aW1lXCIsXG5cdFx0XCJqc3gtZGV2LXJ1bnRpbWVcIixcblx0XHRcImlzb2xhdGVkLWhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLWRvLW5vdC11c2UtdGhpcy1pbi15b3VyLWNvZGVcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJtaXRjaGVsbGhhbWlsdG9uIDxtaXRjaGVsbEBtaXRjaGVsbGhhbWlsdG9uLm1lPlwiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjEzLjEwXCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS40LjBcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjAuMlwiLFxuXHRcdFwiQGVtb3Rpb24vc2hlZXRcIjogXCJeMS4wLjJcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4yLjVcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4wLjBcIixcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH0sXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4xMy4xMFwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMS4zXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS40LjBcIixcblx0XHRcIkBlbW90aW9uL3N0eWxlZFwiOiBcIjExLjMuMFwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE2LjkuMTFcIixcblx0XHRkdHNsaW50OiBcIl4wLjMuMFwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCJcblx0fSxcblx0cmVwb3NpdG9yeTogXCJodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdFwiLFxuXHRwdWJsaXNoQ29uZmlnOiB7XG5cdFx0YWNjZXNzOiBcInB1YmxpY1wiXG5cdH0sXG5cdFwidW1kOm1haW5cIjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QudW1kLm1pbi5qc1wiLFxuXHRwcmVjb25zdHJ1Y3Q6IHtcblx0XHRlbnRyeXBvaW50czogW1xuXHRcdFx0XCIuL2luZGV4LmpzXCIsXG5cdFx0XHRcIi4vanN4LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9pc29sYXRlZC1ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy1kby1ub3QtdXNlLXRoaXMtaW4teW91ci1jb2RlLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCJcblx0fVxufTtcblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ2NzcycpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgY3JlYXRlRWxlbWVudEFyZ0FycmF5ID0gbmV3IEFycmF5KGFyZ3NMZW5ndGgpO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBFbW90aW9uO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMV0gPSBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlRWxlbWVudEFyZ0FycmF5W2ldID0gYXJnc1tpXTtcbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseShudWxsLCBjcmVhdGVFbGVtZW50QXJnQXJyYXkpO1xufTtcblxudmFyIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IGZhbHNlOyAvLyBtYWludGFpbiBwbGFjZSBvdmVyIHJlcmVuZGVycy5cbi8vIGluaXRpYWwgcmVuZGVyIGZyb20gYnJvd3NlciwgaW5zZXJ0QmVmb3JlIGNvbnRleHQuc2hlZXQudGFnc1swXSBvciBpZiBhIHN0eWxlIGhhc24ndCBiZWVuIGluc2VydGVkIHRoZXJlIHlldCwgYXBwZW5kQ2hpbGRcbi8vIGluaXRpYWwgY2xpZW50LXNpZGUgcmVuZGVyIGZyb20gU1NSLCB1c2UgcGxhY2Ugb2YgaHlkcmF0aW5nIHRhZ1xuXG52YXIgR2xvYmFsID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc3R5bGVzXSwgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuICAvLyBidXQgaXQgaXMgYmFzZWQgb24gYSBjb25zdGFudCB0aGF0IHdpbGwgbmV2ZXIgY2hhbmdlIGF0IHJ1bnRpbWVcbiAgLy8gaXQncyBlZmZlY3RpdmVseSBsaWtlIGhhdmluZyB0d28gaW1wbGVtZW50YXRpb25zIGFuZCBzd2l0Y2hpbmcgdGhlbSBvdXRcbiAgLy8gc28gaXQncyBub3QgYWN0dWFsbHkgYnJlYWtpbmcgYW55dGhpbmdcblxuXG4gIHZhciBzaGVldFJlZiA9IHVzZVJlZigpO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBrZXkgPSBjYWNoZS5rZXkgKyBcIi1nbG9iYWxcIjtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgQ2xhc3NOYW1lcyA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICB2YXIgaGFzUmVuZGVyZWQgPSBmYWxzZTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG5cbiAgICB7XG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3ggY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgdmFyIGNvbnRlbnQgPSB7XG4gICAgY3NzOiBjc3MsXG4gICAgY3g6IGN4LFxuICAgIHRoZW1lOiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgfTtcbiAgdmFyIGVsZSA9IHByb3BzLmNoaWxkcmVuKGNvbnRlbnQpO1xuICBoYXNSZW5kZXJlZCA9IHRydWU7XG5cbiAgcmV0dXJuIGVsZTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNyBmb3Igc29tZSByZWFzb24gSmVzdCBldmFsdWF0ZXMgbW9kdWxlcyB0d2ljZSBpZiBzb21lIGNvbnN1bWluZyBtb2R1bGUgZ2V0cyBtb2NrZWQgd2l0aCBqZXN0Lm1vY2tcblxuICB2YXIgaXNKZXN0ID0gdHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnO1xuXG4gIGlmIChpc0Jyb3dzZXIgJiYgIWlzSmVzdCkge1xuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gaXNCcm93c2VyID8gd2luZG93IDogZ2xvYmFsO1xuICAgIHZhciBnbG9iYWxLZXkgPSBcIl9fRU1PVElPTl9SRUFDVF9cIiArIHBrZy52ZXJzaW9uLnNwbGl0KCcuJylbMF0gKyBcIl9fXCI7XG5cbiAgICBpZiAoZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBhcmUgbG9hZGluZyBAZW1vdGlvbi9yZWFjdCB3aGVuIGl0IGlzIGFscmVhZHkgbG9hZGVkLiBSdW5uaW5nICcgKyAnbXVsdGlwbGUgaW5zdGFuY2VzIG1heSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4gaGFwcGVuIGlmIG11bHRpcGxlICcgKyAndmVyc2lvbnMgYXJlIHVzZWQsIG9yIGlmIG11bHRpcGxlIGJ1aWxkcyBvZiB0aGUgc2FtZSB2ZXJzaW9uIGFyZSAnICsgJ3VzZWQuJyk7XG4gICAgfVxuXG4gICAgZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGpzeCBhcyBjcmVhdGVFbGVtZW50LCBjc3MsIGpzeCwga2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcblxudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IGlzUHJvcFZhbGlkO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnO1xufTtcblxudmFyIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IGZ1bmN0aW9uIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTYgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG59O1xudmFyIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMgPSBmdW5jdGlvbiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKSB7XG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcDtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPyBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wKHByb3BOYW1lKSAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3A7XG4gIH1cblxuICBpZiAodHlwZW9mIHNob3VsZEZvcndhcmRQcm9wICE9PSAnZnVuY3Rpb24nICYmIGlzUmVhbCkge1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcDtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRGb3J3YXJkUHJvcDtcbn07XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG5cbnZhciBjcmVhdGVTdHlsZWQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBhIHN0eWxlZCBlbGVtZW50IHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC5cXG5Zb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNSZWFsID0gdGFnLl9fZW1vdGlvbl9yZWFsID09PSB0YWc7XG4gIHZhciBiYXNlVGFnID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWc7XG4gIHZhciBpZGVudGlmaWVyTmFtZTtcbiAgdmFyIHRhcmdldENsYXNzTmFtZTtcblxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWRlbnRpZmllck5hbWUgPSBvcHRpb25zLmxhYmVsO1xuICAgIHRhcmdldENsYXNzTmFtZSA9IG9wdGlvbnMudGFyZ2V0O1xuICB9XG5cbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wID0gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCk7XG4gIHZhciBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCB8fCBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoYmFzZVRhZyk7XG4gIHZhciBzaG91bGRVc2VBcyA9ICFkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoJ2FzJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0eWxlcyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkID8gdGFnLl9fZW1vdGlvbl9zdHlsZXMuc2xpY2UoMCkgOiBbXTtcblxuICAgIGlmIChpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaChcImxhYmVsOlwiICsgaWRlbnRpZmllck5hbWUgKyBcIjtcIik7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NbMF0gPT0gbnVsbCB8fCBhcmdzWzBdLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaC5hcHBseShzdHlsZXMsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbMF1bMF0pO1xuICAgICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1baV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzLnB1c2goYXJnc1tpXSwgYXJnc1swXVtpXSk7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lOiB3ZSBuZWVkIHRvIGNhc3QgU3RhdGVsZXNzRnVuY3Rpb25hbENvbXBvbmVudCB0byBvdXIgUHJpdmF0ZVN0eWxlZENvbXBvbmVudCBjbGFzc1xuXG5cbiAgICB2YXIgU3R5bGVkID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgICAgIHZhciBmaW5hbFRhZyA9IHNob3VsZFVzZUFzICYmIHByb3BzLmFzIHx8IGJhc2VUYWc7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuICAgICAgdmFyIG1lcmdlZFByb3BzID0gcHJvcHM7XG5cbiAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgIG1lcmdlZFByb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRQcm9wcy50aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgY2xhc3NJbnRlcnBvbGF0aW9ucywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucyksIGNhY2hlLnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgIHZhciBydWxlcyA9IGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgdHlwZW9mIGZpbmFsVGFnID09PSAnc3RyaW5nJyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChmaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHZhciBlbGUgPSAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChmaW5hbFRhZywgbmV3UHJvcHMpO1xuXG4gICAgICByZXR1cm4gZWxlO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBuZXdTdHlsZWQ7XG4iLCIvKiogQGxpY2Vuc2UgTVVJIHY1LjAuMVxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcblxuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnOyAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cblxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldHNcbiAgbWQ6IDkwMCxcbiAgLy8gc21hbGwgbGFwdG9wXG4gIGxnOiAxMjAwLFxuICAvLyBkZXNrdG9wXG4gIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlbnNcblxufTtcbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcblxuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSBicmVha3BvaW50c0lucHV0ID09IG51bGwgPyB2b2lkIDAgOiAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcblxuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYmFzZVxufSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cblxuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzO1xuICAgIH1cblxuICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbCwgb2JqKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJvcCxcbiAgICBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMucHJvcCxcbiAgICB0aGVtZUtleSxcbiAgICB0cmFuc2Zvcm1cbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcblxuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgIFtwcm9wXTogcmVzcG9uc2l2ZVByb3BUeXBlXG4gIH0gOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0ge307XG4gIHJldHVybiBhcmcgPT4ge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5jb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IGRlZmF1bHRWYWx1ZTtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gYC0ke3RyYW5zZm9ybWVkfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBwcm9wVmFsdWUgPT4gY3NzUHJvcGVydGllcy5yZWR1Y2UoKGFjYywgY3NzUHJvcGVydHkpID0+IHtcbiAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gZ2V0Qm9yZGVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGAke3ZhbHVlfXB4IHNvbGlkYDtcbn1cblxuZXhwb3J0IGNvbnN0IGJvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3AnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b20nLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbUNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5ib3JkZXJSYWRpdXMsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGRpc3BsYXlQcmludCA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXlQcmludCcsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgIH1cbiAgfSlcbn0pO1xuZXhwb3J0IGNvbnN0IGRpc3BsYXlSYXcgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5J1xufSk7XG5leHBvcnQgY29uc3Qgb3ZlcmZsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdvdmVyZmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRPdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRPdmVyZmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IHZpc2liaWxpdHkgPSBzdHlsZSh7XG4gIHByb3A6ICd2aXNpYmlsaXR5J1xufSk7XG5leHBvcnQgY29uc3Qgd2hpdGVTcGFjZSA9IHN0eWxlKHtcbiAgcHJvcDogJ3doaXRlU3BhY2UnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoZGlzcGxheVByaW50LCBkaXNwbGF5UmF3LCBvdmVyZmxvdywgdGV4dE92ZXJmbG93LCB2aXNpYmlsaXR5LCB3aGl0ZVNwYWNlKTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGZsZXhCYXNpcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhCYXNpcydcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhEaXJlY3Rpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4RGlyZWN0aW9uJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleFdyYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4V3JhcCdcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlDb250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUNvbnRlbnQnXG59KTtcbmV4cG9ydCBjb25zdCBhbGlnbkl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25JdGVtcydcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduQ29udGVudCA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduQ29udGVudCdcbn0pO1xuZXhwb3J0IGNvbnN0IG9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnb3JkZXInXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleCdcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhHcm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEdyb3cnXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4U2hyaW5rID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFNocmluaydcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduU2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduU2VsZidcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlJdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlJdGVtcydcbn0pO1xuZXhwb3J0IGNvbnN0IGp1c3RpZnlTZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeVNlbGYnXG59KTtcbmNvbnN0IGZsZXhib3ggPSBjb21wb3NlKGZsZXhCYXNpcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIGp1c3RpZnlDb250ZW50LCBhbGlnbkl0ZW1zLCBhbGlnbkNvbnRlbnQsIG9yZGVyLCBmbGV4LCBmbGV4R3JvdywgZmxleFNocmluaywgYWxpZ25TZWxmLCBqdXN0aWZ5SXRlbXMsIGp1c3RpZnlTZWxmKTtcbmV4cG9ydCBkZWZhdWx0IGZsZXhib3g7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgZ2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5nYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmNvbHVtbkdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIHJvd0dhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmNvbnN0IHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IHBvc2l0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAncG9zaXRpb24nXG59KTtcbmV4cG9ydCBjb25zdCB6SW5kZXggPSBzdHlsZSh7XG4gIHByb3A6ICd6SW5kZXgnLFxuICB0aGVtZUtleTogJ3pJbmRleCdcbn0pO1xuZXhwb3J0IGNvbnN0IHRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ3RvcCdcbn0pO1xuZXhwb3J0IGNvbnN0IHJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAncmlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCBib3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3R0b20nXG59KTtcbmV4cG9ydCBjb25zdCBsZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGVmdCdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShwb3NpdGlvbiwgekluZGV4LCB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmNvbnN0IGJveFNoYWRvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNoYWRvdycsXG4gIHRoZW1lS2V5OiAnc2hhZG93cydcbn0pO1xuZXhwb3J0IGRlZmF1bHQgYm94U2hhZG93OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgdmFsdWVzIGFzIGJyZWFrcG9pbnRzVmFsdWVzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSAmJiB2YWx1ZSAhPT0gMCA/IGAke3ZhbHVlICogMTAwfSVgIDogdmFsdWU7XG59XG5cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhXaWR0aCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLm1heFdpZHRoICE9PSB1bmRlZmluZWQgJiYgcHJvcHMubWF4V2lkdGggIT09IG51bGwpIHtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4ge1xuICAgICAgdmFyIF9wcm9wcyR0aGVtZSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyO1xuXG4gICAgICBjb25zdCBicmVha3BvaW50ID0gKChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kgPSBfcHJvcHMkdGhlbWUuYnJlYWtwb2ludHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pMiA9IF9wcm9wcyR0aGVtZSRicmVha3BvaS52YWx1ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyW3Byb3BWYWx1ZV0pIHx8IGJyZWFrcG9pbnRzVmFsdWVzW3Byb3BWYWx1ZV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludCB8fCB0cmFuc2Zvcm0ocHJvcFZhbHVlKVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbm1heFdpZHRoLmZpbHRlclByb3BzID0gWydtYXhXaWR0aCddO1xuZXhwb3J0IGNvbnN0IG1pbldpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWluV2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtaW5IZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3hTaXppbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaXppbmcnXG59KTtcbmNvbnN0IHNpemluZyA9IGNvbXBvc2Uod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGZvbnRGYW1pbHkgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250RmFtaWx5JyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFNpemUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U2l6ZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IGNvbnN0IGZvbnRTdHlsZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTdHlsZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IGNvbnN0IGZvbnRXZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250V2VpZ2h0JyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgbGV0dGVyU3BhY2luZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2xldHRlclNwYWNpbmcnXG59KTtcbmV4cG9ydCBjb25zdCBsaW5lSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGluZUhlaWdodCdcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRBbGlnbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRBbGlnbidcbn0pO1xuZXhwb3J0IGNvbnN0IHR5cG9ncmFwaHlWYXJpYW50ID0gc3R5bGUoe1xuICBwcm9wOiAndHlwb2dyYXBoeScsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5jb25zdCB0eXBvZ3JhcGh5ID0gY29tcG9zZSh0eXBvZ3JhcGh5VmFyaWFudCwgZm9udEZhbWlseSwgZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgdGV4dEFsaWduKTtcbmV4cG9ydCBkZWZhdWx0IHR5cG9ncmFwaHk7IiwiaW1wb3J0IGJvcmRlcnMgZnJvbSAnLi9ib3JkZXJzJztcbmltcG9ydCBkaXNwbGF5IGZyb20gJy4vZGlzcGxheSc7XG5pbXBvcnQgZmxleGJveCBmcm9tICcuL2ZsZXhib3gnO1xuaW1wb3J0IGdyaWQgZnJvbSAnLi9ncmlkJztcbmltcG9ydCBwb3NpdGlvbnMgZnJvbSAnLi9wb3NpdGlvbnMnO1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi9wYWxldHRlJztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgc2l6aW5nIGZyb20gJy4vc2l6aW5nJztcbmltcG9ydCBzcGFjaW5nIGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgdHlwb2dyYXBoeSBmcm9tICcuL3R5cG9ncmFwaHknO1xuY29uc3QgZmlsdGVyUHJvcHNNYXBwaW5nID0ge1xuICBib3JkZXJzOiBib3JkZXJzLmZpbHRlclByb3BzLFxuICBkaXNwbGF5OiBkaXNwbGF5LmZpbHRlclByb3BzLFxuICBmbGV4Ym94OiBmbGV4Ym94LmZpbHRlclByb3BzLFxuICBncmlkOiBncmlkLmZpbHRlclByb3BzLFxuICBwb3NpdGlvbnM6IHBvc2l0aW9ucy5maWx0ZXJQcm9wcyxcbiAgcGFsZXR0ZTogcGFsZXR0ZS5maWx0ZXJQcm9wcyxcbiAgc2hhZG93czogc2hhZG93cy5maWx0ZXJQcm9wcyxcbiAgc2l6aW5nOiBzaXppbmcuZmlsdGVyUHJvcHMsXG4gIHNwYWNpbmc6IHNwYWNpbmcuZmlsdGVyUHJvcHMsXG4gIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHkuZmlsdGVyUHJvcHNcbn07XG5jb25zdCBzdHlsZUZ1bmN0aW9uTWFwcGluZyA9IHtcbiAgYm9yZGVycyxcbiAgZGlzcGxheSxcbiAgZmxleGJveCxcbiAgZ3JpZCxcbiAgcG9zaXRpb25zLFxuICBwYWxldHRlLFxuICBzaGFkb3dzLFxuICBzaXppbmcsXG4gIHNwYWNpbmcsXG4gIHR5cG9ncmFwaHlcbn07XG5leHBvcnQgY29uc3QgcHJvcFRvU3R5bGVGdW5jdGlvbiA9IE9iamVjdC5rZXlzKGZpbHRlclByb3BzTWFwcGluZykucmVkdWNlKChhY2MsIHN0eWxlRm5OYW1lKSA9PiB7XG4gIGZpbHRlclByb3BzTWFwcGluZ1tzdHlsZUZuTmFtZV0uZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgYWNjW3Byb3BOYW1lXSA9IHN0eWxlRnVuY3Rpb25NYXBwaW5nW3N0eWxlRm5OYW1lXTtcbiAgfSk7XG4gIHJldHVybiBhY2M7XG59LCB7fSk7XG5cbmZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsdWUsIHRoZW1lKSB7XG4gIGNvbnN0IGlucHV0UHJvcHMgPSB7XG4gICAgW3Byb3BdOiB2YWx1ZSxcbiAgICB0aGVtZVxuICB9O1xuICBjb25zdCBzdHlsZUZ1bmN0aW9uID0gcHJvcFRvU3R5bGVGdW5jdGlvbltwcm9wXTtcbiAgcmV0dXJuIHN0eWxlRnVuY3Rpb24gPyBzdHlsZUZ1bmN0aW9uKGlucHV0UHJvcHMpIDoge1xuICAgIFtwcm9wXTogdmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGhlbWVWYWx1ZTsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi4vbWVyZ2UnO1xuaW1wb3J0IGdldFRoZW1lVmFsdWUsIHsgcHJvcFRvU3R5bGVGdW5jdGlvbiB9IGZyb20gJy4uL2dldFRoZW1lVmFsdWUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMgfSBmcm9tICcuLi9icmVha3BvaW50cyc7XG5cbmZ1bmN0aW9uIG9iamVjdHNIYXZlU2FtZUtleXMoLi4ub2JqZWN0cykge1xuICBjb25zdCBhbGxLZXlzID0gb2JqZWN0cy5yZWR1Y2UoKGtleXMsIG9iamVjdCkgPT4ga2V5cy5jb25jYXQoT2JqZWN0LmtleXMob2JqZWN0KSksIFtdKTtcbiAgY29uc3QgdW5pb24gPSBuZXcgU2V0KGFsbEtleXMpO1xuICByZXR1cm4gb2JqZWN0cy5ldmVyeShvYmplY3QgPT4gdW5pb24uc2l6ZSA9PT0gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvblN4KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBzeDogc3R5bGVzLFxuICAgIHRoZW1lID0ge31cbiAgfSA9IHByb3BzIHx8IHt9O1xuXG4gIGlmICghc3R5bGVzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzdHlsZXModGhlbWUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHlsZXMgIT09ICdvYmplY3QnKSB7XG4gICAgLy8gdmFsdWVcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpO1xuICBsZXQgY3NzID0gZW1wdHlCcmVha3BvaW50cztcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN0eWxlc1tzdHlsZUtleV0sIHRoZW1lKTtcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFRvU3R5bGVGdW5jdGlvbltzdHlsZUtleV0pIHtcbiAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgICAgIHRoZW1lXG4gICAgICAgIH0sIHZhbHVlLCB4ID0+ICh7XG4gICAgICAgICAgW3N0eWxlS2V5XTogeFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKG9iamVjdHNIYXZlU2FtZUtleXMoYnJlYWtwb2ludHNWYWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgc3g6IHZhbHVlLFxuICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGJyZWFrcG9pbnRzVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG59XG5cbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBwcm9wVG9TdHlsZUZ1bmN0aW9uIH0gZnJvbSAnLi4vZ2V0VGhlbWVWYWx1ZSc7XG5cbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN4OiBpblN4XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIHN4OiBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpXG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgdmFsdWVzID0ge1xuICAgICAgeHM6IDAsXG4gICAgICAvLyBwaG9uZVxuICAgICAgc206IDYwMCxcbiAgICAgIC8vIHRhYmxldHNcbiAgICAgIG1kOiA5MDAsXG4gICAgICAvLyBzbWFsbCBsYXB0b3BcbiAgICAgIGxnOiAxMjAwLFxuICAgICAgLy8gZGVza3RvcFxuICAgICAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuc1xuXG4gICAgfSxcbiAgICB1bml0ID0gJ3B4JyxcbiAgICBzdGVwID0gNVxuICB9ID0gYnJlYWtwb2ludHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnR9JHt1bml0fSkgYW5kIGAgKyBgKG1heC13aWR0aDokeyhlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4XV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA6IGVuZCkgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXMsXG4gICAgdmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIHVuaXRcbiAgfSwgb3RoZXIpO1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICcuLi9zcGFjaW5nJztcblxuLyogdHNsaW50OmVuYWJsZTp1bmlmaWVkLXNpZ25hdHVyZXMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0ID0gOCkge1xuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH0gLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbCN1c2FnZVxuXG5cbiAgY29uc3QgdHJhbnNmb3JtID0gY3JlYXRlVW5hcnlTcGFjaW5nKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG5cbiAgY29uc3Qgc3BhY2luZyA9ICguLi5hcmdzSW5wdXQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJnc0lucHV0Lmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgJHthcmdzSW5wdXQubGVuZ3RofWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG5cbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyBtdWlVc2VUaGVtZSB9IGZyb20gJ0BtdWkvcHJpdmF0ZS10aGVtaW5nJztcblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IG11aVVzZVRoZW1lKCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuY29uc3QgZ2V0U3R5bGVPdmVycmlkZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgaWYgKHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldFZhcmlhbnRTdHlsZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgbGV0IHZhcmlhbnRzID0gW107XG5cbiAgaWYgKHRoZW1lICYmIHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMgPSB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzO1xuICB9XG5cbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICBjb25zdCBrZXkgPSBwcm9wc1RvQ2xhc3NLZXkoZGVmaW5pdGlvbi5wcm9wcyk7XG4gICAgdmFyaWFudHNTdHlsZXNba2V5XSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH0pO1xuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHRoZW1lLCBuYW1lKSA9PiB7XG4gIHZhciBfdGhlbWUkY29tcG9uZW50cywgX3RoZW1lJGNvbXBvbmVudHMkbmFtO1xuXG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMkbmFtID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cyRuYW0udmFyaWFudHM7XG5cbiAgaWYgKHRoZW1lVmFyaWFudHMpIHtcbiAgICB0aGVtZVZhcmlhbnRzLmZvckVhY2godGhlbWVWYXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoZW1lVmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh0aGVtZVZhcmlhbnQucHJvcHMpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5cbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgIG92ZXJyaWRlc1Jlc29sdmVyXG4gICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQpOyAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuXG5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOiBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuXG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHN0eWxlc0FyZyA9PT0gJ2Z1bmN0aW9uJyA/IF9yZWYgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgIH0gPSBfcmVmLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZDIpO1xuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0FyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9IDogc3R5bGVzQXJnO1xuICAgICAgfSkgOiBbXTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gc3R5bGVBcmc7XG5cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBnZXRTdHlsZU92ZXJyaWRlcyhjb21wb25lbnROYW1lLCB0aGVtZSk7XG5cbiAgICAgICAgICBpZiAoc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIGdldFZhcmlhbnRTdHlsZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpLCB0aGVtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNraXBTeCkge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICB0aGVtZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpOyAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cblxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gWy4uLnN0eWxlQXJnLCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnLnJhdyA9IFsuLi5zdHlsZUFyZy5yYXcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZUFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSA9IF9yZWYyLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuXG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcblxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpOyAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgY29uc3QgZGVmYXVsdFByb3BzID0gdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHM7XG4gIGxldCBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChvdXRwdXRbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWUsXG4gIGRlZmF1bHRUaGVtZVxufSkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFByb3BzO1xufSIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgLnsxLCR7Y29sb3IubGVuZ3RoID49IDYgPyAyIDogMX19YCwgJ2cnKTtcbiAgbGV0IGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgY29uc3QgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBVbnN1cHBvcnRlZCBcXGAke2NvbG9yfVxcYCBjb2xvci5cblRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDksIGNvbG9yKSk7XG4gIH1cblxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcblxuICBpZiAodHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnICcpO1xuICAgIGNvbG9yU3BhY2UgPSB2YWx1ZXMuc2hpZnQoKTtcblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnN1YnN0cigxKTtcbiAgICB9XG5cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG5cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG5cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG5cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoKG4sIGkpID0+IGludFRvSGV4KGkgPT09IDMgPyBNYXRoLnJvdW5kKDI1NSAqIG4pIDogbikpLmpvaW4oJycpfWA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuXG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAodmFsID0+IHtcbiAgICBpZiAoY29sb3IudHlwZSAhPT0gJ2NvbG9yJykge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgIH1cblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcblxuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFscGhhKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEgfHwgY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2Ake2JyZWFrcG9pbnRzLnVwKCd4cycpfSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpYF06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCJjb25zdCBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiY29uc3QgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNmNWY1ZjUnLFxuICBBMjAwOiAnI2VlZWVlZScsXG4gIEE0MDA6ICcjYmRiZGJkJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJjb25zdCBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJjb25zdCBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJjb25zdCBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsImNvbnN0IGxpZ2h0Qmx1ZSA9IHtcbiAgNTA6ICcjZTFmNWZlJyxcbiAgMTAwOiAnI2IzZTVmYycsXG4gIDIwMDogJyM4MWQ0ZmEnLFxuICAzMDA6ICcjNGZjM2Y3JyxcbiAgNDAwOiAnIzI5YjZmNicsXG4gIDUwMDogJyMwM2E5ZjQnLFxuICA2MDA6ICcjMDM5YmU1JyxcbiAgNzAwOiAnIzAyODhkMScsXG4gIDgwMDogJyMwMjc3YmQnLFxuICA5MDA6ICcjMDE1NzliJyxcbiAgQTEwMDogJyM4MGQ4ZmYnLFxuICBBMjAwOiAnIzQwYzRmZicsXG4gIEE0MDA6ICcjMDBiMGZmJyxcbiAgQTcwMDogJyMwMDkxZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRCbHVlOyIsImNvbnN0IGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcHVycGxlIGZyb20gJy4uL2NvbG9ycy9wdXJwbGUnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgbGlnaHRCbHVlIGZyb20gJy4uL2NvbG9ycy9saWdodEJsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5leHBvcnQgY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgZGVmYXVsdDogJyMxMjEyMTInXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRQcmltYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogYmx1ZVsyMDBdLFxuICAgICAgbGlnaHQ6IGJsdWVbNTBdLFxuICAgICAgZGFyazogYmx1ZVs0MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBwdXJwbGVbNTAwXSxcbiAgICBsaWdodDogcHVycGxlWzMwMF0sXG4gICAgZGFyazogcHVycGxlWzcwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0SW5mbyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGxpZ2h0Qmx1ZVs0MDBdLFxuICAgICAgbGlnaHQ6IGxpZ2h0Qmx1ZVszMDBdLFxuICAgICAgZGFyazogbGlnaHRCbHVlWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogZ3JlZW5bODAwXSxcbiAgICBsaWdodDogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls5MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46ICcjRUQ2QzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICBjb25zdCB7XG4gICAgbW9kZSA9ICdsaWdodCcsXG4gICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgIHRvbmFsT2Zmc2V0ID0gMC4yXG4gIH0gPSBwYWxldHRlLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cblxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XG5cbmltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XG5cbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiBncmVlbixcbn0gfSk7XG5cbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcbn0gfSk7YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXRcbiAgfSwgbW9kZXNbbW9kZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICAgIHtcbiAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgIGZvbnRTaXplID0gMTQsXG4gICAgLy8gcHhcbiAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgYWxsVmFyaWFudHMsXG4gICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgfSA9IF9yZWYsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcblxuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuXG4gIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0IGNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIGAke01hdGgucm91bmQobWlsbGlzZWNvbmRzKX1tc2A7XG59XG5cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBjb25zdGFudCAqKiAwLjI1ICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbnMoaW5wdXRUcmFuc2l0aW9ucykge1xuICBjb25zdCBtZXJnZWRFYXNpbmcgPSBfZXh0ZW5kcyh7fSwgZWFzaW5nLCBpbnB1dFRyYW5zaXRpb25zLmVhc2luZyk7XG5cbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuXG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgZWFzaW5nOiBlYXNpbmdPcHRpb24gPSBtZXJnZWRFYXNpbmcuZWFzZUluT3V0LFxuICAgICAgZGVsYXkgPSAwXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzsgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cblxuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBnZXRBdXRvSGVpZ2h0RHVyYXRpb24sXG4gICAgY3JlYXRlXG4gIH0sIGlucHV0VHJhbnNpdGlvbnMsIHtcbiAgICBlYXNpbmc6IG1lcmdlZEVhc2luZyxcbiAgICBkdXJhdGlvbjogbWVyZ2VkRHVyYXRpb25cbiAgfSk7XG59IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgc3lzdGVtVGhlbWUuc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoc3RhdGVDbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG5cbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgeyB1c2VUaGVtZVByb3BzIGFzIHN5c3RlbVVzZVRoZW1lUHJvcHMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWVcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2NvcmUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2luYXRpb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBhZ2luYXRpb24nLCBzbG90KTtcbn1cbmNvbnN0IHBhZ2luYXRpb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFnaW5hdGlvbicsIFsncm9vdCcsICd1bCcsICdvdXRsaW5lZCcsICd0ZXh0J10pO1xuZXhwb3J0IGRlZmF1bHQgcGFnaW5hdGlvbkNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJvdW5kYXJ5Q291bnRcIiwgXCJjb21wb25lbnROYW1lXCIsIFwiY291bnRcIiwgXCJkZWZhdWx0UGFnZVwiLCBcImRpc2FibGVkXCIsIFwiaGlkZU5leHRCdXR0b25cIiwgXCJoaWRlUHJldkJ1dHRvblwiLCBcIm9uQ2hhbmdlXCIsIFwicGFnZVwiLCBcInNob3dGaXJzdEJ1dHRvblwiLCBcInNob3dMYXN0QnV0dG9uXCIsIFwic2libGluZ0NvdW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlQ29udHJvbGxlZCBhcyB1c2VDb250cm9sbGVkIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VQYWdpbmF0aW9uKHByb3BzID0ge30pIHtcbiAgLy8ga2VlcCBkZWZhdWx0IHZhbHVlcyBpbiBzeW5jIHdpdGggQGRlZmF1bHQgdGFncyBpbiBQYWdpbmF0aW9uLnByb3BUeXBlc1xuICBjb25zdCB7XG4gICAgYm91bmRhcnlDb3VudCA9IDEsXG4gICAgY29tcG9uZW50TmFtZSA9ICd1c2VQYWdpbmF0aW9uJyxcbiAgICBjb3VudCA9IDEsXG4gICAgZGVmYXVsdFBhZ2UgPSAxLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgaGlkZU5leHRCdXR0b24gPSBmYWxzZSxcbiAgICBoaWRlUHJldkJ1dHRvbiA9IGZhbHNlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgcGFnZTogcGFnZVByb3AsXG4gICAgc2hvd0ZpcnN0QnV0dG9uID0gZmFsc2UsXG4gICAgc2hvd0xhc3RCdXR0b24gPSBmYWxzZSxcbiAgICBzaWJsaW5nQ291bnQgPSAxXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBbcGFnZSwgc2V0UGFnZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHBhZ2VQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRQYWdlLFxuICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgc3RhdGU6ICdwYWdlJ1xuICB9KTtcblxuICBjb25zdCBoYW5kbGVDbGljayA9IChldmVudCwgdmFsdWUpID0+IHtcbiAgICBpZiAoIXBhZ2VQcm9wKSB7XG4gICAgICBzZXRQYWdlU3RhdGUodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChoYW5kbGVDaGFuZ2UpIHtcbiAgICAgIGhhbmRsZUNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cbiAgfTsgLy8gaHR0cHM6Ly9kZXYudG8vbmFtaXJzYWIvY29tbWVudC8yMDUwXG5cblxuICBjb25zdCByYW5nZSA9IChzdGFydCwgZW5kKSA9PiB7XG4gICAgY29uc3QgbGVuZ3RoID0gZW5kIC0gc3RhcnQgKyAxO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHtcbiAgICAgIGxlbmd0aFxuICAgIH0sIChfLCBpKSA9PiBzdGFydCArIGkpO1xuICB9O1xuXG4gIGNvbnN0IHN0YXJ0UGFnZXMgPSByYW5nZSgxLCBNYXRoLm1pbihib3VuZGFyeUNvdW50LCBjb3VudCkpO1xuICBjb25zdCBlbmRQYWdlcyA9IHJhbmdlKE1hdGgubWF4KGNvdW50IC0gYm91bmRhcnlDb3VudCArIDEsIGJvdW5kYXJ5Q291bnQgKyAxKSwgY291bnQpO1xuICBjb25zdCBzaWJsaW5nc1N0YXJ0ID0gTWF0aC5tYXgoTWF0aC5taW4oIC8vIE5hdHVyYWwgc3RhcnRcbiAgcGFnZSAtIHNpYmxpbmdDb3VudCwgLy8gTG93ZXIgYm91bmRhcnkgd2hlbiBwYWdlIGlzIGhpZ2hcbiAgY291bnQgLSBib3VuZGFyeUNvdW50IC0gc2libGluZ0NvdW50ICogMiAtIDEpLCAvLyBHcmVhdGVyIHRoYW4gc3RhcnRQYWdlc1xuICBib3VuZGFyeUNvdW50ICsgMik7XG4gIGNvbnN0IHNpYmxpbmdzRW5kID0gTWF0aC5taW4oTWF0aC5tYXgoIC8vIE5hdHVyYWwgZW5kXG4gIHBhZ2UgKyBzaWJsaW5nQ291bnQsIC8vIFVwcGVyIGJvdW5kYXJ5IHdoZW4gcGFnZSBpcyBsb3dcbiAgYm91bmRhcnlDb3VudCArIHNpYmxpbmdDb3VudCAqIDIgKyAyKSwgLy8gTGVzcyB0aGFuIGVuZFBhZ2VzXG4gIGVuZFBhZ2VzLmxlbmd0aCA+IDAgPyBlbmRQYWdlc1swXSAtIDIgOiBjb3VudCAtIDEpOyAvLyBCYXNpYyBsaXN0IG9mIGl0ZW1zIHRvIHJlbmRlclxuICAvLyBlLmcuIGl0ZW1MaXN0ID0gWydmaXJzdCcsICdwcmV2aW91cycsIDEsICdlbGxpcHNpcycsIDQsIDUsIDYsICdlbGxpcHNpcycsIDEwLCAnbmV4dCcsICdsYXN0J11cblxuICBjb25zdCBpdGVtTGlzdCA9IFsuLi4oc2hvd0ZpcnN0QnV0dG9uID8gWydmaXJzdCddIDogW10pLCAuLi4oaGlkZVByZXZCdXR0b24gPyBbXSA6IFsncHJldmlvdXMnXSksIC4uLnN0YXJ0UGFnZXMsIC8vIFN0YXJ0IGVsbGlwc2lzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAuLi4oc2libGluZ3NTdGFydCA+IGJvdW5kYXJ5Q291bnQgKyAyID8gWydzdGFydC1lbGxpcHNpcyddIDogYm91bmRhcnlDb3VudCArIDEgPCBjb3VudCAtIGJvdW5kYXJ5Q291bnQgPyBbYm91bmRhcnlDb3VudCArIDFdIDogW10pLCAvLyBTaWJsaW5nIHBhZ2VzXG4gIC4uLnJhbmdlKHNpYmxpbmdzU3RhcnQsIHNpYmxpbmdzRW5kKSwgLy8gRW5kIGVsbGlwc2lzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAuLi4oc2libGluZ3NFbmQgPCBjb3VudCAtIGJvdW5kYXJ5Q291bnQgLSAxID8gWydlbmQtZWxsaXBzaXMnXSA6IGNvdW50IC0gYm91bmRhcnlDb3VudCA+IGJvdW5kYXJ5Q291bnQgPyBbY291bnQgLSBib3VuZGFyeUNvdW50XSA6IFtdKSwgLi4uZW5kUGFnZXMsIC4uLihoaWRlTmV4dEJ1dHRvbiA/IFtdIDogWyduZXh0J10pLCAuLi4oc2hvd0xhc3RCdXR0b24gPyBbJ2xhc3QnXSA6IFtdKV07IC8vIE1hcCB0aGUgYnV0dG9uIHR5cGUgdG8gaXRzIHBhZ2UgbnVtYmVyXG5cbiAgY29uc3QgYnV0dG9uUGFnZSA9IHR5cGUgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnZmlyc3QnOlxuICAgICAgICByZXR1cm4gMTtcblxuICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICByZXR1cm4gcGFnZSAtIDE7XG5cbiAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICByZXR1cm4gcGFnZSArIDE7XG5cbiAgICAgIGNhc2UgJ2xhc3QnOlxuICAgICAgICByZXR1cm4gY291bnQ7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTsgLy8gQ29udmVydCB0aGUgYmFzaWMgaXRlbSBsaXN0IHRvIFBhZ2luYXRpb25JdGVtIHByb3BzIG9iamVjdHNcblxuXG4gIGNvbnN0IGl0ZW1zID0gaXRlbUxpc3QubWFwKGl0ZW0gPT4ge1xuICAgIHJldHVybiB0eXBlb2YgaXRlbSA9PT0gJ251bWJlcicgPyB7XG4gICAgICBvbkNsaWNrOiBldmVudCA9PiB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGV2ZW50LCBpdGVtKTtcbiAgICAgIH0sXG4gICAgICB0eXBlOiAncGFnZScsXG4gICAgICBwYWdlOiBpdGVtLFxuICAgICAgc2VsZWN0ZWQ6IGl0ZW0gPT09IHBhZ2UsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgICdhcmlhLWN1cnJlbnQnOiBpdGVtID09PSBwYWdlID8gJ3RydWUnIDogdW5kZWZpbmVkXG4gICAgfSA6IHtcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZXZlbnQsIGJ1dHRvblBhZ2UoaXRlbSkpO1xuICAgICAgfSxcbiAgICAgIHR5cGU6IGl0ZW0sXG4gICAgICBwYWdlOiBidXR0b25QYWdlKGl0ZW0pLFxuICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkIHx8IGl0ZW0uaW5kZXhPZignZWxsaXBzaXMnKSA9PT0gLTEgJiYgKGl0ZW0gPT09ICduZXh0JyB8fCBpdGVtID09PSAnbGFzdCcgPyBwYWdlID49IGNvdW50IDogcGFnZSA8PSAxKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGl0ZW1zXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnaW5hdGlvbkl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBhZ2luYXRpb25JdGVtJywgc2xvdCk7XG59XG5jb25zdCBwYWdpbmF0aW9uSXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlQYWdpbmF0aW9uSXRlbScsIFsncm9vdCcsICdwYWdlJywgJ3NpemVTbWFsbCcsICdzaXplTGFyZ2UnLCAndGV4dCcsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ291dGxpbmVkJywgJ291dGxpbmVkUHJpbWFyeScsICdvdXRsaW5lZFNlY29uZGFyeScsICdyb3VuZGVkJywgJ2VsbGlwc2lzJywgJ2ZpcnN0TGFzdCcsICdwcmV2aW91c05leHQnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ3NlbGVjdGVkJywgJ2ljb24nXSk7XG5leHBvcnQgZGVmYXVsdCBwYWdpbmF0aW9uSXRlbUNsYXNzZXM7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgdXNlVGhlbWVTeXN0ZW0gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lU3lzdGVtKGRlZmF1bHRUaGVtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuXG4gIGlmICghaW5Qcm9wICYmICFsZWF2aW5nKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9jb3JlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3VjaFJpcHBsZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVG91Y2hSaXBwbGUnLCBzbG90KTtcbn1cbmNvbnN0IHRvdWNoUmlwcGxlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRvdWNoUmlwcGxlJywgWydyb290JywgJ3JpcHBsZScsICdyaXBwbGVWaXNpYmxlJywgJ3JpcHBsZVB1bHNhdGUnLCAnY2hpbGQnLCAnY2hpbGRMZWF2aW5nJywgJ2NoaWxkUHVsc2F0ZSddKTtcbmV4cG9ydCBkZWZhdWx0IHRvdWNoUmlwcGxlQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXTtcblxubGV0IF8gPSB0ID0+IHQsXG4gICAgX3QsXG4gICAgX3QyLFxuICAgIF90MyxcbiAgICBfdDQ7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xuaW1wb3J0IHRvdWNoUmlwcGxlQ2xhc3NlcyBmcm9tICcuL3RvdWNoUmlwcGxlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgY29uc3QgREVMQVlfUklQUExFID0gODA7XG5jb25zdCBlbnRlcktleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIG9wYWNpdHk6IDAuMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgb3BhY2l0eTogMC4zO1xuICB9XG5gKSk7XG5jb25zdCBleGl0S2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbmApKTtcbmNvbnN0IHB1bHNhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG5cbiAgNTAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuYCkpO1xuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBza2lwU3g6IHRydWVcbn0pKHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB6SW5kZXg6IDAsXG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbn0pOyAvLyBUaGlzIGBzdHlsZWQoKWAgZnVuY3Rpb24gaW52b2tlcyBrZXlmcmFtZXMuIGBzdHlsZWQtY29tcG9uZW50c2Agb25seSBzdXBwb3J0cyBrZXlmcmFtZXNcbi8vIGluIHN0cmluZyB0ZW1wbGF0ZXMuIERvIG5vdCBjb252ZXJ0IHRoZXNlIHN0eWxlcyBpbiBKUyBvYmplY3QgYXMgaXQgd2lsbCBicmVhay5cblxuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUmlwcGxlID0gc3R5bGVkKFJpcHBsZSwge1xuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnLFxuICBzbG90OiAnUmlwcGxlJ1xufSkoX3Q0IHx8IChfdDQgPSBfYFxuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgJi4kezB9IHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJi4kezB9IHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIGxlZnQ6IDBweDtcbiAgICB0b3A6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICBhbmltYXRpb24tZGVsYXk6IDIwMG1zO1xuICB9XG5gKSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUsIGVudGVyS2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcsIGV4aXRLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlLCBwdWxzYXRlS2V5ZnJhbWUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqXG4gKiBUT0RPIHY1OiBNYWtlIHByaXZhdGVcbiAqL1xuXG5jb25zdCBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNlbnRlcjogY2VudGVyUHJvcCA9IGZhbHNlLFxuICAgIGNsYXNzZXMgPSB7fSxcbiAgICBjbGFzc05hbWVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IFtyaXBwbGVzLCBzZXRSaXBwbGVzXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTsgLy8gVXNlZCB0byBmaWx0ZXIgb3V0IG1vdXNlIGVtdWxhdGVkIGV2ZW50cyBvbiBtb2JpbGUuXG5cbiAgY29uc3QgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgY29uc3Qgc3RhcnRUaW1lciA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cblxuICBjb25zdCBzdGFydFRpbWVyQ29tbWl0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgY29uc3Qgc3RhcnRDb21taXQgPSBSZWFjdC51c2VDYWxsYmFjayhwYXJhbXMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHB1bHNhdGUsXG4gICAgICByaXBwbGVYLFxuICAgICAgcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemUsXG4gICAgICBjYlxuICAgIH0gPSBwYXJhbXM7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IFsuLi5vbGRSaXBwbGVzLCAvKiNfX1BVUkVfXyovX2pzeChUb3VjaFJpcHBsZVJpcHBsZSwge1xuICAgICAgY2xhc3Nlczoge1xuICAgICAgICByaXBwbGU6IGNsc3goY2xhc3Nlcy5yaXBwbGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGUpLFxuICAgICAgICByaXBwbGVWaXNpYmxlOiBjbHN4KGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUpLFxuICAgICAgICByaXBwbGVQdWxzYXRlOiBjbHN4KGNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUpLFxuICAgICAgICBjaGlsZDogY2xzeChjbGFzc2VzLmNoaWxkLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQpLFxuICAgICAgICBjaGlsZExlYXZpbmc6IGNsc3goY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcpLFxuICAgICAgICBjaGlsZFB1bHNhdGU6IGNsc3goY2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZFB1bHNhdGUpXG4gICAgICB9LFxuICAgICAgdGltZW91dDogRFVSQVRJT04sXG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgfSwgbmV4dEtleS5jdXJyZW50KV0pO1xuICAgIG5leHRLZXkuY3VycmVudCArPSAxO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW2NsYXNzZXNdKTtcbiAgY29uc3Qgc3RhcnQgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQgPSB7fSwgb3B0aW9ucyA9IHt9LCBjYikgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHB1bHNhdGUgPSBmYWxzZSxcbiAgICAgIGNlbnRlciA9IGNlbnRlclByb3AgfHwgb3B0aW9ucy5wdWxzYXRlLFxuICAgICAgZmFrZUVsZW1lbnQgPSBmYWxzZSAvLyBGb3IgdGVzdCBwdXJwb3Nlc1xuXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBjb250YWluZXIuY3VycmVudDtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgbGV0IHJpcHBsZVg7XG4gICAgbGV0IHJpcHBsZVk7XG4gICAgbGV0IHJpcHBsZVNpemU7XG5cbiAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjbGllbnRYLFxuICAgICAgICBjbGllbnRZXG4gICAgICB9ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudDtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTsgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cblxuICAgICAgaWYgKHJpcHBsZVNpemUgJSAyID09PSAwKSB7XG4gICAgICAgIHJpcHBsZVNpemUgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgY29uc3Qgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoc2l6ZVggKiogMiArIHNpemVZICoqIDIpO1xuICAgIH0gLy8gVG91Y2hlIGRldmljZXNcblxuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9OyAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuXG5cbiAgICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgREVMQVlfUklQUExFKTsgLy8gV2UgaGF2ZSB0byBtYWtlIGEgdHJhZGVvZmYgd2l0aCB0aGlzIHZhbHVlLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgIHB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgIGNiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjZW50ZXJQcm9wLCBzdGFydENvbW1pdF0pO1xuICBjb25zdCBwdWxzYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHN0YXJ0KHt9LCB7XG4gICAgICBwdWxzYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0sIFtzdGFydF0pO1xuICBjb25zdCBzdG9wID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50LCBjYikgPT4ge1xuICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3RvcChldmVudCwgY2IpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4ge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIHB1bHNhdGUsXG4gICAgc3RhcnQsXG4gICAgc3RvcFxuICB9KSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb3VjaFJpcHBsZVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCB0b3VjaFJpcHBsZUNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgIGV4aXQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogcmlwcGxlc1xuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUb3VjaFJpcHBsZTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uQmFzZScsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b25CYXNlJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2ZvY3VzVmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbkJhc2VDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3Rpb25cIiwgXCJjZW50ZXJSaXBwbGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiTGlua0NvbXBvbmVudFwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkNvbnRleHRNZW51XCIsIFwib25EcmFnTGVhdmVcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2NvcmUvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgdXNlSXNGb2N1c1Zpc2libGUgZnJvbSAnLi4vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUnO1xuaW1wb3J0IFRvdWNoUmlwcGxlIGZyb20gJy4vVG91Y2hSaXBwbGUnO1xuaW1wb3J0IGJ1dHRvbkJhc2VDbGFzc2VzLCB7IGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2J1dHRvbkJhc2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuXG4gIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSB7XG4gICAgY29tcG9zZWRDbGFzc2VzLnJvb3QgKz0gYCAke2ZvY3VzVmlzaWJsZUNsYXNzTmFtZX1gO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBvc2VkQ2xhc3Nlcztcbn07XG5cbmV4cG9ydCBjb25zdCBCdXR0b25CYXNlUm9vdCA9IHN0eWxlZCgnYnV0dG9uJywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgYm9yZGVyOiAwLFxuICBtYXJnaW46IDAsXG4gIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICBib3JkZXJSYWRpdXM6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICB9LFxuICBbYCYuJHtidXR0b25CYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9XG59KTtcbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxuY29uc3QgQnV0dG9uQmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbkJhc2UoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBhY3Rpb24sXG4gICAgY2VudGVyUmlwcGxlID0gZmFsc2UsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZGlzYWJsZVJpcHBsZSA9IGZhbHNlLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IGZhbHNlLFxuICAgIGZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgTGlua0NvbXBvbmVudCA9ICdhJyxcbiAgICBvbkJsdXIsXG4gICAgb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51LFxuICAgIG9uRHJhZ0xlYXZlLFxuICAgIG9uRm9jdXMsXG4gICAgb25Gb2N1c1Zpc2libGUsXG4gICAgb25LZXlEb3duLFxuICAgIG9uS2V5VXAsXG4gICAgb25Nb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcCxcbiAgICBvblRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydCxcbiAgICB0YWJJbmRleCA9IDAsXG4gICAgVG91Y2hSaXBwbGVQcm9wcyxcbiAgICB0eXBlXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sICgpID0+ICh7XG4gICAgZm9jdXNWaXNpYmxlOiAoKSA9PiB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSksIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrLCBza2lwUmlwcGxlQWN0aW9uID0gZGlzYWJsZVRvdWNoUmlwcGxlKSB7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICBjb25zdCBoYW5kbGVDb250ZXh0TWVudSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkNvbnRleHRNZW51KTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCk7XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuXG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGlzTm9uTmF0aXZlQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvblJlZi5jdXJyZW50O1xuICAgIHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpO1xuICB9O1xuICAvKipcbiAgICogSUUxMSBzaGltIGZvciBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9yZXBlYXRcbiAgICovXG5cblxuICBjb25zdCBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSkge1xuICAgIENvbXBvbmVudFByb3AgPSBMaW5rQ29tcG9uZW50O1xuICB9XG5cbiAgY29uc3QgYnV0dG9uUHJvcHMgPSB7fTtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2J1dHRvbicgOiB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvdGhlci5ocmVmICYmICFvdGhlci50bykge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZU93blJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaGFuZGxlT3duUmVmKTtcbiAgY29uc3QgW21vdW50ZWRTdGF0ZSwgc2V0TW91bnRlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgZW5hYmxlVG91Y2hSaXBwbGUgPSBtb3VudGVkU3RhdGUgJiYgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChlbmFibGVUb3VjaFJpcHBsZSAmJiAhcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIGBjb21wb25lbnRgIHByb3AgcHJvdmlkZWQgdG8gQnV0dG9uQmFzZSBpcyBpbnZhbGlkLicsICdQbGVhc2UgbWFrZSBzdXJlIHRoZSBjaGlsZHJlbiBwcm9wIGlzIHJlbmRlcmVkIGluIHRoaXMgY3VzdG9tIGNvbXBvbmVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2VuYWJsZVRvdWNoUmlwcGxlXSk7XG4gIH1cblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2VudGVyUmlwcGxlLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlUmlwcGxlLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICBmb2N1c1JpcHBsZSxcbiAgICB0YWJJbmRleCxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJ1dHRvbkJhc2VSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudFByb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnU6IGhhbmRsZUNvbnRleHRNZW51LFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4LFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgZW5hYmxlVG91Y2hSaXBwbGUgP1xuICAgIC8qI19fUFVSRV9fKi9cblxuICAgIC8qIFRvdWNoUmlwcGxlIGlzIG9ubHkgbmVlZGVkIGNsaWVudC1zaWRlLCB4MiBib29zdCBvbiB0aGUgc2VydmVyLiAqL1xuICAgIF9qc3goVG91Y2hSaXBwbGUsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogcmlwcGxlUmVmLFxuICAgICAgY2VudGVyOiBjZW50ZXJSaXBwbGVcbiAgICB9LCBUb3VjaFJpcHBsZVByb3BzKSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbkJhc2UucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGVzIGFyZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgLk11aS1mb2N1c1Zpc2libGVgIGNsYXNzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBjYW4gaGVscCBpZGVudGlmeSB3aGljaCBlbGVtZW50IGhhcyBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbnMgdGhlIGZvY3VzIHRocm91Z2gga2V5Ym9hcmQgaW50ZXJhY3Rpb24uXG4gICAqIEl0J3MgYSBwb2x5ZmlsbCBmb3IgdGhlIFtDU1MgOmZvY3VzLXZpc2libGUgc2VsZWN0b3JdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsZSBmb3IgdXNpbmcgdGhpcyBmZWF0dXJlIFtpcyBleHBsYWluZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uQmFzZTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3ZnSWNvbicsIHNsb3QpO1xufVxuY29uc3Qgc3ZnSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdmdJY29uJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvckFjdGlvbicsICdjb2xvckVycm9yJywgJ2NvbG9yRGlzYWJsZWQnLCAnZm9udFNpemVJbmhlcml0JywgJ2ZvbnRTaXplU21hbGwnLCAnZm9udFNpemVNZWRpdW0nLCAnZm9udFNpemVMYXJnZSddKTtcbmV4cG9ydCBkZWZhdWx0IHN2Z0ljb25DbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZm9udFNpemUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY29sb3IgIT09ICdpbmhlcml0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGBmb250U2l6ZSR7Y2FwaXRhbGl6ZShmb250U2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTdmdJY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFN2Z0ljb25Sb290ID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbYGZvbnRTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZm9udFNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSRwYWxldHRlJG93bmVyUywgX3RoZW1lJHBhbGV0dGUkb3duZXJTMjtcblxuICByZXR1cm4ge1xuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB3aWR0aDogJzFlbScsXG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSksXG4gICAgZm9udFNpemU6IHtcbiAgICAgIGluaGVyaXQ6ICdpbmhlcml0JyxcbiAgICAgIHNtYWxsOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApLFxuICAgICAgbWVkaXVtOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgbGFyZ2U6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNSlcbiAgICB9W293bmVyU3RhdGUuZm9udFNpemVdLFxuICAgIC8vIFRPRE8gdjUgZGVwcmVjYXRlLCB2NiByZW1vdmUgZm9yIHN4XG4gICAgY29sb3I6IChfdGhlbWUkcGFsZXR0ZSRvd25lclMgPSAoX3RoZW1lJHBhbGV0dGUkb3duZXJTMiA9IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZSRvd25lclMyLm1haW4pICE9IG51bGwgPyBfdGhlbWUkcGFsZXR0ZSRvd25lclMgOiB7XG4gICAgICBhY3Rpb246IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgIGluaGVyaXQ6IHVuZGVmaW5lZFxuICAgIH1bb3duZXJTdGF0ZS5jb2xvcl1cbiAgfTtcbn0pO1xuY29uc3QgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN2Z0ljb24nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnaW5oZXJpdCcsXG4gICAgY29tcG9uZW50ID0gJ3N2ZycsXG4gICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICBodG1sQ29sb3IsXG4gICAgdGl0bGVBY2Nlc3MsXG4gICAgdmlld0JveCA9ICcwIDAgMjQgMjQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvbnRTaXplLFxuICAgIHZpZXdCb3hcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFN2Z0ljb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiB0cnVlLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2FjdGlvbicsICdkaXNhYmxlZCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wLlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vU3ZnSWNvbic7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbXVpIHBhY2thZ2VzLlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIGNvbnN0IENvbXBvbmVudCA9IChwcm9wcywgcmVmKSA9PiAvKiNfX1BVUkVfXyovX2pzeChTdmdJY29uLCBfZXh0ZW5kcyh7XG4gICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBwYXRoXG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIE5lZWQgdG8gc2V0IGBkaXNwbGF5TmFtZWAgb24gdGhlIGlubmVyIGNvbXBvbmVudCBmb3IgUmVhY3QubWVtby5cbiAgICAvLyBSZWFjdCBwcmlvciB0byAxNi4xNCBpZ25vcmVzIGBkaXNwbGF5TmFtZWAgb24gdGhlIHdyYXBwZXIuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYCR7ZGlzcGxheU5hbWV9SWNvbmA7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTguNDEgMTYuNTlMMTMuODIgMTJsNC41OS00LjU5TDE3IDZsLTYgNiA2IDZ6TTYgNmgydjEySDZ6XCJcbn0pLCAnRmlyc3RQYWdlJyk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTUuNTkgNy40MUwxMC4xOCAxMmwtNC41OSA0LjU5TDcgMThsNi02LTYtNnpNMTYgNmgydjEyaC0yelwiXG59KSwgJ0xhc3RQYWdlJyk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE1LjQxIDcuNDFMMTQgNmwtNiA2IDYgNiAxLjQxLTEuNDFMMTAuODMgMTJ6XCJcbn0pLCAnTmF2aWdhdGVCZWZvcmUnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAgNkw4LjU5IDcuNDEgMTMuMTcgMTJsLTQuNTggNC41OUwxMCAxOGw2LTZ6XCJcbn0pLCAnTmF2aWdhdGVOZXh0Jyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJwYWdlXCIsIFwic2VsZWN0ZWRcIiwgXCJzaGFwZVwiLCBcInNpemVcIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9jb3JlJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHBhZ2luYXRpb25JdGVtQ2xhc3NlcywgeyBnZXRQYWdpbmF0aW9uSXRlbVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcGFnaW5hdGlvbkl0ZW1DbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBGaXJzdFBhZ2VJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9GaXJzdFBhZ2UnO1xuaW1wb3J0IExhc3RQYWdlSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTGFzdFBhZ2UnO1xuaW1wb3J0IE5hdmlnYXRlQmVmb3JlSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTmF2aWdhdGVCZWZvcmUnO1xuaW1wb3J0IE5hdmlnYXRlTmV4dEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL05hdmlnYXRlTmV4dCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3Qgb3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYgc3R5bGVzW2B0ZXh0JHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgc3R5bGVzW2BvdXRsaW5lZCR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5zaGFwZSA9PT0gJ3JvdW5kZWQnICYmIHN0eWxlcy5yb3VuZGVkLCBvd25lclN0YXRlLnR5cGUgPT09ICdwYWdlJyAmJiBzdHlsZXMucGFnZSwgKG93bmVyU3RhdGUudHlwZSA9PT0gJ3N0YXJ0LWVsbGlwc2lzJyB8fCBvd25lclN0YXRlLnR5cGUgPT09ICdlbmQtZWxsaXBzaXMnKSAmJiBzdHlsZXMuZWxsaXBzaXMsIChvd25lclN0YXRlLnR5cGUgPT09ICdwcmV2aW91cycgfHwgb3duZXJTdGF0ZS50eXBlID09PSAnbmV4dCcpICYmIHN0eWxlcy5wcmV2aW91c05leHQsIChvd25lclN0YXRlLnR5cGUgPT09ICdmaXJzdCcgfHwgb3duZXJTdGF0ZS50eXBlID09PSAnbGFzdCcpICYmIHN0eWxlcy5maXJzdExhc3RdO1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgc2VsZWN0ZWQsXG4gICAgc2l6ZSxcbiAgICBzaGFwZSxcbiAgICB0eXBlLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIHZhcmlhbnQsIHNoYXBlLCBjb2xvciAhPT0gJ3N0YW5kYXJkJyAmJiBgJHt2YXJpYW50fSR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJywge1xuICAgICAgcGFnZTogJ3BhZ2UnLFxuICAgICAgZmlyc3Q6ICdmaXJzdExhc3QnLFxuICAgICAgbGFzdDogJ2ZpcnN0TGFzdCcsXG4gICAgICAnc3RhcnQtZWxsaXBzaXMnOiAnZWxsaXBzaXMnLFxuICAgICAgJ2VuZC1lbGxpcHNpcyc6ICdlbGxpcHNpcycsXG4gICAgICBwcmV2aW91czogJ3ByZXZpb3VzTmV4dCcsXG4gICAgICBuZXh0OiAncHJldmlvdXNOZXh0J1xuICAgIH1bdHlwZV1dLFxuICAgIGljb246IFsnaWNvbiddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0UGFnaW5hdGlvbkl0ZW1VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgUGFnaW5hdGlvbkl0ZW1FbGxpcHNpcyA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFnaW5hdGlvbkl0ZW0nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgYm9yZGVyUmFkaXVzOiAzMiAvIDIsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBtaW5XaWR0aDogMzIsXG4gIHBhZGRpbmc6ICcwIDZweCcsXG4gIG1hcmdpbjogJzAgM3B4JyxcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICBoZWlnaHQ6ICdhdXRvJyxcbiAgW2AmLiR7cGFnaW5hdGlvbkl0ZW1DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1pbldpZHRoOiAyNixcbiAgYm9yZGVyUmFkaXVzOiAyNiAvIDIsXG4gIG1hcmdpbjogJzAgMXB4JyxcbiAgcGFkZGluZzogJzAgNHB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIHtcbiAgbWluV2lkdGg6IDQwLFxuICBib3JkZXJSYWRpdXM6IDQwIC8gMixcbiAgcGFkZGluZzogJzAgMTBweCcsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG59KSk7XG5jb25zdCBQYWdpbmF0aW9uSXRlbVBhZ2UgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpUGFnaW5hdGlvbkl0ZW0nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgYm9yZGVyUmFkaXVzOiAzMiAvIDIsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBtaW5XaWR0aDogMzIsXG4gIGhlaWdodDogMzIsXG4gIHBhZGRpbmc6ICcwIDZweCcsXG4gIG1hcmdpbjogJzAgM3B4JyxcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHlcbiAgfSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnY29sb3InLCAnYmFja2dyb3VuZC1jb2xvciddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gIH0pLFxuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9LFxuICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICB9LFxuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1pbldpZHRoOiAyNixcbiAgaGVpZ2h0OiAyNixcbiAgYm9yZGVyUmFkaXVzOiAyNiAvIDIsXG4gIG1hcmdpbjogJzAgMXB4JyxcbiAgcGFkZGluZzogJzAgNHB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIHtcbiAgbWluV2lkdGg6IDQwLFxuICBoZWlnaHQ6IDQwLFxuICBib3JkZXJSYWRpdXM6IDQwIC8gMixcbiAgcGFkZGluZzogJzAgMTBweCcsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG59LCBvd25lclN0YXRlLnNoYXBlID09PSAncm91bmRlZCcgJiYge1xuICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xufSksICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYge1xuICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuc2VsZWN0ZWR9YF06IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnc3RhbmRhcmQnICYmIHtcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHQsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFyayxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSwge1xuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9KVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknfWAsXG4gIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5zZWxlY3RlZH1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY29sb3IgIT09ICdzdGFuZGFyZCcgJiYge1xuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7YWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjUpfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2YXRlZE9wYWNpdHkpLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2YXRlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZhdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICB9XG4gIH0sIHtcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9XG4gIH0pXG59KSk7XG5jb25zdCBQYWdpbmF0aW9uSXRlbVBhZ2VJY29uID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlQYWdpbmF0aW9uSXRlbScsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuaWNvblxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMCksXG4gIG1hcmdpbjogJzAgLThweCdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIyKVxufSkpO1xuY29uc3QgUGFnaW5hdGlvbkl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYWdpbmF0aW9uSXRlbShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFnaW5hdGlvbkl0ZW0nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnc3RhbmRhcmQnLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIHBhZ2UsXG4gICAgc2VsZWN0ZWQgPSBmYWxzZSxcbiAgICBzaGFwZSA9ICdjaXJjdWxhcicsXG4gICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgIHR5cGUgPSAncGFnZScsXG4gICAgdmFyaWFudCA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIHNlbGVjdGVkLFxuICAgIHNoYXBlLFxuICAgIHNpemUsXG4gICAgdHlwZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBub3JtYWxpemVkSWNvbnMgPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8ge1xuICAgIHByZXZpb3VzOiBOYXZpZ2F0ZU5leHRJY29uLFxuICAgIG5leHQ6IE5hdmlnYXRlQmVmb3JlSWNvbixcbiAgICBsYXN0OiBGaXJzdFBhZ2VJY29uLFxuICAgIGZpcnN0OiBMYXN0UGFnZUljb25cbiAgfSA6IHtcbiAgICBwcmV2aW91czogTmF2aWdhdGVCZWZvcmVJY29uLFxuICAgIG5leHQ6IE5hdmlnYXRlTmV4dEljb24sXG4gICAgZmlyc3Q6IEZpcnN0UGFnZUljb24sXG4gICAgbGFzdDogTGFzdFBhZ2VJY29uXG4gIH07XG4gIGNvbnN0IEljb24gPSBub3JtYWxpemVkSWNvbnNbdHlwZV07XG4gIHJldHVybiB0eXBlID09PSAnc3RhcnQtZWxsaXBzaXMnIHx8IHR5cGUgPT09ICdlbmQtZWxsaXBzaXMnID8gLyojX19QVVJFX18qL19qc3goUGFnaW5hdGlvbkl0ZW1FbGxpcHNpcywgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBcIlxcdTIwMjZcIlxuICB9KSkgOiAvKiNfX1BVUkVfXyovX2pzeHMoUGFnaW5hdGlvbkl0ZW1QYWdlLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbdHlwZSA9PT0gJ3BhZ2UnICYmIHBhZ2UsIEljb24gPyAvKiNfX1BVUkVfXyovX2pzeChQYWdpbmF0aW9uSXRlbVBhZ2VJY29uLCB7XG4gICAgICBhczogSWNvbixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYWdpbmF0aW9uSXRlbS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBhY3RpdmUgY29sb3IuXG4gICAqIEBkZWZhdWx0ICdzdGFuZGFyZCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdzdGFuZGFyZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBwYWdlIG51bWJlci5cbiAgICovXG4gIHBhZ2U6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgdGhlIHBhZ2luYXRpb24gaXRlbSBpcyBzZWxlY3RlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHNoYXBlIG9mIHRoZSBwYWdpbmF0aW9uIGl0ZW0uXG4gICAqIEBkZWZhdWx0ICdjaXJjdWxhcidcbiAgICovXG4gIHNoYXBlOiBQcm9wVHlwZXMub25lT2YoWydjaXJjdWxhcicsICdyb3VuZGVkJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHBhZ2luYXRpb24gaXRlbS5cbiAgICogQGRlZmF1bHQgJ3BhZ2UnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydlbmQtZWxsaXBzaXMnLCAnZmlyc3QnLCAnbGFzdCcsICduZXh0JywgJ3BhZ2UnLCAncHJldmlvdXMnLCAnc3RhcnQtZWxsaXBzaXMnXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICd0ZXh0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uSXRlbTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYm91bmRhcnlDb3VudFwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY291bnRcIiwgXCJkZWZhdWx0UGFnZVwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcImhpZGVOZXh0QnV0dG9uXCIsIFwiaGlkZVByZXZCdXR0b25cIiwgXCJvbkNoYW5nZVwiLCBcInBhZ2VcIiwgXCJyZW5kZXJJdGVtXCIsIFwic2hhcGVcIiwgXCJzaG93Rmlyc3RCdXR0b25cIiwgXCJzaG93TGFzdEJ1dHRvblwiLCBcInNpYmxpbmdDb3VudFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2NvcmUnO1xuaW1wb3J0IHsgaW50ZWdlclByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRQYWdpbmF0aW9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYWdpbmF0aW9uQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlUGFnaW5hdGlvbiBmcm9tICcuLi91c2VQYWdpbmF0aW9uJztcbmltcG9ydCBQYWdpbmF0aW9uSXRlbSBmcm9tICcuLi9QYWdpbmF0aW9uSXRlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudF0sXG4gICAgdWw6IFsndWwnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhZ2luYXRpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgUGFnaW5hdGlvblJvb3QgPSBzdHlsZWQoJ25hdicsIHtcbiAgbmFtZTogJ011aVBhZ2luYXRpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSh7fSk7XG5jb25zdCBQYWdpbmF0aW9uVWwgPSBzdHlsZWQoJ3VsJywge1xuICBuYW1lOiAnTXVpUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdVbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnVsXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleFdyYXA6ICd3cmFwJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgbGlzdFN0eWxlOiAnbm9uZSdcbn0pO1xuXG5mdW5jdGlvbiBkZWZhdWx0R2V0QXJpYUxhYmVsKHR5cGUsIHBhZ2UsIHNlbGVjdGVkKSB7XG4gIGlmICh0eXBlID09PSAncGFnZScpIHtcbiAgICByZXR1cm4gYCR7c2VsZWN0ZWQgPyAnJyA6ICdHbyB0byAnfXBhZ2UgJHtwYWdlfWA7XG4gIH1cblxuICByZXR1cm4gYEdvIHRvICR7dHlwZX0gcGFnZWA7XG59XG5cbmNvbnN0IFBhZ2luYXRpb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYWdpbmF0aW9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYWdpbmF0aW9uJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYm91bmRhcnlDb3VudCA9IDEsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3N0YW5kYXJkJyxcbiAgICBjb3VudCA9IDEsXG4gICAgZGVmYXVsdFBhZ2UgPSAxLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZ2V0SXRlbUFyaWFMYWJlbCA9IGRlZmF1bHRHZXRBcmlhTGFiZWwsXG4gICAgaGlkZU5leHRCdXR0b24gPSBmYWxzZSxcbiAgICBoaWRlUHJldkJ1dHRvbiA9IGZhbHNlLFxuICAgIHJlbmRlckl0ZW0gPSBpdGVtID0+IC8qI19fUFVSRV9fKi9fanN4KFBhZ2luYXRpb25JdGVtLCBfZXh0ZW5kcyh7fSwgaXRlbSkpLFxuICAgIHNoYXBlID0gJ2NpcmN1bGFyJyxcbiAgICBzaG93Rmlyc3RCdXR0b24gPSBmYWxzZSxcbiAgICBzaG93TGFzdEJ1dHRvbiA9IGZhbHNlLFxuICAgIHNpYmxpbmdDb3VudCA9IDEsXG4gICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgIHZhcmlhbnQgPSAndGV4dCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBpdGVtc1xuICB9ID0gdXNlUGFnaW5hdGlvbihfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnROYW1lOiAnUGFnaW5hdGlvbidcbiAgfSkpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBib3VuZGFyeUNvdW50LFxuICAgIGNvbG9yLFxuICAgIGNvdW50LFxuICAgIGRlZmF1bHRQYWdlLFxuICAgIGRpc2FibGVkLFxuICAgIGdldEl0ZW1BcmlhTGFiZWwsXG4gICAgaGlkZU5leHRCdXR0b24sXG4gICAgaGlkZVByZXZCdXR0b24sXG4gICAgcmVuZGVySXRlbSxcbiAgICBzaGFwZSxcbiAgICBzaG93Rmlyc3RCdXR0b24sXG4gICAgc2hvd0xhc3RCdXR0b24sXG4gICAgc2libGluZ0NvdW50LFxuICAgIHNpemUsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQYWdpbmF0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1sYWJlbFwiOiBcInBhZ2luYXRpb24gbmF2aWdhdGlvblwiLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChQYWdpbmF0aW9uVWwsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy51bCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gLyojX19QVVJFX18qL19qc3goXCJsaVwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiByZW5kZXJJdGVtKF9leHRlbmRzKHt9LCBpdGVtLCB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBnZXRJdGVtQXJpYUxhYmVsKGl0ZW0udHlwZSwgaXRlbS5wYWdlLCBpdGVtLnNlbGVjdGVkKSxcbiAgICAgICAgICBzaGFwZSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIHZhcmlhbnRcbiAgICAgICAgfSkpXG4gICAgICB9LCBpbmRleCkpXG4gICAgfSlcbiAgfSkpO1xufSk7IC8vIEBkZWZhdWx0IHRhZ3Mgc3luY2VkIHdpdGggZGVmYXVsdCB2YWx1ZXMgZnJvbSB1c2VQYWdpbmF0aW9uXG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhZ2luYXRpb24ucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBhbHdheXMgdmlzaWJsZSBwYWdlcyBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGJvdW5kYXJ5Q291bnQ6IGludGVnZXJQcm9wVHlwZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGNvbG9yLlxuICAgKiBAZGVmYXVsdCAnc3RhbmRhcmQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3RhbmRhcmQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlcy5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgY291bnQ6IGludGVnZXJQcm9wVHlwZSxcblxuICAvKipcbiAgICogVGhlIHBhZ2Ugc2VsZWN0ZWQgYnkgZGVmYXVsdCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jb250cm9sbGVkLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBkZWZhdWx0UGFnZTogaW50ZWdlclByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGxpbmsgb3IgYnV0dG9uIHR5cGUgdG8gZm9ybWF0ICgncGFnZScgfCAnZmlyc3QnIHwgJ2xhc3QnIHwgJ25leHQnIHwgJ3ByZXZpb3VzJykuIERlZmF1bHRzIHRvICdwYWdlJy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2UgbnVtYmVyIHRvIGZvcm1hdC5cbiAgICogQHBhcmFtIHtib29sfSBzZWxlY3RlZCBJZiB0cnVlLCB0aGUgY3VycmVudCBwYWdlIGlzIHNlbGVjdGVkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0SXRlbUFyaWFMYWJlbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGlkZSB0aGUgbmV4dC1wYWdlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVOZXh0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaWRlIHRoZSBwcmV2aW91cy1wYWdlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVQcmV2QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PHVua25vd24+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHBhZ2UuXG4gICAqL1xuICBwYWdlOiBpbnRlZ2VyUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgaXRlbS5cbiAgICogQHBhcmFtIHtQYWdpbmF0aW9uUmVuZGVySXRlbVBhcmFtc30gcGFyYW1zIFRoZSBwcm9wcyB0byBzcHJlYWQgb24gYSBQYWdpbmF0aW9uSXRlbS5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICogQGRlZmF1bHQgKGl0ZW0pID0+IDxQYWdpbmF0aW9uSXRlbSB7Li4uaXRlbX0gLz5cbiAgICovXG4gIHJlbmRlckl0ZW06IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUgb2YgdGhlIHBhZ2luYXRpb24gaXRlbXMuXG4gICAqIEBkZWZhdWx0ICdjaXJjdWxhcidcbiAgICovXG4gIHNoYXBlOiBQcm9wVHlwZXMub25lT2YoWydjaXJjdWxhcicsICdyb3VuZGVkJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGZpcnN0LXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd0ZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzaG93IHRoZSBsYXN0LXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd0xhc3RCdXR0b246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3VycmVudCBwYWdlLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBzaWJsaW5nQ291bnQ6IGludGVnZXJQcm9wVHlwZSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbjsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvY29yZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGFpbmVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDb250YWluZXInLCBzbG90KTtcbn1cbmNvbnN0IGNvbnRhaW5lckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDb250YWluZXInLCBbJ3Jvb3QnLCAnZGlzYWJsZUd1dHRlcnMnLCAnZml4ZWQnLCAnbWF4V2lkdGhYcycsICdtYXhXaWR0aFNtJywgJ21heFdpZHRoTWQnLCAnbWF4V2lkdGhMZycsICdtYXhXaWR0aFhsJ10pO1xuZXhwb3J0IGRlZmF1bHQgY29udGFpbmVyQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmaXhlZFwiLCBcIm1heFdpZHRoXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2NvcmUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldENvbnRhaW5lclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY29udGFpbmVyQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGZpeGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIG1heFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXhXaWR0aCAmJiBgbWF4V2lkdGgke2NhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSl9YCwgZml4ZWQgJiYgJ2ZpeGVkJywgZGlzYWJsZUd1dHRlcnMgJiYgJ2Rpc2FibGVHdXR0ZXJzJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQ29udGFpbmVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ29udGFpbmVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgbWF4V2lkdGgke2NhcGl0YWxpemUoU3RyaW5nKG93bmVyU3RhdGUubWF4V2lkdGgpKX1gXSwgb3duZXJTdGF0ZS5maXhlZCAmJiBzdHlsZXMuZml4ZWQsIG93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmRpc2FibGVHdXR0ZXJzXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgZGlzcGxheTogJ2Jsb2NrJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS5maXhlZCAmJiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgIGFjY1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSB7XG4gICAgICBtYXhXaWR0aDogYCR7dmFsdWV9JHt0aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGFjYztcbn0sIHt9KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLm1heFdpZHRoID09PSAneHMnICYmIHtcbiAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCd4cycpXToge1xuICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgfVxufSwgb3duZXJTdGF0ZS5tYXhXaWR0aCAmJiBvd25lclN0YXRlLm1heFdpZHRoICE9PSAneHMnICYmIHtcbiAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKG93bmVyU3RhdGUubWF4V2lkdGgpXToge1xuICAgIG1heFdpZHRoOiBgJHt0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbb3duZXJTdGF0ZS5tYXhXaWR0aF19JHt0aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgfVxufSkpO1xuY29uc3QgQ29udGFpbmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29udGFpbmVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDb250YWluZXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICBmaXhlZCA9IGZhbHNlLFxuICAgIG1heFdpZHRoID0gJ2xnJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBmaXhlZCxcbiAgICBtYXhXaWR0aFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDb250YWluZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29udGFpbmVyLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0IHRoZSBtYXgtd2lkdGggdG8gbWF0Y2ggdGhlIG1pbi13aWR0aCBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UnZCBwcmVmZXIgdG8gZGVzaWduIGZvciBhIGZpeGVkIHNldCBvZiBzaXplc1xuICAgKiBpbnN0ZWFkIG9mIHRyeWluZyB0byBhY2NvbW1vZGF0ZSBhIGZ1bGx5IGZsdWlkIHZpZXdwb3J0LlxuICAgKiBJdCdzIGZsdWlkIGJ5IGRlZmF1bHQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIGZhbHNlXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENvbnRhaW5lcjsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwic3BhY2luZ1wiLCBcImRpdmlkZXJcIiwgXCJjaGlsZHJlblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcsIGdldFZhbHVlLCBoYW5kbGVCcmVha3BvaW50cywgdW5zdGFibGVfZXh0ZW5kU3hQcm9wIGFzIGV4dGVuZFN4UHJvcCwgdW5zdGFibGVfcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMgYXMgcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG4vKipcbiAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBzZXBhcmF0b3IgUmVhY3QgZWxlbWVudCBpbnRlcnNwZXJzZWQgYmV0d2VlblxuICogZWFjaCBSZWFjdCBub2RlIG9mIHRoZSBpbnB1dCBjaGlsZHJlbi5cbiAqXG4gKiA+IGpvaW5DaGlsZHJlbihbMSwyLDNdLCAwKVxuICogWzEsMCwyLDAsM11cbiAqL1xuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIHNlcGFyYXRvcikge1xuICBjb25zdCBjaGlsZHJlbkFycmF5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbikuZmlsdGVyKEJvb2xlYW4pO1xuICByZXR1cm4gY2hpbGRyZW5BcnJheS5yZWR1Y2UoKG91dHB1dCwgY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgb3V0cHV0LnB1c2goY2hpbGQpO1xuXG4gICAgaWYgKGluZGV4IDwgY2hpbGRyZW5BcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBvdXRwdXQucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChzZXBhcmF0b3IsIHtcbiAgICAgICAga2V5OiBgc2VwYXJhdG9yLSR7aW5kZXh9YFxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtdKTtcbn1cblxuY29uc3QgZ2V0U2lkZUZyb21EaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT4ge1xuICByZXR1cm4ge1xuICAgIHJvdzogJ0xlZnQnLFxuICAgICdyb3ctcmV2ZXJzZSc6ICdSaWdodCcsXG4gICAgY29sdW1uOiAnVG9wJyxcbiAgICAnY29sdW1uLXJldmVyc2UnOiAnQm90dG9tJ1xuICB9W2RpcmVjdGlvbl07XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGUgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4ge1xuICBsZXQgc3R5bGVzID0gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdmbGV4J1xuICB9LCBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgdGhlbWVcbiAgfSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24sIHByb3BWYWx1ZSA9PiAoe1xuICAgIGZsZXhEaXJlY3Rpb246IHByb3BWYWx1ZVxuICB9KSkpO1xuXG4gIGlmIChvd25lclN0YXRlLnNwYWNpbmcpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gICAgY29uc3QgYmFzZSA9IE9iamVjdC5rZXlzKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcykucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmIChvd25lclN0YXRlLnNwYWNpbmdbYnJlYWtwb2ludF0gIT0gbnVsbCB8fCBvd25lclN0YXRlLmRpcmVjdGlvblticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICAgIGFjY1ticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IGRpcmVjdGlvblZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgY29uc3Qgc3BhY2luZ1ZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5zcGFjaW5nLFxuICAgICAgYmFzZVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gKHByb3BWYWx1ZSwgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJyYgPiA6bm90KHN0eWxlKSArIDpub3Qoc3R5bGUpJzoge1xuICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICBbYG1hcmdpbiR7Z2V0U2lkZUZyb21EaXJlY3Rpb24oYnJlYWtwb2ludCA/IGRpcmVjdGlvblZhbHVlc1ticmVha3BvaW50XSA6IG93bmVyU3RhdGUuZGlyZWN0aW9uKX1gXTogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgc3R5bGVzID0gZGVlcG1lcmdlKHN0eWxlcywgaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBzcGFjaW5nVmFsdWVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59O1xuY29uc3QgU3RhY2tSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTdGFjaycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdF07XG4gIH1cbn0pKHN0eWxlKTtcbmNvbnN0IFN0YWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RhY2soaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RhY2snXG4gIH0pO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTtcblxuICBjb25zdCB7XG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZGlyZWN0aW9uID0gJ2NvbHVtbicsXG4gICAgc3BhY2luZyA9IDAsXG4gICAgZGl2aWRlcixcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICBkaXJlY3Rpb24sXG4gICAgc3BhY2luZ1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3RhY2tSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGRpdmlkZXIgPyBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIGRpdmlkZXIpIDogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqIEBkZWZhdWx0ICdjb2x1bW4nXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBlbGVtZW50IGJldHdlZW4gZWFjaCBjaGlsZC5cbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIGltbWVkaWF0ZSBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AsIHdoaWNoIGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTdGFjazsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgQnV0dG9uLCBDYXJkLCBUeXBvZ3JhcGh5LCBDYXJkQ29udGVudCwgQ2FyZE1lZGlhIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXG5pbXBvcnQgeyB1c2VGZWVkU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkL0ZlZWRTdGF0ZSdcbmltcG9ydCB7IEZlZWRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvZmVlZC9GZWVkU2VydmljZSdcbmltcG9ydCB7IERvY3VtZW50LCBQYWdlLCBwZGZqcyB9IGZyb20gJ3JlYWN0LXBkZidcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUGFnaW5hdGlvbidcblxucGRmanMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSBgLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcGRmLmpzLyR7cGRmanMudmVyc2lvbn0vcGRmLndvcmtlci5taW4uanNgXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9GZWVkLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgQ29udGFpbmVyLCBTdGFjayB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5cbmV4cG9ydCBjb25zdCBnZXRDb21wb25lbnRUeXBlRm9yTWVkaWEgPSAobWltZSkgPT4ge1xuICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIG1pbWUuc3RhcnRzV2l0aCgnaW1hZ2UnKTpcbiAgICAgIHJldHVybiAnaW1nJ1xuICAgIGNhc2UgbWltZS5zdGFydHNXaXRoKCd2aWRlbycpOlxuICAgICAgcmV0dXJuICd2aWRlbydcbiAgICBjYXNlIG1pbWUuc3RhcnRzV2l0aCgnYXVkaW8nKTpcbiAgICAgIHJldHVybiAnYXVkaW8nXG4gICAgY2FzZSBtaW1lID09PSAnYXBwbGljYXRpb24vcGRmJzpcbiAgICAgIHJldHVybiAncGRmJ1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2ltZydcbiAgfVxufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmZWVkSWQ/OiBzdHJpbmdcbn1cbmNvbnN0IEZlZWQgPSAoeyBmZWVkSWQgfTogUHJvcHMpID0+IHtcbiAgbGV0IGZlZWQgPSBudWxsIGFzIGFueVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IFtudW1QYWdlcywgc2V0TnVtUGFnZXNdID0gdXNlU3RhdGUobnVsbClcbiAgY29uc3QgW3BhZ2VOdW1iZXIsIHNldFBhZ2VOdW1iZXJdID0gdXNlU3RhdGUoMSlcbiAgY29uc3QgZmVlZHNTdGF0ZSA9IHVzZUZlZWRTdGF0ZSgpXG4gIGZ1bmN0aW9uIG9uRG9jdW1lbnRMb2FkU3VjY2Vzcyh7IG51bVBhZ2VzIH0pIHtcbiAgICBzZXROdW1QYWdlcyhudW1QYWdlcylcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVBhZ2UgPSAoZSwgcGFnZSkgPT4ge1xuICAgIHNldFBhZ2VOdW1iZXIodHlwZW9mIHBhZ2UgPT09ICdudW1iZXInID8gcGFnZSA6IHBhZ2VOdW1iZXIpXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRTZXJ2aWNlLmdldEZlZWQoZmVlZElkKSlcbiAgfSwgW10pXG5cbiAgZmVlZCA9IGZlZWRzU3RhdGUuZmVlZHMuZmV0Y2hpbmcudmFsdWUgPT09IGZhbHNlICYmIGZlZWRzU3RhdGUuZmVlZHMuZmVlZC52YWx1ZVxuXG4gIGNvbnN0IGNvbXBvbmVudFR5cGUgPSBnZXRDb21wb25lbnRUeXBlRm9yTWVkaWEoZmVlZC5wcmV2aWV3VHlwZSB8fCAnaW1hZ2UnKVxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLmZlZWRDb250YWluZXJ9PlxuICAgICAge2ZlZWQgJiYgKFxuICAgICAgICA8Q2FyZCBjbGFzc05hbWU9e3N0eWxlcy5jYXJkfT5cbiAgICAgICAgICB7Y29tcG9uZW50VHlwZSAhPT0gJ3BkZicgPyAoXG4gICAgICAgICAgICA8Q2FyZE1lZGlhXG4gICAgICAgICAgICAgIGNvbXBvbmVudD17Y29tcG9uZW50VHlwZSA9PT0gJ2F1ZGlvJyA/ICdhdWRpbycgOiAnaW1nJ31cbiAgICAgICAgICAgICAgc3JjPXtmZWVkLnByZXZpZXdVcmx9XG4gICAgICAgICAgICAgIGFsdD17ZmVlZC50aXRsZX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfVxuICAgICAgICAgICAgICBjb250cm9sc1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezF9PlxuICAgICAgICAgICAgICAgIDxQYWdpbmF0aW9uIHBhZ2U9e3BhZ2VOdW1iZXJ9IGNvdW50PXtudW1QYWdlc30gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVBhZ2V9IC8+XG4gICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICBQYWdlIHtwYWdlTnVtYmVyfSBvZiB7bnVtUGFnZXN9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICA8RG9jdW1lbnQgZmlsZT17ZmVlZC5wcmV2aWV3VXJsfSBvbkxvYWRFcnJvcj17Y29uc29sZS5lcnJvcn0gb25Mb2FkU3VjY2Vzcz17b25Eb2N1bWVudExvYWRTdWNjZXNzfT5cbiAgICAgICAgICAgICAgICA8UGFnZSBwYWdlTnVtYmVyPXtwYWdlTnVtYmVyfSAvPlxuICAgICAgICAgICAgICA8L0RvY3VtZW50PlxuICAgICAgICAgICAgICA8U3RhY2sgc3BhY2luZz17MX0+XG4gICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICBQYWdlIHtwYWdlTnVtYmVyfSBvZiB7bnVtUGFnZXN9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxQYWdpbmF0aW9uIHBhZ2U9e3BhZ2VOdW1iZXJ9IGNvdW50PXtudW1QYWdlc30gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVBhZ2V9IC8+XG4gICAgICAgICAgICAgIDwvU3RhY2s+XG4gICAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17c3R5bGVzLmNhcnRUZXh0fSB2YXJpYW50PVwiaDZcIj5cbiAgICAgICAgICAgICAge2ZlZWQudGl0bGV9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e3N0eWxlcy5jYXJ0RGVzY3JpcHRpb259IHZhcmlhbnQ9XCJoNlwiPlxuICAgICAgICAgICAgICB7ZmVlZC5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICA8L0NhcmQ+XG4gICAgICApfVxuICAgIDwvc2VjdGlvbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZWVkXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0hlYWRlci5tb2R1bGUuc2NzcydcblxuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBEaWFsb2csXG4gIERpYWxvZ0FjdGlvbnMsXG4gIERpYWxvZ0NvbnRlbnQsXG4gIERpYWxvZ0NvbnRlbnRUZXh0LFxuICBHcmlkLFxuICBtYWtlU3R5bGVzLFxuICBUZXh0RmllbGRcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXG5pbXBvcnQgQWRkQ2lyY2xlT3V0bGluZWRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BZGRDaXJjbGVPdXRsaW5lZCdcbmltcG9ydCB7IHVzZUF1dGhTdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvdXNlci9yZWR1Y2Vycy9hdXRoL0F1dGhTdGF0ZSdcbmltcG9ydCB7IEZpbGVzeXN0ZW0gfSBmcm9tICdAY2FwYWNpdG9yL2ZpbGVzeXN0ZW0nXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRpdGxlPzogc3RyaW5nXG4gIGNyZWF0b3JTdGF0ZT86IGFueVxuICBhZGRGaWxlc1ZpZXc/OiBhbnlcbiAgc2V0QWRkRmlsZXNWaWV3PzogYW55XG4gIHNldEZpbGVzVGFyZ2V0PzogYW55XG4gIGhpZGVBZGRCdXR0b25zPzogYm9vbGVhblxuICBpbnB1dEZpbGVSZWY/OiBhbnlcbn1cblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XG4gIHVwbG9hZEJ1dHRvbjoge1xuICAgIG1hcmdpblRvcDogJzEwMHB4J1xuICB9LFxuICBhZGRJY29uOiB7XG4gICAgZm9udFNpemU6ICcxMDBweCcsXG4gICAgY29sb3I6ICcjQ0ZDRkNGJ1xuICB9XG59KSlcblxuY29uc3QgQXBwSGVhZGVyID0gKHsgdGl0bGUsIHNldEFkZEZpbGVzVmlldywgc2V0RmlsZXNUYXJnZXQsIGhpZGVBZGRCdXR0b25zLCBpbnB1dEZpbGVSZWYgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGF1dGhTdGF0ZSA9IHVzZUF1dGhTdGF0ZSgpXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxuICBjb25zdCBbdXNlclJvbGUsIHNldFVzZXJSb2xlXSA9IHVzZVN0YXRlKCcnKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1dGhTdGF0ZS51c2VyKSB7XG4gICAgICBzZXRVc2VyUm9sZShhdXRoU3RhdGUudXNlcj8udXNlclJvbGU/LnZhbHVlKVxuICAgIH1cbiAgfSwgW2F1dGhTdGF0ZS51c2VyXSlcblxuICBjb25zdCBoYW5kbGVQaWNrRmlsZXMgPSBhc3luYyAoZmlsZSkgPT4ge1xuICAgIHNldEZpbGVzVGFyZ2V0KFsuLi5maWxlLnRhcmdldC5maWxlc10pXG4gICAgc2V0QWRkRmlsZXNWaWV3ICYmIHNldEFkZEZpbGVzVmlldyh0cnVlKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8bmF2IGNsYXNzTmFtZT17c3R5bGVzLmhlYWRlckNvbnRhaW5lcn0+XG4gICAgICB7dGl0bGUgJiYgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9Pnt0aXRsZX08L3NwYW4+fVxuICAgICAgPGlucHV0XG4gICAgICAgIC8vIGFjY2VwdD1cImltYWdlLypcIlxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5pbnB1dH1cbiAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogJ25vbmUnIH19XG4gICAgICAgIGlkPVwicmFpc2VkLWJ1dHRvbi1maWxlXCJcbiAgICAgICAgbXVsdGlwbGVcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlUGlja0ZpbGVzfVxuICAgICAgICByZWY9e2lucHV0RmlsZVJlZn1cbiAgICAgIC8+XG4gICAgICB7IWhpZGVBZGRCdXR0b25zICYmIHVzZXJSb2xlICYmIHVzZXJSb2xlICE9ICdndWVzdCcgPyAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJ2ZpdC1jb250ZW50JywgYmFja2dyb3VuZENvbG9yOiAnI0Y4RjhGOCcsIGJvcmRlcjogJzFweCBzb2xpZCAjRjhGOEY4JywgbWFyZ2luOiAnMCBhdXRvJyB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJyYWlzZWQtYnV0dG9uLWZpbGVcIj5cbiAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8QWRkQ2lyY2xlT3V0bGluZWRJY29uIGNsYXNzTmFtZT17Y2xhc3Nlcy5hZGRJY29ufSAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICAgICAgICAgICAgICAgICAgbWFyZ2luOiAnMTBweCAyMHB4JyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyNDNEM0QzQnLFxuICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNXB0JyxcbiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBBZGQgRmlsZXNcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogKFxuICAgICAgICAnJ1xuICAgICAgKX1cbiAgICA8L25hdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBIZWFkZXJcbiJdLCJuYW1lcyI6WyJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwidGhpcyIsInVuZGVmaW5lZCIsImdsb2JhbCIsInJlcXVpcmUiLCJyZXF1aXJlJCQ0IiwiY3JlYXRlQ29udGV4dCIsIlJlYWN0IiwiaXNCcm93c2VyIiwiX2V4Y2x1ZGVkIiwib3duS2V5cyIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJwZGZqcy5QREZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJfY3JlYXRlU3VwZXIiLCJwZGZqcy5nZXREb2N1bWVudCIsIl9vYmplY3RTcHJlYWQiLCJtYWtlQ2FuY2VsbGFibGUiLCJpc0ZpbGUiLCJQdXJlQ29tcG9uZW50IiwiaXNGdW5jdGlvbk9yTm9kZSIsImlzRmlsZVByb3AiLCJwZGZqcy5TVkdHcmFwaGljcyIsInBkZmpzLkFubm90YXRpb25MYXllciIsInBkZmpzLkdsb2JhbFdvcmtlck9wdGlvbnMiLCJfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiUmVhY3QudXNlTGF5b3V0RWZmZWN0IiwiUmVhY3QudXNlRWZmZWN0IiwiUmVhY3QudXNlUmVmIiwiUmVhY3QudXNlU3RhdGUiLCJSZWFjdC51c2VDYWxsYmFjayIsInVzZUVuaGFuY2VkRWZmZWN0IiwiUmVhY3QudXNlTWVtbyIsImpzeFJ1bnRpbWVNb2R1bGUiLCJtZW1vaXplIiwicG9zaXRpb24iLCJ1bml0bGVzcyIsImhhc2hTdHJpbmciLCJmb3J3YXJkUmVmIiwidXNlQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsImNyZWF0ZVN0eWxlZCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRWYWx1ZSIsInN0eWxlIiwiekluZGV4IiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJib3JkZXJzIiwiZmxleGJveCIsImdyaWQiLCJwYWxldHRlIiwic2hhZG93cyIsInNpemluZyIsInR5cG9ncmFwaHkiLCJzaGFwZSIsIlJlYWN0LmNyZWF0ZUNvbnRleHQiLCJSZWFjdC51c2VDb250ZXh0IiwibXVpVXNlVGhlbWUiLCJzeXN0ZW1EZWZhdWx0VGhlbWUiLCJjcmVhdGVUaGVtZSIsInVzZVRoZW1lV2l0aG91dERlZmF1bHQiLCJpc0VtcHR5Iiwic3R5bGVkRW5naW5lU3R5bGVkIiwidXNlVGhlbWUiLCJjb21tb24iLCJibHVlIiwicHVycGxlIiwicmVkIiwibGlnaHRCbHVlIiwiZ3JlZW4iLCJvcmFuZ2UiLCJncmV5Iiwic3lzdGVtQ3JlYXRlVGhlbWUiLCJzeXN0ZW1Vc2VUaGVtZVByb3BzIiwiZGVmYXVsdFRoZW1lIiwidXNlVGhlbWVTeXN0ZW0iLCJfanN4Iiwic3R5bGVkIiwidG91Y2hSaXBwbGVDbGFzc2VzIiwiUmVhY3QuZm9yd2FyZFJlZiIsIlJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImJ1dHRvbkJhc2VDbGFzc2VzIiwiX2pzeHMiLCJUb3VjaFJpcHBsZSIsIlN2Z0ljb24iLCJSZWFjdC5tZW1vIiwicGFnaW5hdGlvbkl0ZW1DbGFzc2VzIiwiQnV0dG9uQmFzZSIsIlBhZ2luYXRpb25JdGVtIiwiUmVhY3QuQ2hpbGRyZW4iLCJSZWFjdC5jbG9uZUVsZW1lbnQiLCJwZGZqcy52ZXJzaW9uIiwidXNlU3RhdGUiLCJzdHlsZXMiLCJDb250YWluZXIiLCJTdGFjayIsIlBhZ2luYXRpb24iLCJQYWdlIiwiQWRkQ2lyY2xlT3V0bGluZWRJY29uIl0sIm1hcHBpbmdzIjoiZ29DQUVJLHVCQUF5QkEsOEJBRXpCLHdCQUEwQkMsK0JBRTlCLE9BQU8sZUFBZSxrQkFBUyxhQUFjLENBQzNDLE1BQU8sNkNBRVMsT0FFZCxNQUFRLHdCQUF3QkMsZUFFaEMsZUFBaUIsdUJBQXVCQyxpQkFFeEMsWUFBZSxlQUFlLFNBQXVCLE1BQU0sY0FBYyxPQUFRLENBQ25GLEVBQUcseUdBQ0QscUJBRUosb0NBQWtCLG9EQ25CSCwyTUNzQmYsQUFBQyxVQUEwQyxFQUFNLEVBQVMsQ0FFeEQsZUFBaUIsTUFPaEJDLGVBQU0sVUFBVyxDQUNwQixNQUFpQixLQUFNLENBQ2IsR0FBSSxxQkFBdUIsRUFHOUIsQ0FBQyxFQUF5QixFQUFTLElBQXdCLENBS2xFLFdBQWlCLEdB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M0IsR0FBUSxHQUFLLGNBQWMsSUFFdkIsR0FBUyxLQUFPLEdBQU0sSUFBTSxHQUFTLEtBQU8sR0FBTSxJQUFNLEdBQVMsS0FBTyxHQUFNLElBQU0sR0FBUyxLQUFPLEdBQU0sR0FDNUcsR0FBTyxHQUFLLEdBQVMsR0FDckIsR0FBTyxHQUFLLEdBQVMsT0FFckIsT0FBTyxNQUdULEdBQUksR0FBUyxLQUFPLEdBQU0sSUFBTSxHQUFTLEtBQU8sR0FBTSxJQUFNLEdBQVMsS0FBTyxHQUFNLElBQU0sR0FBUyxLQUFPLEdBQU0sR0FDNUcsR0FBTyxHQUFLLEdBQVMsR0FDckIsR0FBTyxHQUFLLEdBQVMsT0FFckIsT0FBTyxNQUdULE1BQU8sUUFJSixNQUdULEVBQVEsS0FBTyxHQUNmLEdBQUksSUFBMEIsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8sSUFBTyxJQUFPLElBQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFH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QUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLGFBQWEsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksYUFBYSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxhQUFhLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxJQUNseUMsY0FBZSxRQ1JmLEtBQU1BLGFBQVksQ0FBQyxXQUFZLFNBQVUsU0FHNUIsT0FBUyxDQUVwQixVQUFXLCtCQUdYLFFBQVMsK0JBRVQsT0FBUSw2QkFFUixNQUFPLGdDQUlJLFNBQVcsQ0FDdEIsU0FBVSxJQUNWLFFBQVMsSUFDVCxNQUFPLElBRVAsU0FBVSxJQUVWLFFBQVMsSUFFVCxlQUFnQixJQUVoQixjQUFlLEtBR2pCLGtCQUFrQixFQUFjLENBQzlCLE1BQU8sR0FBRyxLQUFLLE1BQU0sT0FHdkIsK0JBQStCLEVBQVEsQ0FDckMsR0FBSSxDQUFDLEVBQ0gsTUFBTyxHQUdULEtBQU0sR0FBVyxFQUFTLEdBRTFCLE1BQU8sTUFBSyxNQUFPLEdBQUksR0FBSyxHQUFZLElBQU8sRUFBVyxHQUFLLElBR2xELDJCQUEyQixFQUFrQixDQUMxRCxLQUFNLEdBQWUsU0FBUyxHQUFJLE9BQVEsRUFBaUIsUUFFckQsRUFBaUIsU0FBUyxHQUFJLFNBQVUsRUFBaUIsVUF5Qy9ELE1BQU8sVUFBUyxDQUNkLHNCQUNBLE9BekNhLENBQUMsRUFBUSxDQUFDLE9BQVEsRUFBVSxLQUFPLENBQzNDLEtBQUMsQ0FDSixTQUFVLEVBQWlCLEVBQWUsU0FDMUMsT0FBUSxFQUFlLEVBQWEsVUFDcEMsUUFBUSxHQUNOLEVBQ1UscUNBQThCLEVBQVNBLGFBOEI3QyxPQUFNLFFBQVEsR0FBUyxFQUFRLENBQUMsSUFBUSxJQUFJLEdBQWdCLEdBQUcsS0FBZ0IsTUFBTyxJQUFtQixTQUFXLEVBQWlCLFNBQVMsTUFBbUIsS0FBZ0IsTUFBTyxJQUFVLFNBQVcsRUFBUSxTQUFTLE1BQVUsS0FBSyxPQU1wUCxFQUFrQixDQUNuQixPQUFRLEVBQ1IsU0FBVSxJQzdGZCxLQUFNLFFBQVMsQ0FDYixjQUFlLElBQ2YsVUFBVyxLQUNYLE9BQVEsS0FDUixPQUFRLEtBQ1IsTUFBTyxLQUNQLFNBQVUsS0FDVixRQUFTLE1BRVgsYUFBZSxPQ1RmLEtBQU1BLGFBQVksQ0FBQyxjQUFlLFNBQVUsVUFBVyxVQUFXLGNBQWUsYUFBYyxTQVcvRixxQkFBcUIsRUFBVSxNQUFPLEVBQU0sQ0FDMUMsS0FBTSxDQUNKLE9BQVEsRUFBYyxHQUN0QixRQUFTLEVBQWUsR0FDeEIsWUFBYSxFQUFtQixHQUNoQyxXQUFZLEVBQWtCLElBQzVCLEVBQ0UsRUFBUSw4QkFBOEIsRUFBU0EsYUFFL0MsRUFBVSxjQUFjLEdBQ3hCLEVBQWM4RCxjQUFrQixHQUN0QyxHQUFJLEdBQVcsVUFBVSxFQUFhLENBQ3BDLE9BQVEsYUFBYSxFQUFZLFlBQWEsRUFBWSxRQUFTLEdBQ25FLFVBRUEsUUFBU3JCLFVBQVEsUUFDakIsV0FBWSxpQkFBaUIsRUFBUyxHQUN0QyxZQUFhLGtCQUFrQixHQUMvQixPQUFRLFNBQVMsR0FBSU4sWUFFdkIsU0FBVyxVQUFVLEVBQVUsR0FDL0IsRUFBVyxFQUFLLE9BQU8sQ0FBQyxFQUFLLElBQWEsVUFBVSxFQUFLLEdBQVcsR0FvQzdELEVDckVULEtBQU0sY0FBZSxjQUNyQixtQkFBZSxhQ0FBLHVCQUF1QixDQUNwQyxRQUNBLFFBQ0MsQ0FDRCxNQUFPNEIsaUJBQW9CLENBQ3pCLFFBQ0Esb0JBQ0FDLGlCQ1JHLG1DQUFtQyxFQUFNLENBQzlDLE1BQU8sc0JBQXFCLGdCQUFpQixHQUVyQix1QkFBdUIsZ0JBQWlCLENBQUMsT0FBUSxLQUFNLFdBQVksU0NGN0YsS0FBTWhFLGFBQVksQ0FBQyxnQkFBaUIsZ0JBQWlCLFFBQVMsY0FBZSxXQUFZLGlCQUFrQixpQkFBa0IsV0FBWSxPQUFRLGtCQUFtQixpQkFBa0IsZ0JBRXZLLHVCQUF1QixFQUFRLEdBQUksQ0FFaEQsS0FBTSxDQUNKLGdCQUFnQixFQUNoQixnQkFBZ0IsZ0JBQ2hCLFFBQVEsRUFDUixjQUFjLEVBQ2QsV0FBVyxHQUNYLGlCQUFpQixHQUNqQixpQkFBaUIsR0FDakIsU0FBVSxFQUNWLEtBQU0sRUFDTixrQkFBa0IsR0FDbEIsaUJBQWlCLEdBQ2pCLGVBQWUsR0FDYixFQUNFLEVBQVEsOEJBQThCLEVBQU9BLGFBRTdDLENBQUMsRUFBTSxHQUFnQixjQUFjLENBQ3pDLFdBQVksRUFDWixRQUFTLEVBQ1QsS0FBTSxFQUNOLE1BQU8sU0FHSCxFQUFjLENBQUMsRUFBTyxJQUFVLENBQ3BDLEFBQUssR0FDSCxFQUFhLEdBR1gsR0FDRixFQUFhLEVBQU8sSUFLbEIsR0FBUSxDQUFDLEVBQU8sSUFBUSxDQUM1QixLQUFNLEdBQVMsRUFBTSxFQUFRLEVBQzdCLE1BQU8sT0FBTSxLQUFLLENBQ2hCLFVBQ0MsQ0FBQyxFQUFHLElBQU0sRUFBUSxJQUdqQixFQUFhLEdBQU0sRUFBRyxLQUFLLElBQUksRUFBZSxJQUM5QyxFQUFXLEdBQU0sS0FBSyxJQUFJLEVBQVEsRUFBZ0IsRUFBRyxFQUFnQixHQUFJLEdBQ3pFLEVBQWdCLEtBQUssSUFBSSxLQUFLLElBQ3BDLEVBQU8sRUFDUCxFQUFRLEVBQWdCLEVBQWUsRUFBSSxHQUMzQyxFQUFnQixHQUNWLEVBQWMsS0FBSyxJQUFJLEtBQUssSUFDbEMsRUFBTyxFQUNQLEVBQWdCLEVBQWUsRUFBSSxHQUNuQyxFQUFTLE9BQVMsRUFBSSxFQUFTLEdBQUssRUFBSSxFQUFRLEdBRzFDLEVBQVcsQ0FBQyxHQUFJLEVBQWtCLENBQUMsU0FBVyxHQUFLLEdBQUksRUFBaUIsR0FBSyxDQUFDLFlBQWMsR0FBRyxFQUVyRyxHQUFJLEVBQWdCLEVBQWdCLEVBQUksQ0FBQyxrQkFBb0IsRUFBZ0IsRUFBSSxFQUFRLEVBQWdCLENBQUMsRUFBZ0IsR0FBSyxHQUMvSCxHQUFHLEdBQU0sRUFBZSxHQUV4QixHQUFJLEVBQWMsRUFBUSxFQUFnQixFQUFJLENBQUMsZ0JBQWtCLEVBQVEsRUFBZ0IsRUFBZ0IsQ0FBQyxFQUFRLEdBQWlCLEdBQUssR0FBRyxFQUFVLEdBQUksRUFBaUIsR0FBSyxDQUFDLFFBQVUsR0FBSSxFQUFpQixDQUFDLFFBQVUsSUFFcE4sRUFBYSxHQUFRLENBQ3pCLE9BQVEsT0FDRCxRQUNILE1BQU8sT0FFSixXQUNILE1BQU8sR0FBTyxNQUVYLE9BQ0gsTUFBTyxHQUFPLE1BRVgsT0FDSCxNQUFPLFdBR1AsTUFBTyxRQUtQLEVBQVEsRUFBUyxJQUFJLEdBQ2xCLE1BQU8sSUFBUyxTQUFXLENBQ2hDLFFBQVMsR0FBUyxDQUNoQixFQUFZLEVBQU8sSUFFckIsS0FBTSxPQUNOLEtBQU0sRUFDTixTQUFVLElBQVMsRUFDbkIsV0FDQSxlQUFnQixJQUFTLEVBQU8sT0FBUyxRQUN2QyxDQUNGLFFBQVMsR0FBUyxDQUNoQixFQUFZLEVBQU8sRUFBVyxLQUVoQyxLQUFNLEVBQ04sS0FBTSxFQUFXLEdBQ2pCLFNBQVUsR0FDVixTQUFVLEdBQVksRUFBSyxRQUFRLGNBQWdCLElBQU8sS0FBUyxRQUFVLElBQVMsT0FBUyxHQUFRLEVBQVEsR0FBUSxLQUczSCxNQUFPLFVBQVMsQ0FDZCxTQUNDLEdDM0dFLHVDQUF1QyxFQUFNLENBQ2xELE1BQU8sc0JBQXFCLG9CQUFxQixHQUVuRCxLQUFNLHVCQUF3Qix1QkFBdUIsb0JBQXFCLENBQUMsT0FBUSxPQUFRLFlBQWEsWUFBYSxPQUFRLGNBQWUsZ0JBQWlCLFdBQVksa0JBQW1CLG9CQUFxQixVQUFXLFdBQVksWUFBYSxlQUFnQixlQUFnQixXQUFZLFdBQVksU0FDN1MsNEJBQWUsc0JDRkEsbUJBQW9CLENBUWpDLE1BUGNpRSxZQUFlRCxnQkNGeEIsS0FBTSx1QkFBd0IsR0FBUSxrQkFBa0IsSUFBUyxJQUFTLFVBRTNFLE9BQVMsYUFBYSxjQUMxQkEsZUFDQSx3QkFFRixhQUFlLE9DQ2YsZ0JBQWdCLEVBQU8sQ0FDckIsS0FBTSxDQUNKLFlBQ0EsVUFDQSxVQUFVLEdBQ1YsVUFDQSxVQUNBLGFBQ0EsR0FBSSxFQUNKLFdBQ0EsV0FDRSxFQUNFLENBQUMsRUFBUyxHQUFjN0MsdUJBQWUsSUFDdkMsRUFBa0IsS0FBSyxFQUFXLEVBQVEsT0FBUSxFQUFRLGNBQWUsR0FBVyxFQUFRLGVBQzVGLEVBQWUsQ0FDbkIsTUFBTyxFQUNQLE9BQVEsRUFDUixJQUFLLENBQUUsR0FBYSxHQUFLLEVBQ3pCLEtBQU0sQ0FBRSxHQUFhLEdBQUssR0FFdEIsRUFBaUIsS0FBSyxFQUFRLE1BQU8sR0FBVyxFQUFRLGFBQWMsR0FBVyxFQUFRLGNBRS9GLE1BQUksQ0FBQyxHQUFVLENBQUMsR0FDZCxFQUFXLElBR2JGLHdCQUFnQixJQUFNLENBQ3BCLEdBQUksQ0FBQyxHQUFVLEdBQVksS0FBTSxDQUUvQixLQUFNLEdBQVksV0FBVyxFQUFVLEdBQ3ZDLE1BQU8sSUFBTSxDQUNYLGFBQWEsTUFLaEIsQ0FBQyxFQUFVLEVBQVEsSUFDRmlELHVCQUFLLE9BQVEsQ0FDL0IsVUFBVyxFQUNYLE1BQU8sRUFDUCxTQUF1QkEsdUJBQUssT0FBUSxDQUNsQyxVQUFXLE1DOUNqQixLQUFNLG9CQUFxQix1QkFBdUIsaUJBQWtCLENBQUMsT0FBUSxTQUFVLGdCQUFpQixnQkFBaUIsUUFBUyxlQUFnQixpQkFDbEoseUJBQWUsbUJDSGYsS0FBTWxFLGFBQVksQ0FBQyxTQUFVLFVBQVcsYUFFeEMsR0FBSSxHQUFJLEdBQUssRUFDVCxHQUNBLElBQ0EsSUFDQSxJQVlKLEtBQU0sVUFBVyxJQUNKLGFBQWUsR0FDdEIsY0FBZ0IsVUFBVSxJQUFPLElBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVd0QyxhQUFlLFVBQVUsS0FBUSxLQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVN2QyxnQkFBa0IsVUFBVSxLQUFRLEtBQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFhbkMsZ0JBQWtCbUUsU0FBTyxPQUFRLENBQzVDLEtBQU0saUJBQ04sS0FBTSxPQUNOLE9BQVEsS0FDUCxDQUNELFNBQVUsU0FDVixjQUFlLE9BQ2YsU0FBVSxXQUNWLE9BQVEsRUFDUixJQUFLLEVBQ0wsTUFBTyxFQUNQLE9BQVEsRUFDUixLQUFNLEVBQ04sYUFBYyxZQUlILGtCQUFvQkEsU0FBTyxPQUFRLENBQzlDLEtBQU0saUJBQ04sS0FBTSxXQUNMLEtBQVEsS0FBTTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVg7QUFBQTtBQUFBO0FBQUEsc0JBR2dCO0FBQUEsMEJBQ0k7QUFBQSxpQ0FDTztBQUFBO0FBQUE7QUFBQSxNQUczQjtBQUFBLDBCQUNvQjtBQUFBO0FBQUE7QUFBQSxPQUduQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQVNBO0FBQUE7QUFBQSxzQkFFZTtBQUFBLDBCQUNJO0FBQUEsaUNBQ087QUFBQTtBQUFBO0FBQUEsT0FHMUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUtlO0FBQUE7QUFBQSxpQ0FFVztBQUFBO0FBQUE7QUFBQTtBQUFBLEdBSTdCQyxxQkFBbUIsY0FBZSxjQUFlLFNBQVUsQ0FBQyxDQUM5RCxXQUNJLEVBQU0sWUFBWSxPQUFPLFVBQVdBLHFCQUFtQixjQUFlLENBQUMsQ0FDM0UsV0FDSSxFQUFNLFlBQVksU0FBUyxRQUFTQSxxQkFBbUIsTUFBT0EscUJBQW1CLGFBQWMsYUFBYyxTQUFVLENBQUMsQ0FDNUgsV0FDSSxFQUFNLFlBQVksT0FBTyxVQUFXQSxxQkFBbUIsYUFBYyxnQkFBaUIsQ0FBQyxDQUMzRixXQUNJLEVBQU0sWUFBWSxPQUFPLFdBT3pCLFlBQTJCQyx5QkFBaUIsU0FBcUIsRUFBUyxFQUFLLENBQ25GLEtBQU0sR0FBUSxjQUFjLENBQzFCLE1BQU8sRUFDUCxLQUFNLG1CQUdGLENBQ0osT0FBUSxFQUFhLEdBQ3JCLFVBQVUsR0FDVixhQUNFLEVBQ0UsRUFBUSw4QkFBOEIsRUFBT3JFLGFBRTdDLENBQUMsRUFBUyxHQUFjbUIsdUJBQWUsSUFDdkMsRUFBVUQscUJBQWEsR0FDdkIsRUFBaUJBLHFCQUFhLE1BQ3BDRCx3QkFBZ0IsSUFBTSxDQUNwQixBQUFJLEVBQWUsU0FDakIsR0FBZSxVQUNmLEVBQWUsUUFBVSxPQUUxQixDQUFDLElBRUosS0FBTSxHQUFvQkMscUJBQWEsSUFHakMsRUFBYUEscUJBQWEsTUFFMUIsRUFBbUJBLHFCQUFhLE1BQ2hDLEVBQVlBLHFCQUFhLE1BQy9CRCx3QkFBZ0IsSUFDUCxJQUFNLENBQ1gsYUFBYSxFQUFXLFVBRXpCLElBQ0gsS0FBTSxHQUFjRywwQkFBa0IsR0FBVSxDQUM5QyxLQUFNLENBQ0osVUFDQSxVQUNBLFVBQ0EsYUFDQSxNQUNFLEVBQ0osRUFBVyxHQUFjLENBQUMsR0FBRyxFQUF5QjhDLHVCQUFLLGtCQUFtQixDQUM1RSxRQUFTLENBQ1AsT0FBUSxLQUFLLEVBQVEsT0FBUUUscUJBQW1CLFFBQ2hELGNBQWUsS0FBSyxFQUFRLGNBQWVBLHFCQUFtQixlQUM5RCxjQUFlLEtBQUssRUFBUSxjQUFlQSxxQkFBbUIsZUFDOUQsTUFBTyxLQUFLLEVBQVEsTUFBT0EscUJBQW1CLE9BQzlDLGFBQWMsS0FBSyxFQUFRLGFBQWNBLHFCQUFtQixjQUM1RCxhQUFjLEtBQUssRUFBUSxhQUFjQSxxQkFBbUIsZUFFOUQsUUFBUyxTQUNULFFBQVMsRUFDVCxRQUFTLEVBQ1QsUUFBUyxFQUNULFdBQVksR0FDWCxFQUFRLFdBQ1gsRUFBUSxTQUFXLEVBQ25CLEVBQWUsUUFBVSxHQUN4QixDQUFDLElBQ0UsR0FBUWhELDBCQUFrQixDQUFDLEVBQVEsR0FBSSxFQUFVLEdBQUksSUFBTyxDQUNoRSxLQUFNLENBQ0osVUFBVSxHQUNWLFNBQVMsR0FBYyxFQUFRLFFBQy9CLGNBQWMsSUFFWixFQUVKLEdBQUksRUFBTSxPQUFTLGFBQWUsRUFBa0IsUUFBUyxDQUMzRCxFQUFrQixRQUFVLEdBQzVCLE9BR0YsQUFBSSxFQUFNLE9BQVMsY0FDakIsR0FBa0IsUUFBVSxJQUc5QixLQUFNLEdBQVUsRUFBYyxLQUFPLEVBQVUsUUFDekMsRUFBTyxFQUFVLEVBQVEsd0JBQTBCLENBQ3ZELE1BQU8sRUFDUCxPQUFRLEVBQ1IsS0FBTSxFQUNOLElBQUssR0FHUCxHQUFJLEdBQ0EsRUFDQSxFQUVKLEdBQUksR0FBVSxFQUFNLFVBQVksR0FBSyxFQUFNLFVBQVksR0FBSyxDQUFDLEVBQU0sU0FBVyxDQUFDLEVBQU0sUUFDbkYsRUFBVSxLQUFLLE1BQU0sRUFBSyxNQUFRLEdBQ2xDLEVBQVUsS0FBSyxNQUFNLEVBQUssT0FBUyxPQUM5QixDQUNMLEtBQU0sQ0FDSixXQUNBLFlBQ0UsRUFBTSxRQUFVLEVBQU0sUUFBUSxHQUFLLEVBQ3ZDLEVBQVUsS0FBSyxNQUFNLEdBQVUsRUFBSyxNQUNwQyxFQUFVLEtBQUssTUFBTSxHQUFVLEVBQUssS0FHdEMsR0FBSSxFQUNGLEVBQWEsS0FBSyxLQUFNLEdBQUksRUFBSyxPQUFTLEVBQUksRUFBSyxRQUFVLEdBQUssR0FFOUQsRUFBYSxHQUFNLEdBQ3JCLElBQWMsT0FFWCxDQUNMLEtBQU0sSUFBUSxLQUFLLElBQUksS0FBSyxJQUFLLEdBQVUsRUFBUSxZQUFjLEdBQUssR0FBVSxHQUFXLEVBQUksRUFDekYsR0FBUSxLQUFLLElBQUksS0FBSyxJQUFLLEdBQVUsRUFBUSxhQUFlLEdBQUssR0FBVSxHQUFXLEVBQUksRUFDaEcsRUFBYSxLQUFLLEtBQUssSUFBUyxFQUFJLElBQVMsR0FJL0MsQUFBSSxFQUFNLFFBSUosRUFBaUIsVUFBWSxNQUUvQixHQUFpQixRQUFVLElBQU0sQ0FDL0IsRUFBWSxDQUNWLFVBQ0EsVUFDQSxVQUNBLGFBQ0EsUUFLSixFQUFXLFFBQVUsV0FBVyxJQUFNLENBQ3BDLEFBQUksRUFBaUIsU0FDbkIsR0FBaUIsVUFDakIsRUFBaUIsUUFBVSxPQUU1QixlQUdMLEVBQVksQ0FDVixVQUNBLFVBQ0EsVUFDQSxhQUNBLFFBR0gsQ0FBQyxFQUFZLElBQ1YsRUFBVUEsMEJBQWtCLElBQU0sQ0FDdEMsR0FBTSxHQUFJLENBQ1IsUUFBUyxNQUVWLENBQUMsS0FDRSxFQUFPQSwwQkFBa0IsQ0FBQyxFQUFPLElBQU8sQ0FJNUMsR0FIQSxhQUFhLEVBQVcsU0FHcEIsRUFBTSxPQUFTLFlBQWMsRUFBaUIsUUFBUyxDQUN6RCxFQUFpQixVQUNqQixFQUFpQixRQUFVLEtBQzNCLEVBQVcsUUFBVSxXQUFXLElBQU0sQ0FDcEMsRUFBSyxFQUFPLEtBRWQsT0FHRixFQUFpQixRQUFVLEtBQzNCLEVBQVcsR0FDTCxFQUFXLE9BQVMsRUFDZixFQUFXLE1BQU0sR0FHbkIsR0FFVCxFQUFlLFFBQVUsR0FDeEIsSUFDSGtELHlDQUEwQixFQUFLLElBQU8sRUFDcEMsVUFDQSxTQUNBLFNBQ0UsQ0FBQyxFQUFTLEdBQU8sSUFDREosdUJBQUssZ0JBQWlCLFNBQVMsQ0FDakQsVUFBVyxLQUFLLEVBQVEsS0FBTUUscUJBQW1CLEtBQU0sR0FDdkQsSUFBSyxHQUNKLEVBQU8sQ0FDUixTQUF1QkYsdUJBQUssZ0JBQWlCLENBQzNDLFVBQVcsS0FDWCxLQUFNLEdBQ04sU0FBVSxTQXNCaEIsa0JBQWUsWUN2VlIsbUNBQW1DLEVBQU0sQ0FDOUMsTUFBTyxzQkFBcUIsZ0JBQWlCLEdBRS9DLEtBQU0sbUJBQW9CLHVCQUF1QixnQkFBaUIsQ0FBQyxPQUFRLFdBQVksaUJBQ3ZGLHdCQUFlLGtCQ0hmLEtBQU1sRSxhQUFZLENBQUMsU0FBVSxlQUFnQixXQUFZLFlBQWEsWUFBYSxXQUFZLGdCQUFpQixxQkFBc0IsY0FBZSx3QkFBeUIsZ0JBQWlCLFNBQVUsVUFBVyxnQkFBaUIsY0FBZSxVQUFXLGlCQUFrQixZQUFhLFVBQVcsY0FBZSxlQUFnQixZQUFhLGFBQWMsY0FBZSxlQUFnQixXQUFZLG1CQUFvQixRQWdCNVp1RSxvQkFBb0IsR0FBYyxDQUN0QyxLQUFNLENBQ0osV0FDQSxlQUNBLHdCQUNBLFdBQ0UsRUFJRSxFQUFrQixlQUhWLENBQ1osS0FBTSxDQUFDLE9BQVEsR0FBWSxXQUFZLEdBQWdCLGlCQUVYLDBCQUEyQixHQUV6RSxNQUFJLElBQWdCLEdBQ2xCLEdBQWdCLE1BQVEsSUFBSSxLQUd2QixHQUdJLGVBQWlCSixTQUFPLFNBQVUsQ0FDN0MsS0FBTSxnQkFDTixLQUFNLE9BQ04sa0JBQW1CLENBQUMsRUFBTyxJQUFXLEVBQU8sT0FDNUMsQ0FDRCxRQUFTLGNBQ1QsV0FBWSxTQUNaLGVBQWdCLFNBQ2hCLFNBQVUsV0FDVixVQUFXLGFBQ1gsd0JBQXlCLGNBQ3pCLGdCQUFpQixjQUdqQixRQUFTLEVBQ1QsT0FBUSxFQUNSLE9BQVEsRUFFUixhQUFjLEVBQ2QsUUFBUyxFQUVULE9BQVEsVUFDUixXQUFZLE9BQ1osY0FBZSxTQUNmLGNBQWUsT0FFZixpQkFBa0IsT0FFbEIsZUFBZ0IsT0FFaEIsTUFBTyxVQUNQLHNCQUF1QixDQUNyQixZQUFhLFNBR2QsS0FBS0ssb0JBQWtCLFlBQWEsQ0FDbkMsY0FBZSxPQUVmLE9BQVEsV0FFVixlQUFnQixDQUNkLFlBQWEsV0FTWCxXQUEwQkgseUJBQWlCLFNBQW9CLEVBQVMsRUFBSyxDQUNqRixLQUFNLEdBQVEsY0FBYyxDQUMxQixNQUFPLEVBQ1AsS0FBTSxrQkFHRixDQUNKLFNBQ0EsZUFBZSxHQUNmLFdBQ0EsWUFDQSxZQUFZLFNBQ1osV0FBVyxHQUNYLGdCQUFnQixHQUNoQixxQkFBcUIsR0FDckIsY0FBYyxHQUNkLGdCQUFnQixJQUNoQixTQUNBLFVBQ0EsZ0JBQ0EsZUFDQSxVQUNBLGlCQUNBLFlBQ0EsVUFDQSxjQUNBLGVBQ0EsWUFDQSxhQUNBLGNBQ0EsZUFDQSxXQUFXLEVBQ1gsbUJBQ0EsUUFDRSxFQUNFLEdBQVEsOEJBQThCLEVBQU9yRSxhQUU3QyxHQUFZa0IscUJBQWEsTUFDekIsR0FBWUEscUJBQWEsTUFDekIsQ0FDSixvQkFDQSxRQUFTLEVBQ1QsT0FBUSxFQUNSLElBQUssR0FDSCxvQkFDRSxDQUFDLEVBQWMsR0FBbUJDLHVCQUFlLElBRXZELEFBQUksR0FBWSxHQUNkLEVBQWdCLElBR2xCbUQsa0NBQTBCLEVBQVEsSUFBTyxFQUN2QyxhQUFjLElBQU0sQ0FDbEIsRUFBZ0IsSUFDaEIsR0FBVSxRQUFRLFdBRWxCLElBQ0pyRCx3QkFBZ0IsSUFBTSxDQUNwQixBQUFJLEdBQWdCLEdBQWUsQ0FBQyxHQUNsQyxHQUFVLFFBQVEsV0FFbkIsQ0FBQyxFQUFlLEVBQWEsSUFFaEMsV0FBMEIsR0FBYyxHQUFlLEdBQW1CLEVBQW9CLENBQzVGLE1BQU8sa0JBQWlCLElBQ2xCLEtBQ0YsR0FBYyxJQUtaLENBRlcsSUFFQSxHQUFVLFNBQ3ZCLEdBQVUsUUFBUSxJQUFjLElBRzNCLEtBSVgsS0FBTSxJQUFrQixFQUFpQixRQUFTLEdBQzVDLEdBQW9CLEVBQWlCLE9BQVEsR0FDN0MsR0FBa0IsRUFBaUIsT0FBUSxJQUMzQyxHQUFnQixFQUFpQixPQUFRLEdBQ3pDLEdBQW1CLEVBQWlCLE9BQVEsSUFBUyxDQUN6RCxBQUFJLEdBQ0YsR0FBTSxpQkFHSixHQUNGLEVBQWEsTUFHWCxFQUFtQixFQUFpQixRQUFTLEdBQzdDLEVBQWlCLEVBQWlCLE9BQVEsR0FDMUMsRUFBa0IsRUFBaUIsT0FBUSxHQUMzQyxHQUFhLEVBQWlCLE9BQVEsSUFBUyxDQUNuRCxFQUFrQixJQUVkLEVBQWtCLFVBQVksSUFDaEMsRUFBZ0IsSUFHZCxHQUNGLEVBQU8sS0FFUixJQUNHLEdBQWMsaUJBQWlCLElBQVMsQ0FFNUMsQUFBSyxHQUFVLFNBQ2IsSUFBVSxRQUFVLEdBQU0sZUFHNUIsRUFBbUIsSUFFZixFQUFrQixVQUFZLElBQ2hDLEdBQWdCLElBRVosR0FDRixFQUFlLEtBSWYsR0FDRixFQUFRLE1BSU4sR0FBb0IsSUFBTSxDQUM5QixLQUFNLElBQVMsR0FBVSxRQUN6QixNQUFPLElBQWEsSUFBYyxVQUFZLENBQUUsSUFBTyxVQUFZLEtBQU8sR0FBTyxPQU83RSxHQUFhQyxxQkFBYSxJQUMxQixHQUFnQixpQkFBaUIsSUFBUyxDQUU5QyxBQUFJLEdBQWUsQ0FBQyxHQUFXLFNBQVcsR0FBZ0IsR0FBVSxTQUFXLEdBQU0sTUFBUSxLQUMzRixJQUFXLFFBQVUsR0FDckIsR0FBVSxRQUFRLEtBQUssR0FBTyxJQUFNLENBQ2xDLEdBQVUsUUFBUSxNQUFNLE9BSXhCLEdBQU0sU0FBVyxHQUFNLGVBQWlCLE1BQXVCLEdBQU0sTUFBUSxLQUMvRSxHQUFNLGlCQUdKLEdBQ0YsRUFBVSxJQUlSLEdBQU0sU0FBVyxHQUFNLGVBQWlCLE1BQXVCLEdBQU0sTUFBUSxTQUFXLENBQUMsR0FDM0YsSUFBTSxpQkFFRixHQUNGLEVBQVEsT0FJUixHQUFjLGlCQUFpQixJQUFTLENBRzVDLEFBQUksR0FBZSxHQUFNLE1BQVEsS0FBTyxHQUFVLFNBQVcsR0FBZ0IsQ0FBQyxHQUFNLGtCQUNsRixJQUFXLFFBQVUsR0FDckIsR0FBVSxRQUFRLEtBQUssR0FBTyxJQUFNLENBQ2xDLEdBQVUsUUFBUSxRQUFRLE9BSTFCLEdBQ0YsRUFBUSxJQUlOLEdBQVcsR0FBTSxTQUFXLEdBQU0sZUFBaUIsTUFBdUIsR0FBTSxNQUFRLEtBQU8sQ0FBQyxHQUFNLGtCQUN4RyxFQUFRLE1BR1osR0FBSSxJQUFnQixFQUVwQixBQUFJLEtBQWtCLFVBQWEsSUFBTSxNQUFRLEdBQU0sS0FDckQsSUFBZ0IsR0FHbEIsS0FBTSxHQUFjLEdBRXBCLEFBQUksS0FBa0IsU0FDcEIsR0FBWSxLQUFPLElBQVMsT0FBWSxTQUFXLEVBQ25ELEVBQVksU0FBVyxHQUVuQixFQUFDLEdBQU0sTUFBUSxDQUFDLEdBQU0sSUFDeEIsR0FBWSxLQUFPLFVBR2pCLEdBQ0YsR0FBWSxpQkFBbUIsSUFJbkMsS0FBTSxHQUFlLFdBQVcsRUFBaUIsSUFDM0MsRUFBWSxXQUFXLEVBQUssR0FDNUIsQ0FBQyxHQUFjLElBQW1CQyx1QkFBZSxJQUN2REYsd0JBQWdCLElBQU0sQ0FDcEIsR0FBZ0IsS0FDZixJQUNILEtBQU0sSUFBb0IsSUFBZ0IsQ0FBQyxHQUFpQixDQUFDLEVBV3ZELEdBQWEsU0FBUyxHQUFJLEVBQU8sQ0FDckMsZUFDQSxZQUNBLFdBQ0EsZ0JBQ0EscUJBQ0EsY0FDQSxXQUNBLGlCQUdJLEdBQVVzRCxvQkFBa0IsSUFDbEMsTUFBb0JFLHlCQUFNLGVBQWdCLFNBQVMsQ0FDakQsR0FBSSxHQUNKLFVBQVcsS0FBSyxHQUFRLEtBQU0sR0FDOUIsV0FBWSxHQUNaLE9BQVEsR0FDUixRQUFTLEVBQ1QsY0FBZSxHQUNmLFFBQVMsR0FDVCxVQUFXLEdBQ1gsUUFBUyxHQUNULFlBQWEsR0FDYixhQUFjLEdBQ2QsVUFBVyxHQUNYLFlBQWEsR0FDYixXQUFZLEVBQ1osWUFBYSxFQUNiLGFBQWMsRUFDZCxJQUFLLEVBQ0wsU0FBVSxFQUFXLEdBQUssRUFDMUIsS0FBTSxHQUNMLEVBQWEsR0FBTyxDQUNyQixTQUFVLENBQUMsRUFBVSxHQUlyQlAsdUJBQUtRLGNBQWEsU0FBUyxDQUN6QixJQUFLLEdBQ0wsT0FBUSxHQUNQLElBQXFCLFdBMEw1QixpQkFBZSxXQ3BoQlIsZ0NBQWdDLEVBQU0sQ0FDM0MsTUFBTyxzQkFBcUIsYUFBYyxHQUVyQix1QkFBdUIsYUFBYyxDQUFDLE9BQVEsZUFBZ0IsaUJBQWtCLGNBQWUsYUFBYyxnQkFBaUIsa0JBQW1CLGdCQUFpQixpQkFBa0Isa0JDRjNNLEtBQU0xRSxhQUFZLENBQUMsV0FBWSxZQUFhLFFBQVMsWUFBYSxXQUFZLFlBQWEsY0FBZSxXQVlwR3VFLG9CQUFvQixHQUFjLENBQ3RDLEtBQU0sQ0FDSixRQUNBLFdBQ0EsV0FDRSxFQUNFLEVBQVEsQ0FDWixLQUFNLENBQUMsT0FBUSxJQUFVLFdBQWEsUUFBUSxXQUFXLEtBQVUsV0FBVyxXQUFXLE9BRTNGLE1BQU8sZ0JBQWUsRUFBTyx1QkFBd0IsSUFHakQsWUFBY0osU0FBTyxNQUFPLENBQ2hDLEtBQU0sYUFDTixLQUFNLE9BQ04sa0JBQW1CLENBQUMsRUFBTyxJQUFXLENBQ3BDLEtBQU0sQ0FDSixjQUNFLEVBQ0osTUFBTyxDQUFDLEVBQU8sS0FBTSxFQUFXLFFBQVUsV0FBYSxFQUFPLFFBQVEsV0FBVyxFQUFXLFVBQVcsRUFBTyxXQUFXLFdBQVcsRUFBVyxpQkFFaEosQ0FBQyxDQUNGLFFBQ0EsZ0JBQ0ksQ0FDSixHQUFJLEdBQXVCLEVBRTNCLE1BQU8sQ0FDTCxXQUFZLE9BQ1osTUFBTyxNQUNQLE9BQVEsTUFDUixRQUFTLGVBQ1QsS0FBTSxlQUNOLFdBQVksRUFDWixXQUFZLEVBQU0sWUFBWSxPQUFPLE9BQVEsQ0FDM0MsU0FBVSxFQUFNLFlBQVksU0FBUyxVQUV2QyxTQUFVLENBQ1IsUUFBUyxVQUNULE1BQU8sRUFBTSxXQUFXLFFBQVEsSUFDaEMsT0FBUSxFQUFNLFdBQVcsUUFBUSxJQUNqQyxNQUFPLEVBQU0sV0FBVyxRQUFRLEtBQ2hDLEVBQVcsVUFFYixNQUFRLEdBQXlCLEdBQXlCLEVBQU0sUUFBUSxFQUFXLFNBQVcsS0FBTyxPQUFTLEVBQXVCLE9BQVMsS0FBTyxFQUF3QixDQUMzSyxPQUFRLEVBQU0sUUFBUSxPQUFPLE9BQzdCLFNBQVUsRUFBTSxRQUFRLE9BQU8sU0FDL0IsUUFBUyxRQUNULEVBQVcsVUFHWCxRQUF1QkUseUJBQWlCLFNBQWlCLEVBQVMsRUFBSyxDQUMzRSxLQUFNLEdBQVEsY0FBYyxDQUMxQixNQUFPLEVBQ1AsS0FBTSxlQUdGLENBQ0osV0FDQSxZQUNBLFFBQVEsVUFDUixZQUFZLE1BQ1osV0FBVyxTQUNYLFlBQ0EsY0FDQSxVQUFVLGFBQ1IsRUFDRSxFQUFRLDhCQUE4QixFQUFPckUsYUFFN0MsRUFBYSxTQUFTLEdBQUksRUFBTyxDQUNyQyxRQUNBLFlBQ0EsV0FDQSxZQUdJLEVBQVV1RSxvQkFBa0IsR0FDbEMsTUFBb0JFLHlCQUFNLFlBQWEsU0FBUyxDQUM5QyxHQUFJLEVBQ0osVUFBVyxLQUFLLEVBQVEsS0FBTSxHQUM5QixXQUFZLEVBQ1osVUFBVyxRQUNYLFFBQVMsRUFDVCxNQUFPLEVBQ1AsY0FBZSxFQUFjLE9BQVksR0FDekMsS0FBTSxFQUFjLE1BQVEsT0FDNUIsSUFBSyxHQUNKLEVBQU8sQ0FDUixTQUFVLENBQUMsRUFBVSxFQUEyQlAsdUJBQUssUUFBUyxDQUM1RCxTQUFVLElBQ1AsV0FrRlQsUUFBUSxRQUFVLFVBQ2xCLGNBQWUsUUNuTEEsdUJBQXVCLEVBQU0sRUFBYSxDQUN2RCxLQUFNLEdBQVksQ0FBQyxFQUFPLElBQXFCQSx1QkFBS1MsVUFBUyxTQUFTLENBQ3BFLGNBQWUsR0FBRyxRQUNsQixJQUFLLEdBQ0osRUFBTyxDQUNSLFNBQVUsS0FTWixTQUFVLFFBQVVBLFVBQVEsUUFDUkMsbUJBQXlCUCx5QkFBaUIsSUNoQmhFLGtCQUFlLGNBQTRCSCx1QkFBSyxPQUFRLENBQ3RELEVBQUcsK0RBQ0QsMEJDRlcsY0FBNEJBLHVCQUFLLE9BQVEsQ0FDdEQsRUFBRywrREFDRCwrQkNGVyxjQUE0QkEsdUJBQUssT0FBUSxDQUN0RCxFQUFHLGtEQUNELG1DQ0ZXLGNBQTRCQSx1QkFBSyxPQUFRLENBQ3RELEVBQUcsbURBQ0QsZ0JDUEosS0FBTWxFLGFBQVksQ0FBQyxZQUFhLFFBQVMsWUFBYSxXQUFZLE9BQVEsV0FBWSxRQUFTLE9BQVEsT0FBUSxXQW1Cekcsa0JBQW9CLENBQUMsRUFBTyxJQUFXLENBQzNDLEtBQU0sQ0FDSixjQUNFLEVBQ0osTUFBTyxDQUFDLEVBQU8sS0FBTSxFQUFPLEVBQVcsU0FBVSxFQUFPLE9BQU8sV0FBVyxFQUFXLFNBQVUsRUFBVyxVQUFZLFFBQVUsRUFBTyxPQUFPLFdBQVcsRUFBVyxVQUFXLEVBQVcsVUFBWSxZQUFjLEVBQU8sV0FBVyxXQUFXLEVBQVcsVUFBVyxFQUFXLFFBQVUsV0FBYSxFQUFPLFFBQVMsRUFBVyxPQUFTLFFBQVUsRUFBTyxLQUFPLEdBQVcsT0FBUyxrQkFBb0IsRUFBVyxPQUFTLGlCQUFtQixFQUFPLFNBQVcsR0FBVyxPQUFTLFlBQWMsRUFBVyxPQUFTLFNBQVcsRUFBTyxhQUFlLEdBQVcsT0FBUyxTQUFXLEVBQVcsT0FBUyxTQUFXLEVBQU8sWUFHOWxCdUUsb0JBQW9CLEdBQWMsQ0FDdEMsS0FBTSxDQUNKLFVBQ0EsUUFDQSxXQUNBLFdBQ0EsT0FDQSxRQUNBLE9BQ0EsV0FDRSxFQUNFLEVBQVEsQ0FDWixLQUFNLENBQUMsT0FBUSxPQUFPLFdBQVcsS0FBUyxFQUFTLEVBQU8sSUFBVSxZQUFjLEdBQUcsSUFBVSxXQUFXLEtBQVUsR0FBWSxXQUFZLEdBQVksV0FBWSxDQUNsSyxLQUFNLE9BQ04sTUFBTyxZQUNQLEtBQU0sWUFDTixpQkFBa0IsV0FDbEIsZUFBZ0IsV0FDaEIsU0FBVSxlQUNWLEtBQU0sZ0JBQ04sSUFDRixLQUFNLENBQUMsU0FFVCxNQUFPLGdCQUFlLEVBQU8sOEJBQStCLElBR3hELHVCQUF5QkosU0FBTyxNQUFPLENBQzNDLEtBQU0sb0JBQ04sS0FBTSxPQUNOLG9CQUNDLENBQUMsQ0FDRixRQUNBLGdCQUNJLFNBQVMsR0FBSSxFQUFNLFdBQVcsTUFBTyxDQUN6QyxhQUFjLEdBQUssRUFDbkIsVUFBVyxTQUNYLFVBQVcsYUFDWCxTQUFVLEdBQ1YsUUFBUyxRQUNULE9BQVEsUUFDUixNQUFPLEVBQU0sUUFBUSxLQUFLLFFBQzFCLE9BQVEsUUFDUCxLQUFLVSx3QkFBc0IsWUFBYSxDQUN2QyxRQUFTLEVBQU0sUUFBUSxPQUFPLGtCQUUvQixFQUFXLE9BQVMsU0FBVyxDQUNoQyxTQUFVLEdBQ1YsYUFBYyxHQUFLLEVBQ25CLE9BQVEsUUFDUixRQUFTLFNBQ1IsRUFBVyxPQUFTLFNBQVcsQ0FDaEMsU0FBVSxHQUNWLGFBQWMsR0FBSyxFQUNuQixRQUFTLFNBQ1QsU0FBVSxFQUFNLFdBQVcsUUFBUSxPQUUvQixtQkFBcUJWLFNBQU9XLGFBQVksQ0FDNUMsS0FBTSxvQkFDTixLQUFNLE9BQ04sb0JBQ0MsQ0FBQyxDQUNGLFFBQ0EsZ0JBQ0ksU0FBUyxHQUFJLEVBQU0sV0FBVyxNQUFPLENBQ3pDLGFBQWMsR0FBSyxFQUNuQixVQUFXLFNBQ1gsVUFBVyxhQUNYLFNBQVUsR0FDVixPQUFRLEdBQ1IsUUFBUyxRQUNULE9BQVEsUUFDUixNQUFPLEVBQU0sUUFBUSxLQUFLLFNBQ3pCLEtBQUtELHdCQUFzQixnQkFBaUIsQ0FDM0MsZ0JBQWlCLEVBQU0sUUFBUSxPQUFPLFFBRXZDLEtBQUtBLHdCQUFzQixZQUFhLENBQ3ZDLFFBQVMsRUFBTSxRQUFRLE9BQU8saUJBRWhDLFdBQVksRUFBTSxZQUFZLE9BQU8sQ0FBQyxRQUFTLG9CQUFxQixDQUNsRSxTQUFVLEVBQU0sWUFBWSxTQUFTLFFBRXZDLFVBQVcsQ0FDVCxnQkFBaUIsRUFBTSxRQUFRLE9BQU8sTUFFdEMsdUJBQXdCLENBQ3RCLGdCQUFpQixpQkFHcEIsS0FBS0Esd0JBQXNCLFlBQWEsQ0FDdkMsZ0JBQWlCLEVBQU0sUUFBUSxPQUFPLFNBQ3RDLFVBQVcsQ0FDVCxnQkFBaUIsTUFBTSxFQUFNLFFBQVEsT0FBTyxTQUFVLEVBQU0sUUFBUSxPQUFPLGdCQUFrQixFQUFNLFFBQVEsT0FBTyxjQUVsSCx1QkFBd0IsQ0FDdEIsZ0JBQWlCLEVBQU0sUUFBUSxPQUFPLFlBR3pDLEtBQUtBLHdCQUFzQixnQkFBaUIsQ0FDM0MsZ0JBQWlCLE1BQU0sRUFBTSxRQUFRLE9BQU8sU0FBVSxFQUFNLFFBQVEsT0FBTyxnQkFBa0IsRUFBTSxRQUFRLE9BQU8sZ0JBRW5ILEtBQUtBLHdCQUFzQixZQUFhLENBQ3ZDLFFBQVMsRUFDVCxNQUFPLEVBQU0sUUFBUSxPQUFPLFNBQzVCLGdCQUFpQixFQUFNLFFBQVEsT0FBTyxZQUd6QyxFQUFXLE9BQVMsU0FBVyxDQUNoQyxTQUFVLEdBQ1YsT0FBUSxHQUNSLGFBQWMsR0FBSyxFQUNuQixPQUFRLFFBQ1IsUUFBUyxTQUNSLEVBQVcsT0FBUyxTQUFXLENBQ2hDLFNBQVUsR0FDVixPQUFRLEdBQ1IsYUFBYyxHQUFLLEVBQ25CLFFBQVMsU0FDVCxTQUFVLEVBQU0sV0FBVyxRQUFRLEtBQ2xDLEVBQVcsUUFBVSxXQUFhLENBQ25DLGFBQWMsRUFBTSxNQUFNLGVBQ3hCLENBQUMsQ0FDSCxRQUNBLGdCQUNJLFNBQVMsR0FBSSxFQUFXLFVBQVksUUFBVSxFQUNqRCxLQUFLQSx3QkFBc0IsWUFBYSxTQUFTLEdBQUksRUFBVyxRQUFVLFlBQWMsQ0FDdkYsTUFBTyxFQUFNLFFBQVEsRUFBVyxPQUFPLGFBQ3ZDLGdCQUFpQixFQUFNLFFBQVEsRUFBVyxPQUFPLEtBQ2pELFVBQVcsQ0FDVCxnQkFBaUIsRUFBTSxRQUFRLEVBQVcsT0FBTyxLQUVqRCx1QkFBd0IsQ0FDdEIsZ0JBQWlCLEVBQU0sUUFBUSxFQUFXLE9BQU8sUUFHcEQsS0FBS0Esd0JBQXNCLGdCQUFpQixDQUMzQyxnQkFBaUIsRUFBTSxRQUFRLEVBQVcsT0FBTyxPQUVsRCxFQUNBLEtBQUtBLHdCQUFzQixZQUFhLENBQ3ZDLE1BQU8sRUFBTSxRQUFRLE9BQU8sYUFHL0IsRUFBVyxVQUFZLFlBQWMsQ0FDdEMsT0FBUSxhQUFhLEVBQU0sUUFBUSxPQUFTLFFBQVUsc0JBQXdCLCtCQUM3RSxLQUFLQSx3QkFBc0IsWUFBYSxTQUFTLEdBQUksRUFBVyxRQUFVLFlBQWMsQ0FDdkYsTUFBTyxFQUFNLFFBQVEsRUFBVyxPQUFPLEtBQ3ZDLE9BQVEsYUFBYSxNQUFNLEVBQU0sUUFBUSxFQUFXLE9BQU8sS0FBTSxNQUNqRSxnQkFBaUIsTUFBTSxFQUFNLFFBQVEsRUFBVyxPQUFPLEtBQU0sRUFBTSxRQUFRLE9BQU8sa0JBQ2xGLFVBQVcsQ0FDVCxnQkFBaUIsTUFBTSxFQUFNLFFBQVEsRUFBVyxPQUFPLEtBQU0sRUFBTSxRQUFRLE9BQU8saUJBQW1CLEVBQU0sUUFBUSxPQUFPLGNBRTFILHVCQUF3QixDQUN0QixnQkFBaUIsaUJBR3BCLEtBQUtBLHdCQUFzQixnQkFBaUIsQ0FDM0MsZ0JBQWlCLE1BQU0sRUFBTSxRQUFRLEVBQVcsT0FBTyxLQUFNLEVBQU0sUUFBUSxPQUFPLGlCQUFtQixFQUFNLFFBQVEsT0FBTyxnQkFFM0gsRUFDQSxLQUFLQSx3QkFBc0IsWUFBYSxDQUN2QyxZQUFhLEVBQU0sUUFBUSxPQUFPLG1CQUNsQyxNQUFPLEVBQU0sUUFBUSxPQUFPLGVBSTVCLHVCQUF5QlYsU0FBTyxNQUFPLENBQzNDLEtBQU0sb0JBQ04sS0FBTSxPQUNOLGtCQUFtQixDQUFDLEVBQU8sSUFBVyxFQUFPLE9BQzVDLENBQUMsQ0FDRixRQUNBLGdCQUNJLFNBQVMsQ0FDYixTQUFVLEVBQU0sV0FBVyxRQUFRLElBQ25DLE9BQVEsVUFDUCxFQUFXLE9BQVMsU0FBVyxDQUNoQyxTQUFVLEVBQU0sV0FBVyxRQUFRLEtBQ2xDLEVBQVcsT0FBUyxTQUFXLENBQ2hDLFNBQVUsRUFBTSxXQUFXLFFBQVEsT0FFL0IsZUFBOEJFLHlCQUFpQixTQUF3QixFQUFTLEVBQUssQ0FDekYsS0FBTSxHQUFRLGNBQWMsQ0FDMUIsTUFBTyxFQUNQLEtBQU0sc0JBR0YsQ0FDSixZQUNBLFFBQVEsV0FDUixZQUNBLFdBQVcsR0FDWCxPQUNBLFdBQVcsR0FDWCxRQUFRLFdBQ1IsT0FBTyxTQUNQLE9BQU8sT0FDUCxVQUFVLFFBQ1IsRUFDRSxFQUFRLDhCQUE4QixFQUFPckUsYUFFN0MsRUFBYSxTQUFTLEdBQUksRUFBTyxDQUNyQyxRQUNBLFdBQ0EsV0FDQSxRQUNBLE9BQ0EsT0FDQSxZQUdJLEVBQVEsV0FDUixHQUFVdUUsb0JBQWtCLEdBWTVCLEVBQU8sQUFYVyxHQUFNLFlBQWMsTUFBUSxDQUNsRCxTQUFVLGlCQUNWLEtBQU0sbUJBQ04sS0FBTSxjQUNOLE1BQU8sY0FDTCxDQUNGLFNBQVUsbUJBQ1YsS0FBTSxpQkFDTixNQUFPLGNBQ1AsS0FBTSxlQUVxQixHQUM3QixNQUFPLEtBQVMsa0JBQW9CLElBQVMsZUFBOEJMLHVCQUFLLHVCQUF3QixTQUFTLENBQy9HLElBQUssRUFDTCxXQUFZLEVBQ1osVUFBVyxLQUFLLEdBQVEsS0FBTSxJQUM3QixFQUFPLENBQ1IsU0FBVSxZQUNPTyx3QkFBTSxtQkFBb0IsU0FBUyxDQUNwRCxJQUFLLEVBQ0wsV0FBWSxFQUNaLFVBQVcsRUFDWCxTQUFVLEVBQ1YsVUFBVyxLQUFLLEdBQVEsS0FBTSxJQUM3QixFQUFPLENBQ1IsU0FBVSxDQUFDLElBQVMsUUFBVSxFQUFNLEVBQW9CUCx1QkFBSyx1QkFBd0IsQ0FDbkYsR0FBSSxFQUNKLFdBQVksRUFDWixVQUFXLEdBQVEsT0FDaEIsV0EwRlQscUJBQWUsZUNyV2YsS0FBTWxFLGFBQVksQ0FBQyxnQkFBaUIsWUFBYSxRQUFTLFFBQVMsY0FBZSxXQUFZLG1CQUFvQixpQkFBa0IsaUJBQWtCLFdBQVksT0FBUSxhQUFjLFFBQVMsa0JBQW1CLGlCQUFrQixlQUFnQixPQUFRLFdBYXhQdUUsb0JBQW9CLEdBQWMsQ0FDdEMsS0FBTSxDQUNKLFVBQ0EsV0FDRSxFQUtKLE1BQU8sZ0JBSk8sQ0FDWixLQUFNLENBQUMsT0FBUSxHQUNmLEdBQUksQ0FBQyxPQUVzQiwwQkFBMkIsSUFHcEQsZUFBaUJKLFNBQU8sTUFBTyxDQUNuQyxLQUFNLGdCQUNOLEtBQU0sT0FDTixrQkFBbUIsQ0FBQyxFQUFPLElBQVcsQ0FDcEMsS0FBTSxDQUNKLGNBQ0UsRUFDSixNQUFPLENBQUMsRUFBTyxLQUFNLEVBQU8sRUFBVyxhQUV4QyxJQUNHLGFBQWVBLFNBQU8sS0FBTSxDQUNoQyxLQUFNLGdCQUNOLEtBQU0sS0FDTixrQkFBbUIsQ0FBQyxFQUFPLElBQVcsRUFBTyxLQUM1QyxDQUNELFFBQVMsT0FDVCxTQUFVLE9BQ1YsV0FBWSxTQUNaLFFBQVMsRUFDVCxPQUFRLEVBQ1IsVUFBVyxTQUdiLDZCQUE2QixFQUFNLEVBQU0sRUFBVSxDQUNqRCxNQUFJLEtBQVMsT0FDSixHQUFHLEVBQVcsR0FBSyxnQkFBZ0IsSUFHckMsU0FBUyxTQUdsQixLQUFNLFlBQTBCRSx5QkFBaUIsU0FBb0IsRUFBUyxFQUFLLENBQ2pGLEtBQU0sR0FBUSxjQUFjLENBQzFCLE1BQU8sRUFDUCxLQUFNLGtCQUdGLENBQ0osZ0JBQWdCLEVBQ2hCLFlBQ0EsUUFBUSxXQUNSLFFBQVEsRUFDUixjQUFjLEVBQ2QsV0FBVyxHQUNYLG1CQUFtQixvQkFDbkIsaUJBQWlCLEdBQ2pCLGlCQUFpQixHQUNqQixhQUFhLEdBQXFCSCx1QkFBS2EsaUJBQWdCLFNBQVMsR0FBSSxJQUNwRSxRQUFRLFdBQ1Isa0JBQWtCLEdBQ2xCLGlCQUFpQixHQUNqQixnQkFBZSxFQUNmLE9BQU8sU0FDUCxVQUFVLFFBQ1IsRUFDRSxFQUFRLDhCQUE4QixFQUFPL0UsYUFFN0MsQ0FDSixTQUNFLGNBQWMsU0FBUyxHQUFJLEVBQU8sQ0FDcEMsY0FBZSxnQkFHWCxFQUFhLFNBQVMsR0FBSSxFQUFPLENBQ3JDLGdCQUNBLFFBQ0EsUUFDQSxjQUNBLFdBQ0EsbUJBQ0EsaUJBQ0EsaUJBQ0EsYUFDQSxRQUNBLGtCQUNBLGlCQUNBLGdCQUNBLE9BQ0EsWUFHSSxFQUFVdUUsb0JBQWtCLEdBQ2xDLE1BQW9CTCx3QkFBSyxlQUFnQixTQUFTLENBQ2hELGFBQWMsd0JBQ2QsVUFBVyxLQUFLLEVBQVEsS0FBTSxHQUM5QixXQUFZLEVBQ1osSUFBSyxHQUNKLEVBQU8sQ0FDUixTQUF1QkEsdUJBQUssYUFBYyxDQUN4QyxVQUFXLEVBQVEsR0FDbkIsV0FBWSxFQUNaLFNBQVUsRUFBTSxJQUFJLENBQUMsRUFBTSxJQUF1QkEsdUJBQUssS0FBTSxDQUMzRCxTQUFVLEVBQVcsU0FBUyxHQUFJLEVBQU0sQ0FDdEMsUUFDQSxhQUFjLEVBQWlCLEVBQUssS0FBTSxFQUFLLEtBQU0sRUFBSyxVQUMxRCxRQUNBLE9BQ0EsY0FFRCxXQWlKVCxpQkFBZSxtU0M5UVIsa0NBQWtDLEVBQU0sQ0FDN0MsTUFBTyxzQkFBcUIsZUFBZ0IsR0FFckIsdUJBQXVCLGVBQWdCLENBQUMsT0FBUSxpQkFBa0IsUUFBUyxhQUFjLGFBQWMsYUFBYyxhQUFjLGVDRjVKLEtBQU1sRSxhQUFZLENBQUMsWUFBYSxZQUFhLGlCQUFrQixRQUFTLFlBV2xFLGtCQUFvQixHQUFjLENBQ3RDLEtBQU0sQ0FDSixVQUNBLFFBQ0EsaUJBQ0EsWUFDRSxFQUNFLEVBQVEsQ0FDWixLQUFNLENBQUMsT0FBUSxHQUFZLFdBQVcsV0FBVyxPQUFPLE1BQWMsR0FBUyxRQUFTLEdBQWtCLG1CQUU1RyxNQUFPLGdCQUFlLEVBQU8seUJBQTBCLElBR25ELGNBQWdCbUUsU0FBTyxNQUFPLENBQ2xDLEtBQU0sZUFDTixLQUFNLE9BQ04sa0JBQW1CLENBQUMsRUFBTyxJQUFXLENBQ3BDLEtBQU0sQ0FDSixjQUNFLEVBQ0osTUFBTyxDQUFDLEVBQU8sS0FBTSxFQUFPLFdBQVcsV0FBVyxPQUFPLEVBQVcsY0FBZSxFQUFXLE9BQVMsRUFBTyxNQUFPLEVBQVcsZ0JBQWtCLEVBQU8sbUJBRTFKLENBQUMsQ0FDRixRQUNBLGdCQUNJLFNBQVMsQ0FDYixNQUFPLE9BQ1AsV0FBWSxPQUNaLFVBQVcsYUFDWCxZQUFhLE9BQ2IsUUFBUyxTQUNSLENBQUMsRUFBVyxnQkFBa0IsQ0FDL0IsWUFBYSxFQUFNLFFBQVEsR0FDM0IsYUFBYyxFQUFNLFFBQVEsSUFDM0IsRUFBTSxZQUFZLEdBQUcsT0FBUSxDQUM1QixZQUFhLEVBQU0sUUFBUSxHQUMzQixhQUFjLEVBQU0sUUFBUSxNQUU1QixDQUFDLENBQ0gsUUFDQSxnQkFDSSxFQUFXLE9BQVMsT0FBTyxLQUFLLEVBQU0sWUFBWSxRQUFRLE9BQU8sQ0FBQyxFQUFLLElBQWUsQ0FDMUYsS0FBTSxHQUFRLEVBQU0sWUFBWSxPQUFPLEdBRXZDLE1BQUksS0FBVSxHQUNaLEdBQUksRUFBTSxZQUFZLEdBQUcsSUFBZSxDQUN0QyxTQUFVLEdBQUcsSUFBUSxFQUFNLFlBQVksU0FJcEMsR0FDTixJQUFLLENBQUMsQ0FDUCxRQUNBLGdCQUNJLFNBQVMsR0FBSSxFQUFXLFdBQWEsTUFBUSxFQUNoRCxFQUFNLFlBQVksR0FBRyxPQUFRLENBQzVCLFNBQVUsS0FBSyxJQUFJLEVBQU0sWUFBWSxPQUFPLEdBQUksT0FFakQsRUFBVyxVQUFZLEVBQVcsV0FBYSxNQUFRLEVBQ3ZELEVBQU0sWUFBWSxHQUFHLEVBQVcsV0FBWSxDQUMzQyxTQUFVLEdBQUcsRUFBTSxZQUFZLE9BQU8sRUFBVyxZQUFZLEVBQU0sWUFBWSxXQUc3RSxVQUF5QkUseUJBQWlCLFNBQW1CLEVBQVMsRUFBSyxDQUMvRSxLQUFNLEdBQVEsY0FBYyxDQUMxQixNQUFPLEVBQ1AsS0FBTSxpQkFHRixDQUNKLFlBQ0EsWUFBWSxNQUNaLGlCQUFpQixHQUNqQixRQUFRLEdBQ1IsV0FBVyxNQUNULEVBQ0UsRUFBUSw4QkFBOEIsRUFBT3JFLGFBRTdDLEVBQWEsU0FBUyxHQUFJLEVBQU8sQ0FDckMsWUFDQSxpQkFDQSxRQUNBLGFBR0ksRUFBVSxrQkFBa0IsR0FDbEMsTUFBb0JrRSx3QkFBSyxjQUFlLFNBQVMsQ0FDL0MsR0FBSSxFQUNKLFdBQVksRUFDWixVQUFXLEtBQUssRUFBUSxLQUFNLEdBQzlCLElBQUssR0FDSixNQTZETCxnQkFBZSxVQ25LZixLQUFNLFdBQVksQ0FBQyxZQUFhLFlBQWEsVUFBVyxVQUFXLFlBaUJuRSxzQkFBc0IsRUFBVSxFQUFXLENBQ3pDLEtBQU0sR0FBZ0JjLHVCQUFlLFFBQVEsR0FBVSxPQUFPLFNBQzlELE1BQU8sR0FBYyxPQUFPLENBQUMsRUFBUSxFQUFPLElBQzFDLEdBQU8sS0FBSyxHQUVSLEVBQVEsRUFBYyxPQUFTLEdBQ2pDLEVBQU8sS0FBbUJDLDJCQUFtQixFQUFXLENBQ3RELElBQUssYUFBYSxPQUlmLEdBQ04sSUFHTCxLQUFNLHNCQUF1QixHQUNwQixFQUNMLElBQUssT0FDTCxjQUFlLFFBQ2YsT0FBUSxNQUNSLGlCQUFrQixXQUNsQixHQUdTLE1BQVEsQ0FBQyxDQUNwQixhQUNBLFdBQ0ksQ0FDSixHQUFJLEdBQVMsU0FBUyxDQUNwQixRQUFTLFFBQ1Isa0JBQWtCLENBQ25CLFNBQ0MsRUFBVyxVQUFXLEdBQWMsRUFDckMsY0FBZSxNQUdqQixHQUFJLEVBQVcsUUFBUyxDQUN0QixLQUFNLEdBQWMsbUJBQW1CLEdBQ2pDLEVBQU8sT0FBTyxLQUFLLEVBQU0sWUFBWSxRQUFRLE9BQU8sQ0FBQyxFQUFLLElBQzFELElBQVcsUUFBUSxJQUFlLE1BQVEsRUFBVyxVQUFVLElBQWUsT0FDaEYsR0FBSSxHQUFjLElBR2IsR0FDTixJQUNHLEVBQWtCLHdCQUF3QixDQUM5QyxPQUFRLEVBQVcsVUFDbkIsU0FFSSxFQUFnQix3QkFBd0IsQ0FDNUMsT0FBUSxFQUFXLFFBQ25CLFNBWUYsRUFBUyxVQUFVLEVBQVEsa0JBQWtCLENBQzNDLFNBQ0MsRUFYd0IsQ0FBQyxFQUFXLElBQzlCLEVBQ0wsZ0NBQWlDLENBQy9CLE9BQVEsR0FDUCxTQUFTLHFCQUFxQixFQUFhLEVBQWdCLEdBQWMsRUFBVyxjQUFlLFNBQVMsRUFBYSxRQVVsSSxNQUFPLElBRUgsVUFBWWQsU0FBTyxNQUFPLENBQzlCLEtBQU0sV0FDTixLQUFNLE9BQ04sa0JBQW1CLENBQUMsRUFBTyxJQUNsQixDQUFDLEVBQU8sUUFFaEIsT0FDRyxNQUFxQkUseUJBQWlCLFNBQWUsRUFBUyxFQUFLLENBQ3ZFLEtBQU0sR0FBYSxjQUFjLENBQy9CLE1BQU8sRUFDUCxLQUFNLGFBRUYsRUFBUSxhQUFhLEdBRXJCLENBQ0osWUFBWSxNQUNaLFlBQVksU0FDWixVQUFVLEVBQ1YsVUFDQSxZQUNFLEVBQ0UsRUFBUSw4QkFBOEIsRUFBTyxXQUU3QyxFQUFhLENBQ2pCLFlBQ0EsV0FFRixNQUFvQkgsd0JBQUssVUFBVyxTQUFTLENBQzNDLEdBQUksRUFDSixXQUFZLEVBQ1osSUFBSyxHQUNKLEVBQU8sQ0FDUixTQUFVLEVBQVUsYUFBYSxFQUFVLEdBQVcsT0E2QzFELFlBQWUsTUM1SmZwRCxnQ0FBMEIsVUFBWSwyQ0FBMkNvRSw2Q0FLcEUsMEJBQTJCLEFBQUMsR0FBUyxRQUN4QyxRQUNELEdBQUssV0FBVyxlQUNaLFVBQ0osR0FBSyxXQUFXLGVBQ1osWUFDSixHQUFLLFdBQVcsZUFDWixZQUNKLEtBQVMsd0JBQ0wsb0JBRUEsUUFPUCxLQUFPLENBQUMsQ0FBRSxZQUFvQixJQUM5QixHQUFPLFVBQ0wsR0FBVyxjQUNILHNCQUNSLENBQUMsRUFBVSxHQUFlQyx1QkFBUyxNQUNuQyxDQUFDLEVBQVksR0FBaUJBLHVCQUFTLEdBQ3ZDLEVBQWEsMEJBQ1ksQ0FBRSxZQUFZLEdBQy9CLFFBR1IsR0FBbUIsQ0FBQyxFQUFHLElBQVMsR0FDdEIsTUFBTyxJQUFTLFNBQVcsRUFBTyw0QkFHeEMsSUFBTSxHQUNMLFlBQVksUUFBUSxLQUM1QixNQUVJLEVBQVcsTUFBTSxTQUFTLFFBQVUsSUFBUyxFQUFXLE1BQU0sS0FBSyxXQUVwRSxHQUFnQix5QkFBeUIsRUFBSyxhQUFlLHNDQUVoRSxVQUFELENBQVMsVUFBV0MsU0FBTyxlQUN4Qix5QkFDRSxLQUFELENBQU0sVUFBV0EsU0FBTyxNQUNyQixJQUFrQiw0QkFDaEIsVUFBRCxDQUNFLFVBQVcsSUFBa0IsUUFBVSxRQUFVLE1BQ2pELElBQUssRUFBSyxXQUNWLElBQUssRUFBSyxNQUNWLFVBQVdBLFNBQU8sYUFDbEIsU0FBUSwyQkFHVEMsWUFBRCwyQkFDR0MsUUFBRCxDQUFPLFFBQVMseUJBQ2JDLGFBQUQsQ0FBWSxLQUFNLEVBQVksTUFBTyxFQUFVLFNBQVUsMEJBQ3hELElBQUQsS0FBRyxRQUNLLEVBQVcsT0FBSywwQkFHekIsU0FBRCxDQUFVLEtBQU0sRUFBSyxXQUFZLFlBQWEsUUFBUSxNQUFPLGNBQWUseUJBQ3pFQyxPQUFELENBQU0sc0NBRVBGLFFBQUQsQ0FBTyxRQUFTLHlCQUNiLElBQUQsS0FBRyxRQUNLLEVBQVcsT0FBSyx5QkFFdkJDLGFBQUQsQ0FBWSxLQUFNLEVBQVksTUFBTyxFQUFVLFNBQVUsNEJBSTlELFlBQUQsMkJBQ0csV0FBRCxDQUFZLFVBQVdILFNBQU8sU0FBVSxRQUFRLE1BQzdDLEVBQUssNkJBRVAsV0FBRCxDQUFZLFVBQVdBLFNBQU8sZ0JBQWlCLFFBQVEsTUFDcEQsRUFBSyxpQkFTcEIsV0FBZSxnSEN0RWYsS0FBTSxXQUFZLFdBQVcsQUFBQyxLQUM1QixhQUFjLENBQ1osVUFBVyxTQUViLFFBQVMsQ0FDUCxTQUFVLFFBQ1YsTUFBTyxjQUlMLFVBQVksQ0FBQyxDQUFFLFFBQU8sa0JBQWlCLGlCQUFnQixpQkFBZ0Isa0JBQTBCLENBQ3ZGLHNCQUNSLEdBQVksZUFDWixFQUFVLFlBQ1YsQ0FBQyxFQUFVLEdBQWVELHVCQUFTLDRCQUUvQixJQUFNLENBQ1YsRUFBVSxRQUNBLEVBQVUsTUFBTSxVQUFVLFFBRXZDLENBQUMsRUFBVSxZQUVSLEdBQWtCLEtBQU8sSUFBUyxHQUN2QixDQUFDLEdBQUcsRUFBSyxPQUFPLFdBQ1osRUFBZ0Isa0NBSWxDLE1BQUQsQ0FBSyxVQUFXLE9BQU8saUJBQ3BCLHlCQUFVLE9BQUQsQ0FBTSxVQUFXLE9BQU8sT0FBUSx5QkFDekMsUUFBRCxDQUVFLFVBQVcsT0FBTyxNQUNsQixNQUFPLENBQUUsUUFBUyxRQUNsQixHQUFHLHFCQUNILFNBQVEsR0FDUixLQUFLLE9BQ0wsU0FBVSxFQUNWLElBQUssSUFFTixDQUFDLEdBQWtCLEdBQVksR0FBWSw4QkFDekMsTUFBRCxDQUNFLE1BQU8sQ0FBRSxNQUFPLGNBQWUsZ0JBQWlCLFVBQVcsT0FBUSxvQkFBcUIsT0FBUSxpQ0FFL0YsUUFBRCxDQUFPLFFBQVEsNENBQ1osS0FBRCxDQUFNLFVBQVMsR0FBQyxlQUFlLGdDQUM1Qk0sVUFBRCxDQUF1QixVQUFXLEVBQVEsZ0NBQ3pDLEtBQUQsNkJBRUQsS0FBRCxDQUFNLFVBQVMsR0FBQyxlQUFlLGdDQUM1QixPQUFELENBQ0UsTUFBTyxDQUNMLGdCQUFpQixPQUNqQixPQUFRLFlBQ1IsT0FBUSxPQUNSLFVBQVcsT0FDWCxNQUFPLFVBQ1AsU0FBVSxPQUNWLFdBQVksS0FFZCxRQUFRLGFBQ1QsZ0JBT1AsS0FNUixnQkFBZSJ9
