import{c as s,A as a}from"./capitalize.75c82fb0.js";import{u as A}from"./upload.d8a16837.js";import{F as E}from"./_app.41131035.js";const c={setStateCreators:e=>({type:"SET_STATE_CREATORS",splashTimeout:e}),creatorLoggedRetrieved:e=>({type:"CURRENT_CREATOR_RETRIEVED",creator:e}),creatorRetrieved:e=>({type:"CREATOR_RETRIEVED",creator:e}),fetchingCreators:()=>({type:"CREATORS_FETCH"}),fetchingCurrentCreator:()=>({type:"CURRENT_CREATOR_FETCH"}),fetchingCreator:()=>({type:"CREATOR_FETCH"}),creatorsRetrieved:e=>({type:"CREATORS_RETRIEVED",creators:e}),creatorNotificationList:e=>({type:"CREATOR_NOTIFICATION_LIST_RETRIEVED",notifications:e}),updateCreatorAsFollowed:()=>({type:"SET_CREATOR_AS_FOLLOWED"}),updateCreatorNotFollowed:()=>({type:"SET_CREATOR_NOT_FOLLOWED"}),updateCreatorAsBlocked:e=>({type:"SET_CREATOR_AS_BLOCKED",creatorId:e}),updateCreatorAsUnBlocked:e=>({type:"SET_CREATOR_AS_UN_BLOCKED",blokedCreatorId:e}),creatorBlockedUsers:e=>({type:"CREATOR_BLOCKED_RETRIEVED",creators:e}),creatorFollowers:e=>({type:"CREATOR_FOLLOWERS_RETRIEVED",creators:e}),creatorFollowing:e=>({type:"CREATOR_FOLLOWING_RETRIEVED",creators:e})},u={createCreator:e=>async(r,t)=>{try{r(c.fetchingCurrentCreator());let o=Math.floor(Math.random()*1e3)+1,n=e??{name:e?.name||"User"+o,username:e?.username||"user_"+o};const g=await s.service("creator").create(n);r(c.creatorLoggedRetrieved(g))}catch(o){console.log(o),a.dispatchAlertError(r,o.message)}},getLoggedCreator:()=>async e=>{try{e(c.fetchingCurrentCreator());const r=await s.service("creator").find({query:{action:"current"}});e(c.creatorLoggedRetrieved(r))}catch(r){console.log(r),a.dispatchAlertError(e,r.message)}},getCreators:e=>async(r,t)=>{try{r(c.fetchingCreators());const o=await s.service("creator").find({query:{}});r(c.creatorsRetrieved(o))}catch(o){console.log(o),a.dispatchAlertError(r,o.message)}},getCreator:e=>async r=>{try{r(c.fetchingCreator());const t=await s.service("creator").get(e);r(c.creatorRetrieved(t))}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},updateCreator:(e,r)=>async t=>{try{if(t(c.fetchingCurrentCreator()),e.newAvatar){const n=await A(e.newAvatar,null);e.avatarId=n.file_id,delete e.newAvatar}const o=await s.service("creator").patch(e.id,e);o&&(t(c.creatorLoggedRetrieved(o)),r&&r("succes"))}catch(o){console.log(o),a.dispatchAlertError(t,o.message),r&&r(o.message)}},getCreatorNotificationList:()=>async e=>{try{e(c.fetchingCreator());const r=await s.service("notifications").find({query:{action:"byCurrentCreator"}});e(c.creatorNotificationList(r))}catch(r){console.log(r),a.dispatchAlertError(e,r.message)}},followCreator:e=>async r=>{try{await s.service("follow-creator").create({creatorId:e})&&r(c.updateCreatorAsFollowed())}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},unFollowCreator:e=>async r=>{try{await s.service("follow-creator").remove(e)&&r(c.updateCreatorNotFollowed())}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},blockCreator:e=>async r=>{try{await s.service("block-creator").create({creatorId:e})&&r(c.updateCreatorAsBlocked(e))}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},unBlockCreator:e=>async r=>{try{const t=await s.service("block-creator").remove({blokedCreatorId:e});t&&(E(u.getBlockedList,r)(t),E(u.getCreators,r)())}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},getBlockedList:e=>async r=>{try{const t=await s.service("block-creator").find({query:{action:"blocked",creatorId:e}});r(c.creatorBlockedUsers(t.data))}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},getFollowersList:e=>async r=>{try{const t=await s.service("follow-creator").find({query:{action:"followers",creatorId:e}});r(c.creatorFollowers(t.data))}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}},getFollowingList:e=>async r=>{try{const t=await s.service("follow-creator").find({query:{action:"following",creatorId:e}});r(c.creatorFollowing(t.data))}catch(t){console.log(t),a.dispatchAlertError(r,t.message)}}},l={changeCreatorPage:(e,r)=>({type:"CHANGE_CREATOR_PAGE_STATE",state:e,id:r}),changeCreatorForm:e=>({type:"CHANGE_CREATOR_FORM_STATE",state:e}),changeFeedPage:(e,r)=>({type:"CHANGE_FEED_PAGE_STATE",state:e,id:r}),changeArMedia:e=>({type:"CHANGE_ARMEDIA_CHOOSE_STATE",state:e}),changeNewFeedPage:(e,r,t,o)=>({type:"CHANGE_NEW_FEED_PAGE_STATE",state:e,id:r,fPath:t,nameId:o}),changeShareForm:(e,r,t)=>({type:"CHANGE_SHARE_FORM_STATE",state:e,id:r,imgSrc:t}),changeWebXR:(e,r)=>({type:"CHANGE_WEB_XR_STATE",state:e,itemId:r})},d={updateCreatorPageState:(e,r)=>async(t,o)=>{try{t(l.changeCreatorPage(e,r))}catch(n){console.log(n),a.dispatchAlertError(t,n.message)}},updateCreatorFormState:e=>async(r,t)=>{try{r(l.changeCreatorForm(e))}catch(o){console.log(o),a.dispatchAlertError(r,o.message)}},updateFeedPageState:(e,r)=>async(t,o)=>{try{t(l.changeFeedPage(e,r))}catch(n){console.log(n),a.dispatchAlertError(t,n.message)}},updateNewFeedPageState:(e,r,t,o)=>async(n,g)=>{try{n(l.changeNewFeedPage(e,r,t,o))}catch(i){console.log(i),a.dispatchAlertError(n,i.message)}},updateShareFormState:(e,r,t)=>async(o,n)=>{try{o(l.changeShareForm(e,r,t))}catch(g){console.log(g),a.dispatchAlertError(o,g.message)}},updateArMediaState:e=>async(r,t)=>{try{r(l.changeArMedia(e))}catch(o){console.log(o),a.dispatchAlertError(r,o.message)}},updateWebXRState:(e,r)=>async(t,o)=>{try{t(l.changeWebXR(e,r))}catch(n){console.log(n),a.dispatchAlertError(t,n.message)}}};export{u as C,d as P};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
