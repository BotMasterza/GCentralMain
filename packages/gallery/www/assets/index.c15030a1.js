import{A as se}from"./AuthService.10b9bc61.js";import{u as ne,a as P,b as V,c as oe,d as ie}from"./_app.41131035.js";import{c as x,i as S,a as k}from"./createSvgIcon.50054fae.js";import{r,u as W,R as t}from"./vendor.2a83d1c9.js";import{u as ce,g as de,a as le,d as ue,b as fe,A as q}from"./index.5d0f9e48.js";import{F as O,a as M}from"./FeedService.c397da2d.js";import{c as A,A as B}from"./capitalize.75c82fb0.js";import{G as C}from"./Grid.d12fda45.js";import{C as G,a as me}from"./CardContent.e5a5f754.js";import{C as U}from"./CardMedia.147ece6d.js";import{B as y}from"./Button.11e5af54.js";import"./upload.d8a16837.js";import{s as pe}from"./index.module.d63a8143.js";import{d as ve}from"./Close.a6b828d0.js";import{T as _e}from"./TextField.bc1d9226.js";import"./index.b1c16674.js";import"./Paper.678a179e.js";import"./useControlled.91b72ab4.js";import"./Typography.a1510182.js";import"./makeStyles.39fa1a38.js";import"./InputLabel.ed2935ea.js";import"./Modal.22c32aef.js";import"./List.0dd6030d.js";var T={},he=S.exports,ge=k.exports;Object.defineProperty(T,"__esModule",{value:!0});var J=T.default=void 0,Ee=ge(r.exports),Fe=he(x),we=(0,Fe.default)(Ee.createElement("path",{d:"M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"}),"Apps");J=T.default=we;var N={},xe=S.exports,Se=k.exports;Object.defineProperty(N,"__esModule",{value:!0});var X=N.default=void 0,ke=Se(r.exports),Ce=xe(x),$e=(0,Ce.default)(ke.createElement("path",{d:"M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z"}),"ViewAgenda");X=N.default=$e;var j={},ye=S.exports,Ie=k.exports;Object.defineProperty(j,"__esModule",{value:!0});var Q=j.default=void 0,Re=Ie(r.exports),Me=ye(x),be=(0,Me.default)(Re.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"}),"RemoveCircleOutlined");Q=j.default=be;var H={},Ae=S.exports,Be=k.exports;Object.defineProperty(H,"__esModule",{value:!0});var K=H.default=void 0,Te=Be(r.exports),Ne=Ae(x),je=(0,Ne.default)(Te.createElement("path",{d:"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z"}),"MovieCreation");K=H.default=je;var D={},He=S.exports,De=k.exports;Object.defineProperty(D,"__esModule",{value:!0});var Y=D.default=void 0,ze=De(r.exports),Le=He(x),Pe=(0,Le.default)(ze.createElement("path",{d:"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z"}),"Audiotrack");Y=D.default=Pe;var z={},Ve=S.exports,We=k.exports;Object.defineProperty(z,"__esModule",{value:!0});var Z=z.default=void 0,qe=We(r.exports),Oe=Ve(x),Ge=(0,Oe.default)(qe.createElement("path",{d:"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z"}),"PictureAsPdf");Z=z.default=Ge;const Ue="_feedContainer_wf94p_1",Je="_gridItem_wf94p_4",Xe="_addButton_wf94p_7",Qe="_removeButton_wf94p_10",Ke="_gridItemDelete_wf94p_13",Ye="_creatorItem_wf94p_16",Ze="_list_wf94p_21",et="_imageWrapper_wf94p_48",tt="_image_wf94p_48",at="_imageList_wf94p_61",rt="_descr_wf94p_64",st="_mediaPreviewIcon_wf94p_71";var v={feedContainer:Ue,gridItem:Je,addButton:Xe,removeButton:Qe,gridItemDelete:Ke,creatorItem:Ye,list:Ze,imageWrapper:et,image:tt,imageList:at,descr:rt,mediaPreviewIcon:st};const ee={feedFiresRetrieved:e=>({type:"FEED_FIRES_RETRIEVED",feedFires:e}),fetchingFeedFires:()=>({type:"FEED_FIRES_FETCH"})},te={getFeedFires:e=>async(n,o)=>{try{n(ee.fetchingFeedFires());const a=await A.service("feed-fires").find({query:{feedId:e}});n(ee.feedFiresRetrieved(a.data))}catch(a){console.log(a),B.dispatchAlertError(n,a.message)}},addFireToFeed:e=>async n=>{try{await A.service("feed-fires").create({feedId:e}),n(O.addFeedFire(e))}catch(o){console.log(o),B.dispatchAlertError(n,o.message)}},removeFireToFeed:e=>async n=>{try{await A.service("feed-fires").remove(e),n(O.removeFeedFire(e))}catch(o){console.log(o),B.dispatchAlertError(n,o.message)}}};function nt(e,n={}){const o=ce(),a=typeof window!="undefined"&&typeof window.matchMedia!="undefined",{defaultMatches:u=!1,matchMedia:d=a?window.matchMedia:null,noSsr:h=!1,ssrMatchMedia:c=null}=de({name:"MuiUseMediaQuery",props:n,theme:o});let f=typeof e=="function"?e(o):e;f=f.replace(/^@media( ?)/m,"");const[g,w]=r.exports.useState(()=>h&&a?d(f).matches:c?c(f).matches:u);return le(()=>{let F=!0;if(!a)return;const E=d(f),p=()=>{F&&w(E.matches)};return p(),E.addListener(p),()=>{F=!1,E.removeListener(p)}},[f,d,a]),g}const ot={grid:{xs:12,lg:6,xl:4},list:{xs:12,lg:12,xl:12}},it=(e,n={})=>{switch(fe(e||"image")){case"video":return t.createElement(K,{...n});case"audio":return t.createElement(Y,{...n});case"pdf":return t.createElement(Z,{...n});default:return null}},ae=({type:e,creatorId:n,viewType:o,isFeatured:a,setIsFeatured:u})=>{const[d,h]=r.exports.useState([]),[c,f]=r.exports.useState(new Set),[g,w]=r.exports.useState(new Set);W();const F=ne(),E=P(),p=V(),i=JSON.stringify([...c]),s=oe();r.exports.useEffect(()=>{if(e==="creator"||e==="bookmark"||e==="myFeatured"||e==="fired")p(M.getFeeds(e,n));else{const l=async()=>{await p(M.getFeeds("featured")),e!=="fired"&&p(M.getFeeds("fired",n))};(E.authUser?.identityProvider?.type?.value??"guest")!=="guest"?l():p(M.getFeeds("featuredGuest"))}e!=="fired"&&f(new Set)},[e,n,s.feeds.feedsFetching.value,i]),r.exports.useEffect(()=>(e==="featured"||!e)&&s.feeds.feedsFetching.value===!1&&h(s.feeds.feedsFeatured.value),[s.feeds.feedsFetching.value,s.feeds.feedsFeatured.value]),r.exports.useEffect(()=>(e==="featured"||!e)&&s.feeds.feedsFeaturedFetching.value===!1&&h(s.feeds.feedsFeatured.value),[s.feeds.feedsFeaturedFetching.value,s.feeds.feedsFeatured.value]),r.exports.useEffect(()=>e==="creator"&&s.feeds.feedsCreatorFetching.value===!1&&h(s.feeds.feedsCreator.value),[s.feeds.feedsCreatorFetching.value,s.feeds.feedsCreator.value]),r.exports.useEffect(()=>e==="fired"&&s.feeds.feedsFiredFetching.value===!1&&h(s.feeds.feedsFired.value),[s.feeds.feedsFiredFetching.value,s.feeds.feedsFired.value]);const $=JSON.stringify(s.feeds.feedsFired.value);r.exports.useEffect(()=>{typeof u=="function"&&u(!!s.feeds.feedsFired.value?.length)},[s.feeds.feedsFetching.value,$]);const I=l=>{g.has(l)||(w(new Set([...g,l])),c.delete(l),f(new Set([...c])),p(te.addFireToFeed(l)),u(!0))},b=l=>{p(te.removeFireToFeed(l));let R=new Set([...c,l]);f(R),g.delete(l),w(new Set([...g]))};return t.createElement("section",{className:v.feedContainer},t.createElement(C,{container:!0,spacing:3,style:{marginTop:30}},d&&d.length>0?d.map((l,R)=>t.createElement(C,{item:!0,...ot[o],key:R,className:e==="fired"&&c.has(l.id)?v.gridItemDelete:v.gridItem},e?t.createElement(Q,{onClick:()=>b(l.id),className:v.removeButton}):t.createElement(ue,{className:v.addButton,onClick:()=>I(l.id)}),t.createElement(G,{className:v.creatorItem+" "+(o==="list"?v.list:""),elevation:0,key:R},t.createElement("div",{className:v.imageWrapper+" "+(o==="list"?v.imageList:"")},it(l.previewType,{className:`${v.image} ${v.mediaPreviewIcon}`,onClick:()=>{F.push("/post?postId="+l.id)}})||t.createElement(U,{component:"img",className:v.image,image:l.previewUrl,onClick:()=>{F.push("/post?postId="+l.id)}})),t.createElement(me,{style:{textAlign:"center"}},t.createElement("span",{className:v.descr},l.title))))):""))},ct="_feedMenuContainer_129kp_1",dt="_switcher_129kp_7",lt="_viewSwitcher_129kp_7",ut="_switchButton_129kp_18",ft="_viewSwitchButton_129kp_18",mt="_active_129kp_27",pt="_viewActive_129kp_27",vt="_subWrapper_129kp_38",_t="_feedMenu_129kp_1",ht="_featuredButton_129kp_85",gt="_creatorsButton_129kp_88",Et="_thefeedButton_129kp_91",Ft="_disabled_129kp_94",wt="_content_129kp_99";var m={feedMenuContainer:ct,switcher:dt,viewSwitcher:lt,switchButton:ut,viewSwitchButton:ft,active:mt,viewActive:pt,subWrapper:vt,feedMenu:_t,featuredButton:ht,creatorsButton:gt,thefeedButton:Et,disabled:Ft,content:wt};const xt=()=>{const e=r.exports.useRef(),n=r.exports.useRef(),o=r.exports.useRef();W();const[a,u]=r.exports.useState("all"),[d,h]=r.exports.useState("grid"),[c,f]=r.exports.useState(!1),g=nt("(max-width:1279px)");r.exports.useEffect(()=>{a!=="all"&&!c&&u("all")},[a,c]),r.exports.useEffect(()=>{g&&h("list")},[g]);const w=40,F=i=>{u(i);let s=0;switch(i){case"all":s=o.current.offsetLeft-w;break;default:s=0;break}e.current.scrollTo({left:s,behavior:"smooth"})};let E=null;switch(a){case"all":E=t.createElement(ae,{viewType:d,setIsFeatured:f,isFeatured:c});break;default:E=t.createElement(ae,{type:"fired",viewType:d,setIsFeatured:f,isFeatured:c});break}m.featuredButton,a==="featured"&&m.active,m.creatorsButton,a==="all"&&m.active;const p=i=>{switch(i){case"grid":h("grid");break;case"list":h("list");break}};return t.createElement(t.Fragment,null,t.createElement("nav",{className:m.feedMenuContainer},t.createElement(C,{container:!0},t.createElement(C,{item:!0,xs:!0},t.createElement("section",{className:m.switcher,ref:e},t.createElement(y,{variant:a==="featured"?"contained":"text",ref:n,className:m.switchButton+(a==="featured"?" "+m.active:"")+(a==="all"&&!c?" "+m.disabled:""),disabled:a==="all"&&!c,onClick:()=>{F("featured")}},"Featured"),t.createElement(y,{variant:a==="all"?"contained":"text",ref:o,className:m.switchButton+(a==="all"?" "+m.active:""),onClick:()=>{F("all")}},"All"))),t.createElement("section",{className:m.viewSwitcher,style:g?{display:"none"}:{}},t.createElement(y,{variant:d==="grid"?"contained":"text",className:m.viewSwitchButton+(d==="grid"?" "+m.viewActive:""),onClick:()=>p("grid")},t.createElement(J,null)),t.createElement(y,{variant:d==="list"?"contained":"text",className:m.viewSwitchButton+(d==="list"?" "+m.viewActive:""),onClick:()=>p("list")},t.createElement(X,null))),t.createElement(C,{item:!0}))),t.createElement("section",{className:m.content},E))},St="_viewport_24mkt_1",kt="_feedContainer_24mkt_9",Ct="_gridItem_24mkt_12",$t="_addButton_24mkt_15",yt="_removeButton_24mkt_18",It="_gridItemDelete_24mkt_21",Rt="_creatorItem_24mkt_24",Mt="_list_24mkt_29",bt="_imageWrapper_24mkt_56",At="_image_24mkt_56",Bt="_removeItem_24mkt_70",Tt="_imageList_24mkt_73",Nt="_descr_24mkt_76",jt="_input_24mkt_83",Ht="_close_24mkt_100",Dt="_publish_24mkt_108",zt="_addIcon_24mkt_121",Lt="_addText_24mkt_127",Pt="_content_24mkt_131",Vt="_addFilesButton_24mkt_140";var _={viewport:St,feedContainer:kt,gridItem:Ct,addButton:$t,removeButton:yt,gridItemDelete:It,creatorItem:Rt,list:Mt,imageWrapper:bt,image:At,removeItem:Bt,imageList:Tt,descr:Nt,input:jt,close:Ht,publish:Dt,addIcon:zt,addText:Lt,content:Pt,addFilesButton:Vt},L={},Wt=S.exports,qt=k.exports;Object.defineProperty(L,"__esModule",{value:!0});var re=L.default=void 0,Ot=qt(r.exports),Gt=Wt(x),Ut=(0,Gt.default)(Ot.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");re=L.default=Ut;const Jt=new Map,Xt=(e,n)=>{const{name:o,value:a}=n.payload;switch(n.type){case"CHANGE_TEXT":return e.set(o,a),new Map(e.entries());case"DELETE_ITEM":return e.delete(o),new Map(e.entries());default:return e}},Qt=e=>{e=e.trim();let[n,o]=e.split(`
`),a={title:n,description:e.length>80?e:""};n.length<80&&!!o&&(a.description=o);let u=-1;for(;(u=a.title.lastIndexOf(" "))!==-1&&!(a.title.length<=80);)a.title=a.title.slice(0,u);return a},Kt=({filesTarget:e,setAddFilesView:n,setFilesTarget:o})=>{r.exports.useState("");const[a,u]=r.exports.useReducer(Xt,Jt),[d,h]=r.exports.useState("");r.exports.useState(null),r.exports.useState(null);const c=r.exports.useRef(null),f=(i,s)=>{u({type:"CHANGE_TEXT",payload:{name:s,value:i.target.value}})},g=JSON.stringify(e);r.exports.useEffect(()=>{e?.forEach(i=>{a.has(i)||u({type:"CHANGE_TEXT",payload:{name:i,value:i.name.substring(0,i.name.lastIndexOf("."))}})})},[g]);const w=()=>{[...e].forEach((i,s)=>{const{title:$,description:I}=Qt(a.get(i)||d);console.group("Title and description"),console.groupEnd();const b={title:$,description:I,preview:i,video:i};u(M.createFeed(b))}),n(!1)},F=i=>{const s=e.filter(($,I)=>I!==i);u({type:"DELETE_ITEM",payload:`description-${i}`}),o([...s])},E=()=>{c?.current.click()},p=i=>{o([...e,...i])};return t.createElement("section",{className:_.viewport},t.createElement(q,{title:"CREATOR",hideAddButtons:!0,inputFileRef:c,setFilesTarget:p}),t.createElement(y,{className:_.addFilesButton,onClick:E},"ADD FILES:"),t.createElement("section",{className:_.content},t.createElement("section",{className:_.feedContainer},t.createElement(C,{container:!0,spacing:3,style:{marginTop:30}},e?e.map((i,s)=>t.createElement(C,{item:!0,xs:12,lg:6,xl:4,key:s,className:_.gridItem},t.createElement(G,{className:_.creatorItem,elevation:0,key:s},t.createElement("div",{className:_.imageWrapper},t.createElement(U,{component:`${i.type.startsWith("video")?"video":"img"}`,className:_.image,image:URL.createObjectURL(i),controls:!0}),t.createElement("span",{className:_.removeItem,onClick:()=>F(s)},t.createElement(ve,{className:_.close}))),t.createElement("div",{style:{padding:"0 30px 30px",margin:"25px 0"}},t.createElement(_e,{autoFocus:!0,inputProps:{style:{fontSize:"17pt",fontFamily:"Jost, sans-serif",fontStyle:"italic",color:"#9b9b9b",backgroundColor:"#fff"}},style:{backgroundColor:"#fff"},margin:"dense",id:`description-${s}`,label:"Add description",variant:"outlined",fullWidth:!0,multiline:!0,value:a.get(i),onChange:$=>f($,i)}))))):""),t.createElement(y,{className:_.publish,onClick:w},t.createElement("div",null,t.createElement(re,{className:_.addIcon})),t.createElement("div",{className:_.addText},"Publish")))))},wa=()=>{const e=V(),n=P(),[o,a]=r.exports.useState(!1),[u,d]=r.exports.useState([]);r.exports.useEffect(()=>{const f=n.user;f&&f.id.value},[n.isLoggedIn.value,n.user.id.value]),r.exports.useEffect(()=>{e(se.doLoginAuto(!0))},[]);const c=ie().creators.currentCreator.value;return t.createElement("div",{className:pe.viewport},!o&&t.createElement(q,{title:"CREATOR",setAddFilesView:a,setFilesTarget:d}),c&&!o&&t.createElement(xt,null),o&&t.createElement(Kt,{filesTarget:u,setAddFilesView:a,setFilesTarget:d}))};export{wa as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
