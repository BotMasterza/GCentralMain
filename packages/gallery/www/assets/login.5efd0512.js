import{E as q}from"./EmptyLayout.17226d71.js";import{A as y}from"./AuthService.10b9bc61.js";import{u as M,r as m,R as u}from"./vendor.2a83d1c9.js";import{b as R,a as k}from"./_app.41131035.js";import{C as H,v as B,a as F}from"./index.b1c16674.js";import{G as x}from"./Grid.d12fda45.js";import{T as z}from"./TextField.bc1d9226.js";import{B as $}from"./Button.11e5af54.js";import"./capitalize.75c82fb0.js";import"./Paper.678a179e.js";import"./IconButton.5bf8eb2a.js";import"./Typography.a1510182.js";import"./Close.a6b828d0.js";import"./createSvgIcon.50054fae.js";import"./useControlled.91b72ab4.js";import"./Dialog.4b91e65c.js";import"./Modal.22c32aef.js";import"./Backdrop.311b8a3e.js";import"./DialogTitle.d9bbb4af.js";import"./InputLabel.ed2935ea.js";import"./List.0dd6030d.js";/*!
 * Utilities for Web Request RPC.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */const I={ParseError:{message:"Parse error",code:-32700},InvalidRequest:{message:"Invalid Request",code:-32600},MethodNotFound:{message:"Method not found",code:-32601},InvalidParams:{message:"Invalid params",code:-32602},InternalError:{message:"Internal Error",code:-32603},ServerError:{message:"Server error",code:-32e3}};function f(i,e){if(e===void 0&&(e=window.location.href),typeof URL=="function")return new URL(i,e);if(typeof i!="string")throw new TypeError('"url" must be a string.');i.includes(":")||(e.startsWith("http")&&!i.startsWith("/")?i=e+"/"+i:i=e+i);const t=document.createElement("a");t.href=i;let n=(t.protocol||window.location.protocol)+"//";t.host?t.protocol==="http:"&&t.port==="80"||t.protocol==="https:"&&t.port==="443"?n+=t.hostname:n+=t.host:n+=window.location.host;let r=t.pathname;return r.startsWith("/")||(r="/"+r),{host:t.host||window.location.host,hostname:t.hostname,origin:n,protocol:t.protocol,pathname:r}}function V(i,e){for(e=i="";i++<36;e+=i*51&52?(i^15?8^Math.random()*(i^20?16:4):4).toString(16):"-");return e}function O(i){return i&&typeof i=="object"&&i.jsonrpc==="2.0"&&i.id&&typeof i.id=="string"}function G(i){return O(i)&&Array.isArray(i.params)}function K(i){return O(i)&&!!("result"in i^"error"in i)&&(!("error"in i)||Q(i.error))}function Q(i){return i&&typeof i=="object"&&typeof i.code=="number"&&typeof i.message=="string"}function X(i){const e={message:i.message};return i.constructor.name!=="Error"&&(e.constructor=i.constructor.name),"name"in i&&(e.name=i.name),"code"in i?e.code=i.code:e.code=I.ServerError.code,"details"in i&&(e.details=i.details),e}function Y(i){let e;return i.constructor==="DOMException"?e=new DOMException(i.message,i.name):(e=new Error(i.message),"code"in i&&(e.code=i.code)),i.details&&(e.details=i.details),e}function S({listener:i,origin:e,handle:t,expectRequest:n}){if(g(t)){const r=t;t=!1,r.then(s=>t=s)}return r=>{!(r.source===t&&r.origin===e&&(n&&G(r.data)||!n&&K(r.data)))||i(r.data,r)}}function J(i){let[e,...t]=i.split(".");const n=t.pop();return e=[e,...t].join("."),{name:e,method:n}}function g(i){try{return typeof i.then=="function"}catch(e){}return!1}/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */const Z=3e4;class A{constructor(){this.origin=null,this._handle=null,this._listener=null,this._pending=new Map}async connect(e,t){if(this._listener)throw new Error("Already connected.");t=t||{};const n=this;n.origin=f(e).origin,n._handle=t.handle||window.parent||window.opener;const r=n._pending;return n._listener=S({origin:n.origin,handle:n._handle,expectRequest:!1,listener:s=>{if(!r.has(s.id))return;const{resolve:l,reject:a,cancelTimeout:o}=r.get(s.id);if(o(),"result"in s)return l(s.result);a(Y(s.error))}}),window.addEventListener("message",n._listener),new ee(n)}async send(e,t,{timeout:n=Z}){if(!this._listener)throw new Error("RPC client not connected.");const r=this,s={jsonrpc:"2.0",id:V(),method:e,params:t};return g(r._handle)?(await r._handle).postMessage(s,r.origin):r._handle.postMessage(s,r.origin),new Promise((l,a)=>{const o=r._pending;let c;if(n>0){const d=setTimeout(()=>{o.delete(s.id),a(new Error("RPC call timed out."))},n);c=()=>{o.delete(s.id),clearTimeout(d)}}else c=()=>{o.delete(s.id)};o.set(s.id,{resolve:l,reject:a,cancelTimeout:c})})}close(){if(this._listener){window.removeEventListener("message",this._listener),this._handle=this.origin=this._listener=null;for(const e of this._pending.values())e.reject(new Error("RPC client closed."));this._pending=new Map}}}class ee{constructor(e){this.client=e,this._apis=new Map}define(e,t){if(!(e&&typeof e=="string"))throw new TypeError("`name` must be a non-empty string.");if(!(t&&typeof t=="object"&&Array.isArray(t.functions)))throw new TypeError("`definition.function` must be an array of function names or function definition objects to be defined.");const n=this,r={};return t.functions.forEach(s=>{typeof s=="string"&&(s={name:s,options:{}}),r[s.name]=async function(){return n.client.send(e+"."+s.name,[...arguments],s.options)}}),n._apis[e]=r,r}get(e,t){if(!this._apis[e]){if(t)return this.define(e,t);throw new Error(`API "${e}" has not been defined.`)}return this._apis[e]}}/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class te{constructor({deserialize:e=n=>n,waitUntil:t=async()=>{}}={}){this._listeners=[],this._deserialize=e,this._waitUntil=t}async emit(e){return e=this._deserialize(e),(this._listeners[e.type]||[]).forEach(t=>t(e)),this._waitUntil(e)}addEventListener(e,t){this._listeners[e]?this._listeners[e].push(t):this._listeners[e]=[t]}removeEventListener(e,t){const n=this._listeners[e];if(!n)return;const r=n.indexOf(t);r!==-1&&n.splice(r,1)}}/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class N{constructor(){this.origin=null,this._handle=null,this._apis=new Map}define(e,t){if(!(e&&typeof e=="string"))throw new TypeError("`name` must be a non-empty string.");if(!(t&&t!=="object"))throw new TypeError("`api` must be an object.");if(e in this._apis)throw new Error(`The "${e}" API is already defined.`);this._apis[e]=t}async listen(e,t){if(this._listener)throw new Error("Already listening.");t=t||{};const n=this;n.origin=f(e).origin,n._handle=t.handle||window.parent||window.opener;const r=t.ignoreUnknownApi==="true"||!1;n._listener=S({origin:n.origin,handle:n._handle,expectRequest:!0,listener:s=>{const{name:l,method:a}=J(s.method),o=n._apis[l];if(a&&a.startsWith("_"))return L(n._handle,n.origin,s);if(!o&&r)return;if(!o||typeof o[a]!="function")return L(n._handle,n.origin,s);const c=o[a];(async()=>{const d={jsonrpc:"2.0",id:s.id};try{d.result=await c.apply(o,s.params)}catch(h){d.error=X(h)}n._handle&&(g(n._handle)?n._handle.then(h=>h.postMessage(d,n.origin)):n._handle.postMessage(d,n.origin))})()}}),window.addEventListener("message",n._listener)}close(){this._listener&&(window.removeEventListener("message",this._listener),this._handle=this.origin=this._listener=null)}}function L(i,e,t){const n={jsonrpc:"2.0",id:t.id,error:Object.assign({},I.MethodNotFound)};return g(i)?i.then(r=>r.postMessage(n,e)):i.postMessage(n,e)}/*!
 * A WebApp is a remote application that runs in a WebAppContext.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ie{constructor(e){this.relyingOrigin=f(e).origin,this.client=null,this.injector=null,this.client=new A,this.server=new N,this._control=null,this._connected=!1}async connect(){return this.injector=await this.client.connect(this.relyingOrigin),this._connected=!0,this._control=this.injector.define("core.control",{functions:["ready","show","hide"]}),this.server.listen(this.relyingOrigin),this.injector}async ready(){if(!this._connected)throw new Error('WebApp not connected. Did you call ".connect()"?');return await this._control.ready(),this}close(){this._connected&&(this.server.close(),this.client.close(),this._connected=!1)}async show(){if(!this._connected)throw new Error('Cannot "show" yet; not connected. Did you call ".connect()"?');return this._control.show()}async hide(){if(!this._connected)throw new Error('Cannot "hide" yet; not connected. Did you call ".connect()?"');return this._control.hide()}}/*!
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */const ne=6e4;class E{constructor(e,{timeout:t=ne,handle:n,iframe:r,windowControl:s,className:l=null,customize:a=null}={}){if(this.visible=!1,this.dialog=null,this.iframe=null,this.handle=null,this.windowControl=null,this._ready=!1,this._private={},this._timeoutId=null,this._private._readyPromise=new Promise((c,d)=>{this._timeoutId=setTimeout(()=>d(new DOMException("Loading Web application window timed out.","TimeoutError")),t),this._private._resolveReady=h=>{clearTimeout(this.timeoutId),this._timeoutId=null,c(h)},this._private._rejectReady=h=>{clearTimeout(this.timeoutId),this._timeoutId=null,d(h)}}),this._private.isReady=async()=>this._private._readyPromise,this._private.destroy=()=>{this._timeoutId&&this._private._rejectReady(new DOMException("Web application window closed before ready.","AbortError")),this.dialog&&(this.dialog.parentNode.removeChild(this.dialog),this.dialog=null)},r){if(!(typeof r=="object"&&r.contentWindow))throw new TypeError("`options.iframe` must be an iframe element.");this.windowControl={handle:r.contentWindow,show(){r.style.visibility="visible"},hide(){r.style.visibility="hidden"}},this.iframe=r,this.handle=this.iframe.contentWindow;return}if(s){this.windowControl=s,this.handle=this.windowControl.handle;return}if(n){this.handle=n;return}if(a&&!typeof a==="function")throw new TypeError("`options.customize` must be a function.");this.dialog=document.createElement("dialog"),v(this.dialog,{position:"fixed",top:0,left:0,width:"100%",height:"100%","max-width":"100%","max-height":"100%",display:"none",margin:0,padding:0,border:"none",background:"transparent",color:"black","box-sizing":"border-box",overflow:"hidden","z-index":1e6}),this.dialog.className="web-app-window",typeof l=="string"&&(this.dialog.className=this.dialog.className+" "+l);const o=document.createElement("style");if(o.appendChild(document.createTextNode(`dialog.web-app-window::backdrop {
        background-color: transparent;
      }`)),this.container=document.createElement("div"),v(this.container,{position:"relative",width:"100%",height:"100%",margin:0,padding:0,display:"flex","flex-direction":"column"}),this.container.className="web-app-window-backdrop",this.iframe=document.createElement("iframe"),this.iframe.src=e,this.iframe.scrolling="auto",v(this.iframe,{position:"fixed",top:0,left:0,width:"100%",height:"100%",border:"none",background:"transparent",overflow:"hidden",margin:0,padding:0,"flex-grow":1}),this.dialog.appendChild(o),this.container.appendChild(this.iframe),this.dialog.appendChild(this.container),this.dialog.addEventListener("cancel",c=>{c.preventDefault(),this.hide()}),document.body.appendChild(this.dialog),this.handle=this.iframe.contentWindow,a)try{a({dialog:this.dialog,container:this.container,iframe:this.iframe,webAppWindow:this})}catch(c){console.error(c)}}ready(){this._ready=!0,this._private._resolveReady(!0)}show(){if(!this.visible){this.visible=!0;const e=document.querySelector("body");this._bodyOverflowStyle=e.style.overflow,e.style.overflow="hidden",this.dialog?(this.dialog.style.display="block",this.dialog.showModal&&this.dialog.showModal()):this.windowControl.show&&this.windowControl.show()}}hide(){if(this.visible){this.visible=!1;const e=document.querySelector("body");if(this._bodyOverflowStyle?e.style.overflow=this._bodyOverflowStyle:e.style.overflow="",this.dialog){if(this.dialog.style.display="none",this.dialog.close)try{this.dialog.close()}catch(t){console.error(t)}}else this.windowControl.hide&&this.windowControl.hide()}}}function v(i,e){for(const t in e)i.style[t]=e[t]}/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */const re=1e4;class se{constructor(){this.client=new A,this.server=new N,this.injector=null,this.control=null,this.loaded=!1,this.closed=!1}async createWindow(e,{timeout:t=re,iframe:n,handle:r,windowControl:s,className:l,customize:a}={}){if(this.loaded)throw new Error("AppContext already loaded.");this.loaded=!0,this.control=new E(e,{timeout:t,iframe:n,handle:r,windowControl:s,className:l,customize:a}),this.server.define("core.control",this.control);const o=f(e).origin;return this.server.listen(o,{handle:this.control.handle,ignoreUnknownApi:!0}),await this.control._private.isReady(),this.injector=await this.client.connect(o,{handle:this.control.handle}),this.injector}close(){this.closed||(this.closed=!0,this.control._private.destroy(),this.server.close(),this.client.close())}}/*!
 * A CredentialRequestEvent is emitted when a request has been made for
 * credentials.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class oe{constructor({credentialHandler:e,credentialRequestOrigin:t,credentialRequestOptions:n,hintKey:r}){this.type="credentialrequest",this._credentialHandler=e,this.credentialRequestOrigin=t,this.credentialRequestOptions=n,this.hintKey=r}async openWindow(e){await this._credentialHandler.show();const t=new E(e,{className:"credential-handler"});return t.ready(),t.show(),t.handle}respondWith(e){this._promise=e}}/*!
 * A CredentialStoreEvent is emitted when a request has been made to
 * store a credential.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ae{constructor({credentialHandler:e,credentialRequestOrigin:t,credential:n,hintKey:r}){this.type="credentialstore",this._credentialHandler=e,this.credentialRequestOrigin=t,this.credential=n,this.hintKey=r}async openWindow(e){await this._credentialHandler.show();const t=new E(e);return t.ready(),t.show(),t.handle}respondWith(e){this._promise=e}}/*!
 * A CredentialHandlerService handles remote calls to a CredentialHandler.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class le{constructor(e){this._credentialHandler=e}async request(e){return await this._credentialHandler._emitter.emit(new oe(Object.assign({credentialHandler:this._credentialHandler},e)))}async store(e){return await this._credentialHandler._emitter.emit(new ae(Object.assign({credentialHandler:this._credentialHandler},e)))}}/*!
 * The core CredentialHandler class.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */const P=["credentialrequest","credentialstore"];class ce extends ie{constructor(e){if(typeof e!="string")throw new TypeError('"mediatorOrigin" must be a string.');super(e);this._emitter=new te({async waitUntil(t){return t._promise||Promise.reject(new DOMException('No "credentialrequest" event handler found.',"NotFoundError"))}})}async connect(){const e=await super.connect();return this.server.define("credentialHandler",new le(this)),await this.ready(),e}addEventListener(e,t){if(!P.includes(e))throw new DOMException(`Unsupported event type "${e}"`,"NotSupportedError");return this._emitter.addEventListener(e,t)}removeEventListener(e,t){if(!P.includes(e))throw new DOMException(`Unsupported event type "${e}"`,"NotSupportedError");return this._emitter.removeEventListener(e,t)}}/*!
 * API for managing CredentialHints.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class de{constructor(e,t){const n=t.get("credentialHints",{functions:["delete","get","keys","has","set","clear"]});for(let r in n)r!=="set"&&(this[r]=n[r].bind(this,e));this._remoteSet=n.set.bind(this,e)}async set(e,t){t.icons=t.icons||[];const n=t.icons.map(r=>he(r.src).then(s=>{r.fetchedImage=s}));return await Promise.all(n),this._remoteSet(e,t)}}function he(i){return new Promise(e=>{const t=new Image;t.crossOrigin="Anonymous",t.onload=()=>{let n=document.createElement("canvas");const r=n.getContext("2d");n.height=t.height,n.width=t.width,r.drawImage(t,0,0);const s=n.toDataURL();e(s),n=null},t.onerror=()=>e(null),t.src=i})}/*!
 * A CredentialManager for a Web Credential Mediator.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */class b{constructor(e,t){if(!(e&&typeof e=="string"))throw new TypeError('"url" must be a non-empty string.');this.hints=new de(e,t)}static async requestPermission(){return(await navigator.credentialsPolyfill.permissions.request({name:"credentialhandler"})).state}}/*!
 * A CredentialHandlerRegistration provides a CredentialManager to enable Web
 * apps to register Profiles that can be presented to websites.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class W{constructor(e,t){if(!(e&&typeof e=="string"))throw new TypeError('"url" must be a non-empty string.');this.credentialManager=new b(e,t)}}/*!
 * Provides an API for working with CredentialHandlerRegistrations.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */class ue{constructor(e){this._init=(async()=>{this._injector=await e,this._remote=this._injector.get("credentialHandlers",{functions:["register","unregister","getRegistration","hasRegistration"]})})()}async register(e){return await this._init,e=await this._remote.register("credential",e),new W(e,this._injector)}async unregister(e){return await this._init,this._remote.unregister("credential",e)}async getRegistration(e){return await this._init,e=await this._remote.getRegistration("credential",e),e?new W(e,this._injector):null}async hasRegistration(e){return await this._init,await this._remote.hasRegistration("credential",e)}}/*!
 * A WebCredential is a Credential that can be retrieved from or stored by a
 * "credential handler" that runs in a third party Web application.
 *
 * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.
 */class w{constructor(e,t,{recommendedHandlerOrigins:n=[]}={}){if(typeof e!="string")throw new TypeError('"dataType" must be a string.');this.type="web",this.dataType=e,this.data=t,this.options={recommendedHandlerOrigins:n}}}/*!
 * Wrapper for native CredentialsContainer that uses remote Credential Mediator
 * for WebCredential-related operations.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */const pe=0,me=0;class we{constructor(e){this._nativeCredentialsContainer={get:navigator.credentials&&navigator.credentials.get&&navigator.credentials.get.bind(navigator.credentials),store:navigator.credentials&&navigator.credentials.store&&navigator.credentials.store.bind(navigator.credentials)},this._init=(async()=>{this._remote=(await e).get("credentialsContainer",{functions:[{name:"get",options:{timeout:pe}},{name:"store",options:{timeout:me}}]})})()}async get(e={}){if(e.web){await this._init;const t=await this._remote.get(e);return t?new w(t.dataType,t.data):null}if(this._nativeCredentialsContainer.get)return this._nativeCredentialsContainer.get(e);throw new DOMException("Not implemented.","NotSupportedError")}async store(e){if(e instanceof w){await this._init;const t=await this._remote.store(e);return t?new w(t.dataType,t.data):null}if(this._nativeCredentialsContainer.store)return this._nativeCredentialsContainer.store(e);throw new DOMException("Not implemented.","NotSupportedError")}}/*!
 * Provides an API for working with permissions.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */const fe=0;class ge{constructor(e){this._init=(async()=>{this._remote=(await e).get("permissionManager",{functions:["query",{name:"request",options:{timeout:fe}},"revoke"]})})()}async query(e){return await this._init,await this._remote.query(e)}async request(e){return await this._init,await this._remote.request(e)}async revoke(e){return await this._init,await this._remote.revoke(e)}}/*!
 * Credential Handler API Polyfill.
 *
 * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.
 */const D="https://authn.io/mediator?origin="+encodeURIComponent(window.location.origin);let C;async function _e(i=D){return C||(C=!0,ye(i))}async function ye(i=D){const t=new se().createWindow(i,{className:"credential-mediator",timeout:3e4}),n=document.createElement("style");n.appendChild(document.createTextNode(`dialog.web-app-window.credential-mediator > .web-app-window-backdrop {
      background-color: rgba(0, 0, 0, 0.25);
    }`)),document.body.appendChild(n);const r={};return r.permissions=new ge(t),r.CredentialHandlers=new ue(t),r.CredentialHandler=ce,r.CredentialManager=b,r.credentials=new we(t),r.WebCredential=w,navigator.credentialsPolyfill=r,"credentials"in navigator?(navigator.credentials.get=r.credentials.get.bind(r.credentials),navigator.credentials.store=r.credentials.store.bind(r.credentials)):navigator.credentials=r.credentials,window.CredentialManager=b,window.WebCredential=w,r}const Ee="_container_1na42_2",ve="_gridContainer_1na42_6",be="_emailField_1na42_14",Ce="_sendButton_1na42_29";var _={container:Ee,gridContainer:ve,emailField:be,sendButton:Ce};const je=i=>{const{t:e}=M(),t=R(),n=k().user,[r,s]=m.exports.useState(n?.name.value),[l,a]=m.exports.useState(""),[o,c]=m.exports.useState(!1);m.exports.useState(!1);let d="";const h=async()=>{try{const p=`${H.publicRuntimeConfig.mediatorServer}/mediator?origin=${encodeURIComponent(window.location.origin)}`;await _e(p),console.log("Ready to work with credentials!")}catch(p){console.error("Error loading polyfill:",p)}};m.exports.useEffect(()=>{h()},[]),m.exports.useEffect(()=>{n&&s(n.name.value)},[n.name.value]);const U=p=>a(p.target.value),j=()=>{if(l==="")return!1;if(B(l.trim()))d="email";else if(F(l.trim()))d="sms";else return c(!0),!1;return c(!1),!0},T=p=>{p.preventDefault(),!!j()&&(d==="email"?t(y.addConnectionByEmail(l,n?.id?.value)):d==="sms"&&t(y.addConnectionBySms(l,n?.id?.value)))};return u.createElement("div",{className:_.container},u.createElement(x,{container:!0,className:_.gridContainer},u.createElement(x,{item:!0},u.createElement("form",{onSubmit:T,style:{display:"grid"}},u.createElement(z,{className:_.emailField,size:"small",placeholder:"Email",variant:"outlined",onChange:U,onBlur:j,error:o,helperText:o?e("user:usermenu.profile.phoneEmailError"):null}),u.createElement($,{className:_.sendButton,onClick:T},"Send Magic Link")))))},Ve=i=>{const e=R(),{t}=M();return m.exports.useEffect(()=>{e(y.doLoginAuto(!0))},[]),u.createElement(q,{pageTitle:t("login.pageTitle")},u.createElement(je,null))};export{Ve as IndexPage,Ve as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
