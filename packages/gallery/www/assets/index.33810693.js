import{r,h as R,R as e,u as w}from"./vendor.2a83d1c9.js";import{_ as x,b as F,G as U,d as G}from"./_app.41131035.js";import{d as J}from"./ArrowBackIos.5ae03564.js";import{c as N,i as D,a as I}from"./createSvgIcon.50054fae.js";import{P as y,C as E}from"./PopupsStateService.ba82c5f8.js";import{a as K}from"./FeedService.c397da2d.js";import{w as T,a as z}from"./capitalize.75c82fb0.js";import{a as m}from"./Typography.a1510182.js";import{A as Q}from"./Avatar.a262805b.js";import{I as X}from"./IconButton.5bf8eb2a.js";import{M as Y}from"./Modal.22c32aef.js";import{C as A,a as Z}from"./CardContent.e5a5f754.js";import{C as q}from"./CardMedia.147ece6d.js";import{B as b}from"./Button.11e5af54.js";import{D as ee}from"./Dialog.4b91e65c.js";import{D as te,a as ae}from"./DialogTitle.d9bbb4af.js";var re={root:{display:"flex",alignItems:"center",padding:16},avatar:{flex:"0 0 auto",marginRight:16},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-8,marginRight:-8},content:{flex:"1 1 auto"},title:{},subheader:{}},oe=r.exports.forwardRef(function(t,s){var o=t.action,l=t.avatar,n=t.classes,p=t.className,d=t.component,C=d===void 0?"div":d,g=t.disableTypography,u=g===void 0?!1:g,i=t.subheader,h=t.subheaderTypographyProps,k=t.title,B=t.titleTypographyProps,S=R(t,["action","avatar","classes","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"]),v=k;v!=null&&v.type!==m&&!u&&(v=r.exports.createElement(m,x({variant:l?"body2":"h5",className:n.title,component:"span",display:"block"},B),v));var f=i;return f!=null&&f.type!==m&&!u&&(f=r.exports.createElement(m,x({variant:l?"body2":"body1",className:n.subheader,color:"textSecondary",component:"span",display:"block"},h),f)),r.exports.createElement(C,x({className:z(n.root,p),ref:s},S),l&&r.exports.createElement("div",{className:n.avatar},l),r.exports.createElement("div",{className:n.content},v,f),o&&r.exports.createElement("div",{className:n.action},o))}),le=T(re,{name:"MuiCardHeader"})(oe),se={root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",flex:"0 0 auto"},spacing:{"& > :not(:first-child)":{marginLeft:8}}},ne=r.exports.forwardRef(function(t,s){var o=t.disableSpacing,l=o===void 0?!1:o,n=t.classes,p=t.className,d=R(t,["disableSpacing","classes","className"]);return r.exports.createElement("div",x({className:z(n.root,p,!l&&n.spacing),ref:s},d))}),ce=T(se,{name:"MuiDialogActions"})(ne),ie={root:{marginBottom:12}},ue=r.exports.forwardRef(function(t,s){return r.exports.createElement(m,x({component:"p",variant:"body1",color:"textSecondary",ref:s},t))}),me=T(ie,{name:"MuiDialogContentText"})(ue),j={},de=D.exports,pe=I.exports;Object.defineProperty(j,"__esModule",{value:!0});var L=j.default=void 0,ve=pe(r.exports),fe=de(N),ge=(0,fe.default)(ve.createElement("path",{d:"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreHoriz");L=j.default=ge;var M={},ye=D.exports,be=I.exports;Object.defineProperty(M,"__esModule",{value:!0});var H=M.default=void 0,Ce=be(r.exports),_e=ye(N),xe=(0,_e.default)(Ce.createElement("path",{d:"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"}),"VerifiedUser");H=M.default=xe;const Ee="_bgImage_1528x_1",he="_controls_1528x_7",ke="_backButton_1528x_11",Be="_moreButton_1528x_19",Se="_avatarImage_1528x_24",Ne="_content_1528x_33",De="_username_1528x_37",Ie="_titleContainer_1528x_41",Te="_tags_1528x_45",je="_countersButtons_1528x_50",Me="_countersButtonsSub_1528x_55",$e="_followButton_1528x_58";var c={bgImage:Ee,controls:he,backButton:ke,moreButton:Be,avatarImage:Se,content:Ne,username:De,titleContainer:Ie,tags:Te,countersButtons:je,countersButtonsSub:Me,followButton:$e},$={},Pe=D.exports,Re=I.exports;Object.defineProperty($,"__esModule",{value:!0});var V=$.default=void 0,we=Re(r.exports),Fe=Pe(N),ze=(0,Fe.default)(we.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete");V=$.default=ze;const Ae=({creator:a})=>{const t=F(),s=U(),o=l=>{t(E.unBlockCreator(l))};return a?e.createElement(le,{avatar:e.createElement(Q,{src:a.avatar,alt:a.username,onClick:()=>{if(s.popups.creatorPage?.value===!0){t(y.updateCreatorPageState(!1));const l=setTimeout(()=>{clearInterval(l),t(y.updateCreatorPageState(!0,a.id))},100)}else t(y.updateCreatorPageState(!0,a.id))}}),title:e.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between"}},e.createElement(m,{variant:"h6"},a.username,a.verified===!0&&e.createElement(H,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),e.createElement(X,{"aria-label":"delete",color:"primary",onClick:()=>o(a.id)},e.createElement(V,null)))}):e.createElement(e.Fragment,null)},qe=a=>{const{onClose:t,selectedValue:s,open:o,list:l,type:n}=a,{t:p}=w(),d=()=>{t(s)};return console.log(l),e.createElement(Y,{onClose:d,open:o,style:{display:"flex",justifyContent:"center",alignItems:"center"}},e.createElement(A,{style:{width:"auto",height:"60%",overflow:"auto",padding:"1%"}},l?.length>0?l?.map((C,g)=>e.createElement(Ae,{creator:C,key:g})):e.createElement("p",null,p("social:simpleModal.emptyList"))))},rt=({creator:a})=>{const t=G(),s=a===t.creators.currentCreator?.id?.value,{t:o}=w(),[l,n]=e.useState(!1),[p,d]=r.exports.useState(!1),[C,g]=r.exports.useState("followers"),u=F(),i=s?t.creators.currentCreator:t.creators.creator,h=t.creators.currentCreator?.id?.value;r.exports.useEffect(()=>{u(E.getBlockedList(h))},[]);const k=t.creators.blocked.value,B=_=>_.id===a?.id,S=k?.some(B),v=_=>{u(E.blockCreator(_)),n(!1),u(y.updateCreatorPageState(!1))},f=_=>{u(E.getBlockedList(_)),d(!0),g("blocked")},O=()=>{n(!0)},P=()=>{n(!1)},W=()=>e.createElement(b,{variant:"text",className:c.moreButton,"aria-controls":"owner-menu","aria-haspopup":"true",onClick:()=>{u(y.updateCreatorFormState(!0)),u(K.clearCreatorFeatured())}},e.createElement(L,null));return a?e.createElement(e.Fragment,null,e.createElement(A,{className:c.creatorCard,elevation:0,key:a.username,square:!1},a.background?e.createElement(q,{className:c.bgImage,src:a.background,title:a.name}):e.createElement("section",{className:c.bgImage}),e.createElement("section",{className:c.controls},e.createElement(b,{variant:"text",className:c.backButton,onClick:()=>{u(y.updateCreatorPageState(!1))}},e.createElement(J,null),o("social:creator.back")),s&&W()),i.avatar.value?e.createElement(q,{className:c.avatarImage,image:i.avatar.value,title:i.username.value}):e.createElement("section",{className:c.avatarImage}),e.createElement(Z,{className:c.content},e.createElement(m,{className:c.username},"@",i.username.value),e.createElement(m,{className:c.titleContainer},i.name.value),e.createElement(m,{className:c.tags},i.tags.value),e.createElement(m,null,i.bio.value),s?e.createElement(b,{variant:"outlined",color:"primary",className:c.followButton,onClick:()=>f(i.id.value)},o("social:creator.blocked-list")):" ",s||S?"":e.createElement(b,{onClick:O,variant:"outlined",color:"primary",className:c.followButton},o("social:creator.block-user")),e.createElement(ee,{open:l,onClose:P,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description"},e.createElement(te,{id:"alert-dialog-title"},"Block this user?"),e.createElement(ae,null,e.createElement(me,{id:"alert-dialog-description"},o("social:creator.dialog-content"))),e.createElement(ce,null,e.createElement(b,{onClick:P,color:"primary"},o("social:cancel")),e.createElement(b,{onClick:()=>v(i.id.value),color:"primary",autoFocus:!0},o("social:confirm")))))),e.createElement(qe,{type:C,list:t.creators.blocked.value,open:p,onClose:()=>d(!1)})):e.createElement(e.Fragment,null)};export{rt as C,ce as D,L as a,H as d};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
