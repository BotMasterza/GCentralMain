import{_ as re,j as Ft,k as Pr,l as kr,m as jr,n as Er}from"./_app.41131035.js";import{m as Rr,n as Ar,p as Dt,q as Bt,e as Cr,R as fe,h as et,l as Lt,k as Tr}from"./vendor.2a83d1c9.js";import{C as Re}from"./index.b1c16674.js";function xr(O){if(Array.isArray(O))return Rr(O)}function Ir(O){if(typeof Symbol!="undefined"&&O[Symbol.iterator]!=null||O["@@iterator"]!=null)return Array.from(O)}function Mr(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Nr(O){return xr(O)||Ir(O)||Ar(O)||Mr()}var Fr=typeof Symbol=="function"&&Symbol.for,Dr=Fr?Symbol.for("mui.nested"):"__THEME_NESTED__",Br=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];function Lr(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},y=O.disableGlobal,h=y===void 0?!1:y,e=O.productionPrefix,a=e===void 0?"jss":e,c=O.seed,m=c===void 0?"":c,t=m===""?"":"".concat(m,"-"),_=0,g=function(){return _+=1,_};return function(R,k){var S=k.options.name;if(S&&S.indexOf("Mui")===0&&!k.options.link&&!h){if(Br.indexOf(R.key)!==-1)return"Mui-".concat(R.key);var C="".concat(t).concat(S,"-").concat(R.key);return!k.options.theme[Dr]||m!==""?C:"".concat(C,"-").concat(g())}return"".concat(t).concat(a).concat(g())}}function Ur(O){var y=O.theme,h=O.name,e=O.props;if(!y||!y.props||!y.props[h])return e;var a=y.props[h],c;for(c in a)e[c]===void 0&&(e[c]=a[c]);return e}var Ut=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(O){return typeof O}:function(O){return O&&typeof Symbol=="function"&&O.constructor===Symbol&&O!==Symbol.prototype?"symbol":typeof O},Ae=(typeof window=="undefined"?"undefined":Ut(window))==="object"&&(typeof document=="undefined"?"undefined":Ut(document))==="object"&&document.nodeType===9,Hr={}.constructor;function tt(O){if(O==null||typeof O!="object")return O;if(Array.isArray(O))return O.map(tt);if(O.constructor!==Hr)return O;var y={};for(var h in O)y[h]=tt(O[h]);return y}function rt(O,y,h){O===void 0&&(O="unnamed");var e=h.jss,a=tt(y),c=e.plugins.onCreateRule(O,a,h);return c||(O[0]==="@",null)}var Ht=function(y,h){for(var e="",a=0;a<y.length&&y[a]!=="!important";a++)e&&(e+=h),e+=y[a];return e},ge=function(y,h){if(h===void 0&&(h=!1),!Array.isArray(y))return y;var e="";if(Array.isArray(y[0]))for(var a=0;a<y.length&&y[a]!=="!important";a++)e&&(e+=", "),e+=Ht(y[a]," ");else e=Ht(y,", ");return!h&&y[y.length-1]==="!important"&&(e+=" !important"),e};function Ce(O,y){for(var h="",e=0;e<y;e++)h+="  ";return h+O}function Te(O,y,h){h===void 0&&(h={});var e="";if(!y)return e;var a=h,c=a.indent,m=c===void 0?0:c,t=y.fallbacks;if(O&&m++,t)if(Array.isArray(t))for(var _=0;_<t.length;_++){var g=t[_];for(var R in g){var k=g[R];k!=null&&(e&&(e+=`
`),e+=Ce(R+": "+ge(k)+";",m))}}else for(var S in t){var C=t[S];C!=null&&(e&&(e+=`
`),e+=Ce(S+": "+ge(C)+";",m))}for(var b in y){var j=y[b];j!=null&&b!=="fallbacks"&&(e&&(e+=`
`),e+=Ce(b+": "+ge(j)+";",m))}return!e&&!h.allowEmpty||!O?e:(m--,e&&(e=`
`+e+`
`),Ce(O+" {"+e,m)+Ce("}",m))}var Vr=/([[\].#*$><+~=|^:(),"'`\s])/g,Vt=typeof CSS!="undefined"&&CSS.escape,nt=function(O){return Vt?Vt(O):O.replace(Vr,"\\$1")},$t=function(){function O(h,e,a){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var c=a.sheet,m=a.Renderer;this.key=h,this.options=a,this.style=e,c?this.renderer=c.renderer:m&&(this.renderer=new m)}var y=O.prototype;return y.prop=function(e,a,c){if(a===void 0)return this.style[e];var m=c?c.force:!1;if(!m&&this.style[e]===a)return this;var t=a;(!c||c.process!==!1)&&(t=this.options.jss.plugins.onChangeValue(a,e,this));var _=t==null||t===!1,g=e in this.style;if(_&&!g&&!m)return this;var R=_&&g;if(R?delete this.style[e]:this.style[e]=t,this.renderable&&this.renderer)return R?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,t),this;var k=this.options.sheet;return k&&k.attached,this},O}(),ot=function(O){Ft(y,O);function y(e,a,c){var m;m=O.call(this,e,a,c)||this,m.selectorText=void 0,m.id=void 0,m.renderable=void 0;var t=c.selector,_=c.scoped,g=c.sheet,R=c.generateId;return t?m.selectorText=t:_!==!1&&(m.id=R(Bt(Bt(m)),g),m.selectorText="."+nt(m.id)),m}var h=y.prototype;return h.applyTo=function(a){var c=this.renderer;if(c){var m=this.toJSON();for(var t in m)c.setProperty(a,t,m[t])}return this},h.toJSON=function(){var a={};for(var c in this.style){var m=this.style[c];typeof m!="object"?a[c]=m:Array.isArray(m)&&(a[c]=ge(m))}return a},h.toString=function(a){var c=this.options.sheet,m=c?c.options.link:!1,t=m?re({},a,{allowEmpty:!0}):a;return Te(this.selectorText,this.style,t)},Dt(y,[{key:"selector",set:function(a){if(a!==this.selectorText){this.selectorText=a;var c=this.renderer,m=this.renderable;if(!(!m||!c)){var t=c.setSelector(m,a);t||c.replaceRule(m,this)}}},get:function(){return this.selectorText}}]),y}($t),$r={onCreateRule:function(y,h,e){return y[0]==="@"||e.parent&&e.parent.type==="keyframes"?null:new ot(y,h,e)}},it={indent:1,children:!0},Wr=/@([\w-]+)/,Gr=function(){function O(h,e,a){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=h;var c=h.match(Wr);this.at=c?c[1]:"unknown",this.query=a.name||"@"+this.at,this.options=a,this.rules=new He(re({},a,{parent:this}));for(var m in e)this.rules.add(m,e[m]);this.rules.process()}var y=O.prototype;return y.getRule=function(e){return this.rules.get(e)},y.indexOf=function(e){return this.rules.indexOf(e)},y.addRule=function(e,a,c){var m=this.rules.add(e,a,c);return m?(this.options.jss.plugins.onProcessRule(m),m):null},y.toString=function(e){if(e===void 0&&(e=it),e.indent==null&&(e.indent=it.indent),e.children==null&&(e.children=it.children),e.children===!1)return this.query+" {}";var a=this.rules.toString(e);return a?this.query+` {
`+a+`
}`:""},O}(),zr=/@media|@supports\s+/,Kr={onCreateRule:function(y,h,e){return zr.test(y)?new Gr(y,h,e):null}},at={indent:1,children:!0},qr=/@keyframes\s+([\w-]+)/,st=function(){function O(h,e,a){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var c=h.match(qr);c&&c[1]?this.name=c[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=a;var m=a.scoped,t=a.sheet,_=a.generateId;this.id=m===!1?this.name:nt(_(this,t)),this.rules=new He(re({},a,{parent:this}));for(var g in e)this.rules.add(g,e[g],re({},a,{parent:this}));this.rules.process()}var y=O.prototype;return y.toString=function(e){if(e===void 0&&(e=at),e.indent==null&&(e.indent=at.indent),e.children==null&&(e.children=at.children),e.children===!1)return this.at+" "+this.id+" {}";var a=this.rules.toString(e);return a&&(a=`
`+a+`
`),this.at+" "+this.id+" {"+a+"}"},O}(),Jr=/@keyframes\s+/,Xr=/\$([\w-]+)/g,ut=function(y,h){return typeof y=="string"?y.replace(Xr,function(e,a){return a in h?h[a]:e}):y},Wt=function(y,h,e){var a=y[h],c=ut(a,e);c!==a&&(y[h]=c)},Yr={onCreateRule:function(y,h,e){return typeof y=="string"&&Jr.test(y)?new st(y,h,e):null},onProcessStyle:function(y,h,e){return h.type!=="style"||!e||("animation-name"in y&&Wt(y,"animation-name",e.keyframes),"animation"in y&&Wt(y,"animation",e.keyframes)),y},onChangeValue:function(y,h,e){var a=e.options.sheet;if(!a)return y;switch(h){case"animation":return ut(y,a.keyframes);case"animation-name":return ut(y,a.keyframes);default:return y}}},Qr=function(O){Ft(y,O);function y(){for(var e,a=arguments.length,c=new Array(a),m=0;m<a;m++)c[m]=arguments[m];return e=O.call.apply(O,[this].concat(c))||this,e.renderable=void 0,e}var h=y.prototype;return h.toString=function(a){var c=this.options.sheet,m=c?c.options.link:!1,t=m?re({},a,{allowEmpty:!0}):a;return Te(this.key,this.style,t)},y}($t),Zr={onCreateRule:function(y,h,e){return e.parent&&e.parent.type==="keyframes"?new Qr(y,h,e):null}},en=function(){function O(h,e,a){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=h,this.style=e,this.options=a}var y=O.prototype;return y.toString=function(e){if(Array.isArray(this.style)){for(var a="",c=0;c<this.style.length;c++)a+=Te(this.at,this.style[c]),this.style[c+1]&&(a+=`
`);return a}return Te(this.at,this.style,e)},O}(),tn=/@font-face/,rn={onCreateRule:function(y,h,e){return tn.test(y)?new en(y,h,e):null}},nn=function(){function O(h,e,a){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=h,this.style=e,this.options=a}var y=O.prototype;return y.toString=function(e){return Te(this.key,this.style,e)},O}(),on={onCreateRule:function(y,h,e){return y==="@viewport"||y==="@-ms-viewport"?new nn(y,h,e):null}},an=function(){function O(h,e,a){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=h,this.value=e,this.options=a}var y=O.prototype;return y.toString=function(e){if(Array.isArray(this.value)){for(var a="",c=0;c<this.value.length;c++)a+=this.key+" "+this.value[c]+";",this.value[c+1]&&(a+=`
`);return a}return this.key+" "+this.value+";"},O}(),sn={"@charset":!0,"@import":!0,"@namespace":!0},un={onCreateRule:function(y,h,e){return y in sn?new an(y,h,e):null}},Gt=[$r,Kr,Yr,Zr,rn,on,un],fn={process:!0},zt={force:!0,process:!0},He=function(){function O(h){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=h,this.classes=h.classes,this.keyframes=h.keyframes}var y=O.prototype;return y.add=function(e,a,c){var m=this.options,t=m.parent,_=m.sheet,g=m.jss,R=m.Renderer,k=m.generateId,S=m.scoped,C=re({classes:this.classes,parent:t,sheet:_,jss:g,Renderer:R,generateId:k,scoped:S,name:e,keyframes:this.keyframes,selector:void 0},c),b=e;e in this.raw&&(b=e+"-d"+this.counter++),this.raw[b]=a,b in this.classes&&(C.selector="."+nt(this.classes[b]));var j=rt(b,a,C);if(!j)return null;this.register(j);var E=C.index===void 0?this.index.length:C.index;return this.index.splice(E,0,j),j},y.get=function(e){return this.map[e]},y.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},y.indexOf=function(e){return this.index.indexOf(e)},y.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},y.register=function(e){this.map[e.key]=e,e instanceof ot?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof st&&this.keyframes&&(this.keyframes[e.name]=e.id)},y.unregister=function(e){delete this.map[e.key],e instanceof ot?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof st&&delete this.keyframes[e.name]},y.update=function(){var e,a,c;if(typeof(arguments.length<=0?void 0:arguments[0])=="string"?(e=arguments.length<=0?void 0:arguments[0],a=arguments.length<=1?void 0:arguments[1],c=arguments.length<=2?void 0:arguments[2]):(a=arguments.length<=0?void 0:arguments[0],c=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],a,c);else for(var m=0;m<this.index.length;m++)this.updateOne(this.index[m],a,c)},y.updateOne=function(e,a,c){c===void 0&&(c=fn);var m=this.options,t=m.jss.plugins,_=m.sheet;if(e.rules instanceof O){e.rules.update(a,c);return}var g=e,R=g.style;if(t.onUpdate(a,e,_,c),c.process&&R&&R!==g.style){t.onProcessStyle(g.style,g,_);for(var k in g.style){var S=g.style[k],C=R[k];S!==C&&g.prop(k,S,zt)}for(var b in R){var j=g.style[b],E=R[b];j==null&&j!==E&&g.prop(b,null,zt)}}},y.toString=function(e){for(var a="",c=this.options.sheet,m=c?c.options.link:!1,t=0;t<this.index.length;t++){var _=this.index[t],g=_.toString(e);!g&&!m||(a&&(a+=`
`),a+=g)}return a},O}(),Kt=function(){function O(h,e){this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=re({},e,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),e.Renderer&&(this.renderer=new e.Renderer(this)),this.rules=new He(this.options);for(var a in h)this.rules.add(a,h[a]);this.rules.process()}var y=O.prototype;return y.attach=function(){return this.attached?this:(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy(),this)},y.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},y.addRule=function(e,a,c){var m=this.queue;this.attached&&!m&&(this.queue=[]);var t=this.rules.add(e,a,c);return t?(this.options.jss.plugins.onProcessRule(t),this.attached?(this.deployed&&(m?m.push(t):(this.insertRule(t),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0))),t):(this.deployed=!1,t)):null},y.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},y.addRules=function(e,a){var c=[];for(var m in e){var t=this.addRule(m,e[m],a);t&&c.push(t)}return c},y.getRule=function(e){return this.rules.get(e)},y.deleteRule=function(e){var a=typeof e=="object"?e:this.rules.get(e);return!a||this.attached&&!a.renderable?!1:(this.rules.remove(a),this.attached&&a.renderable&&this.renderer?this.renderer.deleteRule(a.renderable):!0)},y.indexOf=function(e){return this.rules.indexOf(e)},y.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},y.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},y.updateOne=function(e,a,c){return this.rules.updateOne(e,a,c),this},y.toString=function(e){return this.rules.toString(e)},O}(),cn=function(){function O(){this.plugins={internal:[],external:[]},this.registry=void 0}var y=O.prototype;return y.onCreateRule=function(e,a,c){for(var m=0;m<this.registry.onCreateRule.length;m++){var t=this.registry.onCreateRule[m](e,a,c);if(t)return t}return null},y.onProcessRule=function(e){if(!e.isProcessed){for(var a=e.options.sheet,c=0;c<this.registry.onProcessRule.length;c++)this.registry.onProcessRule[c](e,a);e.style&&this.onProcessStyle(e.style,e,a),e.isProcessed=!0}},y.onProcessStyle=function(e,a,c){for(var m=0;m<this.registry.onProcessStyle.length;m++)a.style=this.registry.onProcessStyle[m](a.style,a,c)},y.onProcessSheet=function(e){for(var a=0;a<this.registry.onProcessSheet.length;a++)this.registry.onProcessSheet[a](e)},y.onUpdate=function(e,a,c,m){for(var t=0;t<this.registry.onUpdate.length;t++)this.registry.onUpdate[t](e,a,c,m)},y.onChangeValue=function(e,a,c){for(var m=e,t=0;t<this.registry.onChangeValue.length;t++)m=this.registry.onChangeValue[t](m,a,c);return m},y.use=function(e,a){a===void 0&&(a={queue:"external"});var c=this.plugins[a.queue];c.indexOf(e)===-1&&(c.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce(function(m,t){for(var _ in t)_ in m&&m[_].push(t[_]);return m},{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},O}(),ln=function(){function O(){this.registry=[]}var y=O.prototype;return y.add=function(e){var a=this.registry,c=e.options.index;if(a.indexOf(e)===-1){if(a.length===0||c>=this.index){a.push(e);return}for(var m=0;m<a.length;m++)if(a[m].options.index>c){a.splice(m,0,e);return}}},y.reset=function(){this.registry=[]},y.remove=function(e){var a=this.registry.indexOf(e);this.registry.splice(a,1)},y.toString=function(e){for(var a=e===void 0?{}:e,c=a.attached,m=Cr(a,["attached"]),t="",_=0;_<this.registry.length;_++){var g=this.registry[_];c!=null&&g.attached!==c||(t&&(t+=`
`),t+=g.toString(m))}return t},Dt(O,[{key:"index",get:function(){return this.registry.length===0?0:this.registry[this.registry.length-1].options.index}}]),O}(),xe=new ln,ft=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"&&window.Math===Math?window:typeof self!="undefined"&&self.Math===Math?self:Function("return this")(),ct="2f1acc6c3a606b082e5eef5e54414ffb";ft[ct]==null&&(ft[ct]=0);var qt=ft[ct]++,Jt=function(y){y===void 0&&(y={});var h=0,e=function(c,m){h+=1;var t="",_="";return m&&(m.options.classNamePrefix&&(_=m.options.classNamePrefix),m.options.jss.id!=null&&(t=String(m.options.jss.id))),y.minify?""+(_||"c")+qt+t+h:_+c.key+"-"+qt+(t?"-"+t:"")+"-"+h};return e},Xt=function(y){var h;return function(){return h||(h=y()),h}},dn=function(y,h){try{return y.attributeStyleMap?y.attributeStyleMap.get(h):y.style.getPropertyValue(h)}catch(e){return""}},pn=function(y,h,e){try{var a=e;if(Array.isArray(e)&&(a=ge(e,!0),e[e.length-1]==="!important"))return y.style.setProperty(h,a,"important"),!0;y.attributeStyleMap?y.attributeStyleMap.set(h,a):y.style.setProperty(h,a)}catch(c){return!1}return!0},hn=function(y,h){try{y.attributeStyleMap?y.attributeStyleMap.delete(h):y.style.removeProperty(h)}catch(e){}},yn=function(y,h){return y.selectorText=h,y.selectorText===h},Yt=Xt(function(){return document.querySelector("head")});function vn(O,y){for(var h=0;h<O.length;h++){var e=O[h];if(e.attached&&e.options.index>y.index&&e.options.insertionPoint===y.insertionPoint)return e}return null}function mn(O,y){for(var h=O.length-1;h>=0;h--){var e=O[h];if(e.attached&&e.options.insertionPoint===y.insertionPoint)return e}return null}function gn(O){for(var y=Yt(),h=0;h<y.childNodes.length;h++){var e=y.childNodes[h];if(e.nodeType===8&&e.nodeValue.trim()===O)return e}return null}function bn(O){var y=xe.registry;if(y.length>0){var h=vn(y,O);if(h&&h.renderer)return{parent:h.renderer.element.parentNode,node:h.renderer.element};if(h=mn(y,O),h&&h.renderer)return{parent:h.renderer.element.parentNode,node:h.renderer.element.nextSibling}}var e=O.insertionPoint;if(e&&typeof e=="string"){var a=gn(e);if(a)return{parent:a.parentNode,node:a.nextSibling}}return!1}function _n(O,y){var h=y.insertionPoint,e=bn(y);if(e!==!1&&e.parent){e.parent.insertBefore(O,e.node);return}if(h&&typeof h.nodeType=="number"){var a=h,c=a.parentNode;c&&c.insertBefore(O,a.nextSibling);return}Yt().appendChild(O)}var Sn=Xt(function(){var O=document.querySelector('meta[property="csp-nonce"]');return O?O.getAttribute("content"):null}),Qt=function(y,h,e){try{if("insertRule"in y){var a=y;a.insertRule(h,e)}else if("appendRule"in y){var c=y;c.appendRule(h)}}catch(m){return!1}return y.cssRules[e]},Zt=function(y,h){var e=y.cssRules.length;return h===void 0||h>e?e:h},wn=function(){var y=document.createElement("style");return y.textContent=`
`,y},On=function(){function O(h){this.getPropertyValue=dn,this.setProperty=pn,this.removeProperty=hn,this.setSelector=yn,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],h&&xe.add(h),this.sheet=h;var e=this.sheet?this.sheet.options:{},a=e.media,c=e.meta,m=e.element;this.element=m||wn(),this.element.setAttribute("data-jss",""),a&&this.element.setAttribute("media",a),c&&this.element.setAttribute("data-meta",c);var t=Sn();t&&this.element.setAttribute("nonce",t)}var y=O.prototype;return y.attach=function(){if(!(this.element.parentNode||!this.sheet)){_n(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},y.detach=function(){if(!!this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent=`
`)}},y.deploy=function(){var e=this.sheet;if(!!e){if(e.options.link){this.insertRules(e.rules);return}this.element.textContent=`
`+e.toString()+`
`}},y.insertRules=function(e,a){for(var c=0;c<e.index.length;c++)this.insertRule(e.index[c],c,a)},y.insertRule=function(e,a,c){if(c===void 0&&(c=this.element.sheet),e.rules){var m=e,t=c;if(e.type==="conditional"||e.type==="keyframes"){var _=Zt(c,a);if(t=Qt(c,m.toString({children:!1}),_),t===!1)return!1;this.refCssRule(e,_,t)}return this.insertRules(m.rules,t),t}var g=e.toString();if(!g)return!1;var R=Zt(c,a),k=Qt(c,g,R);return k===!1?!1:(this.hasInsertedRules=!0,this.refCssRule(e,R,k),k)},y.refCssRule=function(e,a,c){e.renderable=c,e.options.parent instanceof Kt&&(this.cssRules[a]=c)},y.deleteRule=function(e){var a=this.element.sheet,c=this.indexOf(e);return c===-1?!1:(a.deleteRule(c),this.cssRules.splice(c,1),!0)},y.indexOf=function(e){return this.cssRules.indexOf(e)},y.replaceRule=function(e,a){var c=this.indexOf(e);return c===-1?!1:(this.element.sheet.deleteRule(c),this.cssRules.splice(c,1),this.insertRule(a,c))},y.getRules=function(){return this.element.sheet.cssRules},O}(),Pn=0,kn=function(){function O(h){this.id=Pn++,this.version="10.7.1",this.plugins=new cn,this.options={id:{minify:!1},createGenerateId:Jt,Renderer:Ae?On:null,plugins:[]},this.generateId=Jt({minify:!1});for(var e=0;e<Gt.length;e++)this.plugins.use(Gt[e],{queue:"internal"});this.setup(h)}var y=O.prototype;return y.setup=function(e){return e===void 0&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=re({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),e.insertionPoint!=null&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},y.createStyleSheet=function(e,a){a===void 0&&(a={});var c=a,m=c.index;typeof m!="number"&&(m=xe.index===0?0:xe.index+1);var t=new Kt(e,re({},a,{jss:this,generateId:a.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:m}));return this.plugins.onProcessSheet(t),t},y.removeStyleSheet=function(e){return e.detach(),xe.remove(e),this},y.createRule=function(e,a,c){if(a===void 0&&(a={}),c===void 0&&(c={}),typeof e=="object")return this.createRule(void 0,e,a);var m=re({},c,{name:e,jss:this,Renderer:this.options.Renderer});m.generateId||(m.generateId=this.generateId),m.classes||(m.classes={}),m.keyframes||(m.keyframes={});var t=rt(e,a,m);return t&&this.plugins.onProcessRule(t),t},y.use=function(){for(var e=this,a=arguments.length,c=new Array(a),m=0;m<a;m++)c[m]=arguments[m];return c.forEach(function(t){e.plugins.use(t)}),this},O}();function er(O){var y=null;for(var h in O){var e=O[h],a=typeof e;if(a==="function")y||(y={}),y[h]=e;else if(a==="object"&&e!==null&&!Array.isArray(e)){var c=er(e);c&&(y||(y={}),y[h]=c)}}return y}/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */var lt=typeof CSS=="object"&&CSS!=null&&"number"in CSS,tr=function(y){return new kn(y)};tr();var rr=Date.now(),dt="fnValues"+rr,pt="fnStyle"+ ++rr,jn=function(){return{onCreateRule:function(h,e,a){if(typeof e!="function")return null;var c=rt(h,{},a);return c[pt]=e,c},onProcessStyle:function(h,e){if(dt in e||pt in e)return h;var a={};for(var c in h){var m=h[c];typeof m=="function"&&(delete h[c],a[c]=m)}return e[dt]=a,h},onUpdate:function(h,e,a,c){var m=e,t=m[pt];t&&(m.style=t(h)||{});var _=m[dt];if(_)for(var g in _)m.prop(g,_[g](h),c)}}},En=jn,he="@global",ht="@global ",Rn=function(){function O(h,e,a){this.type="global",this.at=he,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=h,this.options=a,this.rules=new He(re({},a,{parent:this}));for(var c in e)this.rules.add(c,e[c]);this.rules.process()}var y=O.prototype;return y.getRule=function(e){return this.rules.get(e)},y.addRule=function(e,a,c){var m=this.rules.add(e,a,c);return m&&this.options.jss.plugins.onProcessRule(m),m},y.indexOf=function(e){return this.rules.indexOf(e)},y.toString=function(){return this.rules.toString()},O}(),An=function(){function O(h,e,a){this.type="global",this.at=he,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=h,this.options=a;var c=h.substr(ht.length);this.rule=a.jss.createRule(c,e,re({},a,{parent:this}))}var y=O.prototype;return y.toString=function(e){return this.rule?this.rule.toString(e):""},O}(),Cn=/\s*,\s*/g;function nr(O,y){for(var h=O.split(Cn),e="",a=0;a<h.length;a++)e+=y+" "+h[a].trim(),h[a+1]&&(e+=", ");return e}function Tn(O,y){var h=O.options,e=O.style,a=e?e[he]:null;if(!!a){for(var c in a)y.addRule(c,a[c],re({},h,{selector:nr(c,O.selector)}));delete e[he]}}function xn(O,y){var h=O.options,e=O.style;for(var a in e)if(!(a[0]!=="@"||a.substr(0,he.length)!==he)){var c=nr(a.substr(he.length),O.selector);y.addRule(c,e[a],re({},h,{selector:c})),delete e[a]}}function In(){function O(h,e,a){if(!h)return null;if(h===he)return new Rn(h,e,a);if(h[0]==="@"&&h.substr(0,ht.length)===ht)return new An(h,e,a);var c=a.parent;return c&&(c.type==="global"||c.options.parent&&c.options.parent.type==="global")&&(a.scoped=!1),a.scoped===!1&&(a.selector=h),null}function y(h,e){h.type!=="style"||!e||(Tn(h,e),xn(h,e))}return{onCreateRule:O,onProcessRule:y}}var or=/\s*,\s*/g,Mn=/&/g,Nn=/\$([\w-]+)/g;function Fn(){function O(a,c){return function(m,t){var _=a.getRule(t)||c&&c.getRule(t);return _?(_=_,_.selector):t}}function y(a,c){for(var m=c.split(or),t=a.split(or),_="",g=0;g<m.length;g++)for(var R=m[g],k=0;k<t.length;k++){var S=t[k];_&&(_+=", "),_+=S.indexOf("&")!==-1?S.replace(Mn,R):R+" "+S}return _}function h(a,c,m){if(m)return re({},m,{index:m.index+1});var t=a.options.nestingLevel;t=t===void 0?1:t+1;var _=re({},a.options,{nestingLevel:t,index:c.indexOf(a)+1});return delete _.name,_}function e(a,c,m){if(c.type!=="style")return a;var t=c,_=t.options.parent,g,R;for(var k in a){var S=k.indexOf("&")!==-1,C=k[0]==="@";if(!(!S&&!C)){if(g=h(t,_,g),S){var b=y(k,t.selector);R||(R=O(_,m)),b=b.replace(Nn,R),_.addRule(b,a[k],re({},g,{selector:b}))}else C&&_.addRule(k,{},g).addRule(t.key,a[k],{selector:t.selector});delete a[k]}}return a}return{onProcessStyle:e}}var Dn=/[A-Z]/g,Bn=/^ms-/,yt={};function Ln(O){return"-"+O.toLowerCase()}function ir(O){if(yt.hasOwnProperty(O))return yt[O];var y=O.replace(Dn,Ln);return yt[O]=Bn.test(y)?"-"+y:y}function Ve(O){var y={};for(var h in O){var e=h.indexOf("--")===0?h:ir(h);y[e]=O[h]}return O.fallbacks&&(Array.isArray(O.fallbacks)?y.fallbacks=O.fallbacks.map(Ve):y.fallbacks=Ve(O.fallbacks)),y}function Un(){function O(h){if(Array.isArray(h)){for(var e=0;e<h.length;e++)h[e]=Ve(h[e]);return h}return Ve(h)}function y(h,e,a){if(e.indexOf("--")===0)return h;var c=ir(e);return e===c?h:(a.prop(c,h),null)}return{onProcessStyle:O,onChangeValue:y}}var W=lt&&CSS?CSS.px:"px",$e=lt&&CSS?CSS.ms:"ms",we=lt&&CSS?CSS.percent:"%",Hn={"animation-delay":$e,"animation-duration":$e,"background-position":W,"background-position-x":W,"background-position-y":W,"background-size":W,border:W,"border-bottom":W,"border-bottom-left-radius":W,"border-bottom-right-radius":W,"border-bottom-width":W,"border-left":W,"border-left-width":W,"border-radius":W,"border-right":W,"border-right-width":W,"border-top":W,"border-top-left-radius":W,"border-top-right-radius":W,"border-top-width":W,"border-width":W,"border-block":W,"border-block-end":W,"border-block-end-width":W,"border-block-start":W,"border-block-start-width":W,"border-block-width":W,"border-inline":W,"border-inline-end":W,"border-inline-end-width":W,"border-inline-start":W,"border-inline-start-width":W,"border-inline-width":W,"border-start-start-radius":W,"border-start-end-radius":W,"border-end-start-radius":W,"border-end-end-radius":W,margin:W,"margin-bottom":W,"margin-left":W,"margin-right":W,"margin-top":W,"margin-block":W,"margin-block-end":W,"margin-block-start":W,"margin-inline":W,"margin-inline-end":W,"margin-inline-start":W,padding:W,"padding-bottom":W,"padding-left":W,"padding-right":W,"padding-top":W,"padding-block":W,"padding-block-end":W,"padding-block-start":W,"padding-inline":W,"padding-inline-end":W,"padding-inline-start":W,"mask-position-x":W,"mask-position-y":W,"mask-size":W,height:W,width:W,"min-height":W,"max-height":W,"min-width":W,"max-width":W,bottom:W,left:W,top:W,right:W,inset:W,"inset-block":W,"inset-block-end":W,"inset-block-start":W,"inset-inline":W,"inset-inline-end":W,"inset-inline-start":W,"box-shadow":W,"text-shadow":W,"column-gap":W,"column-rule":W,"column-rule-width":W,"column-width":W,"font-size":W,"font-size-delta":W,"letter-spacing":W,"text-decoration-thickness":W,"text-indent":W,"text-stroke":W,"text-stroke-width":W,"word-spacing":W,motion:W,"motion-offset":W,outline:W,"outline-offset":W,"outline-width":W,perspective:W,"perspective-origin-x":we,"perspective-origin-y":we,"transform-origin":we,"transform-origin-x":we,"transform-origin-y":we,"transform-origin-z":we,"transition-delay":$e,"transition-duration":$e,"vertical-align":W,"flex-basis":W,"shape-margin":W,size:W,gap:W,grid:W,"grid-gap":W,"row-gap":W,"grid-row-gap":W,"grid-column-gap":W,"grid-template-rows":W,"grid-template-columns":W,"grid-auto-rows":W,"grid-auto-columns":W,"box-shadow-x":W,"box-shadow-y":W,"box-shadow-blur":W,"box-shadow-spread":W,"font-line-height":W,"text-shadow-x":W,"text-shadow-y":W,"text-shadow-blur":W};function ar(O){var y=/(-[a-z])/g,h=function(m){return m[1].toUpperCase()},e={};for(var a in O)e[a]=O[a],e[a.replace(y,h)]=O[a];return e}var Vn=ar(Hn);function Ie(O,y,h){if(y==null)return y;if(Array.isArray(y))for(var e=0;e<y.length;e++)y[e]=Ie(O,y[e],h);else if(typeof y=="object")if(O==="fallbacks")for(var a in y)y[a]=Ie(a,y[a],h);else for(var c in y)y[c]=Ie(O+"-"+c,y[c],h);else if(typeof y=="number"&&isNaN(y)===!1){var m=h[O]||Vn[O];return m&&!(y===0&&m===W)?typeof m=="function"?m(y).toString():""+y+m:y.toString()}return y}function $n(O){O===void 0&&(O={});var y=ar(O);function h(a,c){if(c.type!=="style")return a;for(var m in a)a[m]=Ie(m,a[m],y);return a}function e(a,c){return Ie(c,a,y)}return{onProcessStyle:h,onChangeValue:e}}var Me="",vt="",sr="",ur="",Wn=Ae&&"ontouchstart"in document.documentElement;if(Ae){var mt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Gn=document.createElement("p"),gt=Gn.style,zn="Transform";for(var bt in mt)if(bt+zn in gt){Me=bt,vt=mt[bt];break}Me==="Webkit"&&"msHyphens"in gt&&(Me="ms",vt=mt.ms,ur="edge"),Me==="Webkit"&&"-apple-trailing-word"in gt&&(sr="apple")}var Q={js:Me,css:vt,vendor:sr,browser:ur,isTouch:Wn};function Kn(O){return O[1]==="-"||Q.js==="ms"?O:"@"+Q.css+"keyframes"+O.substr(10)}var qn={noPrefill:["appearance"],supportedProperty:function(y){return y!=="appearance"?!1:Q.js==="ms"?"-webkit-"+y:Q.css+y}},Jn={noPrefill:["color-adjust"],supportedProperty:function(y){return y!=="color-adjust"?!1:Q.js==="Webkit"?Q.css+"print-"+y:y}},Xn=/[-\s]+(.)?/g;function Yn(O,y){return y?y.toUpperCase():""}function _t(O){return O.replace(Xn,Yn)}function ye(O){return _t("-"+O)}var Qn={noPrefill:["mask"],supportedProperty:function(y,h){if(!/^mask/.test(y))return!1;if(Q.js==="Webkit"){var e="mask-image";if(_t(e)in h)return y;if(Q.js+ye(e)in h)return Q.css+y}return y}},Zn={noPrefill:["text-orientation"],supportedProperty:function(y){return y!=="text-orientation"?!1:Q.vendor==="apple"&&!Q.isTouch?Q.css+y:y}},eo={noPrefill:["transform"],supportedProperty:function(y,h,e){return y!=="transform"?!1:e.transform?y:Q.css+y}},to={noPrefill:["transition"],supportedProperty:function(y,h,e){return y!=="transition"?!1:e.transition?y:Q.css+y}},ro={noPrefill:["writing-mode"],supportedProperty:function(y){return y!=="writing-mode"?!1:Q.js==="Webkit"||Q.js==="ms"&&Q.browser!=="edge"?Q.css+y:y}},no={noPrefill:["user-select"],supportedProperty:function(y){return y!=="user-select"?!1:Q.js==="Moz"||Q.js==="ms"||Q.vendor==="apple"?Q.css+y:y}},oo={supportedProperty:function(y,h){if(!/^break-/.test(y))return!1;if(Q.js==="Webkit"){var e="WebkitColumn"+ye(y);return e in h?Q.css+"column-"+y:!1}if(Q.js==="Moz"){var a="page"+ye(y);return a in h?"page-"+y:!1}return!1}},io={supportedProperty:function(y,h){if(!/^(border|margin|padding)-inline/.test(y))return!1;if(Q.js==="Moz")return y;var e=y.replace("-inline","");return Q.js+ye(e)in h?Q.css+e:!1}},ao={supportedProperty:function(y,h){return _t(y)in h?y:!1}},so={supportedProperty:function(y,h){var e=ye(y);return y[0]==="-"||y[0]==="-"&&y[1]==="-"?y:Q.js+e in h?Q.css+y:Q.js!=="Webkit"&&"Webkit"+e in h?"-webkit-"+y:!1}},uo={supportedProperty:function(y){return y.substring(0,11)!=="scroll-snap"?!1:Q.js==="ms"?""+Q.css+y:y}},fo={supportedProperty:function(y){return y!=="overscroll-behavior"?!1:Q.js==="ms"?Q.css+"scroll-chaining":y}},co={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},lo={supportedProperty:function(y,h){var e=co[y];return e&&Q.js+ye(e)in h?Q.css+e:!1}},fr={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},po=Object.keys(fr),ho=function(y){return Q.css+y},yo={supportedProperty:function(y,h,e){var a=e.multiple;if(po.indexOf(y)>-1){var c=fr[y];if(!Array.isArray(c))return Q.js+ye(c)in h?Q.css+c:!1;if(!a)return!1;for(var m=0;m<c.length;m++)if(!(Q.js+ye(c[0])in h))return!1;return c.map(ho)}return!1}},cr=[qn,Jn,Qn,Zn,eo,to,ro,no,oo,io,ao,so,uo,fo,lo,yo],lr=cr.filter(function(O){return O.supportedProperty}).map(function(O){return O.supportedProperty}),vo=cr.filter(function(O){return O.noPrefill}).reduce(function(O,y){return O.push.apply(O,Nr(y.noPrefill)),O},[]),Ne,be={};if(Ae){Ne=document.createElement("p");var St=window.getComputedStyle(document.documentElement,"");for(var wt in St)isNaN(wt)||(be[St[wt]]=St[wt]);vo.forEach(function(O){return delete be[O]})}function Ot(O,y){if(y===void 0&&(y={}),!Ne)return O;if(be[O]!=null)return be[O];(O==="transition"||O==="transform")&&(y[O]=O in Ne.style);for(var h=0;h<lr.length&&(be[O]=lr[h](O,Ne.style,y),!be[O]);h++);try{Ne.style[O]=""}catch(e){return!1}return be[O]}var Oe={},mo={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},go=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g,ve;function bo(O,y,h){if(y==="var")return"var";if(y==="all")return"all";if(h==="all")return", all";var e=y?Ot(y):", "+Ot(h);return e||y||h}Ae&&(ve=document.createElement("p"));function dr(O,y){var h=y;if(!ve||O==="content")return y;if(typeof h!="string"||!isNaN(parseInt(h,10)))return h;var e=O+h;if(Oe[e]!=null)return Oe[e];try{ve.style[O]=h}catch(a){return Oe[e]=!1,!1}if(mo[O])h=h.replace(go,bo);else if(ve.style[O]===""&&(h=Q.css+h,h==="-ms-flex"&&(ve.style[O]="-ms-flexbox"),ve.style[O]=h,ve.style[O]===""))return Oe[e]=!1,!1;return ve.style[O]="",Oe[e]=h,Oe[e]}function _o(){function O(a){if(a.type==="keyframes"){var c=a;c.at=Kn(c.at)}}function y(a){for(var c in a){var m=a[c];if(c==="fallbacks"&&Array.isArray(m)){a[c]=m.map(y);continue}var t=!1,_=Ot(c);_&&_!==c&&(t=!0);var g=!1,R=dr(_,ge(m));R&&R!==m&&(g=!0),(t||g)&&(t&&delete a[c],a[_||c]=R||m)}return a}function h(a,c){return c.type!=="style"?a:y(a)}function e(a,c){return dr(c,ge(a))||a}return{onProcessRule:O,onProcessStyle:h,onChangeValue:e}}function So(){var O=function(h,e){return h.length===e.length?h>e?1:-1:h.length-e.length};return{onProcessStyle:function(h,e){if(e.type!=="style")return h;for(var a={},c=Object.keys(h).sort(O),m=0;m<c.length;m++)a[c[m]]=h[c[m]];return a}}}function wo(){return{plugins:[En(),In(),Fn(),Un(),$n(),typeof window=="undefined"?null:_o(),So()]}}function pr(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},y=O.baseClasses,h=O.newClasses;if(O.Component,!h)return y;var e=re({},y);return Object.keys(h).forEach(function(a){h[a]&&(e[a]="".concat(y[a]," ").concat(h[a]))}),e}var Oo={set:function(y,h,e,a){var c=y.get(h);c||(c=new Map,y.set(h,c)),c.set(e,a)},get:function(y,h,e){var a=y.get(h);return a?a.get(e):void 0},delete:function(y,h,e){var a=y.get(h);a.delete(e)}},Pe=Oo,Po=fe.createContext(null),ko=Po;function hr(){var O=fe.useContext(ko);return O}var jo=tr(wo()),Eo=Lr(),Ro=new Map,Ao={disableGeneration:!1,generateClassName:Eo,jss:jo,sheetsCache:null,sheetsManager:Ro,sheetsRegistry:null},Co=fe.createContext(Ao),yr=-1e9;function To(){return yr+=1,yr}var xo={},Io=xo;function Mo(O){var y=typeof O=="function";return{create:function(e,a){var c;try{c=y?O(e):O}catch(_){throw _}if(!a||!e.overrides||!e.overrides[a])return c;var m=e.overrides[a],t=re({},c);return Object.keys(m).forEach(function(_){t[_]=Pr(t[_],m[_])}),t},options:{}}}function No(O,y,h){var e=O.state,a=O.stylesOptions;if(a.disableGeneration)return y||{};e.cacheClasses||(e.cacheClasses={value:null,lastProp:null,lastJSS:{}});var c=!1;return e.classes!==e.cacheClasses.lastJSS&&(e.cacheClasses.lastJSS=e.classes,c=!0),y!==e.cacheClasses.lastProp&&(e.cacheClasses.lastProp=y,c=!0),c&&(e.cacheClasses.value=pr({baseClasses:e.cacheClasses.lastJSS,newClasses:y,Component:h})),e.cacheClasses.value}function Fo(O,y){var h=O.state,e=O.theme,a=O.stylesOptions,c=O.stylesCreator,m=O.name;if(!a.disableGeneration){var t=Pe.get(a.sheetsManager,c,e);t||(t={refs:0,staticSheet:null,dynamicStyles:null},Pe.set(a.sheetsManager,c,e,t));var _=re({},c.options,a,{theme:e,flip:typeof a.flip=="boolean"?a.flip:e.direction==="rtl"});_.generateId=_.serverGenerateClassName||_.generateClassName;var g=a.sheetsRegistry;if(t.refs===0){var R;a.sheetsCache&&(R=Pe.get(a.sheetsCache,c,e));var k=c.create(e,m);R||(R=a.jss.createStyleSheet(k,re({link:!1},_)),R.attach(),a.sheetsCache&&Pe.set(a.sheetsCache,c,e,R)),g&&g.add(R),t.staticSheet=R,t.dynamicStyles=er(k)}if(t.dynamicStyles){var S=a.jss.createStyleSheet(t.dynamicStyles,re({link:!0},_));S.update(y),S.attach(),h.dynamicSheet=S,h.classes=pr({baseClasses:t.staticSheet.classes,newClasses:S.classes}),g&&g.add(S)}else h.classes=t.staticSheet.classes;t.refs+=1}}function Do(O,y){var h=O.state;h.dynamicSheet&&h.dynamicSheet.update(y)}function Bo(O){var y=O.state,h=O.theme,e=O.stylesOptions,a=O.stylesCreator;if(!e.disableGeneration){var c=Pe.get(e.sheetsManager,a,h);c.refs-=1;var m=e.sheetsRegistry;c.refs===0&&(Pe.delete(e.sheetsManager,a,h),e.jss.removeStyleSheet(c.staticSheet),m&&m.remove(c.staticSheet)),y.dynamicSheet&&(e.jss.removeStyleSheet(y.dynamicSheet),m&&m.remove(y.dynamicSheet))}}function Lo(O,y){var h=fe.useRef([]),e,a=fe.useMemo(function(){return{}},y);h.current!==a&&(h.current=a,e=O()),fe.useEffect(function(){return function(){e&&e()}},[a])}function Uo(O){var y=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},h=y.name,e=y.classNamePrefix,a=y.Component,c=y.defaultTheme,m=c===void 0?Io:c,t=et(y,["name","classNamePrefix","Component","defaultTheme"]),_=Mo(O),g=h||e||"makeStyles";_.options={index:To(),name:h,meta:g,classNamePrefix:g};var R=function(){var S=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},C=hr()||m,b=re({},fe.useContext(Co),t),j=fe.useRef(),E=fe.useRef();Lo(function(){var M={name:h,state:{},stylesCreator:_,stylesOptions:b,theme:C};return Fo(M,S),E.current=!1,j.current=M,function(){Bo(M)}},[C,_]),fe.useEffect(function(){E.current&&Do(j.current,S),E.current=!0});var N=No(j.current,S.classes,a);return N};return R}function vr(O){var y,h,e="";if(typeof O=="string"||typeof O=="number")e+=O;else if(typeof O=="object")if(Array.isArray(O))for(y=0;y<O.length;y++)O[y]&&(h=vr(O[y]))&&(e&&(e+=" "),e+=h);else for(y in O)O[y]&&(e&&(e+=" "),e+=y);return e}function Xo(){for(var O=0,y,h,e="";O<arguments.length;)(y=arguments[O++])&&(h=vr(y))&&(e&&(e+=" "),e+=h);return e}var Ho=function(y){var h=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return function(e){var a=h.defaultTheme,c=h.withTheme,m=c===void 0?!1:c,t=h.name,_=et(h,["defaultTheme","withTheme","name"]),g=t,R=Uo(y,re({defaultTheme:a,Component:e,name:t||e.displayName,classNamePrefix:g},_)),k=fe.forwardRef(function(C,b){C.classes;var j=C.innerRef,E=et(C,["classes","innerRef"]),N=R(re({},e.defaultProps,C)),M,x=E;return(typeof t=="string"||m)&&(M=hr()||a,t&&(x=Ur({theme:M,name:t,props:E})),m&&!x.theme&&(x.theme=M)),fe.createElement(e,re({ref:j||b,classes:N},x))});return kr(k,e),k}},Vo=Ho,$o=jr(),Wo=$o;function Yo(O,y){return Vo(O,re({defaultTheme:Wo},y))}const de={showAlert:(O,y)=>({type:"SHOW_NOTIFICATION",alertType:O,message:y}),hideAlert:()=>({type:"HIDE_NOTIFICATION",alertType:"none",message:""})};let We;const Fe={alertSuccess:O=>y=>{y(de.showAlert("success",O))},alertWarning:O=>y=>{y(de.showAlert("warning",O))},alertError:O=>y=>{y(de.showAlert("error",O))},alertCancel:()=>O=>{O(de.hideAlert())},clearTimer:()=>{We&&(clearTimeout(We),We=0)},restartTimer:O=>{Fe.clearTimer(),We=setTimeout(()=>O(de.hideAlert()),Re.publicRuntimeConfig?.alert?.timeout||1e4)},dispatchAlertSuccess:(O,y)=>(Fe.restartTimer(O),O(de.showAlert("success",y))),dispatchAlertWarning:(O,y)=>(Fe.restartTimer(O),O(de.showAlert("warning",y))),dispatchAlertError:(O,y)=>(Fe.restartTimer(O),O(de.showAlert("error",y))),dispatchAlertCancel:O=>(Fe.clearTimer(),O(de.hideAlert()))};var mr={exports:{}};/*!
 * Socket.IO v4.2.0
 * (c) 2014-2021 Guillermo Rauch
 * Released under the MIT License.
 */(function(O,y){(function(e,a){O.exports=a()})(self,function(){return function(h){var e={};function a(c){if(e[c])return e[c].exports;var m=e[c]={i:c,l:!1,exports:{}};return h[c].call(m.exports,m,m.exports,a),m.l=!0,m.exports}return a.m=h,a.c=e,a.d=function(c,m,t){a.o(c,m)||Object.defineProperty(c,m,{enumerable:!0,get:t})},a.r=function(c){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},a.t=function(c,m){if(m&1&&(c=a(c)),m&8||m&4&&typeof c=="object"&&c&&c.__esModule)return c;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:c}),m&2&&typeof c!="string")for(var _ in c)a.d(t,_,function(g){return c[g]}.bind(null,_));return t},a.n=function(c){var m=c&&c.__esModule?function(){return c.default}:function(){return c};return a.d(m,"a",m),m},a.o=function(c,m){return Object.prototype.hasOwnProperty.call(c,m)},a.p="",a(a.s="./build/index.js")}({"./build/index.js":function(h,e,a){function c(b){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(E){return typeof E}:c=function(E){return E&&typeof Symbol=="function"&&E.constructor===Symbol&&E!==Symbol.prototype?"symbol":typeof E},c(b)}Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;var m=a("./build/url.js"),t=a("./build/manager.js"),_=a("./node_modules/debug/src/browser.js")("socket.io-client");h.exports=e=R;var g=e.managers={};function R(b,j){c(b)==="object"&&(j=b,b=void 0),j=j||{};var E=(0,m.url)(b,j.path||"/socket.io"),N=E.source,M=E.id,x=E.path,I=g[M]&&x in g[M].nsps,A=j.forceNew||j["force new connection"]||j.multiplex===!1||I,f;return A?(_("ignoring socket cache for %s",N),f=new t.Manager(N,j)):(g[M]||(_("new io instance for %s",N),g[M]=new t.Manager(N,j)),f=g[M]),E.query&&!j.query&&(j.query=E.queryKey),f.socket(E.path,j)}e.io=R;var k=a("./node_modules/socket.io-parser/dist/index.js");Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return k.protocol}}),e.connect=R;var S=a("./build/manager.js");Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return S.Manager}});var C=a("./build/socket.js");Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return C.Socket}}),e.default=R},"./build/manager.js":function(h,e,a){function c(d){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(u){return typeof u}:c=function(u){return u&&typeof Symbol=="function"&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},c(d)}function m(d,w){if(!(d instanceof w))throw new TypeError("Cannot call a class as a function")}function t(d,w){for(var u=0;u<w.length;u++){var r=w[u];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(d,r.key,r)}}function _(d,w,u){return w&&t(d.prototype,w),u&&t(d,u),d}function g(d,w){if(typeof w!="function"&&w!==null)throw new TypeError("Super expression must either be null or a function");d.prototype=Object.create(w&&w.prototype,{constructor:{value:d,writable:!0,configurable:!0}}),w&&R(d,w)}function R(d,w){return R=Object.setPrototypeOf||function(r,o){return r.__proto__=o,r},R(d,w)}function k(d){var w=b();return function(){var r=j(d),o;if(w){var i=j(this).constructor;o=Reflect.construct(r,arguments,i)}else o=r.apply(this,arguments);return S(this,o)}}function S(d,w){if(w&&(c(w)==="object"||typeof w=="function"))return w;if(w!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return C(d)}function C(d){if(d===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return d}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(d){return!1}}function j(d){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(u){return u.__proto__||Object.getPrototypeOf(u)},j(d)}Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;var E=a("./node_modules/engine.io-client/lib/index.js"),N=a("./node_modules/engine.io-client/lib/util.js"),M=a("./build/socket.js"),x=a("./node_modules/socket.io-parser/dist/index.js"),I=a("./build/on.js"),A=a("./node_modules/backo2/index.js"),f=a("./build/typed-events.js"),l=a("./node_modules/debug/src/browser.js")("socket.io-client:manager"),s=function(d){g(u,d);var w=k(u);function u(r,o){var i;m(this,u);var n;i=w.call(this),i.nsps={},i.subs=[],r&&c(r)==="object"&&(o=r,r=void 0),o=o||{},o.path=o.path||"/socket.io",i.opts=o,(0,N.installTimerFunctions)(C(i),o),i.reconnection(o.reconnection!==!1),i.reconnectionAttempts(o.reconnectionAttempts||1/0),i.reconnectionDelay(o.reconnectionDelay||1e3),i.reconnectionDelayMax(o.reconnectionDelayMax||5e3),i.randomizationFactor((n=o.randomizationFactor)!==null&&n!==void 0?n:.5),i.backoff=new A({min:i.reconnectionDelay(),max:i.reconnectionDelayMax(),jitter:i.randomizationFactor()}),i.timeout(o.timeout==null?2e4:o.timeout),i._readyState="closed",i.uri=r;var p=o.parser||x;return i.encoder=new p.Encoder,i.decoder=new p.Decoder,i._autoConnect=o.autoConnect!==!1,i._autoConnect&&i.open(),i}return _(u,[{key:"reconnection",value:function(o){return arguments.length?(this._reconnection=!!o,this):this._reconnection}},{key:"reconnectionAttempts",value:function(o){return o===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=o,this)}},{key:"reconnectionDelay",value:function(o){var i;return o===void 0?this._reconnectionDelay:(this._reconnectionDelay=o,(i=this.backoff)===null||i===void 0||i.setMin(o),this)}},{key:"randomizationFactor",value:function(o){var i;return o===void 0?this._randomizationFactor:(this._randomizationFactor=o,(i=this.backoff)===null||i===void 0||i.setJitter(o),this)}},{key:"reconnectionDelayMax",value:function(o){var i;return o===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=o,(i=this.backoff)===null||i===void 0||i.setMax(o),this)}},{key:"timeout",value:function(o){return arguments.length?(this._timeout=o,this):this._timeout}},{key:"maybeReconnectOnOpen",value:function(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}},{key:"open",value:function(o){var i=this;if(l("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=E(this.uri,this.opts);var n=this.engine,p=this;this._readyState="opening",this.skipReconnect=!1;var v=(0,I.on)(n,"open",function(){p.onopen(),o&&o()}),P=(0,I.on)(n,"error",function(F){l("error"),p.cleanup(),p._readyState="closed",i.emitReserved("error",F),o?o(F):p.maybeReconnectOnOpen()});if(this._timeout!==!1){var T=this._timeout;l("connect attempt will timeout after %d",T),T===0&&v();var D=this.setTimeoutFn(function(){l("connect attempt timed out after %d",T),v(),n.close(),n.emit("error",new Error("timeout"))},T);this.opts.autoUnref&&D.unref(),this.subs.push(function(){clearTimeout(D)})}return this.subs.push(v),this.subs.push(P),this}},{key:"connect",value:function(o){return this.open(o)}},{key:"onopen",value:function(){l("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");var o=this.engine;this.subs.push((0,I.on)(o,"ping",this.onping.bind(this)),(0,I.on)(o,"data",this.ondata.bind(this)),(0,I.on)(o,"error",this.onerror.bind(this)),(0,I.on)(o,"close",this.onclose.bind(this)),(0,I.on)(this.decoder,"decoded",this.ondecoded.bind(this)))}},{key:"onping",value:function(){this.emitReserved("ping")}},{key:"ondata",value:function(o){this.decoder.add(o)}},{key:"ondecoded",value:function(o){this.emitReserved("packet",o)}},{key:"onerror",value:function(o){l("error",o),this.emitReserved("error",o)}},{key:"socket",value:function(o,i){var n=this.nsps[o];return n||(n=new M.Socket(this,o,i),this.nsps[o]=n),n}},{key:"_destroy",value:function(o){for(var i=Object.keys(this.nsps),n=0,p=i;n<p.length;n++){var v=p[n],P=this.nsps[v];if(P.active){l("socket %s is still active, skipping close",v);return}}this._close()}},{key:"_packet",value:function(o){l("writing packet %j",o);for(var i=this.encoder.encode(o),n=0;n<i.length;n++)this.engine.write(i[n],o.options)}},{key:"cleanup",value:function(){l("cleanup"),this.subs.forEach(function(o){return o()}),this.subs.length=0,this.decoder.destroy()}},{key:"_close",value:function(){l("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this._readyState==="opening"&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}},{key:"disconnect",value:function(){return this._close()}},{key:"onclose",value:function(o){l("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",o),this._reconnection&&!this.skipReconnect&&this.reconnect()}},{key:"reconnect",value:function(){var o=this;if(this._reconnecting||this.skipReconnect)return this;var i=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{var n=this.backoff.duration();l("will wait %dms before reconnect attempt",n),this._reconnecting=!0;var p=this.setTimeoutFn(function(){i.skipReconnect||(l("attempting reconnect"),o.emitReserved("reconnect_attempt",i.backoff.attempts),!i.skipReconnect&&i.open(function(v){v?(l("reconnect attempt error"),i._reconnecting=!1,i.reconnect(),o.emitReserved("reconnect_error",v)):(l("reconnect success"),i.onreconnect())}))},n);this.opts.autoUnref&&p.unref(),this.subs.push(function(){clearTimeout(p)})}}},{key:"onreconnect",value:function(){var o=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",o)}}]),u}(f.StrictEventEmitter);e.Manager=s},"./build/on.js":function(h,e,a){Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0;function c(m,t,_){return m.on(t,_),function(){m.off(t,_)}}e.on=c},"./build/socket.js":function(h,e,a){function c(u){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(o){return typeof o}:c=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},c(u)}function m(u,r){var o=typeof Symbol!="undefined"&&u[Symbol.iterator]||u["@@iterator"];if(!o){if(Array.isArray(u)||(o=t(u))||r&&u&&typeof u.length=="number"){o&&(u=o);var i=0,n=function(){};return{s:n,n:function(){return i>=u.length?{done:!0}:{done:!1,value:u[i++]}},e:function(D){throw D},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var p=!0,v=!1,P;return{s:function(){o=o.call(u)},n:function(){var D=o.next();return p=D.done,D},e:function(D){v=!0,P=D},f:function(){try{!p&&o.return!=null&&o.return()}finally{if(v)throw P}}}}function t(u,r){if(!!u){if(typeof u=="string")return _(u,r);var o=Object.prototype.toString.call(u).slice(8,-1);if(o==="Object"&&u.constructor&&(o=u.constructor.name),o==="Map"||o==="Set")return Array.from(u);if(o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return _(u,r)}}function _(u,r){(r==null||r>u.length)&&(r=u.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=u[o];return i}function g(u,r){if(!(u instanceof r))throw new TypeError("Cannot call a class as a function")}function R(u,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(u,i.key,i)}}function k(u,r,o){return r&&R(u.prototype,r),o&&R(u,o),u}function S(u,r,o){return typeof Reflect!="undefined"&&Reflect.get?S=Reflect.get:S=function(n,p,v){var P=C(n,p);if(!!P){var T=Object.getOwnPropertyDescriptor(P,p);return T.get?T.get.call(v):T.value}},S(u,r,o||u)}function C(u,r){for(;!Object.prototype.hasOwnProperty.call(u,r)&&(u=I(u),u!==null););return u}function b(u,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function");u.prototype=Object.create(r&&r.prototype,{constructor:{value:u,writable:!0,configurable:!0}}),r&&j(u,r)}function j(u,r){return j=Object.setPrototypeOf||function(i,n){return i.__proto__=n,i},j(u,r)}function E(u){var r=x();return function(){var i=I(u),n;if(r){var p=I(this).constructor;n=Reflect.construct(i,arguments,p)}else n=i.apply(this,arguments);return N(this,n)}}function N(u,r){if(r&&(c(r)==="object"||typeof r=="function"))return r;if(r!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return M(u)}function M(u){if(u===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return u}function x(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(u){return!1}}function I(u){return I=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},I(u)}Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;var A=a("./node_modules/socket.io-parser/dist/index.js"),f=a("./build/on.js"),l=a("./build/typed-events.js"),s=a("./node_modules/debug/src/browser.js")("socket.io-client:socket"),d=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1}),w=function(u){b(o,u);var r=E(o);function o(i,n,p){var v;return g(this,o),v=r.call(this),v.connected=!1,v.disconnected=!0,v.receiveBuffer=[],v.sendBuffer=[],v.ids=0,v.acks={},v.flags={},v.io=i,v.nsp=n,p&&p.auth&&(v.auth=p.auth),v.io._autoConnect&&v.open(),v}return k(o,[{key:"subEvents",value:function(){if(!this.subs){var n=this.io;this.subs=[(0,f.on)(n,"open",this.onopen.bind(this)),(0,f.on)(n,"packet",this.onpacket.bind(this)),(0,f.on)(n,"error",this.onerror.bind(this)),(0,f.on)(n,"close",this.onclose.bind(this))]}}},{key:"active",get:function(){return!!this.subs}},{key:"connect",value:function(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState==="open"&&this.onopen(),this)}},{key:"open",value:function(){return this.connect()}},{key:"send",value:function(){for(var n=arguments.length,p=new Array(n),v=0;v<n;v++)p[v]=arguments[v];return p.unshift("message"),this.emit.apply(this,p),this}},{key:"emit",value:function(n){if(d.hasOwnProperty(n))throw new Error('"'+n+'" is a reserved event name');for(var p=arguments.length,v=new Array(p>1?p-1:0),P=1;P<p;P++)v[P-1]=arguments[P];v.unshift(n);var T={type:A.PacketType.EVENT,data:v};T.options={},T.options.compress=this.flags.compress!==!1,typeof v[v.length-1]=="function"&&(s("emitting packet with ack id %d",this.ids),this.acks[this.ids]=v.pop(),T.id=this.ids++);var D=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable,F=this.flags.volatile&&(!D||!this.connected);return F?s("discard packet as the transport is not currently writable"):this.connected?this.packet(T):this.sendBuffer.push(T),this.flags={},this}},{key:"packet",value:function(n){n.nsp=this.nsp,this.io._packet(n)}},{key:"onopen",value:function(){var n=this;s("transport is open - connecting"),typeof this.auth=="function"?this.auth(function(p){n.packet({type:A.PacketType.CONNECT,data:p})}):this.packet({type:A.PacketType.CONNECT,data:this.auth})}},{key:"onerror",value:function(n){this.connected||this.emitReserved("connect_error",n)}},{key:"onclose",value:function(n){s("close (%s)",n),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",n)}},{key:"onpacket",value:function(n){var p=n.nsp===this.nsp;if(!!p)switch(n.type){case A.PacketType.CONNECT:if(n.data&&n.data.sid){var v=n.data.sid;this.onconnect(v)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case A.PacketType.EVENT:this.onevent(n);break;case A.PacketType.BINARY_EVENT:this.onevent(n);break;case A.PacketType.ACK:this.onack(n);break;case A.PacketType.BINARY_ACK:this.onack(n);break;case A.PacketType.DISCONNECT:this.ondisconnect();break;case A.PacketType.CONNECT_ERROR:var P=new Error(n.data.message);P.data=n.data.data,this.emitReserved("connect_error",P);break}}},{key:"onevent",value:function(n){var p=n.data||[];s("emitting event %j",p),n.id!=null&&(s("attaching ack callback to event"),p.push(this.ack(n.id))),this.connected?this.emitEvent(p):this.receiveBuffer.push(Object.freeze(p))}},{key:"emitEvent",value:function(n){if(this._anyListeners&&this._anyListeners.length){var p=this._anyListeners.slice(),v=m(p),P;try{for(v.s();!(P=v.n()).done;){var T=P.value;T.apply(this,n)}}catch(D){v.e(D)}finally{v.f()}}S(I(o.prototype),"emit",this).apply(this,n)}},{key:"ack",value:function(n){var p=this,v=!1;return function(){if(!v){v=!0;for(var P=arguments.length,T=new Array(P),D=0;D<P;D++)T[D]=arguments[D];s("sending ack %j",T),p.packet({type:A.PacketType.ACK,id:n,data:T})}}}},{key:"onack",value:function(n){var p=this.acks[n.id];typeof p=="function"?(s("calling ack %s with %j",n.id,n.data),p.apply(this,n.data),delete this.acks[n.id]):s("bad ack %s",n.id)}},{key:"onconnect",value:function(n){s("socket connected with id %s",n),this.id=n,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}},{key:"emitBuffered",value:function(){var n=this;this.receiveBuffer.forEach(function(p){return n.emitEvent(p)}),this.receiveBuffer=[],this.sendBuffer.forEach(function(p){return n.packet(p)}),this.sendBuffer=[]}},{key:"ondisconnect",value:function(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}},{key:"destroy",value:function(){this.subs&&(this.subs.forEach(function(n){return n()}),this.subs=void 0),this.io._destroy(this)}},{key:"disconnect",value:function(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:A.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},{key:"close",value:function(){return this.disconnect()}},{key:"compress",value:function(n){return this.flags.compress=n,this}},{key:"volatile",get:function(){return this.flags.volatile=!0,this}},{key:"onAny",value:function(n){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(n),this}},{key:"prependAny",value:function(n){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(n),this}},{key:"offAny",value:function(n){if(!this._anyListeners)return this;if(n){for(var p=this._anyListeners,v=0;v<p.length;v++)if(n===p[v])return p.splice(v,1),this}else this._anyListeners=[];return this}},{key:"listenersAny",value:function(){return this._anyListeners||[]}}]),o}(l.StrictEventEmitter);e.Socket=w},"./build/typed-events.js":function(h,e,a){function c(I){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(f){return typeof f}:c=function(f){return f&&typeof Symbol=="function"&&f.constructor===Symbol&&f!==Symbol.prototype?"symbol":typeof f},c(I)}function m(I,A){if(!(I instanceof A))throw new TypeError("Cannot call a class as a function")}function t(I,A){for(var f=0;f<A.length;f++){var l=A[f];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(I,l.key,l)}}function _(I,A,f){return A&&t(I.prototype,A),f&&t(I,f),I}function g(I,A,f){return typeof Reflect!="undefined"&&Reflect.get?g=Reflect.get:g=function(s,d,w){var u=R(s,d);if(!!u){var r=Object.getOwnPropertyDescriptor(u,d);return r.get?r.get.call(w):r.value}},g(I,A,f||I)}function R(I,A){for(;!Object.prototype.hasOwnProperty.call(I,A)&&(I=N(I),I!==null););return I}function k(I,A){if(typeof A!="function"&&A!==null)throw new TypeError("Super expression must either be null or a function");I.prototype=Object.create(A&&A.prototype,{constructor:{value:I,writable:!0,configurable:!0}}),A&&S(I,A)}function S(I,A){return S=Object.setPrototypeOf||function(l,s){return l.__proto__=s,l},S(I,A)}function C(I){var A=E();return function(){var l=N(I),s;if(A){var d=N(this).constructor;s=Reflect.construct(l,arguments,d)}else s=l.apply(this,arguments);return b(this,s)}}function b(I,A){if(A&&(c(A)==="object"||typeof A=="function"))return A;if(A!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return j(I)}function j(I){if(I===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return I}function E(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(I){return!1}}function N(I){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(f){return f.__proto__||Object.getPrototypeOf(f)},N(I)}Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;var M=a("./node_modules/component-emitter/index.js"),x=function(I){k(f,I);var A=C(f);function f(){return m(this,f),A.apply(this,arguments)}return _(f,[{key:"on",value:function(s,d){return g(N(f.prototype),"on",this).call(this,s,d),this}},{key:"once",value:function(s,d){return g(N(f.prototype),"once",this).call(this,s,d),this}},{key:"emit",value:function(s){for(var d,w=arguments.length,u=new Array(w>1?w-1:0),r=1;r<w;r++)u[r-1]=arguments[r];return(d=g(N(f.prototype),"emit",this)).call.apply(d,[this,s].concat(u)),this}},{key:"emitReserved",value:function(s){for(var d,w=arguments.length,u=new Array(w>1?w-1:0),r=1;r<w;r++)u[r-1]=arguments[r];return(d=g(N(f.prototype),"emit",this)).call.apply(d,[this,s].concat(u)),this}},{key:"listeners",value:function(s){return g(N(f.prototype),"listeners",this).call(this,s)}}]),f}(M);e.StrictEventEmitter=x},"./build/url.js":function(h,e,a){Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;var c=a("./node_modules/parseuri/index.js"),m=a("./node_modules/debug/src/browser.js")("socket.io-client:url");function t(_){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",R=arguments.length>2?arguments[2]:void 0,k=_;R=R||typeof location!="undefined"&&location,_==null&&(_=R.protocol+"//"+R.host),typeof _=="string"&&(_.charAt(0)==="/"&&(_.charAt(1)==="/"?_=R.protocol+_:_=R.host+_),/^(https?|wss?):\/\//.test(_)||(m("protocol-less url %s",_),typeof R!="undefined"?_=R.protocol+"//"+_:_="https://"+_),m("parse %s",_),k=c(_)),k.port||(/^(http|ws)$/.test(k.protocol)?k.port="80":/^(http|ws)s$/.test(k.protocol)&&(k.port="443")),k.path=k.path||"/";var S=k.host.indexOf(":")!==-1,C=S?"["+k.host+"]":k.host;return k.id=k.protocol+"://"+C+":"+k.port+g,k.href=k.protocol+"://"+C+(R&&R.port===k.port?"":":"+k.port),k}e.url=t},"./node_modules/backo2/index.js":function(h,e){h.exports=a;function a(c){c=c||{},this.ms=c.min||100,this.max=c.max||1e4,this.factor=c.factor||2,this.jitter=c.jitter>0&&c.jitter<=1?c.jitter:0,this.attempts=0}a.prototype.duration=function(){var c=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var m=Math.random(),t=Math.floor(m*this.jitter*c);c=(Math.floor(m*10)&1)==0?c-t:c+t}return Math.min(c,this.max)|0},a.prototype.reset=function(){this.attempts=0},a.prototype.setMin=function(c){this.ms=c},a.prototype.setMax=function(c){this.max=c},a.prototype.setJitter=function(c){this.jitter=c}},"./node_modules/component-emitter/index.js":function(h,e,a){h.exports=c;function c(t){if(t)return m(t)}function m(t){for(var _ in c.prototype)t[_]=c.prototype[_];return t}c.prototype.on=c.prototype.addEventListener=function(t,_){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(_),this},c.prototype.once=function(t,_){function g(){this.off(t,g),_.apply(this,arguments)}return g.fn=_,this.on(t,g),this},c.prototype.off=c.prototype.removeListener=c.prototype.removeAllListeners=c.prototype.removeEventListener=function(t,_){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var g=this._callbacks["$"+t];if(!g)return this;if(arguments.length==1)return delete this._callbacks["$"+t],this;for(var R,k=0;k<g.length;k++)if(R=g[k],R===_||R.fn===_){g.splice(k,1);break}return g.length===0&&delete this._callbacks["$"+t],this},c.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var _=new Array(arguments.length-1),g=this._callbacks["$"+t],R=1;R<arguments.length;R++)_[R-1]=arguments[R];if(g){g=g.slice(0);for(var R=0,k=g.length;R<k;++R)g[R].apply(this,_)}return this},c.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},c.prototype.hasListeners=function(t){return!!this.listeners(t).length}},"./node_modules/debug/src/browser.js":function(h,e,a){e.formatArgs=m,e.save=t,e.load=_,e.useColors=c,e.storage=g(),e.destroy=function(){var k=!1;return function(){k||(k=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function c(){return typeof window!="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document!="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function m(k){if(k[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+k[0]+(this.useColors?"%c ":" ")+"+"+h.exports.humanize(this.diff),!!this.useColors){var S="color: "+this.color;k.splice(1,0,S,"color: inherit");var C=0,b=0;k[0].replace(/%[a-zA-Z%]/g,function(j){j!=="%%"&&(C++,j==="%c"&&(b=C))}),k.splice(b,0,S)}}e.log=console.debug||console.log||function(){};function t(k){try{k?e.storage.setItem("debug",k):e.storage.removeItem("debug")}catch(S){}}function _(){var k;try{k=e.storage.getItem("debug")}catch(S){}return!k&&typeof process!="undefined"&&"env"in process&&(k={npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/gallery",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/gallery",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.DEBUG),k}function g(){try{return localStorage}catch(k){}}h.exports=a("./node_modules/debug/src/common.js")(e);var R=h.exports.formatters;R.j=function(k){try{return JSON.stringify(k)}catch(S){return"[UnexpectedJSONParseError]: "+S.message}}},"./node_modules/debug/src/common.js":function(h,e,a){function c(S){return g(S)||_(S)||t(S)||m()}function m(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function t(S,C){if(!!S){if(typeof S=="string")return R(S,C);var b=Object.prototype.toString.call(S).slice(8,-1);if(b==="Object"&&S.constructor&&(b=S.constructor.name),b==="Map"||b==="Set")return Array.from(S);if(b==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b))return R(S,C)}}function _(S){if(typeof Symbol!="undefined"&&S[Symbol.iterator]!=null||S["@@iterator"]!=null)return Array.from(S)}function g(S){if(Array.isArray(S))return R(S)}function R(S,C){(C==null||C>S.length)&&(C=S.length);for(var b=0,j=new Array(C);b<C;b++)j[b]=S[b];return j}function k(S){b.debug=b,b.default=b,b.coerce=I,b.disable=N,b.enable=E,b.enabled=M,b.humanize=a("./node_modules/ms/index.js"),b.destroy=A,Object.keys(S).forEach(function(f){b[f]=S[f]}),b.names=[],b.skips=[],b.formatters={};function C(f){for(var l=0,s=0;s<f.length;s++)l=(l<<5)-l+f.charCodeAt(s),l|=0;return b.colors[Math.abs(l)%b.colors.length]}b.selectColor=C;function b(f){var l,s=null,d,w;function u(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];if(!!u.enabled){var n=u,p=Number(new Date),v=p-(l||p);n.diff=v,n.prev=l,n.curr=p,l=p,o[0]=b.coerce(o[0]),typeof o[0]!="string"&&o.unshift("%O");var P=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(D,F){if(D==="%%")return"%";P++;var H=b.formatters[F];if(typeof H=="function"){var L=o[P];D=H.call(n,L),o.splice(P,1),P--}return D}),b.formatArgs.call(n,o);var T=n.log||b.log;T.apply(n,o)}}return u.namespace=f,u.useColors=b.useColors(),u.color=b.selectColor(f),u.extend=j,u.destroy=b.destroy,Object.defineProperty(u,"enabled",{enumerable:!0,configurable:!1,get:function(){return s!==null?s:(d!==b.namespaces&&(d=b.namespaces,w=b.enabled(f)),w)},set:function(o){s=o}}),typeof b.init=="function"&&b.init(u),u}function j(f,l){var s=b(this.namespace+(typeof l=="undefined"?":":l)+f);return s.log=this.log,s}function E(f){b.save(f),b.namespaces=f,b.names=[],b.skips=[];var l,s=(typeof f=="string"?f:"").split(/[\s,]+/),d=s.length;for(l=0;l<d;l++)!s[l]||(f=s[l].replace(/\*/g,".*?"),f[0]==="-"?b.skips.push(new RegExp("^"+f.substr(1)+"$")):b.names.push(new RegExp("^"+f+"$")))}function N(){var f=[].concat(c(b.names.map(x)),c(b.skips.map(x).map(function(l){return"-"+l}))).join(",");return b.enable(""),f}function M(f){if(f[f.length-1]==="*")return!0;var l,s;for(l=0,s=b.skips.length;l<s;l++)if(b.skips[l].test(f))return!1;for(l=0,s=b.names.length;l<s;l++)if(b.names[l].test(f))return!0;return!1}function x(f){return f.toString().substring(2,f.toString().length-2).replace(/\.\*\?$/,"*")}function I(f){return f instanceof Error?f.stack||f.message:f}function A(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return b.enable(b.load()),b}h.exports=k},"./node_modules/engine.io-client/lib/globalThis.browser.js":function(h,e){h.exports=function(){return typeof self!="undefined"?self:typeof window!="undefined"?window:Function("return this")()}()},"./node_modules/engine.io-client/lib/index.js":function(h,e,a){var c=a("./node_modules/engine.io-client/lib/socket.js");h.exports=function(m,t){return new c(m,t)},h.exports.Socket=c,h.exports.protocol=c.protocol,h.exports.Transport=a("./node_modules/engine.io-client/lib/transport.js"),h.exports.transports=a("./node_modules/engine.io-client/lib/transports/index.js"),h.exports.parser=a("./node_modules/engine.io-parser/lib/index.js")},"./node_modules/engine.io-client/lib/socket.js":function(h,e,a){function c(){return c=Object.assign||function(u){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(u[i]=o[i])}return u},c.apply(this,arguments)}function m(u){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?m=function(o){return typeof o}:m=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},m(u)}function t(u,r){if(!(u instanceof r))throw new TypeError("Cannot call a class as a function")}function _(u,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(u,i.key,i)}}function g(u,r,o){return r&&_(u.prototype,r),o&&_(u,o),u}function R(u,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function");u.prototype=Object.create(r&&r.prototype,{constructor:{value:u,writable:!0,configurable:!0}}),r&&k(u,r)}function k(u,r){return k=Object.setPrototypeOf||function(i,n){return i.__proto__=n,i},k(u,r)}function S(u){var r=j();return function(){var i=E(u),n;if(r){var p=E(this).constructor;n=Reflect.construct(i,arguments,p)}else n=i.apply(this,arguments);return C(this,n)}}function C(u,r){if(r&&(m(r)==="object"||typeof r=="function"))return r;if(r!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return b(u)}function b(u){if(u===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return u}function j(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(u){return!1}}function E(u){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},E(u)}var N=a("./node_modules/engine.io-client/lib/transports/index.js"),M=a("./node_modules/component-emitter/index.js"),x=a("./node_modules/debug/src/browser.js")("engine.io-client:socket"),I=a("./node_modules/engine.io-parser/lib/index.js"),A=a("./node_modules/parseuri/index.js"),f=a("./node_modules/parseqs/index.js"),l=a("./node_modules/engine.io-client/lib/util.js"),s=l.installTimerFunctions,d=function(u){R(o,u);var r=S(o);function o(i){var n,p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return t(this,o),n=r.call(this),i&&m(i)==="object"&&(p=i,i=null),i?(i=A(i),p.hostname=i.host,p.secure=i.protocol==="https"||i.protocol==="wss",p.port=i.port,i.query&&(p.query=i.query)):p.host&&(p.hostname=A(p.host).host),s(b(n),p),n.secure=p.secure!=null?p.secure:typeof location!="undefined"&&location.protocol==="https:",p.hostname&&!p.port&&(p.port=n.secure?"443":"80"),n.hostname=p.hostname||(typeof location!="undefined"?location.hostname:"localhost"),n.port=p.port||(typeof location!="undefined"&&location.port?location.port:n.secure?443:80),n.transports=p.transports||["polling","websocket"],n.readyState="",n.writeBuffer=[],n.prevBufferLen=0,n.opts=c({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},p),n.opts.path=n.opts.path.replace(/\/$/,"")+"/",typeof n.opts.query=="string"&&(n.opts.query=f.decode(n.opts.query)),n.id=null,n.upgrades=null,n.pingInterval=null,n.pingTimeout=null,n.pingTimeoutTimer=null,typeof addEventListener=="function"&&(n.opts.closeOnBeforeunload&&addEventListener("beforeunload",function(){n.transport&&(n.transport.removeAllListeners(),n.transport.close())},!1),n.hostname!=="localhost"&&(n.offlineEventListener=function(){n.onClose("transport close")},addEventListener("offline",n.offlineEventListener,!1))),n.open(),n}return g(o,[{key:"createTransport",value:function(n){x('creating transport "%s"',n);var p=w(this.opts.query);p.EIO=I.protocol,p.transport=n,this.id&&(p.sid=this.id);var v=c({},this.opts.transportOptions[n],this.opts,{query:p,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return x("options: %j",v),new N[n](v)}},{key:"open",value:function(){var n=this,p;if(this.opts.rememberUpgrade&&o.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)p="websocket";else if(this.transports.length===0){this.setTimeoutFn(function(){n.emit("error","No transports available")},0);return}else p=this.transports[0];this.readyState="opening";try{p=this.createTransport(p)}catch(v){x("error while creating transport: %s",v),this.transports.shift(),this.open();return}p.open(),this.setTransport(p)}},{key:"setTransport",value:function(n){var p=this;x("setting transport %s",n.name),this.transport&&(x("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=n,n.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",function(){p.onClose("transport close")})}},{key:"probe",value:function(n){var p=this;x('probing transport "%s"',n);var v=this.createTransport(n,{probe:1}),P=!1;o.priorWebsocketSuccess=!1;var T=function(){P||(x('probe transport "%s" opened',n),v.send([{type:"ping",data:"probe"}]),v.once("packet",function(Y){if(!P)if(Y.type==="pong"&&Y.data==="probe"){if(x('probe transport "%s" pong',n),p.upgrading=!0,p.emit("upgrading",v),!v)return;o.priorWebsocketSuccess=v.name==="websocket",x('pausing current transport "%s"',p.transport.name),p.transport.pause(function(){P||p.readyState!=="closed"&&(x("changing transport and sending upgrade packet"),J(),p.setTransport(v),v.send([{type:"upgrade"}]),p.emit("upgrade",v),v=null,p.upgrading=!1,p.flush())})}else{x('probe transport "%s" failed',n);var $=new Error("probe error");$.transport=v.name,p.emit("upgradeError",$)}}))};function D(){P||(P=!0,J(),v.close(),v=null)}var F=function(Y){var $=new Error("probe error: "+Y);$.transport=v.name,D(),x('probe transport "%s" failed because of error: %s',n,Y),p.emit("upgradeError",$)};function H(){F("transport closed")}function L(){F("socket closed")}function z(X){v&&X.name!==v.name&&(x('"%s" works - aborting "%s"',X.name,v.name),D())}var J=function(){v.removeListener("open",T),v.removeListener("error",F),v.removeListener("close",H),p.removeListener("close",L),p.removeListener("upgrading",z)};v.once("open",T),v.once("error",F),v.once("close",H),this.once("close",L),this.once("upgrading",z),v.open()}},{key:"onOpen",value:function(){if(x("socket open"),this.readyState="open",o.priorWebsocketSuccess=this.transport.name==="websocket",this.emit("open"),this.flush(),this.readyState==="open"&&this.opts.upgrade&&this.transport.pause){x("starting upgrade probes");for(var n=0,p=this.upgrades.length;n<p;n++)this.probe(this.upgrades[n])}}},{key:"onPacket",value:function(n){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")switch(x('socket receive: type "%s", data "%s"',n.type,n.data),this.emit("packet",n),this.emit("heartbeat"),n.type){case"open":this.onHandshake(JSON.parse(n.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":var p=new Error("server error");p.code=n.data,this.onError(p);break;case"message":this.emit("data",n.data),this.emit("message",n.data);break}else x('packet received with socket readyState "%s"',this.readyState)}},{key:"onHandshake",value:function(n){this.emit("handshake",n),this.id=n.sid,this.transport.query.sid=n.sid,this.upgrades=this.filterUpgrades(n.upgrades),this.pingInterval=n.pingInterval,this.pingTimeout=n.pingTimeout,this.onOpen(),this.readyState!=="closed"&&this.resetPingTimeout()}},{key:"resetPingTimeout",value:function(){var n=this;this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(function(){n.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}},{key:"onDrain",value:function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,this.writeBuffer.length===0?this.emit("drain"):this.flush()}},{key:"flush",value:function(){this.readyState!=="closed"&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(x("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}},{key:"write",value:function(n,p,v){return this.sendPacket("message",n,p,v),this}},{key:"send",value:function(n,p,v){return this.sendPacket("message",n,p,v),this}},{key:"sendPacket",value:function(n,p,v,P){if(typeof p=="function"&&(P=p,p=void 0),typeof v=="function"&&(P=v,v=null),!(this.readyState==="closing"||this.readyState==="closed")){v=v||{},v.compress=v.compress!==!1;var T={type:n,data:p,options:v};this.emit("packetCreate",T),this.writeBuffer.push(T),P&&this.once("flush",P),this.flush()}}},{key:"close",value:function(){var n=this,p=function(){n.onClose("forced close"),x("socket closing - telling transport to close"),n.transport.close()},v=function T(){n.removeListener("upgrade",T),n.removeListener("upgradeError",T),p()},P=function(){n.once("upgrade",v),n.once("upgradeError",v)};return(this.readyState==="opening"||this.readyState==="open")&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",function(){n.upgrading?P():p()}):this.upgrading?P():p()),this}},{key:"onError",value:function(n){x("socket error %j",n),o.priorWebsocketSuccess=!1,this.emit("error",n),this.onClose("transport error",n)}},{key:"onClose",value:function(n,p){(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")&&(x('socket close with reason: "%s"',n),this.clearTimeoutFn(this.pingIntervalTimer),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),typeof removeEventListener=="function"&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",n,p),this.writeBuffer=[],this.prevBufferLen=0)}},{key:"filterUpgrades",value:function(n){for(var p=[],v=0,P=n.length;v<P;v++)~this.transports.indexOf(n[v])&&p.push(n[v]);return p}}]),o}(M);d.priorWebsocketSuccess=!1,d.protocol=I.protocol;function w(u){var r={};for(var o in u)u.hasOwnProperty(o)&&(r[o]=u[o]);return r}h.exports=d},"./node_modules/engine.io-client/lib/transport.js":function(h,e,a){function c(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(s){return typeof s}:c=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},c(f)}function m(f,l){if(!(f instanceof l))throw new TypeError("Cannot call a class as a function")}function t(f,l){for(var s=0;s<l.length;s++){var d=l[s];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(f,d.key,d)}}function _(f,l,s){return l&&t(f.prototype,l),s&&t(f,s),f}function g(f,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function");f.prototype=Object.create(l&&l.prototype,{constructor:{value:f,writable:!0,configurable:!0}}),l&&R(f,l)}function R(f,l){return R=Object.setPrototypeOf||function(d,w){return d.__proto__=w,d},R(f,l)}function k(f){var l=b();return function(){var d=j(f),w;if(l){var u=j(this).constructor;w=Reflect.construct(d,arguments,u)}else w=d.apply(this,arguments);return S(this,w)}}function S(f,l){if(l&&(c(l)==="object"||typeof l=="function"))return l;if(l!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return C(f)}function C(f){if(f===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return f}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(f){return!1}}function j(f){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)},j(f)}var E=a("./node_modules/engine.io-parser/lib/index.js"),N=a("./node_modules/component-emitter/index.js"),M=a("./node_modules/engine.io-client/lib/util.js"),x=M.installTimerFunctions,I=a("./node_modules/debug/src/browser.js")("engine.io-client:transport"),A=function(f){g(s,f);var l=k(s);function s(d){var w;return m(this,s),w=l.call(this),x(C(w),d),w.opts=d,w.query=d.query,w.readyState="",w.socket=d.socket,w}return _(s,[{key:"onError",value:function(w,u){var r=new Error(w);return r.type="TransportError",r.description=u,this.emit("error",r),this}},{key:"open",value:function(){return(this.readyState==="closed"||this.readyState==="")&&(this.readyState="opening",this.doOpen()),this}},{key:"close",value:function(){return(this.readyState==="opening"||this.readyState==="open")&&(this.doClose(),this.onClose()),this}},{key:"send",value:function(w){this.readyState==="open"?this.write(w):I("transport is not open, discarding packets")}},{key:"onOpen",value:function(){this.readyState="open",this.writable=!0,this.emit("open")}},{key:"onData",value:function(w){var u=E.decodePacket(w,this.socket.binaryType);this.onPacket(u)}},{key:"onPacket",value:function(w){this.emit("packet",w)}},{key:"onClose",value:function(){this.readyState="closed",this.emit("close")}}]),s}(N);h.exports=A},"./node_modules/engine.io-client/lib/transports/index.js":function(h,e,a){var c=a("./node_modules/engine.io-client/lib/xmlhttprequest.js"),m=a("./node_modules/engine.io-client/lib/transports/polling-xhr.js"),t=a("./node_modules/engine.io-client/lib/transports/polling-jsonp.js"),_=a("./node_modules/engine.io-client/lib/transports/websocket.js");e.polling=g,e.websocket=_;function g(R){var k,S=!1,C=!1,b=R.jsonp!==!1;if(typeof location!="undefined"){var j=location.protocol==="https:",E=location.port;E||(E=j?443:80),S=R.hostname!==location.hostname||E!==R.port,C=R.secure!==j}if(R.xdomain=S,R.xscheme=C,k=new c(R),"open"in k&&!R.forceJSONP)return new m(R);if(!b)throw new Error("JSONP disabled");return new t(R)}},"./node_modules/engine.io-client/lib/transports/polling-jsonp.js":function(h,e,a){function c(s){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(w){return typeof w}:c=function(w){return w&&typeof Symbol=="function"&&w.constructor===Symbol&&w!==Symbol.prototype?"symbol":typeof w},c(s)}function m(s,d){if(!(s instanceof d))throw new TypeError("Cannot call a class as a function")}function t(s,d){for(var w=0;w<d.length;w++){var u=d[w];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(s,u.key,u)}}function _(s,d,w){return d&&t(s.prototype,d),w&&t(s,w),s}function g(s,d,w){return typeof Reflect!="undefined"&&Reflect.get?g=Reflect.get:g=function(r,o,i){var n=R(r,o);if(!!n){var p=Object.getOwnPropertyDescriptor(n,o);return p.get?p.get.call(i):p.value}},g(s,d,w||s)}function R(s,d){for(;!Object.prototype.hasOwnProperty.call(s,d)&&(s=N(s),s!==null););return s}function k(s,d){if(typeof d!="function"&&d!==null)throw new TypeError("Super expression must either be null or a function");s.prototype=Object.create(d&&d.prototype,{constructor:{value:s,writable:!0,configurable:!0}}),d&&S(s,d)}function S(s,d){return S=Object.setPrototypeOf||function(u,r){return u.__proto__=r,u},S(s,d)}function C(s){var d=E();return function(){var u=N(s),r;if(d){var o=N(this).constructor;r=Reflect.construct(u,arguments,o)}else r=u.apply(this,arguments);return b(this,r)}}function b(s,d){if(d&&(c(d)==="object"||typeof d=="function"))return d;if(d!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return j(s)}function j(s){if(s===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return s}function E(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(s){return!1}}function N(s){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(w){return w.__proto__||Object.getPrototypeOf(w)},N(s)}var M=a("./node_modules/engine.io-client/lib/transports/polling.js"),x=a("./node_modules/engine.io-client/lib/globalThis.browser.js"),I=/\n/g,A=/\\n/g,f,l=function(s){k(w,s);var d=C(w);function w(u){var r;return m(this,w),r=d.call(this,u),r.query=r.query||{},f||(f=x.___eio=x.___eio||[]),r.index=f.length,f.push(r.onData.bind(j(r))),r.query.j=r.index,r}return _(w,[{key:"supportsBinary",get:function(){return!1}},{key:"doClose",value:function(){this.script&&(this.script.onerror=function(){},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),g(N(w.prototype),"doClose",this).call(this)}},{key:"doPoll",value:function(){var r=this,o=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),o.async=!0,o.src=this.uri(),o.onerror=function(p){r.onError("jsonp poll error",p)};var i=document.getElementsByTagName("script")[0];i?i.parentNode.insertBefore(o,i):(document.head||document.body).appendChild(o),this.script=o;var n=typeof navigator!="undefined"&&/gecko/i.test(navigator.userAgent);n&&this.setTimeoutFn(function(){var p=document.createElement("iframe");document.body.appendChild(p),document.body.removeChild(p)},100)}},{key:"doWrite",value:function(r,o){var i=this,n;if(!this.form){var p=document.createElement("form"),v=document.createElement("textarea"),P=this.iframeId="eio_iframe_"+this.index;p.className="socketio",p.style.position="absolute",p.style.top="-1000px",p.style.left="-1000px",p.target=P,p.method="POST",p.setAttribute("accept-charset","utf-8"),v.name="d",p.appendChild(v),document.body.appendChild(p),this.form=p,this.area=v}this.form.action=this.uri();function T(){D(),o()}var D=function(){if(i.iframe)try{i.form.removeChild(i.iframe)}catch(L){i.onError("jsonp polling iframe removal error",L)}try{var H='<iframe src="javascript:0" name="'+i.iframeId+'">';n=document.createElement(H)}catch(L){n=document.createElement("iframe"),n.name=i.iframeId,n.src="javascript:0"}n.id=i.iframeId,i.form.appendChild(n),i.iframe=n};D(),r=r.replace(A,`\\
`),this.area.value=r.replace(I,"\\n");try{this.form.submit()}catch(F){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){i.iframe.readyState==="complete"&&T()}:this.iframe.onload=T}}]),w}(M);h.exports=l},"./node_modules/engine.io-client/lib/transports/polling-xhr.js":function(h,e,a){function c(n){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(v){return typeof v}:c=function(v){return v&&typeof Symbol=="function"&&v.constructor===Symbol&&v!==Symbol.prototype?"symbol":typeof v},c(n)}function m(){return m=Object.assign||function(n){for(var p=1;p<arguments.length;p++){var v=arguments[p];for(var P in v)Object.prototype.hasOwnProperty.call(v,P)&&(n[P]=v[P])}return n},m.apply(this,arguments)}function t(n,p){if(!(n instanceof p))throw new TypeError("Cannot call a class as a function")}function _(n,p){for(var v=0;v<p.length;v++){var P=p[v];P.enumerable=P.enumerable||!1,P.configurable=!0,"value"in P&&(P.writable=!0),Object.defineProperty(n,P.key,P)}}function g(n,p,v){return p&&_(n.prototype,p),v&&_(n,v),n}function R(n,p){if(typeof p!="function"&&p!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(p&&p.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),p&&k(n,p)}function k(n,p){return k=Object.setPrototypeOf||function(P,T){return P.__proto__=T,P},k(n,p)}function S(n){var p=j();return function(){var P=E(n),T;if(p){var D=E(this).constructor;T=Reflect.construct(P,arguments,D)}else T=P.apply(this,arguments);return C(this,T)}}function C(n,p){if(p&&(c(p)==="object"||typeof p=="function"))return p;if(p!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return b(n)}function b(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function j(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(n){return!1}}function E(n){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(v){return v.__proto__||Object.getPrototypeOf(v)},E(n)}var N=a("./node_modules/engine.io-client/lib/xmlhttprequest.js"),M=a("./node_modules/engine.io-client/lib/transports/polling.js"),x=a("./node_modules/component-emitter/index.js"),I=a("./node_modules/engine.io-client/lib/util.js"),A=I.pick,f=I.installTimerFunctions,l=a("./node_modules/engine.io-client/lib/globalThis.browser.js"),s=a("./node_modules/debug/src/browser.js")("engine.io-client:polling-xhr");function d(){}var w=function(){var n=new N({xdomain:!1});return n.responseType!=null}(),u=function(n){R(v,n);var p=S(v);function v(P){var T;if(t(this,v),T=p.call(this,P),typeof location!="undefined"){var D=location.protocol==="https:",F=location.port;F||(F=D?443:80),T.xd=typeof location!="undefined"&&P.hostname!==location.hostname||F!==P.port,T.xs=P.secure!==D}var H=P&&P.forceBase64;return T.supportsBinary=w&&!H,T}return g(v,[{key:"request",value:function(){var T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return m(T,{xd:this.xd,xs:this.xs},this.opts),new r(this.uri(),T)}},{key:"doWrite",value:function(T,D){var F=this,H=this.request({method:"POST",data:T});H.on("success",D),H.on("error",function(L){F.onError("xhr post error",L)})}},{key:"doPoll",value:function(){var T=this;s("xhr poll");var D=this.request();D.on("data",this.onData.bind(this)),D.on("error",function(F){T.onError("xhr poll error",F)}),this.pollXhr=D}}]),v}(M),r=function(n){R(v,n);var p=S(v);function v(P,T){var D;return t(this,v),D=p.call(this),f(b(D),T),D.opts=T,D.method=T.method||"GET",D.uri=P,D.async=T.async!==!1,D.data=T.data!==void 0?T.data:null,D.create(),D}return g(v,[{key:"create",value:function(){var T=this,D=A(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");D.xdomain=!!this.opts.xd,D.xscheme=!!this.opts.xs;var F=this.xhr=new N(D);try{s("xhr open %s: %s",this.method,this.uri),F.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){F.setDisableHeaderCheck&&F.setDisableHeaderCheck(!0);for(var H in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(H)&&F.setRequestHeader(H,this.opts.extraHeaders[H])}}catch(L){}if(this.method==="POST")try{F.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(L){}try{F.setRequestHeader("Accept","*/*")}catch(L){}"withCredentials"in F&&(F.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(F.timeout=this.opts.requestTimeout),this.hasXDR()?(F.onload=function(){T.onLoad()},F.onerror=function(){T.onError(F.responseText)}):F.onreadystatechange=function(){F.readyState===4&&(F.status===200||F.status===1223?T.onLoad():T.setTimeoutFn(function(){T.onError(typeof F.status=="number"?F.status:0)},0))},s("xhr data %s",this.data),F.send(this.data)}catch(L){this.setTimeoutFn(function(){T.onError(L)},0);return}typeof document!="undefined"&&(this.index=v.requestsCount++,v.requests[this.index]=this)}},{key:"onSuccess",value:function(){this.emit("success"),this.cleanup()}},{key:"onData",value:function(T){this.emit("data",T),this.onSuccess()}},{key:"onError",value:function(T){this.emit("error",T),this.cleanup(!0)}},{key:"cleanup",value:function(T){if(!(typeof this.xhr=="undefined"||this.xhr===null)){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=d:this.xhr.onreadystatechange=d,T)try{this.xhr.abort()}catch(D){}typeof document!="undefined"&&delete v.requests[this.index],this.xhr=null}}},{key:"onLoad",value:function(){var T=this.xhr.responseText;T!==null&&this.onData(T)}},{key:"hasXDR",value:function(){return typeof XDomainRequest!="undefined"&&!this.xs&&this.enablesXDR}},{key:"abort",value:function(){this.cleanup()}}]),v}(x);if(r.requestsCount=0,r.requests={},typeof document!="undefined"){if(typeof attachEvent=="function")attachEvent("onunload",i);else if(typeof addEventListener=="function"){var o="onpagehide"in l?"pagehide":"unload";addEventListener(o,i,!1)}}function i(){for(var n in r.requests)r.requests.hasOwnProperty(n)&&r.requests[n].abort()}h.exports=u,h.exports.Request=r},"./node_modules/engine.io-client/lib/transports/polling.js":function(h,e,a){function c(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(s){return typeof s}:c=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},c(f)}function m(f,l){if(!(f instanceof l))throw new TypeError("Cannot call a class as a function")}function t(f,l){for(var s=0;s<l.length;s++){var d=l[s];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(f,d.key,d)}}function _(f,l,s){return l&&t(f.prototype,l),s&&t(f,s),f}function g(f,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function");f.prototype=Object.create(l&&l.prototype,{constructor:{value:f,writable:!0,configurable:!0}}),l&&R(f,l)}function R(f,l){return R=Object.setPrototypeOf||function(d,w){return d.__proto__=w,d},R(f,l)}function k(f){var l=b();return function(){var d=j(f),w;if(l){var u=j(this).constructor;w=Reflect.construct(d,arguments,u)}else w=d.apply(this,arguments);return S(this,w)}}function S(f,l){if(l&&(c(l)==="object"||typeof l=="function"))return l;if(l!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return C(f)}function C(f){if(f===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return f}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(f){return!1}}function j(f){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)},j(f)}var E=a("./node_modules/engine.io-client/lib/transport.js"),N=a("./node_modules/parseqs/index.js"),M=a("./node_modules/engine.io-parser/lib/index.js"),x=a("./node_modules/yeast/index.js"),I=a("./node_modules/debug/src/browser.js")("engine.io-client:polling"),A=function(f){g(s,f);var l=k(s);function s(){return m(this,s),l.apply(this,arguments)}return _(s,[{key:"name",get:function(){return"polling"}},{key:"doOpen",value:function(){this.poll()}},{key:"pause",value:function(w){var u=this;this.readyState="pausing";var r=function(){I("paused"),u.readyState="paused",w()};if(this.polling||!this.writable){var o=0;this.polling&&(I("we are currently polling - waiting to pause"),o++,this.once("pollComplete",function(){I("pre-pause polling complete"),--o||r()})),this.writable||(I("we are currently writing - waiting to pause"),o++,this.once("drain",function(){I("pre-pause writing complete"),--o||r()}))}else r()}},{key:"poll",value:function(){I("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}},{key:"onData",value:function(w){var u=this;I("polling got data %s",w);var r=function(i){if(u.readyState==="opening"&&i.type==="open"&&u.onOpen(),i.type==="close")return u.onClose(),!1;u.onPacket(i)};M.decodePayload(w,this.socket.binaryType).forEach(r),this.readyState!=="closed"&&(this.polling=!1,this.emit("pollComplete"),this.readyState==="open"?this.poll():I('ignoring poll - transport state "%s"',this.readyState))}},{key:"doClose",value:function(){var w=this,u=function(){I("writing close packet"),w.write([{type:"close"}])};this.readyState==="open"?(I("transport open - closing"),u()):(I("transport not open - deferring close"),this.once("open",u))}},{key:"write",value:function(w){var u=this;this.writable=!1,M.encodePayload(w,function(r){u.doWrite(r,function(){u.writable=!0,u.emit("drain")})})}},{key:"uri",value:function(){var w=this.query||{},u=this.opts.secure?"https":"http",r="";this.opts.timestampRequests!==!1&&(w[this.opts.timestampParam]=x()),!this.supportsBinary&&!w.sid&&(w.b64=1),w=N.encode(w),this.opts.port&&(u==="https"&&Number(this.opts.port)!==443||u==="http"&&Number(this.opts.port)!==80)&&(r=":"+this.opts.port),w.length&&(w="?"+w);var o=this.opts.hostname.indexOf(":")!==-1;return u+"://"+(o?"["+this.opts.hostname+"]":this.opts.hostname)+r+this.opts.path+w}}]),s}(E);h.exports=A},"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js":function(h,e,a){var c=a("./node_modules/engine.io-client/lib/globalThis.browser.js"),m=function(){var t=typeof Promise=="function"&&typeof Promise.resolve=="function";return t?function(_){return Promise.resolve().then(_)}:function(_,g){return g(_,0)}}();h.exports={WebSocket:c.WebSocket||c.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:m}},"./node_modules/engine.io-client/lib/transports/websocket.js":function(h,e,a){function c(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(p){return typeof p}:c=function(p){return p&&typeof Symbol=="function"&&p.constructor===Symbol&&p!==Symbol.prototype?"symbol":typeof p},c(i)}function m(i,n){if(!(i instanceof n))throw new TypeError("Cannot call a class as a function")}function t(i,n){for(var p=0;p<n.length;p++){var v=n[p];v.enumerable=v.enumerable||!1,v.configurable=!0,"value"in v&&(v.writable=!0),Object.defineProperty(i,v.key,v)}}function _(i,n,p){return n&&t(i.prototype,n),p&&t(i,p),i}function g(i,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function");i.prototype=Object.create(n&&n.prototype,{constructor:{value:i,writable:!0,configurable:!0}}),n&&R(i,n)}function R(i,n){return R=Object.setPrototypeOf||function(v,P){return v.__proto__=P,v},R(i,n)}function k(i){var n=b();return function(){var v=j(i),P;if(n){var T=j(this).constructor;P=Reflect.construct(v,arguments,T)}else P=v.apply(this,arguments);return S(this,P)}}function S(i,n){if(n&&(c(n)==="object"||typeof n=="function"))return n;if(n!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return C(i)}function C(i){if(i===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(i){return!1}}function j(i){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(p){return p.__proto__||Object.getPrototypeOf(p)},j(i)}var E=a("./node_modules/engine.io-client/lib/transport.js"),N=a("./node_modules/engine.io-parser/lib/index.js"),M=a("./node_modules/parseqs/index.js"),x=a("./node_modules/yeast/index.js"),I=a("./node_modules/engine.io-client/lib/util.js"),A=I.pick,f=a("./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js"),l=f.WebSocket,s=f.usingBrowserWebSocket,d=f.defaultBinaryType,w=f.nextTick,u=a("./node_modules/debug/src/browser.js")("engine.io-client:websocket"),r=typeof navigator!="undefined"&&typeof navigator.product=="string"&&navigator.product.toLowerCase()==="reactnative",o=function(i){g(p,i);var n=k(p);function p(v){var P;return m(this,p),P=n.call(this,v),P.supportsBinary=!v.forceBase64,P}return _(p,[{key:"name",get:function(){return"websocket"}},{key:"doOpen",value:function(){if(!!this.check()){var P=this.uri(),T=this.opts.protocols,D=r?{}:A(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(D.headers=this.opts.extraHeaders);try{this.ws=s&&!r?T?new l(P,T):new l(P):new l(P,T,D)}catch(F){return this.emit("error",F)}this.ws.binaryType=this.socket.binaryType||d,this.addEventListeners()}}},{key:"addEventListeners",value:function(){var P=this;this.ws.onopen=function(){P.opts.autoUnref&&P.ws._socket.unref(),P.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=function(T){return P.onData(T.data)},this.ws.onerror=function(T){return P.onError("websocket error",T)}}},{key:"write",value:function(P){var T=this;this.writable=!1;for(var D=function(L){var z=P[L],J=L===P.length-1;N.encodePacket(z,T.supportsBinary,function(X){var Y={};if(!s&&(z.options&&(Y.compress=z.options.compress),T.opts.perMessageDeflate)){var $=typeof X=="string"?Buffer.byteLength(X):X.length;$<T.opts.perMessageDeflate.threshold&&(Y.compress=!1)}try{s?T.ws.send(X):T.ws.send(X,Y)}catch(G){u("websocket closed before onclose event")}J&&w(function(){T.writable=!0,T.emit("drain")},T.setTimeoutFn)})},F=0;F<P.length;F++)D(F)}},{key:"onClose",value:function(){E.prototype.onClose.call(this)}},{key:"doClose",value:function(){typeof this.ws!="undefined"&&(this.ws.close(),this.ws=null)}},{key:"uri",value:function(){var P=this.query||{},T=this.opts.secure?"wss":"ws",D="";this.opts.port&&(T==="wss"&&Number(this.opts.port)!==443||T==="ws"&&Number(this.opts.port)!==80)&&(D=":"+this.opts.port),this.opts.timestampRequests&&(P[this.opts.timestampParam]=x()),this.supportsBinary||(P.b64=1),P=M.encode(P),P.length&&(P="?"+P);var F=this.opts.hostname.indexOf(":")!==-1;return T+"://"+(F?"["+this.opts.hostname+"]":this.opts.hostname)+D+this.opts.path+P}},{key:"check",value:function(){return!!l&&!("__initialize"in l&&this.name===p.prototype.name)}}]),p}(E);h.exports=o},"./node_modules/engine.io-client/lib/util.js":function(h,e,a){var c=a("./node_modules/engine.io-client/lib/globalThis.browser.js");h.exports.pick=function(_){for(var g=arguments.length,R=new Array(g>1?g-1:0),k=1;k<g;k++)R[k-1]=arguments[k];return R.reduce(function(S,C){return _.hasOwnProperty(C)&&(S[C]=_[C]),S},{})};var m=setTimeout,t=clearTimeout;h.exports.installTimerFunctions=function(_,g){g.useNativeTimers?(_.setTimeoutFn=m.bind(c),_.clearTimeoutFn=t.bind(c)):(_.setTimeoutFn=setTimeout.bind(c),_.clearTimeoutFn=clearTimeout.bind(c))}},"./node_modules/engine.io-client/lib/xmlhttprequest.js":function(h,e,a){var c=a("./node_modules/has-cors/index.js"),m=a("./node_modules/engine.io-client/lib/globalThis.browser.js");h.exports=function(t){var _=t.xdomain,g=t.xscheme,R=t.enablesXDR;try{if(typeof XMLHttpRequest!="undefined"&&(!_||c))return new XMLHttpRequest}catch(k){}try{if(typeof XDomainRequest!="undefined"&&!g&&R)return new XDomainRequest}catch(k){}if(!_)try{return new m[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch(k){}}},"./node_modules/engine.io-parser/lib/commons.js":function(h,e){var a=Object.create(null);a.open="0",a.close="1",a.ping="2",a.pong="3",a.message="4",a.upgrade="5",a.noop="6";var c=Object.create(null);Object.keys(a).forEach(function(t){c[a[t]]=t});var m={type:"error",data:"parser error"};h.exports={PACKET_TYPES:a,PACKET_TYPES_REVERSE:c,ERROR_PACKET:m}},"./node_modules/engine.io-parser/lib/decodePacket.browser.js":function(h,e,a){var c=a("./node_modules/engine.io-parser/lib/commons.js"),m=c.PACKET_TYPES_REVERSE,t=c.ERROR_PACKET,_=typeof ArrayBuffer=="function",g;_&&(g=a("./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"));var R=function(b,j){if(typeof b!="string")return{type:"message",data:S(b,j)};var E=b.charAt(0);if(E==="b")return{type:"message",data:k(b.substring(1),j)};var N=m[E];return N?b.length>1?{type:m[E],data:b.substring(1)}:{type:m[E]}:t},k=function(b,j){if(g){var E=g.decode(b);return S(E,j)}else return{base64:!0,data:b}},S=function(b,j){switch(j){case"blob":return b instanceof ArrayBuffer?new Blob([b]):b;case"arraybuffer":default:return b}};h.exports=R},"./node_modules/engine.io-parser/lib/encodePacket.browser.js":function(h,e,a){var c=a("./node_modules/engine.io-parser/lib/commons.js"),m=c.PACKET_TYPES,t=typeof Blob=="function"||typeof Blob!="undefined"&&Object.prototype.toString.call(Blob)==="[object BlobConstructor]",_=typeof ArrayBuffer=="function",g=function(C){return typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(C):C&&C.buffer instanceof ArrayBuffer},R=function(C,b,j){var E=C.type,N=C.data;return t&&N instanceof Blob?b?j(N):k(N,j):_&&(N instanceof ArrayBuffer||g(N))?b?j(N instanceof ArrayBuffer?N:N.buffer):k(new Blob([N]),j):j(m[E]+(N||""))},k=function(C,b){var j=new FileReader;return j.onload=function(){var E=j.result.split(",")[1];b("b"+E)},j.readAsDataURL(C)};h.exports=R},"./node_modules/engine.io-parser/lib/index.js":function(h,e,a){var c=a("./node_modules/engine.io-parser/lib/encodePacket.browser.js"),m=a("./node_modules/engine.io-parser/lib/decodePacket.browser.js"),t=String.fromCharCode(30),_=function(k,S){var C=k.length,b=new Array(C),j=0;k.forEach(function(E,N){c(E,!1,function(M){b[N]=M,++j===C&&S(b.join(t))})})},g=function(k,S){for(var C=k.split(t),b=[],j=0;j<C.length;j++){var E=m(C[j],S);if(b.push(E),E.type==="error")break}return b};h.exports={protocol:4,encodePacket:c,encodePayload:_,decodePacket:m,decodePayload:g}},"./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":function(h,e){(function(a){e.encode=function(c){var m=new Uint8Array(c),t,_=m.length,g="";for(t=0;t<_;t+=3)g+=a[m[t]>>2],g+=a[(m[t]&3)<<4|m[t+1]>>4],g+=a[(m[t+1]&15)<<2|m[t+2]>>6],g+=a[m[t+2]&63];return _%3==2?g=g.substring(0,g.length-1)+"=":_%3==1&&(g=g.substring(0,g.length-2)+"=="),g},e.decode=function(c){var m=c.length*.75,t=c.length,_,g=0,R,k,S,C;c[c.length-1]==="="&&(m--,c[c.length-2]==="="&&m--);var b=new ArrayBuffer(m),j=new Uint8Array(b);for(_=0;_<t;_+=4)R=a.indexOf(c[_]),k=a.indexOf(c[_+1]),S=a.indexOf(c[_+2]),C=a.indexOf(c[_+3]),j[g++]=R<<2|k>>4,j[g++]=(k&15)<<4|S>>2,j[g++]=(S&3)<<6|C&63;return b}})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},"./node_modules/has-cors/index.js":function(h,e){try{h.exports=typeof XMLHttpRequest!="undefined"&&"withCredentials"in new XMLHttpRequest}catch(a){h.exports=!1}},"./node_modules/ms/index.js":function(h,e){function a(j){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?a=function(N){return typeof N}:a=function(N){return N&&typeof Symbol=="function"&&N.constructor===Symbol&&N!==Symbol.prototype?"symbol":typeof N},a(j)}var c=1e3,m=c*60,t=m*60,_=t*24,g=_*7,R=_*365.25;h.exports=function(j,E){E=E||{};var N=a(j);if(N==="string"&&j.length>0)return k(j);if(N==="number"&&isFinite(j))return E.long?C(j):S(j);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(j))};function k(j){if(j=String(j),!(j.length>100)){var E=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(j);if(!!E){var N=parseFloat(E[1]),M=(E[2]||"ms").toLowerCase();switch(M){case"years":case"year":case"yrs":case"yr":case"y":return N*R;case"weeks":case"week":case"w":return N*g;case"days":case"day":case"d":return N*_;case"hours":case"hour":case"hrs":case"hr":case"h":return N*t;case"minutes":case"minute":case"mins":case"min":case"m":return N*m;case"seconds":case"second":case"secs":case"sec":case"s":return N*c;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return N;default:return}}}}function S(j){var E=Math.abs(j);return E>=_?Math.round(j/_)+"d":E>=t?Math.round(j/t)+"h":E>=m?Math.round(j/m)+"m":E>=c?Math.round(j/c)+"s":j+"ms"}function C(j){var E=Math.abs(j);return E>=_?b(j,E,_,"day"):E>=t?b(j,E,t,"hour"):E>=m?b(j,E,m,"minute"):E>=c?b(j,E,c,"second"):j+" ms"}function b(j,E,N,M){var x=E>=N*1.5;return Math.round(j/N)+" "+M+(x?"s":"")}},"./node_modules/parseqs/index.js":function(h,e){e.encode=function(a){var c="";for(var m in a)a.hasOwnProperty(m)&&(c.length&&(c+="&"),c+=encodeURIComponent(m)+"="+encodeURIComponent(a[m]));return c},e.decode=function(a){for(var c={},m=a.split("&"),t=0,_=m.length;t<_;t++){var g=m[t].split("=");c[decodeURIComponent(g[0])]=decodeURIComponent(g[1])}return c}},"./node_modules/parseuri/index.js":function(h,e){var a=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,c=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];h.exports=function(g){var R=g,k=g.indexOf("["),S=g.indexOf("]");k!=-1&&S!=-1&&(g=g.substring(0,k)+g.substring(k,S).replace(/:/g,";")+g.substring(S,g.length));for(var C=a.exec(g||""),b={},j=14;j--;)b[c[j]]=C[j]||"";return k!=-1&&S!=-1&&(b.source=R,b.host=b.host.substring(1,b.host.length-1).replace(/;/g,":"),b.authority=b.authority.replace("[","").replace("]","").replace(/;/g,":"),b.ipv6uri=!0),b.pathNames=m(b,b.path),b.queryKey=t(b,b.query),b};function m(_,g){var R=/\/{2,9}/g,k=g.replace(R,"/").split("/");return(g.substr(0,1)=="/"||g.length===0)&&k.splice(0,1),g.substr(g.length-1,1)=="/"&&k.splice(k.length-1,1),k}function t(_,g){var R={};return g.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(k,S,C){S&&(R[S]=C)}),R}},"./node_modules/socket.io-parser/dist/binary.js":function(h,e,a){function c(k){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(C){return typeof C}:c=function(C){return C&&typeof Symbol=="function"&&C.constructor===Symbol&&C!==Symbol.prototype?"symbol":typeof C},c(k)}Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;var m=a("./node_modules/socket.io-parser/dist/is-binary.js");function t(k){var S=[],C=k.data,b=k;return b.data=_(C,S),b.attachments=S.length,{packet:b,buffers:S}}e.deconstructPacket=t;function _(k,S){if(!k)return k;if(m.isBinary(k)){var C={_placeholder:!0,num:S.length};return S.push(k),C}else if(Array.isArray(k)){for(var b=new Array(k.length),j=0;j<k.length;j++)b[j]=_(k[j],S);return b}else if(c(k)==="object"&&!(k instanceof Date)){var E={};for(var N in k)k.hasOwnProperty(N)&&(E[N]=_(k[N],S));return E}return k}function g(k,S){return k.data=R(k.data,S),k.attachments=void 0,k}e.reconstructPacket=g;function R(k,S){if(!k)return k;if(k&&k._placeholder)return S[k.num];if(Array.isArray(k))for(var C=0;C<k.length;C++)k[C]=R(k[C],S);else if(c(k)==="object")for(var b in k)k.hasOwnProperty(b)&&(k[b]=R(k[b],S));return k}},"./node_modules/socket.io-parser/dist/index.js":function(h,e,a){function c(u){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(o){return typeof o}:c=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},c(u)}function m(u,r,o){return typeof Reflect!="undefined"&&Reflect.get?m=Reflect.get:m=function(n,p,v){var P=t(n,p);if(!!P){var T=Object.getOwnPropertyDescriptor(P,p);return T.get?T.get.call(v):T.value}},m(u,r,o||u)}function t(u,r){for(;!Object.prototype.hasOwnProperty.call(u,r)&&(u=b(u),u!==null););return u}function _(u,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function");u.prototype=Object.create(r&&r.prototype,{constructor:{value:u,writable:!0,configurable:!0}}),r&&g(u,r)}function g(u,r){return g=Object.setPrototypeOf||function(i,n){return i.__proto__=n,i},g(u,r)}function R(u){var r=C();return function(){var i=b(u),n;if(r){var p=b(this).constructor;n=Reflect.construct(i,arguments,p)}else n=i.apply(this,arguments);return k(this,n)}}function k(u,r){if(r&&(c(r)==="object"||typeof r=="function"))return r;if(r!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return S(u)}function S(u){if(u===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return u}function C(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(u){return!1}}function b(u){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},b(u)}function j(u,r){if(!(u instanceof r))throw new TypeError("Cannot call a class as a function")}function E(u,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(u,i.key,i)}}function N(u,r,o){return r&&E(u.prototype,r),o&&E(u,o),u}Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;var M=a("./node_modules/component-emitter/index.js"),x=a("./node_modules/socket.io-parser/dist/binary.js"),I=a("./node_modules/socket.io-parser/dist/is-binary.js"),A=a("./node_modules/debug/src/browser.js")("socket.io-parser");e.protocol=5;var f;(function(u){u[u.CONNECT=0]="CONNECT",u[u.DISCONNECT=1]="DISCONNECT",u[u.EVENT=2]="EVENT",u[u.ACK=3]="ACK",u[u.CONNECT_ERROR=4]="CONNECT_ERROR",u[u.BINARY_EVENT=5]="BINARY_EVENT",u[u.BINARY_ACK=6]="BINARY_ACK"})(f=e.PacketType||(e.PacketType={}));var l=function(){function u(){j(this,u)}return N(u,[{key:"encode",value:function(o){return A("encoding packet %j",o),(o.type===f.EVENT||o.type===f.ACK)&&I.hasBinary(o)?(o.type=o.type===f.EVENT?f.BINARY_EVENT:f.BINARY_ACK,this.encodeAsBinary(o)):[this.encodeAsString(o)]}},{key:"encodeAsString",value:function(o){var i=""+o.type;return(o.type===f.BINARY_EVENT||o.type===f.BINARY_ACK)&&(i+=o.attachments+"-"),o.nsp&&o.nsp!=="/"&&(i+=o.nsp+","),o.id!=null&&(i+=o.id),o.data!=null&&(i+=JSON.stringify(o.data)),A("encoded %j as %s",o,i),i}},{key:"encodeAsBinary",value:function(o){var i=x.deconstructPacket(o),n=this.encodeAsString(i.packet),p=i.buffers;return p.unshift(n),p}}]),u}();e.Encoder=l;var s=function(u){_(o,u);var r=R(o);function o(){return j(this,o),r.call(this)}return N(o,[{key:"add",value:function(n){var p;if(typeof n=="string")p=this.decodeString(n),p.type===f.BINARY_EVENT||p.type===f.BINARY_ACK?(this.reconstructor=new w(p),p.attachments===0&&m(b(o.prototype),"emit",this).call(this,"decoded",p)):m(b(o.prototype),"emit",this).call(this,"decoded",p);else if(I.isBinary(n)||n.base64)if(this.reconstructor)p=this.reconstructor.takeBinaryData(n),p&&(this.reconstructor=null,m(b(o.prototype),"emit",this).call(this,"decoded",p));else throw new Error("got binary data when not reconstructing a packet");else throw new Error("Unknown type: "+n)}},{key:"decodeString",value:function(n){var p=0,v={type:Number(n.charAt(0))};if(f[v.type]===void 0)throw new Error("unknown packet type "+v.type);if(v.type===f.BINARY_EVENT||v.type===f.BINARY_ACK){for(var P=p+1;n.charAt(++p)!=="-"&&p!=n.length;);var T=n.substring(P,p);if(T!=Number(T)||n.charAt(p)!=="-")throw new Error("Illegal attachments");v.attachments=Number(T)}if(n.charAt(p+1)==="/"){for(var D=p+1;++p;){var F=n.charAt(p);if(F===","||p===n.length)break}v.nsp=n.substring(D,p)}else v.nsp="/";var H=n.charAt(p+1);if(H!==""&&Number(H)==H){for(var L=p+1;++p;){var z=n.charAt(p);if(z==null||Number(z)!=z){--p;break}if(p===n.length)break}v.id=Number(n.substring(L,p+1))}if(n.charAt(++p)){var J=d(n.substr(p));if(o.isPayloadValid(v.type,J))v.data=J;else throw new Error("invalid payload")}return A("decoded %s as %j",n,v),v}},{key:"destroy",value:function(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}],[{key:"isPayloadValid",value:function(n,p){switch(n){case f.CONNECT:return c(p)==="object";case f.DISCONNECT:return p===void 0;case f.CONNECT_ERROR:return typeof p=="string"||c(p)==="object";case f.EVENT:case f.BINARY_EVENT:return Array.isArray(p)&&p.length>0;case f.ACK:case f.BINARY_ACK:return Array.isArray(p)}}}]),o}(M);e.Decoder=s;function d(u){try{return JSON.parse(u)}catch(r){return!1}}var w=function(){function u(r){j(this,u),this.packet=r,this.buffers=[],this.reconPack=r}return N(u,[{key:"takeBinaryData",value:function(o){if(this.buffers.push(o),this.buffers.length===this.reconPack.attachments){var i=x.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),i}return null}},{key:"finishedReconstruction",value:function(){this.reconPack=null,this.buffers=[]}}]),u}()},"./node_modules/socket.io-parser/dist/is-binary.js":function(h,e,a){function c(C){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?c=function(j){return typeof j}:c=function(j){return j&&typeof Symbol=="function"&&j.constructor===Symbol&&j!==Symbol.prototype?"symbol":typeof j},c(C)}Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;var m=typeof ArrayBuffer=="function",t=function(b){return typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(b):b.buffer instanceof ArrayBuffer},_=Object.prototype.toString,g=typeof Blob=="function"||typeof Blob!="undefined"&&_.call(Blob)==="[object BlobConstructor]",R=typeof File=="function"||typeof File!="undefined"&&_.call(File)==="[object FileConstructor]";function k(C){return m&&(C instanceof ArrayBuffer||t(C))||g&&C instanceof Blob||R&&C instanceof File}e.isBinary=k;function S(C,b){if(!C||c(C)!=="object")return!1;if(Array.isArray(C)){for(var j=0,E=C.length;j<E;j++)if(S(C[j]))return!0;return!1}if(k(C))return!0;if(C.toJSON&&typeof C.toJSON=="function"&&arguments.length===1)return S(C.toJSON(),!0);for(var N in C)if(Object.prototype.hasOwnProperty.call(C,N)&&S(C[N]))return!0;return!1}e.hasBinary=S},"./node_modules/yeast/index.js":function(h,e,a){var c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),m=64,t={},_=0,g=0,R;function k(b){var j="";do j=c[b%m]+j,b=Math.floor(b/m);while(b>0);return j}function S(b){var j=0;for(g=0;g<b.length;g++)j=j*m+t[b.charAt(g)];return j}function C(){var b=k(+new Date);return b!==R?(_=0,R=b):b+"."+k(_++)}for(;g<m;g++)t[c[g]]=g;C.encode=k,C.decode=S,h.exports=C}})})})(mr);var Go=Lt(mr.exports),gr={exports:{}};(function(O,y){(function(e,a){O.exports=a()})(Tr,function(){return function(){var h={"../../node_modules/@feathersjs/hooks/lib/base.js":function(m,t,_){function g(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(i){return typeof i}:g=function(i){return i&&typeof Symbol=="function"&&i.constructor===Symbol&&i!==Symbol.prototype?"symbol":typeof i},g(r)}function R(r,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(o&&o.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),o&&k(r,o)}function k(r,o){return k=Object.setPrototypeOf||function(n,p){return n.__proto__=p,n},k(r,o)}function S(r){var o=j();return function(){var n=E(r),p;if(o){var v=E(this).constructor;p=Reflect.construct(n,arguments,v)}else p=n.apply(this,arguments);return C(this,p)}}function C(r,o){if(o&&(g(o)==="object"||typeof o=="function"))return o;if(o!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return b(r)}function b(r){if(r===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r}function j(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}function E(r){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(i){return i.__proto__||Object.getPrototypeOf(i)},E(r)}function N(r,o){for(var i=0;i<o.length;i++){var n=o[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}function M(r,o,i){return o&&N(r.prototype,o),i&&N(r,i),r}function x(r,o){if(!(r instanceof o))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.setMiddleware=t.getMiddleware=t.setManager=t.getManager=t.convertOptions=t.HookManager=t.BaseHookContext=t.HOOKS=void 0;var I=_("../../node_modules/@feathersjs/hooks/lib/utils.js");t.HOOKS=Symbol("@feathersjs/hooks");var A=function r(){var o=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};x(this,r),Object.defineProperty(this,"self",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,o)};t.BaseHookContext=A;var f=function(){function r(){x(this,r),Object.defineProperty(this,"_parent",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_params",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_middleware",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_props",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_defaults",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}return M(r,[{key:"parent",value:function(i){return this._parent=i,this}},{key:"middleware",value:function(i){return this._middleware=(i==null?void 0:i.length)?i:null,this}},{key:"getMiddleware",value:function(){var i,n=(i=this._parent)===null||i===void 0?void 0:i.getMiddleware();return n&&this._middleware?n.concat(this._middleware):n||this._middleware}},{key:"collectMiddleware",value:function(i,n){var p=w(i),v=this.getMiddleware();return p&&v?p.concat(v):p||v||[]}},{key:"props",value:function(i){return this._props||(this._props={}),I.copyProperties(this._props,i),this}},{key:"getProps",value:function(){var i,n=(i=this._parent)===null||i===void 0?void 0:i.getProps();return n&&this._props?I.copyProperties({},n,this._props):n||this._props||null}},{key:"params",value:function(){for(var i=arguments.length,n=new Array(i),p=0;p<i;p++)n[p]=arguments[p];return this._params=n,this}},{key:"getParams",value:function(){var i,n=(i=this._parent)===null||i===void 0?void 0:i.getParams();return n&&this._params?n.concat(this._params):n||this._params}},{key:"defaults",value:function(i){return this._defaults=i,this}},{key:"getDefaults",value:function(i,n,p){var v,P=typeof this._defaults=="function"?this._defaults(i,n,p):null,T=(v=this._parent)===null||v===void 0?void 0:v.getDefaults(i,n,p);return T&&P?Object.assign({},T,P):T||P}},{key:"getContextClass",value:function(){var i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:A,n=function(P){R(D,P);var T=S(D);function D(F){var H;return x(this,D),H=T.call(this,F),I.copyToSelf(b(H)),H}return D}(i),p=this.getParams(),v=this.getProps();return p&&p.forEach(function(P,T){if((v==null?void 0:v[P])!==void 0)throw new Error("Hooks can not have a property and param named '".concat(P,"'. Use .defaults instead."));Object.defineProperty(n.prototype,P,{enumerable:!0,get:function(){return this===null||this===void 0?void 0:this.arguments[T]},set:function(F){this.arguments[T]=F}})}),v&&I.copyProperties(n.prototype,v),n}},{key:"initializeContext",value:function(i,n,p){var v=this._parent?this._parent.initializeContext(i,n,p):p,P=this.getDefaults(i,n,v);if(i&&(v.self=i),v.arguments=n,P)for(var T=0,D=Object.keys(P);T<D.length;T++){var F=D[T];v[F]===void 0&&(v[F]=P[F])}return v}}]),r}();t.HookManager=f;function l(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;return r?Array.isArray(r)?new f().middleware(r):r:new f}t.convertOptions=l;function s(r){return r&&r[t.HOOKS]||null}t.getManager=s;function d(r,o){var i=s(r);return r[t.HOOKS]=o.parent(i),r}t.setManager=d;function w(r){var o=s(r);return o?o.getMiddleware():null}t.getMiddleware=w;function u(r,o){var i=new f().middleware(o);return d(r,i)}t.setMiddleware=u},"../../node_modules/@feathersjs/hooks/lib/compose.js":function(m,t){function _(S,C){var b=typeof Symbol!="undefined"&&S[Symbol.iterator]||S["@@iterator"];if(!b){if(Array.isArray(S)||(b=g(S))||C&&S&&typeof S.length=="number"){b&&(S=b);var j=0,E=function(){};return{s:E,n:function(){return j>=S.length?{done:!0}:{done:!1,value:S[j++]}},e:function(A){throw A},f:E}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var N=!0,M=!1,x;return{s:function(){b=b.call(S)},n:function(){var A=b.next();return N=A.done,A},e:function(A){M=!0,x=A},f:function(){try{!N&&b.return!=null&&b.return()}finally{if(M)throw x}}}}function g(S,C){if(!!S){if(typeof S=="string")return R(S,C);var b=Object.prototype.toString.call(S).slice(8,-1);if(b==="Object"&&S.constructor&&(b=S.constructor.name),b==="Map"||b==="Set")return Array.from(S);if(b==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b))return R(S,C)}}function R(S,C){(C==null||C>S.length)&&(C=S.length);for(var b=0,j=new Array(C);b<C;b++)j[b]=S[b];return j}Object.defineProperty(t,"__esModule",{value:!0}),t.compose=void 0;function k(S){if(!Array.isArray(S))throw new TypeError("Middleware stack must be an array!");var C=_(S),b;try{for(C.s();!(b=C.n()).done;){var j=b.value;if(typeof j!="function")throw new TypeError("Middleware must be composed of functions!")}}catch(E){C.e(E)}finally{C.f()}return function(E,N){var M=-1;return x.call(this,0);function x(I){if(I<=M)return Promise.reject(new Error("next() called multiple times"));M=I;var A=S[I];if(I===S.length&&(A=N),!A)return Promise.resolve();try{return Promise.resolve(A.call(this,E,x.bind(this,I+1)))}catch(f){return Promise.reject(f)}}}}t.compose=k},"../../node_modules/@feathersjs/hooks/lib/hooks.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0}),t.hookDecorator=t.objectHooks=t.functionHooks=t.getOriginal=void 0;var g=_("../../node_modules/@feathersjs/hooks/lib/compose.js"),R=_("../../node_modules/@feathersjs/hooks/lib/base.js"),k=_("../../node_modules/@feathersjs/hooks/lib/utils.js");function S(E){return typeof E.original=="function"?S(E.original):E}t.getOriginal=S;function C(E,N){if(typeof E!="function")throw new Error("Can not apply hooks to non-function");var M=R.convertOptions(N),x=function I(){for(var A=this,f=I.Context,l=I.original,s=arguments.length,d=new Array(s),w=0;w<s;w++)d[w]=arguments[w];var u=d[d.length-1]instanceof f,r=u?d.pop():new f,o=M.initializeContext(this,d,r),i=[function(p,v){return v().then(function(){return u?p:p.result})}],n=M.collectMiddleware(this,d);return n&&Array.prototype.push.apply(i,n),i.push(function(p,v){return Object.prototype.hasOwnProperty.call(o,"result")?v():Promise.resolve(l.apply(A,p.arguments)).then(function(P){return p.result=P,v()})}),g.compose(i).call(this,o)};return k.copyFnProperties(x,E),k.copyProperties(x,E),R.setManager(x,M),Object.assign(x,{original:S(E),Context:M.getContextClass(),createContext:function(){var A=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return new x.Context(A)}})}t.functionHooks=C;function b(E,N){var M=typeof E=="function"?E.prototype:E;return Array.isArray(N)?R.setMiddleware(M,N):Object.keys(N).reduce(function(x,I){var A=M[I];if(typeof A!="function")throw new Error("Can not apply hooks. '".concat(I,"' is not a function"));var f=R.convertOptions(N[I]);return x[I]=C(A,f.props({method:I})),x},M)}t.objectHooks=b;var j=function(N){var M=function(I,A,f){var l=R.convertOptions(N);if(!f)return R.setManager(I.prototype,l),I;var s=f.value;if(typeof s!="function")throw new Error("Can not apply hooks. '".concat(A,"' is not a function"));return f.value=C(s,l.props({method:A})),f};return M};t.hookDecorator=j},"../../node_modules/@feathersjs/hooks/lib/index.js":function(m,t,_){function g(A){return C(A)||S(A)||k(A)||R()}function R(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function k(A,f){if(!!A){if(typeof A=="string")return b(A,f);var l=Object.prototype.toString.call(A).slice(8,-1);if(l==="Object"&&A.constructor&&(l=A.constructor.name),l==="Map"||l==="Set")return Array.from(A);if(l==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l))return b(A,f)}}function S(A){if(typeof Symbol!="undefined"&&A[Symbol.iterator]!=null||A["@@iterator"]!=null)return Array.from(A)}function C(A){if(Array.isArray(A))return b(A)}function b(A,f){(f==null||f>A.length)&&(f=A.length);for(var l=0,s=new Array(f);l<f;l++)s[l]=A[l];return s}var j=this&&this.__createBinding||(Object.create?function(A,f,l,s){s===void 0&&(s=l),Object.defineProperty(A,s,{enumerable:!0,get:function(){return f[l]}})}:function(A,f,l,s){s===void 0&&(s=l),A[s]=f[l]}),E=this&&this.__exportStar||function(A,f){for(var l in A)l!=="default"&&!Object.prototype.hasOwnProperty.call(f,l)&&j(f,A,l)};Object.defineProperty(t,"__esModule",{value:!0}),t.hooks=t.middleware=void 0;var N=_("../../node_modules/@feathersjs/hooks/lib/base.js"),M=_("../../node_modules/@feathersjs/hooks/lib/hooks.js");E(_("../../node_modules/@feathersjs/hooks/lib/hooks.js"),t),E(_("../../node_modules/@feathersjs/hooks/lib/compose.js"),t),E(_("../../node_modules/@feathersjs/hooks/lib/base.js"),t);function x(A,f){var l=new N.HookManager().middleware(A);return f&&(f.params&&l.params.apply(l,g(f.params)),f.defaults&&l.defaults(f.defaults),f.props&&l.props(f.props)),l}t.middleware=x;function I(){for(var A=arguments.length,f=new Array(A),l=0;l<A;l++)f[l]=arguments[l];var s=f[0],d=f[1];return typeof s=="function"&&(d instanceof N.HookManager||Array.isArray(d)||f.length===1)?M.functionHooks(s,d):f.length===2?M.objectHooks(s,d):M.hookDecorator(s)}t.hooks=I},"../../node_modules/@feathersjs/hooks/lib/utils.js":function(m,t){function _(E,N){var M=typeof Symbol!="undefined"&&E[Symbol.iterator]||E["@@iterator"];if(!M){if(Array.isArray(E)||(M=g(E))||N&&E&&typeof E.length=="number"){M&&(E=M);var x=0,I=function(){};return{s:I,n:function(){return x>=E.length?{done:!0}:{done:!1,value:E[x++]}},e:function(d){throw d},f:I}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var A=!0,f=!1,l;return{s:function(){M=M.call(E)},n:function(){var d=M.next();return A=d.done,d},e:function(d){f=!0,l=d},f:function(){try{!A&&M.return!=null&&M.return()}finally{if(f)throw l}}}}function g(E,N){if(!!E){if(typeof E=="string")return R(E,N);var M=Object.prototype.toString.call(E).slice(8,-1);if(M==="Object"&&E.constructor&&(M=E.constructor.name),M==="Map"||M==="Set")return Array.from(E);if(M==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(M))return R(E,N)}}function R(E,N){(N==null||N>E.length)&&(N=E.length);for(var M=0,x=new Array(N);M<N;M++)x[M]=E[M];return x}Object.defineProperty(t,"__esModule",{value:!0}),t.copyFnProperties=t.copyProperties=t.copyToSelf=void 0;var k=Object.prototype,S=typeof k.__lookupGetter__=="function"&&typeof k.__defineGetter__=="function"&&typeof k.__defineSetter__=="function";function C(E){for(var N in E)if(!E.hasOwnProperty(N)){var M=S?E.constructor.prototype.__lookupGetter__(N):Object.getOwnPropertyDescriptor(E,N);if(S&&M){E.__defineGetter__(N,M);var x=E.constructor.prototype.__lookupSetter__(N);x&&E.__defineSetter__(N,x)}else M?Object.defineProperty(E,N,M):E[N]=E[N]}}t.copyToSelf=C;function b(E){for(var N=arguments.length,M=new Array(N>1?N-1:0),x=1;x<N;x++)M[x-1]=arguments[x];for(var I=0,A=M;I<A.length;I++){var f=A[I],l=Object.keys(f).concat(Object.getOwnPropertySymbols(f)),s=_(l),d;try{for(s.s();!(d=s.n()).done;){var w=d.value,u=Object.getOwnPropertyDescriptor(f,w);u&&!Object.prototype.hasOwnProperty.call(E,w)&&Object.defineProperty(E,w,u)}}catch(r){s.e(r)}finally{s.f()}}return E}t.copyProperties=b;function j(E,N){var M=["name","length"];try{for(var x=0,I=M;x<I.length;x++){var A=I[x],f=N[A];Object.defineProperty(E,A,{value:f})}}catch(l){}return E}t.copyFnProperties=j},"../authentication-client/lib/core.js":function(m,t,_){function g(n){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(v){return typeof v}:g=function(v){return v&&typeof Symbol=="function"&&v.constructor===Symbol&&v!==Symbol.prototype?"symbol":typeof v},g(n)}function R(n,p){for(var v=0;v<p.length;v++){var P=p[v];P.enumerable=P.enumerable||!1,P.configurable=!0,"value"in P&&(P.writable=!0),Object.defineProperty(n,P.key,P)}}function k(n,p,v){return p&&R(n.prototype,p),v&&R(n,v),n}function S(n,p){return N(n)||E(n,p)||b(n,p)||C()}function C(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function b(n,p){if(!!n){if(typeof n=="string")return j(n,p);var v=Object.prototype.toString.call(n).slice(8,-1);if(v==="Object"&&n.constructor&&(v=n.constructor.name),v==="Map"||v==="Set")return Array.from(n);if(v==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(v))return j(n,p)}}function j(n,p){(p==null||p>n.length)&&(p=n.length);for(var v=0,P=new Array(p);v<p;v++)P[v]=n[v];return P}function E(n,p){var v=n==null?null:typeof Symbol!="undefined"&&n[Symbol.iterator]||n["@@iterator"];if(v!=null){var P=[],T=!0,D=!1,F,H;try{for(v=v.call(n);!(T=(F=v.next()).done)&&(P.push(F.value),!(p&&P.length===p));T=!0);}catch(L){D=!0,H=L}finally{try{!T&&v.return!=null&&v.return()}finally{if(D)throw H}}return P}}function N(n){if(Array.isArray(n))return n}function M(n,p){if(!(n instanceof p))throw new TypeError("Cannot call a class as a function")}function x(n,p){if(typeof p!="function"&&p!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(p&&p.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),p&&I(n,p)}function I(n,p){return I=Object.setPrototypeOf||function(P,T){return P.__proto__=T,P},I(n,p)}function A(n){var p=s();return function(){var P=d(n),T;if(p){var D=d(this).constructor;T=Reflect.construct(P,arguments,D)}else T=P.apply(this,arguments);return f(this,T)}}function f(n,p){if(p&&(g(p)==="object"||typeof p=="function"))return p;if(p!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return l(n)}function l(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function s(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(n){return!1}}function d(n){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(v){return v.__proto__||Object.getPrototypeOf(v)},d(n)}Object.defineProperty(t,"__esModule",{value:!0}),t.AuthenticationClient=void 0;var w=_("../errors/lib/index.js"),u=_("../authentication-client/lib/storage.js"),r=function(n){x(v,n);var p=A(v);function v(P,T){return M(this,v),p.call(this,P,"OauthError",401,"oauth-error",T)}return v}(w.FeathersError),o=function(p,v){var P=new RegExp("(?:&?)".concat(v,"=([^&]*)")),T=p.hash?p.hash.match(P):null;if(T!==null){var D=S(T,2),F=D[1];return[F,P]}return[null,P]},i=function(){function n(p,v){M(this,n);var P=p.io,T=new u.StorageWrapper(p.get("storage")||v.storage);this.app=p,this.options=v,this.authenticated=!1,this.app.set("storage",T),P&&this.handleSocket(P)}return k(n,[{key:"service",get:function(){return this.app.service(this.options.path)}},{key:"storage",get:function(){return this.app.get("storage")}},{key:"handleSocket",value:function(v){var P=this,T=this.app.io?"connect":"open",D=this.app.io?"disconnect":"disconnection";v.on(D,function(){var F=new Promise(function(H){return v.once(T,function(L){return H(L)})}).then(function(){return P.authenticated?P.reAuthenticate(!0):null});P.app.set("authentication",F)})}},{key:"getFromLocation",value:function(v){var P=o(v,this.options.locationKey),T=S(P,2),D=T[0],F=T[1];if(D!==null)return v.hash=v.hash.replace(F,""),Promise.resolve(D);var H=o(v,this.options.locationErrorKey),L=S(H,2),z=L[0],J=L[1];return z!==null?(v.hash=v.hash.replace(J,""),Promise.reject(new r(decodeURIComponent(z)))):Promise.resolve(null)}},{key:"setAccessToken",value:function(v){return this.storage.setItem(this.options.storageKey,v)}},{key:"getAccessToken",value:function(){var v=this;return this.storage.getItem(this.options.storageKey).then(function(P){return!P&&typeof window!="undefined"&&window.location?v.getFromLocation(window.location):P||null})}},{key:"removeAccessToken",value:function(){return this.storage.removeItem(this.options.storageKey)}},{key:"reset",value:function(){return this.app.set("authentication",null),this.authenticated=!1,Promise.resolve(null)}},{key:"handleError",value:function(v,P){var T=this;if(v.code===401||v.code===403){var D=this.removeAccessToken().then(function(){return T.reset()});return P==="logout"?D:D.then(function(){return Promise.reject(v)})}return Promise.reject(v)}},{key:"reAuthenticate",value:function(){var v=this,P=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,T=arguments.length>1?arguments[1]:void 0,D=this.app.get("authentication");return!D||P===!0?this.getAccessToken().then(function(F){if(!F)throw new w.NotAuthenticated("No accessToken found in storage");return v.authenticate({strategy:T||v.options.jwtStrategy,accessToken:F})}):D}},{key:"authenticate",value:function(v,P){var T=this;if(!v)return this.reAuthenticate();var D=this.service.create(v,P).then(function(F){var H=F.accessToken;return T.authenticated=!0,T.app.emit("login",F),T.app.emit("authenticated",F),T.setAccessToken(H).then(function(){return F})}).catch(function(F){return T.handleError(F,"authenticate")});return this.app.set("authentication",D),D}},{key:"logout",value:function(){var v=this;return Promise.resolve(this.app.get("authentication")).then(function(){return v.service.remove(null).then(function(P){return v.removeAccessToken().then(function(){return v.reset()}).then(function(){return v.app.emit("logout",P),P})})}).catch(function(P){return v.handleError(P,"logout")})}}]),n}();t.AuthenticationClient=i},"../authentication-client/lib/hooks/authentication.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0}),t.authentication=void 0;var g=_("../commons/lib/index.js"),R=function(){return function(S,C){var b=S.app,j=S.params,E=S.path,N=S.method,M=S.app.authentication;return(0,g.stripSlashes)(M.options.path)===E&&N==="create"?C():Promise.resolve(b.get("authentication")).then(function(x){x&&(S.params=Object.assign({},x,j))}).then(C)}};t.authentication=R},"../authentication-client/lib/hooks/index.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0}),t.populateHeader=t.authentication=void 0;var g=_("../authentication-client/lib/hooks/authentication.js");Object.defineProperty(t,"authentication",{enumerable:!0,get:function(){return g.authentication}});var R=_("../authentication-client/lib/hooks/populate-header.js");Object.defineProperty(t,"populateHeader",{enumerable:!0,get:function(){return R.populateHeader}})},"../authentication-client/lib/hooks/populate-header.js":function(m,t){function _(R,k,S){return k in R?Object.defineProperty(R,k,{value:S,enumerable:!0,configurable:!0,writable:!0}):R[k]=S,R}Object.defineProperty(t,"__esModule",{value:!0}),t.populateHeader=void 0;var g=function(){return function(k,S){var C=k.app,b=k.params.accessToken,j=C.authentication;if(C.rest&&b){var E=j.options,N=E.scheme,M=E.header,x="".concat(N," ").concat(b);k.params.headers=Object.assign({},_({},M,x),k.params.headers)}return S()}};t.populateHeader=g},"../authentication-client/lib/index.js":function(m,t,_){var g=this&&this.__createBinding||(Object.create?function(N,M,x,I){I===void 0&&(I=x),Object.defineProperty(N,I,{enumerable:!0,get:function(){return M[x]}})}:function(N,M,x,I){I===void 0&&(I=x),N[I]=M[x]}),R=this&&this.__setModuleDefault||(Object.create?function(N,M){Object.defineProperty(N,"default",{enumerable:!0,value:M})}:function(N,M){N.default=M}),k=this&&this.__importStar||function(N){if(N&&N.__esModule)return N;var M={};if(N!=null)for(var x in N)x!=="default"&&Object.prototype.hasOwnProperty.call(N,x)&&g(M,N,x);return R(M,N),M};Object.defineProperty(t,"__esModule",{value:!0}),t.defaults=t.defaultStorage=t.hooks=t.MemoryStorage=t.AuthenticationClient=t.getDefaultStorage=void 0;var S=_("../authentication-client/lib/core.js");Object.defineProperty(t,"AuthenticationClient",{enumerable:!0,get:function(){return S.AuthenticationClient}});var C=k(_("../authentication-client/lib/hooks/index.js"));t.hooks=C;var b=_("../authentication-client/lib/storage.js");Object.defineProperty(t,"MemoryStorage",{enumerable:!0,get:function(){return b.MemoryStorage}});var j=function(){try{return new b.StorageWrapper(window.localStorage)}catch(M){}return new b.MemoryStorage};t.getDefaultStorage=j,t.defaultStorage=(0,t.getDefaultStorage)(),t.defaults={header:"Authorization",scheme:"Bearer",storageKey:"feathers-jwt",locationKey:"access_token",locationErrorKey:"error",jwtStrategy:"jwt",path:"/authentication",Authentication:S.AuthenticationClient,storage:t.defaultStorage};var E=function(){var M=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},x=Object.assign({},t.defaults,M),I=x.Authentication;return function(A){var f=new I(A,x);A.authentication=f,A.authenticate=f.authenticate.bind(f),A.reAuthenticate=f.reAuthenticate.bind(f),A.logout=f.logout.bind(f),A.hooks([C.authentication(),C.populateHeader()])}};t.default=E,m.exports=Object.assign(E,m.exports)},"../authentication-client/lib/storage.js":function(m,t){function _(C,b){if(!(C instanceof b))throw new TypeError("Cannot call a class as a function")}function g(C,b){for(var j=0;j<b.length;j++){var E=b[j];E.enumerable=E.enumerable||!1,E.configurable=!0,"value"in E&&(E.writable=!0),Object.defineProperty(C,E.key,E)}}function R(C,b,j){return b&&g(C.prototype,b),j&&g(C,j),C}Object.defineProperty(t,"__esModule",{value:!0}),t.StorageWrapper=t.MemoryStorage=void 0;var k=function(){function C(){_(this,C),this.store={}}return R(C,[{key:"getItem",value:function(j){return Promise.resolve(this.store[j])}},{key:"setItem",value:function(j,E){return Promise.resolve(this.store[j]=E)}},{key:"removeItem",value:function(j){var E=this.store[j];return delete this.store[j],Promise.resolve(E)}}]),C}();t.MemoryStorage=k;var S=function(){function C(b){_(this,C),this.storage=b}return R(C,[{key:"getItem",value:function(j){return Promise.resolve(this.storage.getItem(j))}},{key:"setItem",value:function(j,E){return Promise.resolve(this.storage.setItem(j,E))}},{key:"removeItem",value:function(j){return Promise.resolve(this.storage.removeItem(j))}}]),C}();t.StorageWrapper=S},"../commons/lib/debug.js":function(m,t){Object.defineProperty(t,"__esModule",{value:!0}),t.createDebug=t.setDebug=t.noopDebug=void 0;var _={};function g(){return function(){}}t.noopDebug=g;var R=g;function k(C){R=C,Object.keys(_).forEach(function(b){_[b]=C(b)})}t.setDebug=k;function S(C){return _[C]||(_[C]=R(C)),function(){return _[C].apply(_,arguments)}}t.createDebug=S},"../commons/lib/index.js":function(m,t,_){function g(f,l,s){return l in f?Object.defineProperty(f,l,{value:s,enumerable:!0,configurable:!0,writable:!0}):f[l]=s,f}function R(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?R=function(s){return typeof s}:R=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},R(f)}function k(f,l){return E(f)||j(f,l)||C(f,l)||S()}function S(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function C(f,l){if(!!f){if(typeof f=="string")return b(f,l);var s=Object.prototype.toString.call(f).slice(8,-1);if(s==="Object"&&f.constructor&&(s=f.constructor.name),s==="Map"||s==="Set")return Array.from(f);if(s==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s))return b(f,l)}}function b(f,l){(l==null||l>f.length)&&(l=f.length);for(var s=0,d=new Array(l);s<l;s++)d[s]=f[s];return d}function j(f,l){var s=f==null?null:typeof Symbol!="undefined"&&f[Symbol.iterator]||f["@@iterator"];if(s!=null){var d=[],w=!0,u=!1,r,o;try{for(s=s.call(f);!(w=(r=s.next()).done)&&(d.push(r.value),!(l&&d.length===l));w=!0);}catch(i){u=!0,o=i}finally{try{!w&&s.return!=null&&s.return()}finally{if(u)throw o}}return d}}function E(f){if(Array.isArray(f))return f}var N=this&&this.__createBinding||(Object.create?function(f,l,s,d){d===void 0&&(d=s),Object.defineProperty(f,d,{enumerable:!0,get:function(){return l[s]}})}:function(f,l,s,d){d===void 0&&(d=s),f[d]=l[s]}),M=this&&this.__exportStar||function(f,l){for(var s in f)s!=="default"&&!Object.prototype.hasOwnProperty.call(l,s)&&N(l,f,s)};Object.defineProperty(t,"__esModule",{value:!0}),t.createSymbol=t.isPromise=t._=t.stripSlashes=void 0;function x(f){return f.replace(/^(\/+)|(\/+)$/g,"")}t.stripSlashes=x,t._={each:function(l,s){l&&typeof l.forEach=="function"?l.forEach(s):t._.isObject(l)&&Object.keys(l).forEach(function(d){return s(l[d],d)})},some:function(l,s){return Object.keys(l).map(function(d){return[l[d],d]}).some(function(d){var w=k(d,2),u=w[0],r=w[1];return s(u,r)})},every:function(l,s){return Object.keys(l).map(function(d){return[l[d],d]}).every(function(d){var w=k(d,2),u=w[0],r=w[1];return s(u,r)})},keys:function(l){return Object.keys(l)},values:function(l){return t._.keys(l).map(function(s){return l[s]})},isMatch:function(l,s){return t._.keys(s).every(function(d){return l[d]===s[d]})},isEmpty:function(l){return t._.keys(l).length===0},isObject:function(l){return R(l)==="object"&&!Array.isArray(l)&&l!==null},isObjectOrArray:function(l){return R(l)==="object"&&l!==null},extend:function(l){for(var s=arguments.length,d=new Array(s>1?s-1:0),w=1;w<s;w++)d[w-1]=arguments[w];return Object.assign.apply(Object,[l].concat(d))},omit:function(l){for(var s=t._.extend({},l),d=arguments.length,w=new Array(d>1?d-1:0),u=1;u<d;u++)w[u-1]=arguments[u];return w.forEach(function(r){return delete s[r]}),s},pick:function(l){for(var s=arguments.length,d=new Array(s>1?s-1:0),w=1;w<s;w++)d[w-1]=arguments[w];return d.reduce(function(u,r){return l[r]!==void 0&&(u[r]=l[r]),u},{})},merge:function(l,s){return t._.isObject(l)&&t._.isObject(s)&&Object.keys(s).forEach(function(d){t._.isObject(s[d])?(l[d]||Object.assign(l,g({},d,{})),t._.merge(l[d],s[d])):Object.assign(l,g({},d,s[d]))}),l}};function I(f){return t._.isObject(f)&&typeof f.then=="function"}t.isPromise=I;function A(f){return typeof Symbol!="undefined"?Symbol(f):f}t.createSymbol=A,M(_("../commons/lib/debug.js"),t)},"../errors/lib/index.js":function(m,t){var _=["message","errors"];function g($,G){if($==null)return{};var B=R($,G),K,q;if(Object.getOwnPropertySymbols){var Z=Object.getOwnPropertySymbols($);for(q=0;q<Z.length;q++)K=Z[q],!(G.indexOf(K)>=0)&&(!Object.prototype.propertyIsEnumerable.call($,K)||(B[K]=$[K]))}return B}function R($,G){if($==null)return{};var B={},K=Object.keys($),q,Z;for(Z=0;Z<K.length;Z++)q=K[Z],!(G.indexOf(q)>=0)&&(B[q]=$[q]);return B}function k($){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?k=function(B){return typeof B}:k=function(B){return B&&typeof Symbol=="function"&&B.constructor===Symbol&&B!==Symbol.prototype?"symbol":typeof B},k($)}function S($,G){if(!($ instanceof G))throw new TypeError("Cannot call a class as a function")}function C($,G){for(var B=0;B<G.length;B++){var K=G[B];K.enumerable=K.enumerable||!1,K.configurable=!0,"value"in K&&(K.writable=!0),Object.defineProperty($,K.key,K)}}function b($,G,B){return G&&C($.prototype,G),B&&C($,B),$}function j($,G){if(typeof G!="function"&&G!==null)throw new TypeError("Super expression must either be null or a function");$.prototype=Object.create(G&&G.prototype,{constructor:{value:$,writable:!0,configurable:!0}}),G&&l($,G)}function E($){var G=A();return function(){var K=s($),q;if(G){var Z=s(this).constructor;q=Reflect.construct(K,arguments,Z)}else q=K.apply(this,arguments);return N(this,q)}}function N($,G){if(G&&(k(G)==="object"||typeof G=="function"))return G;if(G!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return M($)}function M($){if($===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return $}function x($){var G=typeof Map=="function"?new Map:void 0;return x=function(K){if(K===null||!f(K))return K;if(typeof K!="function")throw new TypeError("Super expression must either be null or a function");if(typeof G!="undefined"){if(G.has(K))return G.get(K);G.set(K,q)}function q(){return I(K,arguments,s(this).constructor)}return q.prototype=Object.create(K.prototype,{constructor:{value:q,enumerable:!1,writable:!0,configurable:!0}}),l(q,K)},x($)}function I($,G,B){return A()?I=Reflect.construct:I=function(q,Z,ce){var ue=[null];ue.push.apply(ue,Z);var le=Function.bind.apply(q,ue),se=new le;return ce&&l(se,ce.prototype),se},I.apply(null,arguments)}function A(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch($){return!1}}function f($){return Function.toString.call($).indexOf("[native code]")!==-1}function l($,G){return l=Object.setPrototypeOf||function(K,q){return K.__proto__=q,K},l($,G)}function s($){return s=Object.setPrototypeOf?Object.getPrototypeOf:function(B){return B.__proto__||Object.getPrototypeOf(B)},s($)}Object.defineProperty(t,"__esModule",{value:!0}),t.convert=t.errors=t.Unavailable=t.BadGateway=t.NotImplemented=t.GeneralError=t.TooManyRequests=t.Unprocessable=t.LengthRequired=t.Gone=t.Conflict=t.Timeout=t.NotAcceptable=t.MethodNotAllowed=t.NotFound=t.Forbidden=t.PaymentError=t.NotAuthenticated=t.BadRequest=t.FeathersError=void 0;var d=function($){j(B,$);var G=E(B);function B(K,q,Z,ce,ue){var le;S(this,B);var se=typeof K=="string"?K:"Error",_e={name:q,code:Z,className:ce,type:"FeathersError"};if(Array.isArray(ue))_e.data=ue;else if(k(K)==="object"||ue!==void 0){var ke=k(K)==="object"?K:ue,Ge=ke.message,ze=ke.errors,De=g(ke,_);se=Ge||se,_e.errors=ze,_e.data=De}return le=G.call(this,se),Object.assign(M(le),_e),le}return b(B,[{key:"toJSON",value:function(){var q={name:this.name,message:this.message,code:this.code,className:this.className};return this.data!==void 0&&(q.data=this.data),this.errors!==void 0&&(q.errors=this.errors),q}}]),B}(x(Error));t.FeathersError=d;var w=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"BadRequest",400,"bad-request",q)}return B}(d);t.BadRequest=w;var u=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"NotAuthenticated",401,"not-authenticated",q)}return B}(d);t.NotAuthenticated=u;var r=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"PaymentError",402,"payment-error",q)}return B}(d);t.PaymentError=r;var o=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Forbidden",403,"forbidden",q)}return B}(d);t.Forbidden=o;var i=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"NotFound",404,"not-found",q)}return B}(d);t.NotFound=i;var n=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"MethodNotAllowed",405,"method-not-allowed",q)}return B}(d);t.MethodNotAllowed=n;var p=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"NotAcceptable",406,"not-acceptable",q)}return B}(d);t.NotAcceptable=p;var v=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Timeout",408,"timeout",q)}return B}(d);t.Timeout=v;var P=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Conflict",409,"conflict",q)}return B}(d);t.Conflict=P;var T=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Gone",410,"gone",q)}return B}(d);t.Gone=T;var D=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"LengthRequired",411,"length-required",q)}return B}(d);t.LengthRequired=D;var F=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Unprocessable",422,"unprocessable",q)}return B}(d);t.Unprocessable=F;var H=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"TooManyRequests",429,"too-many-requests",q)}return B}(d);t.TooManyRequests=H;var L=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"GeneralError",500,"general-error",q)}return B}(d);t.GeneralError=L;var z=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"NotImplemented",501,"not-implemented",q)}return B}(d);t.NotImplemented=z;var J=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"BadGateway",502,"bad-gateway",q)}return B}(d);t.BadGateway=J;var X=function($){j(B,$);var G=E(B);function B(K,q){return S(this,B),G.call(this,K,"Unavailable",503,"unavailable",q)}return B}(d);t.Unavailable=X,t.errors={FeathersError:d,BadRequest:w,NotAuthenticated:u,PaymentError:r,Forbidden:o,NotFound:i,MethodNotAllowed:n,NotAcceptable:p,Timeout:v,Conflict:P,LengthRequired:D,Unprocessable:F,TooManyRequests:H,GeneralError:L,NotImplemented:z,BadGateway:J,Unavailable:X,400:w,401:u,402:r,403:o,404:i,405:n,406:p,408:v,409:P,410:T,411:D,422:F,429:H,500:L,501:z,502:J,503:X};function Y($){if(!$)return $;var G=t.errors[$.name],B=G?new G($.message,$.data):new Error($.message||$);return k($)==="object"&&Object.assign(B,$),B}t.convert=Y},"../feathers/lib/application.js":function(m,t,_){function g(F){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(L){return typeof L}:g=function(L){return L&&typeof Symbol=="function"&&L.constructor===Symbol&&L!==Symbol.prototype?"symbol":typeof L},g(F)}function R(F){return C(F)||S(F)||j(F)||k()}function k(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function S(F){if(typeof Symbol!="undefined"&&F[Symbol.iterator]!=null||F["@@iterator"]!=null)return Array.from(F)}function C(F){if(Array.isArray(F))return E(F)}function b(F,H){var L=typeof Symbol!="undefined"&&F[Symbol.iterator]||F["@@iterator"];if(!L){if(Array.isArray(F)||(L=j(F))||H&&F&&typeof F.length=="number"){L&&(F=L);var z=0,J=function(){};return{s:J,n:function(){return z>=F.length?{done:!0}:{done:!1,value:F[z++]}},e:function(B){throw B},f:J}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var X=!0,Y=!1,$;return{s:function(){L=L.call(F)},n:function(){var B=L.next();return X=B.done,B},e:function(B){Y=!0,$=B},f:function(){try{!X&&L.return!=null&&L.return()}finally{if(Y)throw $}}}}function j(F,H){if(!!F){if(typeof F=="string")return E(F,H);var L=Object.prototype.toString.call(F).slice(8,-1);if(L==="Object"&&F.constructor&&(L=F.constructor.name),L==="Map"||L==="Set")return Array.from(F);if(L==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(L))return E(F,H)}}function E(F,H){(H==null||H>F.length)&&(H=F.length);for(var L=0,z=new Array(H);L<H;L++)z[L]=F[L];return z}function N(F,H,L){return H in F?Object.defineProperty(F,H,{value:L,enumerable:!0,configurable:!0,writable:!0}):F[H]=L,F}function M(F,H){if(!(F instanceof H))throw new TypeError("Cannot call a class as a function")}function x(F,H){for(var L=0;L<H.length;L++){var z=H[L];z.enumerable=z.enumerable||!1,z.configurable=!0,"value"in z&&(z.writable=!0),Object.defineProperty(F,z.key,z)}}function I(F,H,L){return H&&x(F.prototype,H),L&&x(F,L),F}function A(F,H){if(typeof H!="function"&&H!==null)throw new TypeError("Super expression must either be null or a function");F.prototype=Object.create(H&&H.prototype,{constructor:{value:F,writable:!0,configurable:!0}}),H&&f(F,H)}function f(F,H){return f=Object.setPrototypeOf||function(z,J){return z.__proto__=J,z},f(F,H)}function l(F){var H=w();return function(){var z=u(F),J;if(H){var X=u(this).constructor;J=Reflect.construct(z,arguments,X)}else J=z.apply(this,arguments);return s(this,J)}}function s(F,H){if(H&&(g(H)==="object"||typeof H=="function"))return H;if(H!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return d(F)}function d(F){if(F===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return F}function w(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(F){return!1}}function u(F){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(L){return L.__proto__||Object.getPrototypeOf(L)},u(F)}var r=this&&this.__importDefault||function(F){return F&&F.__esModule?F:{default:F}};Object.defineProperty(t,"__esModule",{value:!0}),t.Feathers=void 0;var o=r(_("../feathers/lib/version.js")),i=_("../feathers/lib/dependencies.js"),n=_("../feathers/lib/events.js"),p=_("../feathers/lib/hooks/index.js"),v=_("../feathers/lib/service.js"),P=_("../feathers/lib/hooks/legacy.js"),T=(0,i.createDebug)("@feathersjs/feathers"),D=function(F){A(L,F);var H=l(L);function L(){var z;return M(this,L),z=H.call(this),z.services={},z.settings={},z.mixins=[p.hookMixin,n.eventMixin],z.version=o.default,z._isSetup=!1,z.appHooks=N({},i.HOOKS,[n.eventHook]),z.legacyHooks=(0,P.enableLegacyHooks)(d(z)),z}return I(L,[{key:"get",value:function(J){return this.settings[J]}},{key:"set",value:function(J,X){return this.settings[J]=X,this}},{key:"configure",value:function(J){return J.call(this,this),this}},{key:"defaultService",value:function(J){throw new Error("Can not find service '".concat(J,"'"))}},{key:"service",value:function(J){var X=(0,i.stripSlashes)(J)||"/",Y=this.services[X];return typeof Y=="undefined"?(this.use(X,this.defaultService(X)),this.service(X)):Y}},{key:"use",value:function(J,X,Y){var $=this;if(typeof J!="string")throw new Error("'".concat(J,"' is not a valid service path."));var G=(0,i.stripSlashes)(J)||"/",B=X,K=typeof B.service=="function"&&B.services;if(K)return Object.keys(B.services).forEach(function(se){return $.use("".concat(G,"/").concat(se),B.service(se))}),this;var q=(0,v.wrapService)(G,X,Y),Z=(0,v.getServiceOptions)(X,Y),ce=b(v.protectedMethods),ue;try{for(ce.s();!(ue=ce.n()).done;){var le=ue.value;if(Z.methods.includes(le))throw new Error("'".concat(le,"' on service '").concat(G,"' is not allowed as a custom method name"))}}catch(se){ce.e(se)}finally{ce.f()}return T("Registering new service at `".concat(G,"`")),this.mixins.forEach(function(se){return se.call($,q,G,Z)}),this._isSetup&&typeof q.setup=="function"&&(T("Setting up service for `".concat(G,"`")),q.setup(this,G)),this.services[G]=q,this}},{key:"hooks",value:function(J){var X=this,Y=J;if(Y.before||Y.after||Y.error)return this.legacyHooks(Y);if(Array.isArray(J)){var $;($=this.appHooks[i.HOOKS]).push.apply($,R(J))}else{var G=J;Object.keys(G).forEach(function(B){var K=X.appHooks[B]||[];X.appHooks[B]=K.concat(G[B])})}return this}},{key:"setup",value:function(){for(var J=this,X=Promise.resolve(),Y=function(){var K=G[$];X=X.then(function(){var q=J.service(K);if(typeof q.setup=="function")return T("Setting up service for `".concat(K,"`")),q.setup(J,K)})},$=0,G=Object.keys(this.services);$<G.length;$++)Y();return X.then(function(){return J._isSetup=!0,J})}}]),L}(i.EventEmitter);t.Feathers=D},"../feathers/lib/declarations.js":function(m,t){Object.defineProperty(t,"__esModule",{value:!0})},"../feathers/lib/dependencies.js":function(m,t,_){var g=this&&this.__createBinding||(Object.create?function(S,C,b,j){j===void 0&&(j=b),Object.defineProperty(S,j,{enumerable:!0,get:function(){return C[b]}})}:function(S,C,b,j){j===void 0&&(j=b),S[j]=C[b]}),R=this&&this.__exportStar||function(S,C){for(var b in S)b!=="default"&&!Object.prototype.hasOwnProperty.call(C,b)&&g(C,S,b)};Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var k=_("../../node_modules/events/events.js");Object.defineProperty(t,"EventEmitter",{enumerable:!0,get:function(){return k.EventEmitter}}),R(_("../commons/lib/index.js"),t),R(_("../../node_modules/@feathersjs/hooks/lib/index.js"),t)},"../feathers/lib/events.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0}),t.eventMixin=t.eventHook=void 0;var g=_("../feathers/lib/dependencies.js"),R=_("../feathers/lib/service.js");function k(C,b){var j=(0,R.getServiceOptions)(C.self),E=j.events,N=R.defaultEventMap[C.method]||null;return C.event=N,b().then(function(){if(typeof C.event=="string"&&!E.includes(C.event)){var M=Array.isArray(C.result)?C.result:[C.result];M.forEach(function(x){return C.self.emit(C.event,x,C)})}})}t.eventHook=k;function S(C){var b=typeof C.on=="function"&&typeof C.emit=="function";return b||Object.assign(C,g.EventEmitter.prototype),C}t.eventMixin=S},"../feathers/lib/hooks/index.js":function(m,t,_){function g(P){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(D){return typeof D}:g=function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},g(P)}function R(P){return b(P)||C(P)||S(P)||k()}function k(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function S(P,T){if(!!P){if(typeof P=="string")return j(P,T);var D=Object.prototype.toString.call(P).slice(8,-1);if(D==="Object"&&P.constructor&&(D=P.constructor.name),D==="Map"||D==="Set")return Array.from(P);if(D==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(D))return j(P,T)}}function C(P){if(typeof Symbol!="undefined"&&P[Symbol.iterator]!=null||P["@@iterator"]!=null)return Array.from(P)}function b(P){if(Array.isArray(P))return j(P)}function j(P,T){(T==null||T>P.length)&&(T=P.length);for(var D=0,F=new Array(T);D<T;D++)F[D]=P[D];return F}function E(P,T){if(!(P instanceof T))throw new TypeError("Cannot call a class as a function")}function N(P,T){for(var D=0;D<T.length;D++){var F=T[D];F.enumerable=F.enumerable||!1,F.configurable=!0,"value"in F&&(F.writable=!0),Object.defineProperty(P,F.key,F)}}function M(P,T,D){return T&&N(P.prototype,T),D&&N(P,D),P}function x(P,T,D){return typeof Reflect!="undefined"&&Reflect.get?x=Reflect.get:x=function(H,L,z){var J=I(H,L);if(!!J){var X=Object.getOwnPropertyDescriptor(J,L);return X.get?X.get.call(z):X.value}},x(P,T,D||P)}function I(P,T){for(;!Object.prototype.hasOwnProperty.call(P,T)&&(P=u(P),P!==null););return P}function A(P,T){if(typeof T!="function"&&T!==null)throw new TypeError("Super expression must either be null or a function");P.prototype=Object.create(T&&T.prototype,{constructor:{value:P,writable:!0,configurable:!0}}),T&&f(P,T)}function f(P,T){return f=Object.setPrototypeOf||function(F,H){return F.__proto__=H,F},f(P,T)}function l(P){var T=w();return function(){var F=u(P),H;if(T){var L=u(this).constructor;H=Reflect.construct(F,arguments,L)}else H=F.apply(this,arguments);return s(this,H)}}function s(P,T){if(T&&(g(T)==="object"||typeof T=="function"))return T;if(T!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return d(P)}function d(P){if(P===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return P}function w(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(P){return!1}}function u(P){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(D){return D.__proto__||Object.getPrototypeOf(D)},u(P)}Object.defineProperty(t,"__esModule",{value:!0}),t.hookMixin=t.FeathersHookManager=t.createContext=t.fromErrorHooks=t.fromBeforeHook=t.fromAfterHook=void 0;var r=_("../feathers/lib/dependencies.js"),o=_("../feathers/lib/service.js"),i=_("../feathers/lib/hooks/legacy.js");Object.defineProperty(t,"fromAfterHook",{enumerable:!0,get:function(){return i.fromAfterHook}}),Object.defineProperty(t,"fromBeforeHook",{enumerable:!0,get:function(){return i.fromBeforeHook}}),Object.defineProperty(t,"fromErrorHooks",{enumerable:!0,get:function(){return i.fromErrorHooks}});function n(P,T){var D=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},F=P[T].createContext;if(typeof F!="function")throw new Error("Can not create context for method ".concat(T));return F(D)}t.createContext=n;var p=function(P){A(D,P);var T=l(D);function D(F,H){var L;return E(this,D),L=T.call(this),L.app=F,L.method=H,L._middleware=[],L}return M(D,[{key:"collectMiddleware",value:function(H,L){var z=this.app,J=z.appHooks[r.HOOKS].concat(z.appHooks[this.method]||[]),X=(0,i.collectLegacyHooks)(this.app,this.method),Y=x(u(D.prototype),"collectMiddleware",this).call(this,H,L),$=(0,i.collectLegacyHooks)(H,this.method);return[].concat(R(J),R(X),R(Y),R($))}},{key:"initializeContext",value:function(H,L,z){var J=x(u(D.prototype),"initializeContext",this).call(this,H,L,z);return J.params=J.params||{},J}},{key:"middleware",value:function(H){var L;return(L=this._middleware).push.apply(L,R(H)),this}}]),D}(r.HookManager);t.FeathersHookManager=p;function v(P,T,D){if(typeof P.hooks=="function")return P;var F=this,H=(0,o.getHookMethods)(P,D).reduce(function(z,J){var X,Y=o.defaultServiceArguments[J]||["data","params"];return z[J]=(X=new p(F,J)).params.apply(X,R(Y)).props({app:F,path:T,method:J,service:P,event:null,type:null}),z},{}),L=(0,i.enableLegacyHooks)(P);return(0,r.hooks)(P,H),P.hooks=function(z){var J=this;return z.before||z.after||z.error?L.call(this,z):Array.isArray(z)?(0,r.hooks)(this,z):(Object.keys(z).forEach(function(X){var Y=(0,r.getManager)(J[X]);if(!(Y instanceof p))throw new Error("Method ".concat(X," is not a Feathers hooks enabled service method"));Y.middleware(z[X])}),this)},P}t.hookMixin=v},"../feathers/lib/hooks/legacy.js":function(m,t,_){function g(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(i){return typeof i}:g=function(i){return i&&typeof Symbol=="function"&&i.constructor===Symbol&&i!==Symbol.prototype?"symbol":typeof i},g(r)}function R(r){return C(r)||S(r)||j(r)||k()}function k(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function S(r){if(typeof Symbol!="undefined"&&r[Symbol.iterator]!=null||r["@@iterator"]!=null)return Array.from(r)}function C(r){if(Array.isArray(r))return E(r)}function b(r,o){var i=typeof Symbol!="undefined"&&r[Symbol.iterator]||r["@@iterator"];if(!i){if(Array.isArray(r)||(i=j(r))||o&&r&&typeof r.length=="number"){i&&(r=i);var n=0,p=function(){};return{s:p,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(F){throw F},f:p}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var v=!0,P=!1,T;return{s:function(){i=i.call(r)},n:function(){var F=i.next();return v=F.done,F},e:function(F){P=!0,T=F},f:function(){try{!v&&i.return!=null&&i.return()}finally{if(P)throw T}}}}function j(r,o){if(!!r){if(typeof r=="string")return E(r,o);var i=Object.prototype.toString.call(r).slice(8,-1);if(i==="Object"&&r.constructor&&(i=r.constructor.name),i==="Map"||i==="Set")return Array.from(r);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return E(r,o)}}function E(r,o){(o==null||o>r.length)&&(o=r.length);for(var i=0,n=new Array(o);i<o;i++)n[i]=r[i];return n}function N(r,o){var i=Object.keys(r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(r);o&&(n=n.filter(function(p){return Object.getOwnPropertyDescriptor(r,p).enumerable})),i.push.apply(i,n)}return i}function M(r){for(var o=1;o<arguments.length;o++){var i=arguments[o]!=null?arguments[o]:{};o%2?N(Object(i),!0).forEach(function(n){x(r,n,i[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(i)):N(Object(i)).forEach(function(n){Object.defineProperty(r,n,Object.getOwnPropertyDescriptor(i,n))})}return r}function x(r,o,i){return o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r}Object.defineProperty(t,"__esModule",{value:!0}),t.enableLegacyHooks=t.convertHookData=t.collectLegacyHooks=t.fromErrorHooks=t.fromAfterHook=t.fromBeforeHook=void 0;var I=_("../feathers/lib/dependencies.js"),A=I._.each;function f(r){return function(o,i){return o.type="before",Promise.resolve(r.call(o.self,o)).then(function(){return o.type=null,i()})}}t.fromBeforeHook=f;function l(r){return function(o,i){return i().then(function(){return o.type="after",r.call(o.self,o)}).then(function(){o.type=null})}}t.fromAfterHook=l;function s(r){return function(o,i){return i().catch(function(n){var p=Promise.resolve();o.original=M({},o),o.error=n,o.type="error",delete o.result;var v=b(r),P;try{var T=function(){var F=P.value;p=p.then(function(){return F.call(o.self,o)})};for(v.s();!(P=v.n()).done;)T()}catch(D){v.e(D)}finally{v.f()}return p.then(function(){if(o.type=null,o.result===void 0)throw o.error})})}}t.fromErrorHooks=s;function d(r,o){var i=r.__hooks,n=i.before[o],p=n===void 0?[]:n,v=i.after[o],P=v===void 0?[]:v,T=i.error[o],D=T===void 0?[]:T,F=p,H=R(P).reverse(),L=s(D);return[L].concat(R(F),R(H))}t.collectLegacyHooks=d;function w(r){var o={};return Array.isArray(r)?o={all:r}:g(r)!=="object"?o={all:[r]}:A(r,function(i,n){o[n]=Array.isArray(i)?i:[i]}),o}t.convertHookData=w;function u(r){var o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:["find","get","create","update","patch","remove"],i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:["before","after","error"],n={};return i.forEach(function(p){n[p]={}}),Object.defineProperty(r,"__hooks",{configurable:!0,value:n,writable:!0}),function(v){var P=this;return A(v,function(T,D){if(!P.__hooks[D])throw new Error("'".concat(D,"' is not a valid hook type"));var F=w(T);A(F,function(H,L){if(L!=="all"&&o.indexOf(L)===-1)throw new Error("'".concat(L,"' is not a valid hook method"))}),o.forEach(function(H){var L,z=[].concat(R(F.all||[]),R(F[H]||[]));P.__hooks[D][H]=P.__hooks[D][H]||[],D==="before"&&(z=z.map(f)),D==="after"&&(z=z.map(l)),(L=P.__hooks[D][H]).push.apply(L,R(z))})}),this}}t.enableLegacyHooks=u},"../feathers/lib/index.js":function(m,t,_){var g=this&&this.__createBinding||(Object.create?function(E,N,M,x){x===void 0&&(x=M),Object.defineProperty(E,x,{enumerable:!0,get:function(){return N[M]}})}:function(E,N,M,x){x===void 0&&(x=M),E[x]=N[M]}),R=this&&this.__exportStar||function(E,N){for(var M in E)M!=="default"&&!Object.prototype.hasOwnProperty.call(N,M)&&g(N,E,M)},k=this&&this.__importDefault||function(E){return E&&E.__esModule?E:{default:E}};Object.defineProperty(t,"__esModule",{value:!0}),t.Feathers=t.version=t.feathers=void 0;var S=_("../feathers/lib/dependencies.js"),C=k(_("../feathers/lib/version.js"));t.version=C.default;var b=_("../feathers/lib/application.js");Object.defineProperty(t,"Feathers",{enumerable:!0,get:function(){return b.Feathers}});function j(){return new b.Feathers}t.feathers=j,j.setDebug=S.setDebug,R(_("../feathers/lib/hooks/index.js"),t),R(_("../feathers/lib/declarations.js"),t),R(_("../feathers/lib/service.js"),t),m.exports=Object.assign(j,m.exports)},"../feathers/lib/service.js":function(m,t,_){function g(E,N){var M=Object.keys(E);if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(E);N&&(x=x.filter(function(I){return Object.getOwnPropertyDescriptor(E,I).enumerable})),M.push.apply(M,x)}return M}function R(E){for(var N=1;N<arguments.length;N++){var M=arguments[N]!=null?arguments[N]:{};N%2?g(Object(M),!0).forEach(function(x){k(E,x,M[x])}):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(M)):g(Object(M)).forEach(function(x){Object.defineProperty(E,x,Object.getOwnPropertyDescriptor(M,x))})}return E}function k(E,N,M){return N in E?Object.defineProperty(E,N,{value:M,enumerable:!0,configurable:!0,writable:!0}):E[N]=M,E}Object.defineProperty(t,"__esModule",{value:!0}),t.wrapService=t.getServiceOptions=t.getHookMethods=t.protectedMethods=t.defaultEventMap=t.defaultServiceMethods=t.defaultServiceArguments=t.SERVICE=void 0;var S=_("../feathers/lib/dependencies.js");t.SERVICE=(0,S.createSymbol)("@feathersjs/service"),t.defaultServiceArguments={find:["params"],get:["id","params"],create:["data","params"],update:["id","data","params"],patch:["id","data","params"],remove:["id","params"]},t.defaultServiceMethods=Object.keys(t.defaultServiceArguments),t.defaultEventMap={create:"created",update:"updated",patch:"patched",remove:"removed"},t.protectedMethods=Object.keys(Object.prototype).concat(Object.keys(S.EventEmitter.prototype)).concat(["before","after","error","hooks","setup","publish"]);function C(E,N){var M=N.methods;return t.defaultServiceMethods.filter(function(x){return typeof E[x]=="function"&&!M.includes(x)}).concat(M)}t.getHookMethods=C;function b(E){var N=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},M=E[t.SERVICE];if(M)return M;var x=N.methods,I=x===void 0?t.defaultServiceMethods.filter(function(d){return typeof E[d]=="function"}):x,A=N.events,f=A===void 0?E.events||[]:A,l=N.serviceEvents,s=l===void 0?Object.values(t.defaultEventMap).concat(f):l;return R(R({},N),{},{events:f,methods:I,serviceEvents:s})}t.getServiceOptions=b;function j(E,N,M){if(N[t.SERVICE])return N;var x=Object.create(N),I=b(N,M);if(Object.keys(I.methods).length===0&&typeof N.setup!="function")throw new Error("Invalid service object passed for path `".concat(E,"`"));return Object.defineProperty(x,t.SERVICE,{value:I}),x}t.wrapService=j},"../feathers/lib/version.js":function(m,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default="development"},"../rest-client/lib/axios.js":function(m,t,_){function g(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(s){return typeof s}:g=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},g(f)}function R(f,l){if(!(f instanceof l))throw new TypeError("Cannot call a class as a function")}function k(f,l){for(var s=0;s<l.length;s++){var d=l[s];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(f,d.key,d)}}function S(f,l,s){return l&&k(f.prototype,l),s&&k(f,s),f}function C(f,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function");f.prototype=Object.create(l&&l.prototype,{constructor:{value:f,writable:!0,configurable:!0}}),l&&b(f,l)}function b(f,l){return b=Object.setPrototypeOf||function(d,w){return d.__proto__=w,d},b(f,l)}function j(f){var l=M();return function(){var d=x(f),w;if(l){var u=x(this).constructor;w=Reflect.construct(d,arguments,u)}else w=d.apply(this,arguments);return E(this,w)}}function E(f,l){if(l&&(g(l)==="object"||typeof l=="function"))return l;if(l!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return N(f)}function N(f){if(f===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return f}function M(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(f){return!1}}function x(f){return x=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)},x(f)}Object.defineProperty(t,"__esModule",{value:!0}),t.AxiosClient=void 0;var I=_("../rest-client/lib/base.js"),A=function(f){C(s,f);var l=j(s);function s(){return R(this,s),l.apply(this,arguments)}return S(s,[{key:"request",value:function(w,u){var r=Object.assign({url:w.url,method:w.method,data:w.body,headers:Object.assign({Accept:"application/json"},this.options.headers,w.headers)},u.connection);return this.connection.request(r).then(function(o){return o.data}).catch(function(o){var i=o.response||o;throw i instanceof Error?i:i.data||i})}}]),s}(I.Base);t.AxiosClient=A},"../rest-client/lib/base.js":function(m,t,_){function g(M,x){if(!(M instanceof x))throw new TypeError("Cannot call a class as a function")}function R(M,x){for(var I=0;I<x.length;I++){var A=x[I];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(M,A.key,A)}}function k(M,x,I){return x&&R(M.prototype,x),I&&R(M,I),M}var S=this&&this.__importDefault||function(M){return M&&M.__esModule?M:{default:M}};Object.defineProperty(t,"__esModule",{value:!0}),t.Base=void 0;var C=S(_("../../node_modules/qs/lib/index.js")),b=_("../errors/lib/index.js"),j=_("../commons/lib/index.js");function E(M){throw M.code==="ECONNREFUSED"?new b.Unavailable(M.message,j._.pick(M,"address","port","config")):(0,b.convert)(M)}var N=function(){function M(x){g(this,M),this.name=(0,j.stripSlashes)(x.name),this.options=x.options,this.connection=x.connection,this.base="".concat(x.base,"/").concat(this.name)}return k(M,[{key:"makeUrl",value:function(I,A){var f=this.base;return I=I||{},typeof A!="undefined"&&A!==null&&(f+="/".concat(encodeURIComponent(A))),f+this.getQuery(I)}},{key:"getQuery",value:function(I){if(Object.keys(I).length!==0){var A=C.default.stringify(I);return"?".concat(A)}return""}},{key:"methods",value:function(){for(var I=this,A=arguments.length,f=new Array(A),l=0;l<A;l++)f[l]=arguments[l];return f.forEach(function(s){I[s]=function(d){var w=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.request({body:d,url:this.makeUrl(w.query),method:"POST",headers:Object.assign({"Content-Type":"application/json","X-Service-Method":s},w.headers)},w).catch(E)}}),this}},{key:"find",value:function(){var I=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return this.request({url:this.makeUrl(I.query),method:"GET",headers:Object.assign({},I.headers)},I).catch(E)}},{key:"get",value:function(I){var A=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return typeof I=="undefined"?Promise.reject(new Error("id for 'get' can not be undefined")):this.request({url:this.makeUrl(A.query,I),method:"GET",headers:Object.assign({},A.headers)},A).catch(E)}},{key:"create",value:function(I){var A=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.request({url:this.makeUrl(A.query),body:I,method:"POST",headers:Object.assign({"Content-Type":"application/json"},A.headers)},A).catch(E)}},{key:"update",value:function(I,A){var f=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return typeof I=="undefined"?Promise.reject(new Error("id for 'update' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(f.query,I),body:A,method:"PUT",headers:Object.assign({"Content-Type":"application/json"},f.headers)},f).catch(E)}},{key:"patch",value:function(I,A){var f=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return typeof I=="undefined"?Promise.reject(new Error("id for 'patch' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(f.query,I),body:A,method:"PATCH",headers:Object.assign({"Content-Type":"application/json"},f.headers)},f).catch(E)}},{key:"remove",value:function(I){var A=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return typeof I=="undefined"?Promise.reject(new Error("id for 'remove' can not be undefined, only 'null' when removing multiple entries")):this.request({url:this.makeUrl(A.query,I),method:"DELETE",headers:Object.assign({},A.headers)},A).catch(E)}}]),M}();t.Base=N},"../rest-client/lib/fetch.js":function(m,t,_){function g(l){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(d){return typeof d}:g=function(d){return d&&typeof Symbol=="function"&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d},g(l)}function R(l,s){if(!(l instanceof s))throw new TypeError("Cannot call a class as a function")}function k(l,s){for(var d=0;d<s.length;d++){var w=s[d];w.enumerable=w.enumerable||!1,w.configurable=!0,"value"in w&&(w.writable=!0),Object.defineProperty(l,w.key,w)}}function S(l,s,d){return s&&k(l.prototype,s),d&&k(l,d),l}function C(l,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");l.prototype=Object.create(s&&s.prototype,{constructor:{value:l,writable:!0,configurable:!0}}),s&&b(l,s)}function b(l,s){return b=Object.setPrototypeOf||function(w,u){return w.__proto__=u,w},b(l,s)}function j(l){var s=M();return function(){var w=x(l),u;if(s){var r=x(this).constructor;u=Reflect.construct(w,arguments,r)}else u=w.apply(this,arguments);return E(this,u)}}function E(l,s){if(s&&(g(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return N(l)}function N(l){if(l===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l}function M(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(l){return!1}}function x(l){return x=Object.setPrototypeOf?Object.getPrototypeOf:function(d){return d.__proto__||Object.getPrototypeOf(d)},x(l)}Object.defineProperty(t,"__esModule",{value:!0}),t.FetchClient=void 0;var I=_("../errors/lib/index.js"),A=_("../rest-client/lib/base.js"),f=function(l){C(d,l);var s=j(d);function d(){return R(this,d),s.apply(this,arguments)}return S(d,[{key:"request",value:function(u,r){var o=Object.assign({},u,r.connection);return o.headers=Object.assign({Accept:"application/json"},this.options.headers,o.headers),u.body&&(o.body=JSON.stringify(u.body)),this.connection(u.url,o).then(this.checkStatus).then(function(i){return i.status===204?null:i.json()})}},{key:"checkStatus",value:function(u){return u.ok?u:u.json().catch(function(){var r=I.errors[u.status]||Error;return new r("JSON parsing error")}).then(function(r){throw r.response=u,r})}}]),d}(A.Base);t.FetchClient=f},"../rest-client/lib/index.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0}),t.SuperagentClient=t.FetchClient=t.AxiosClient=void 0;var g=_("../rest-client/lib/base.js"),R=_("../rest-client/lib/axios.js");Object.defineProperty(t,"AxiosClient",{enumerable:!0,get:function(){return R.AxiosClient}});var k=_("../rest-client/lib/fetch.js");Object.defineProperty(t,"FetchClient",{enumerable:!0,get:function(){return k.FetchClient}});var S=_("../rest-client/lib/superagent.js");Object.defineProperty(t,"SuperagentClient",{enumerable:!0,get:function(){return S.SuperagentClient}});var C={superagent:S.SuperagentClient,fetch:k.FetchClient,axios:R.AxiosClient};function b(){var j=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",E={Base:g.Base};return Object.keys(C).forEach(function(N){E[N]=function(M){var x=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},I=arguments.length>2&&arguments[2]!==void 0?arguments[2]:C[N];if(!M)throw new Error("".concat(N," has to be provided to feathers-rest"));typeof x=="function"&&(I=x,x={});var A=function(s){return new I({base:j,name:s,connection:M,options:x})},f=function(s){if(s.rest!==void 0)throw new Error("Only one default client provider can be configured");s.rest=M,s.defaultService=A};return f.Service=I,f.service=A,f}}),E}t.default=b,m.exports=Object.assign(b,m.exports)},"../rest-client/lib/superagent.js":function(m,t,_){function g(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?g=function(s){return typeof s}:g=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},g(f)}function R(f,l){if(!(f instanceof l))throw new TypeError("Cannot call a class as a function")}function k(f,l){for(var s=0;s<l.length;s++){var d=l[s];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(f,d.key,d)}}function S(f,l,s){return l&&k(f.prototype,l),s&&k(f,s),f}function C(f,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function");f.prototype=Object.create(l&&l.prototype,{constructor:{value:f,writable:!0,configurable:!0}}),l&&b(f,l)}function b(f,l){return b=Object.setPrototypeOf||function(d,w){return d.__proto__=w,d},b(f,l)}function j(f){var l=M();return function(){var d=x(f),w;if(l){var u=x(this).constructor;w=Reflect.construct(d,arguments,u)}else w=d.apply(this,arguments);return E(this,w)}}function E(f,l){if(l&&(g(l)==="object"||typeof l=="function"))return l;if(l!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return N(f)}function N(f){if(f===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return f}function M(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(f){return!1}}function x(f){return x=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)},x(f)}Object.defineProperty(t,"__esModule",{value:!0}),t.SuperagentClient=void 0;var I=_("../rest-client/lib/base.js"),A=function(f){C(s,f);var l=j(s);function s(){return R(this,s),l.apply(this,arguments)}return S(s,[{key:"request",value:function(w,u){var r=this.connection(w.method,w.url).set(this.options.headers||{}).set("Accept","application/json").set(u.connection||{}).set(w.headers||{}).type(w.type||"json");return new Promise(function(o,i){r.set(w.headers),w.body&&r.send(w.body),r.end(function(n,p){if(n){try{var v=n.response;n=JSON.parse(n.response.text),n.response=v}catch(P){}return i(n)}o(p&&p.body)})})}}]),s}(I.Base);t.SuperagentClient=A},"../socketio-client/lib/index.js":function(m,t,_){Object.defineProperty(t,"__esModule",{value:!0});var g=_("../transport-commons/client.js"),R=_("../feathers/lib/index.js");function k(S,C){if(!S)throw new Error("Socket.io connection needs to be provided");var b=function(N){var M=Object.values(R.defaultEventMap),x=Object.assign({},C,{events:M,name:N,connection:S,method:"emit"});return new g.Service(x)},j=function(N){if(N.io!==void 0)throw new Error("Only one default client provider can be configured");N.io=S,N.defaultService=b};return j.Service=g.Service,j.service=b,j}t.default=k,m.exports=Object.assign(k,m.exports)},"../transport-commons/client.js":function(m,t,_){m.exports=_("../transport-commons/lib/client.js")},"../transport-commons/lib/client.js":function(m,t,_){function g(x,I){if(!(x instanceof I))throw new TypeError("Cannot call a class as a function")}function R(x,I){for(var A=0;A<I.length;A++){var f=I[A];f.enumerable=f.enumerable||!1,f.configurable=!0,"value"in f&&(f.writable=!0),Object.defineProperty(x,f.key,f)}}function k(x,I,A){return I&&R(x.prototype,I),A&&R(x,A),x}Object.defineProperty(t,"__esModule",{value:!0}),t.Service=void 0;var S=_("../errors/lib/index.js"),C=_("../commons/lib/index.js"),b=(0,C.createDebug)("@feathersjs/transport-commons/client"),j=["addListener","emit","listenerCount","listeners","on","once","prependListener","prependOnceListener","removeAllListeners","removeListener"],E=["eventNames","getMaxListeners","setMaxListeners"],N=function(I){E.forEach(function(A){I[A]=function(){var f;if(typeof this.connection[A]!="function")throw new Error("Can not call '".concat(A,"' on the client service connection"));return(f=this.connection)[A].apply(f,arguments)}}),j.forEach(function(A){I[A]=function(f){var l;if(typeof this.connection[A]!="function")throw new Error("Can not call '".concat(A,"' on the client service connection"));var s="".concat(this.path," ").concat(f);b("Calling emitter method ".concat(A," with ")+"namespaced event '".concat(s,"'"));for(var d=arguments.length,w=new Array(d>1?d-1:0),u=1;u<d;u++)w[u-1]=arguments[u];var r=(l=this.connection)[A].apply(l,[s].concat(w));return r===this.connection?this:r}})},M=function(){function x(I){g(this,x),this.events=I.events,this.path=I.name,this.connection=I.connection,this.method=I.method,N(this)}return k(x,[{key:"send",value:function(A){for(var f=this,l=arguments.length,s=new Array(l>1?l-1:0),d=1;d<l;d++)s[d-1]=arguments[d];return new Promise(function(w,u){var r;s.unshift(A,f.path),s.push(function(o,i){return o?u((0,S.convert)(o)):w(i)}),b("Sending socket.".concat(f.method),s),(r=f.connection)[f.method].apply(r,s)})}},{key:"methods",value:function(){for(var A=this,f=arguments.length,l=new Array(f),s=0;s<f;s++)l[s]=arguments[s];return l.forEach(function(d){A[d]=function(w){var u=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send(d,w,u.query||{})}}),this}},{key:"find",value:function(){var A=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return this.send("find",A.query||{})}},{key:"get",value:function(A){var f=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("get",A,f.query||{})}},{key:"create",value:function(A){var f=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("create",A,f.query||{})}},{key:"update",value:function(A,f){var l=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.send("update",A,f,l.query||{})}},{key:"patch",value:function(A,f){var l=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.send("patch",A,f,l.query||{})}},{key:"remove",value:function(A){var f=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("remove",A,f.query||{})}},{key:"off",value:function(A){for(var f=arguments.length,l=new Array(f>1?f-1:0),s=1;s<f;s++)l[s-1]=arguments[s];if(typeof this.connection.off=="function"){var d,w=(d=this.connection).off.apply(d,["".concat(this.path," ").concat(A)].concat(l));return w===this.connection?this:w}else if(l.length===0)return this.removeAllListeners(A);return this.removeListener.apply(this,[A].concat(l))}}]),x}();t.Service=M},"../../node_modules/call-bind/callBound.js":function(m,t,_){var g=_("../../node_modules/get-intrinsic/index.js"),R=_("../../node_modules/call-bind/index.js"),k=R(g("String.prototype.indexOf"));m.exports=function(C,b){var j=g(C,!!b);return typeof j=="function"&&k(C,".prototype.")>-1?R(j):j}},"../../node_modules/call-bind/index.js":function(m,t,_){var g=_("../../node_modules/function-bind/index.js"),R=_("../../node_modules/get-intrinsic/index.js"),k=R("%Function.prototype.apply%"),S=R("%Function.prototype.call%"),C=R("%Reflect.apply%",!0)||g.call(S,k),b=R("%Object.getOwnPropertyDescriptor%",!0),j=R("%Object.defineProperty%",!0),E=R("%Math.max%");if(j)try{j({},"a",{value:1})}catch(M){j=null}m.exports=function(x){var I=C(g,S,arguments);if(b&&j){var A=b(I,"length");A.configurable&&j(I,"length",{value:1+E(0,x.length-(arguments.length-1))})}return I};var N=function(){return C(g,k,arguments)};j?j(m.exports,"apply",{value:N}):m.exports.apply=N},"../../node_modules/events/events.js":function(m){var t=typeof Reflect=="object"?Reflect:null,_=t&&typeof t.apply=="function"?t.apply:function(r,o,i){return Function.prototype.apply.call(r,o,i)},g;t&&typeof t.ownKeys=="function"?g=t.ownKeys:Object.getOwnPropertySymbols?g=function(r){return Object.getOwnPropertyNames(r).concat(Object.getOwnPropertySymbols(r))}:g=function(r){return Object.getOwnPropertyNames(r)};function R(u){console&&console.warn&&console.warn(u)}var k=Number.isNaN||function(r){return r!==r};function S(){S.init.call(this)}m.exports=S,m.exports.once=s,S.EventEmitter=S,S.prototype._events=void 0,S.prototype._eventsCount=0,S.prototype._maxListeners=void 0;var C=10;function b(u){if(typeof u!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof u)}Object.defineProperty(S,"defaultMaxListeners",{enumerable:!0,get:function(){return C},set:function(u){if(typeof u!="number"||u<0||k(u))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+u+".");C=u}}),S.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},S.prototype.setMaxListeners=function(r){if(typeof r!="number"||r<0||k(r))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+r+".");return this._maxListeners=r,this};function j(u){return u._maxListeners===void 0?S.defaultMaxListeners:u._maxListeners}S.prototype.getMaxListeners=function(){return j(this)},S.prototype.emit=function(r){for(var o=[],i=1;i<arguments.length;i++)o.push(arguments[i]);var n=r==="error",p=this._events;if(p!==void 0)n=n&&p.error===void 0;else if(!n)return!1;if(n){var v;if(o.length>0&&(v=o[0]),v instanceof Error)throw v;var P=new Error("Unhandled error."+(v?" ("+v.message+")":""));throw P.context=v,P}var T=p[r];if(T===void 0)return!1;if(typeof T=="function")_(T,this,o);else for(var D=T.length,F=A(T,D),i=0;i<D;++i)_(F[i],this,o);return!0};function E(u,r,o,i){var n,p,v;if(b(o),p=u._events,p===void 0?(p=u._events=Object.create(null),u._eventsCount=0):(p.newListener!==void 0&&(u.emit("newListener",r,o.listener?o.listener:o),p=u._events),v=p[r]),v===void 0)v=p[r]=o,++u._eventsCount;else if(typeof v=="function"?v=p[r]=i?[o,v]:[v,o]:i?v.unshift(o):v.push(o),n=j(u),n>0&&v.length>n&&!v.warned){v.warned=!0;var P=new Error("Possible EventEmitter memory leak detected. "+v.length+" "+String(r)+" listeners added. Use emitter.setMaxListeners() to increase limit");P.name="MaxListenersExceededWarning",P.emitter=u,P.type=r,P.count=v.length,R(P)}return u}S.prototype.addListener=function(r,o){return E(this,r,o,!1)},S.prototype.on=S.prototype.addListener,S.prototype.prependListener=function(r,o){return E(this,r,o,!0)};function N(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function M(u,r,o){var i={fired:!1,wrapFn:void 0,target:u,type:r,listener:o},n=N.bind(i);return n.listener=o,i.wrapFn=n,n}S.prototype.once=function(r,o){return b(o),this.on(r,M(this,r,o)),this},S.prototype.prependOnceListener=function(r,o){return b(o),this.prependListener(r,M(this,r,o)),this},S.prototype.removeListener=function(r,o){var i,n,p,v,P;if(b(o),n=this._events,n===void 0)return this;if(i=n[r],i===void 0)return this;if(i===o||i.listener===o)--this._eventsCount==0?this._events=Object.create(null):(delete n[r],n.removeListener&&this.emit("removeListener",r,i.listener||o));else if(typeof i!="function"){for(p=-1,v=i.length-1;v>=0;v--)if(i[v]===o||i[v].listener===o){P=i[v].listener,p=v;break}if(p<0)return this;p===0?i.shift():f(i,p),i.length===1&&(n[r]=i[0]),n.removeListener!==void 0&&this.emit("removeListener",r,P||o)}return this},S.prototype.off=S.prototype.removeListener,S.prototype.removeAllListeners=function(r){var o,i,n;if(i=this._events,i===void 0)return this;if(i.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):i[r]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete i[r]),this;if(arguments.length===0){var p=Object.keys(i),v;for(n=0;n<p.length;++n)v=p[n],v!=="removeListener"&&this.removeAllListeners(v);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(o=i[r],typeof o=="function")this.removeListener(r,o);else if(o!==void 0)for(n=o.length-1;n>=0;n--)this.removeListener(r,o[n]);return this};function x(u,r,o){var i=u._events;if(i===void 0)return[];var n=i[r];return n===void 0?[]:typeof n=="function"?o?[n.listener||n]:[n]:o?l(n):A(n,n.length)}S.prototype.listeners=function(r){return x(this,r,!0)},S.prototype.rawListeners=function(r){return x(this,r,!1)},S.listenerCount=function(u,r){return typeof u.listenerCount=="function"?u.listenerCount(r):I.call(u,r)},S.prototype.listenerCount=I;function I(u){var r=this._events;if(r!==void 0){var o=r[u];if(typeof o=="function")return 1;if(o!==void 0)return o.length}return 0}S.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]};function A(u,r){for(var o=new Array(r),i=0;i<r;++i)o[i]=u[i];return o}function f(u,r){for(;r+1<u.length;r++)u[r]=u[r+1];u.pop()}function l(u){for(var r=new Array(u.length),o=0;o<r.length;++o)r[o]=u[o].listener||u[o];return r}function s(u,r){return new Promise(function(o,i){function n(v){u.removeListener(r,p),i(v)}function p(){typeof u.removeListener=="function"&&u.removeListener("error",n),o([].slice.call(arguments))}w(u,r,p,{once:!0}),r!=="error"&&d(u,n,{once:!0})})}function d(u,r,o){typeof u.on=="function"&&w(u,"error",r,o)}function w(u,r,o,i){if(typeof u.on=="function")i.once?u.once(r,o):u.on(r,o);else if(typeof u.addEventListener=="function")u.addEventListener(r,function n(p){i.once&&u.removeEventListener(r,n),o(p)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof u)}},"../../node_modules/function-bind/implementation.js":function(m){var t="Function.prototype.bind called on incompatible ",_=Array.prototype.slice,g=Object.prototype.toString,R="[object Function]";m.exports=function(S){var C=this;if(typeof C!="function"||g.call(C)!==R)throw new TypeError(t+C);for(var b=_.call(arguments,1),j,E=function(){if(this instanceof j){var A=C.apply(this,b.concat(_.call(arguments)));return Object(A)===A?A:this}else return C.apply(S,b.concat(_.call(arguments)))},N=Math.max(0,C.length-b.length),M=[],x=0;x<N;x++)M.push("$"+x);if(j=Function("binder","return function ("+M.join(",")+"){ return binder.apply(this,arguments); }")(E),C.prototype){var I=function(){};I.prototype=C.prototype,j.prototype=new I,I.prototype=null}return j}},"../../node_modules/function-bind/index.js":function(m,t,_){var g=_("../../node_modules/function-bind/implementation.js");m.exports=Function.prototype.bind||g},"../../node_modules/get-intrinsic/index.js":function(m,t,_){var g,R=SyntaxError,k=Function,S=TypeError,C=function(P){try{return k('"use strict"; return ('+P+").constructor;")()}catch(T){}},b=Object.getOwnPropertyDescriptor;if(b)try{b({},"")}catch(P){b=null}var j=function(){throw new S},E=b?function(){try{return arguments.callee,j}catch(P){try{return b(arguments,"callee").get}catch(T){return j}}}():j,N=_("../../node_modules/has-symbols/index.js")(),M=Object.getPrototypeOf||function(P){return P.__proto__},x={},I=typeof Uint8Array=="undefined"?g:M(Uint8Array),A={"%AggregateError%":typeof AggregateError=="undefined"?g:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer=="undefined"?g:ArrayBuffer,"%ArrayIteratorPrototype%":N?M([][Symbol.iterator]()):g,"%AsyncFromSyncIteratorPrototype%":g,"%AsyncFunction%":x,"%AsyncGenerator%":x,"%AsyncGeneratorFunction%":x,"%AsyncIteratorPrototype%":x,"%Atomics%":typeof Atomics=="undefined"?g:Atomics,"%BigInt%":typeof BigInt=="undefined"?g:BigInt,"%Boolean%":Boolean,"%DataView%":typeof DataView=="undefined"?g:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array=="undefined"?g:Float32Array,"%Float64Array%":typeof Float64Array=="undefined"?g:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry=="undefined"?g:FinalizationRegistry,"%Function%":k,"%GeneratorFunction%":x,"%Int8Array%":typeof Int8Array=="undefined"?g:Int8Array,"%Int16Array%":typeof Int16Array=="undefined"?g:Int16Array,"%Int32Array%":typeof Int32Array=="undefined"?g:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":N?M(M([][Symbol.iterator]())):g,"%JSON%":typeof JSON=="object"?JSON:g,"%Map%":typeof Map=="undefined"?g:Map,"%MapIteratorPrototype%":typeof Map=="undefined"||!N?g:M(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise=="undefined"?g:Promise,"%Proxy%":typeof Proxy=="undefined"?g:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect=="undefined"?g:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set=="undefined"?g:Set,"%SetIteratorPrototype%":typeof Set=="undefined"||!N?g:M(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer=="undefined"?g:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":N?M(""[Symbol.iterator]()):g,"%Symbol%":N?Symbol:g,"%SyntaxError%":R,"%ThrowTypeError%":E,"%TypedArray%":I,"%TypeError%":S,"%Uint8Array%":typeof Uint8Array=="undefined"?g:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray=="undefined"?g:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array=="undefined"?g:Uint16Array,"%Uint32Array%":typeof Uint32Array=="undefined"?g:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap=="undefined"?g:WeakMap,"%WeakRef%":typeof WeakRef=="undefined"?g:WeakRef,"%WeakSet%":typeof WeakSet=="undefined"?g:WeakSet},f=function P(T){var D;if(T==="%AsyncFunction%")D=C("async function () {}");else if(T==="%GeneratorFunction%")D=C("function* () {}");else if(T==="%AsyncGeneratorFunction%")D=C("async function* () {}");else if(T==="%AsyncGenerator%"){var F=P("%AsyncGeneratorFunction%");F&&(D=F.prototype)}else if(T==="%AsyncIteratorPrototype%"){var H=P("%AsyncGenerator%");H&&(D=M(H.prototype))}return A[T]=D,D},l={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},s=_("../../node_modules/function-bind/index.js"),d=_("../../node_modules/has/src/index.js"),w=s.call(Function.call,Array.prototype.concat),u=s.call(Function.apply,Array.prototype.splice),r=s.call(Function.call,String.prototype.replace),o=s.call(Function.call,String.prototype.slice),i=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,n=/\\(\\)?/g,p=function(T){var D=o(T,0,1),F=o(T,-1);if(D==="%"&&F!=="%")throw new R("invalid intrinsic syntax, expected closing `%`");if(F==="%"&&D!=="%")throw new R("invalid intrinsic syntax, expected opening `%`");var H=[];return r(T,i,function(L,z,J,X){H[H.length]=J?r(X,n,"$1"):z||L}),H},v=function(T,D){var F=T,H;if(d(l,F)&&(H=l[F],F="%"+H[0]+"%"),d(A,F)){var L=A[F];if(L===x&&(L=f(F)),typeof L=="undefined"&&!D)throw new S("intrinsic "+T+" exists, but is not available. Please file an issue!");return{alias:H,name:F,value:L}}throw new R("intrinsic "+T+" does not exist!")};m.exports=function(T,D){if(typeof T!="string"||T.length===0)throw new S("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof D!="boolean")throw new S('"allowMissing" argument must be a boolean');var F=p(T),H=F.length>0?F[0]:"",L=v("%"+H+"%",D),z=L.name,J=L.value,X=!1,Y=L.alias;Y&&(H=Y[0],u(F,w([0,1],Y)));for(var $=1,G=!0;$<F.length;$+=1){var B=F[$],K=o(B,0,1),q=o(B,-1);if((K==='"'||K==="'"||K==="`"||q==='"'||q==="'"||q==="`")&&K!==q)throw new R("property names with quotes must have matching quotes");if((B==="constructor"||!G)&&(X=!0),H+="."+B,z="%"+H+"%",d(A,z))J=A[z];else if(J!=null){if(!(B in J)){if(!D)throw new S("base intrinsic for "+T+" exists, but the property is not available.");return}if(b&&$+1>=F.length){var Z=b(J,B);G=!!Z,G&&"get"in Z&&!("originalValue"in Z.get)?J=Z.get:J=J[B]}else G=d(J,B),J=J[B];G&&!X&&(A[z]=J)}}return J}},"../../node_modules/has-symbols/index.js":function(m,t,_){var g=typeof Symbol!="undefined"&&Symbol,R=_("../../node_modules/has-symbols/shams.js");m.exports=function(){return typeof g!="function"||typeof Symbol!="function"||typeof g("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:R()}},"../../node_modules/has-symbols/shams.js":function(m){m.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var _={},g=Symbol("test"),R=Object(g);if(typeof g=="string"||Object.prototype.toString.call(g)!=="[object Symbol]"||Object.prototype.toString.call(R)!=="[object Symbol]")return!1;var k=42;_[g]=k;for(g in _)return!1;if(typeof Object.keys=="function"&&Object.keys(_).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(_).length!==0)return!1;var S=Object.getOwnPropertySymbols(_);if(S.length!==1||S[0]!==g||!Object.prototype.propertyIsEnumerable.call(_,g))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var C=Object.getOwnPropertyDescriptor(_,g);if(C.value!==k||C.enumerable!==!0)return!1}return!0}},"../../node_modules/has/src/index.js":function(m,t,_){var g=_("../../node_modules/function-bind/index.js");m.exports=g.call(Function.call,Object.prototype.hasOwnProperty)},"../../node_modules/object-inspect/index.js":function(m,t,_){var g=typeof Map=="function"&&Map.prototype,R=Object.getOwnPropertyDescriptor&&g?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,k=g&&R&&typeof R.get=="function"?R.get:null,S=g&&Map.prototype.forEach,C=typeof Set=="function"&&Set.prototype,b=Object.getOwnPropertyDescriptor&&C?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,j=C&&b&&typeof b.get=="function"?b.get:null,E=C&&Set.prototype.forEach,N=typeof WeakMap=="function"&&WeakMap.prototype,M=N?WeakMap.prototype.has:null,x=typeof WeakSet=="function"&&WeakSet.prototype,I=x?WeakSet.prototype.has:null,A=typeof WeakRef=="function"&&WeakRef.prototype,f=A?WeakRef.prototype.deref:null,l=Boolean.prototype.valueOf,s=Object.prototype.toString,d=Function.prototype.toString,w=String.prototype.match,u=typeof BigInt=="function"?BigInt.prototype.valueOf:null,r=Object.getOwnPropertySymbols,o=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,i=typeof Symbol=="function"&&typeof Symbol.iterator=="object",n=Object.prototype.propertyIsEnumerable,p=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(U){return U.__proto__}:null),v=_("?c95a").custom,P=v&&G(v)?v:null,T=typeof Symbol=="function"&&typeof Symbol.toStringTag!="undefined"?Symbol.toStringTag:null;m.exports=function U(V,te,ne,oe){var ee=te||{};if(q(ee,"quoteStyle")&&ee.quoteStyle!=="single"&&ee.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if(q(ee,"maxStringLength")&&(typeof ee.maxStringLength=="number"?ee.maxStringLength<0&&ee.maxStringLength!==1/0:ee.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var pe=q(ee,"customInspect")?ee.customInspect:!0;if(typeof pe!="boolean"&&pe!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(q(ee,"indent")&&ee.indent!==null&&ee.indent!=="	"&&!(parseInt(ee.indent,10)===ee.indent&&ee.indent>0))throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');if(typeof V=="undefined")return"undefined";if(V===null)return"null";if(typeof V=="boolean")return V?"true":"false";if(typeof V=="string")return De(V,ee);if(typeof V=="number")return V===0?1/0/V>0?"0":"-0":String(V);if(typeof V=="bigint")return String(V)+"n";var me=typeof ee.depth=="undefined"?5:ee.depth;if(typeof ne=="undefined"&&(ne=0),ne>=me&&me>0&&typeof V=="object")return H(V)?"[Array]":"[Object]";var ie=Sr(ee,ne);if(typeof oe=="undefined")oe=[];else if(ue(oe,V)>=0)return"[Circular]";function ae(Se,Ue,Or){if(Ue&&(oe=oe.slice(),oe.push(Ue)),Or){var Nt={depth:ee.depth};return q(ee,"quoteStyle")&&(Nt.quoteStyle=ee.quoteStyle),U(Se,Nt,ne+1,oe)}return U(Se,ee,ne+1,oe)}if(typeof V=="function"){var Et=ce(V),Rt=Be(V,ae);return"[Function"+(Et?": "+Et:" (anonymous)")+"]"+(Rt.length>0?" { "+Rt.join(", ")+" }":"")}if(G(V)){var At=i?String(V).replace(/^(Symbol\(.*\))_[^)]*$/,"$1"):o.call(V);return typeof V=="object"&&!i?je(At):At}if(ze(V)){for(var Ee="<"+String(V.nodeName).toLowerCase(),Je=V.attributes||[],Le=0;Le<Je.length;Le++)Ee+=" "+Je[Le].name+"="+D(F(Je[Le].value),"double",ee);return Ee+=">",V.childNodes&&V.childNodes.length&&(Ee+="..."),Ee+="</"+String(V.nodeName).toLowerCase()+">",Ee}if(H(V)){if(V.length===0)return"[]";var Xe=Be(V,ae);return ie&&!_r(Xe)?"["+qe(Xe,ie)+"]":"[ "+Xe.join(", ")+" ]"}if(J(V)){var Ct=Be(V,ae);return Ct.length===0?"["+String(V)+"]":"{ ["+String(V)+"] "+Ct.join(", ")+" }"}if(typeof V=="object"&&pe){if(P&&typeof V[P]=="function")return V[P]();if(pe!=="symbol"&&typeof V.inspect=="function")return V.inspect()}if(le(V)){var Tt=[];return S.call(V,function(Se,Ue){Tt.push(ae(Ue,V,!0)+" => "+ae(Se,V))}),jt("Map",k.call(V),Tt,ie)}if(ke(V)){var xt=[];return E.call(V,function(Se){xt.push(ae(Se,V))}),jt("Set",j.call(V),xt,ie)}if(se(V))return Ke("WeakMap");if(Ge(V))return Ke("WeakSet");if(_e(V))return Ke("WeakRef");if(Y(V))return je(ae(Number(V)));if(B(V))return je(ae(u.call(V)));if($(V))return je(l.call(V));if(X(V))return je(ae(String(V)));if(!L(V)&&!z(V)){var Ye=Be(V,ae),It=p?p(V)===Object.prototype:V instanceof Object||V.constructor===Object,Qe=V instanceof Object?"":"null prototype",Mt=!It&&T&&Object(V)===V&&T in V?Z(V).slice(8,-1):Qe?"Object":"",wr=It||typeof V.constructor!="function"?"":V.constructor.name?V.constructor.name+" ":"",Ze=wr+(Mt||Qe?"["+[].concat(Mt||[],Qe||[]).join(": ")+"] ":"");return Ye.length===0?Ze+"{}":ie?Ze+"{"+qe(Ye,ie)+"}":Ze+"{ "+Ye.join(", ")+" }"}return String(V)};function D(U,V,te){var ne=(te.quoteStyle||V)==="double"?'"':"'";return ne+U+ne}function F(U){return String(U).replace(/"/g,"&quot;")}function H(U){return Z(U)==="[object Array]"&&(!T||!(typeof U=="object"&&T in U))}function L(U){return Z(U)==="[object Date]"&&(!T||!(typeof U=="object"&&T in U))}function z(U){return Z(U)==="[object RegExp]"&&(!T||!(typeof U=="object"&&T in U))}function J(U){return Z(U)==="[object Error]"&&(!T||!(typeof U=="object"&&T in U))}function X(U){return Z(U)==="[object String]"&&(!T||!(typeof U=="object"&&T in U))}function Y(U){return Z(U)==="[object Number]"&&(!T||!(typeof U=="object"&&T in U))}function $(U){return Z(U)==="[object Boolean]"&&(!T||!(typeof U=="object"&&T in U))}function G(U){if(i)return U&&typeof U=="object"&&U instanceof Symbol;if(typeof U=="symbol")return!0;if(!U||typeof U!="object"||!o)return!1;try{return o.call(U),!0}catch(V){}return!1}function B(U){if(!U||typeof U!="object"||!u)return!1;try{return u.call(U),!0}catch(V){}return!1}var K=Object.prototype.hasOwnProperty||function(U){return U in this};function q(U,V){return K.call(U,V)}function Z(U){return s.call(U)}function ce(U){if(U.name)return U.name;var V=w.call(d.call(U),/^function\s*([\w$]+)/);return V?V[1]:null}function ue(U,V){if(U.indexOf)return U.indexOf(V);for(var te=0,ne=U.length;te<ne;te++)if(U[te]===V)return te;return-1}function le(U){if(!k||!U||typeof U!="object")return!1;try{k.call(U);try{j.call(U)}catch(V){return!0}return U instanceof Map}catch(V){}return!1}function se(U){if(!M||!U||typeof U!="object")return!1;try{M.call(U,M);try{I.call(U,I)}catch(V){return!0}return U instanceof WeakMap}catch(V){}return!1}function _e(U){if(!f||!U||typeof U!="object")return!1;try{return f.call(U),!0}catch(V){}return!1}function ke(U){if(!j||!U||typeof U!="object")return!1;try{j.call(U);try{k.call(U)}catch(V){return!0}return U instanceof Set}catch(V){}return!1}function Ge(U){if(!I||!U||typeof U!="object")return!1;try{I.call(U,I);try{M.call(U,M)}catch(V){return!0}return U instanceof WeakSet}catch(V){}return!1}function ze(U){return!U||typeof U!="object"?!1:typeof HTMLElement!="undefined"&&U instanceof HTMLElement?!0:typeof U.nodeName=="string"&&typeof U.getAttribute=="function"}function De(U,V){if(U.length>V.maxStringLength){var te=U.length-V.maxStringLength,ne="... "+te+" more character"+(te>1?"s":"");return De(U.slice(0,V.maxStringLength),V)+ne}var oe=U.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,br);return D(oe,"single",V)}function br(U){var V=U.charCodeAt(0),te={8:"b",9:"t",10:"n",12:"f",13:"r"}[V];return te?"\\"+te:"\\x"+(V<16?"0":"")+V.toString(16).toUpperCase()}function je(U){return"Object("+U+")"}function Ke(U){return U+" { ? }"}function jt(U,V,te,ne){var oe=ne?qe(te,ne):te.join(", ");return U+" ("+V+") {"+oe+"}"}function _r(U){for(var V=0;V<U.length;V++)if(ue(U[V],`
`)>=0)return!1;return!0}function Sr(U,V){var te;if(U.indent==="	")te="	";else if(typeof U.indent=="number"&&U.indent>0)te=Array(U.indent+1).join(" ");else return null;return{base:te,prev:Array(V+1).join(te)}}function qe(U,V){if(U.length===0)return"";var te=`
`+V.prev+V.base;return te+U.join(","+te)+`
`+V.prev}function Be(U,V){var te=H(U),ne=[];if(te){ne.length=U.length;for(var oe=0;oe<U.length;oe++)ne[oe]=q(U,oe)?V(U[oe],U):""}var ee=typeof r=="function"?r(U):[],pe;if(i){pe={};for(var me=0;me<ee.length;me++)pe["$"+ee[me]]=ee[me]}for(var ie in U)!q(U,ie)||te&&String(Number(ie))===ie&&ie<U.length||i&&pe["$"+ie]instanceof Symbol||(/[^\w$]/.test(ie)?ne.push(V(ie,U)+": "+V(U[ie],U)):ne.push(ie+": "+V(U[ie],U)));if(typeof r=="function")for(var ae=0;ae<ee.length;ae++)n.call(U,ee[ae])&&ne.push("["+V(ee[ae])+"]: "+V(U[ee[ae]],U));return ne}},"../../node_modules/qs/lib/formats.js":function(m){var t=String.prototype.replace,_=/%20/g,g={RFC1738:"RFC1738",RFC3986:"RFC3986"};m.exports={default:g.RFC3986,formatters:{RFC1738:function(R){return t.call(R,_,"+")},RFC3986:function(R){return String(R)}},RFC1738:g.RFC1738,RFC3986:g.RFC3986}},"../../node_modules/qs/lib/index.js":function(m,t,_){var g=_("../../node_modules/qs/lib/stringify.js"),R=_("../../node_modules/qs/lib/parse.js"),k=_("../../node_modules/qs/lib/formats.js");m.exports={formats:k,parse:R,stringify:g}},"../../node_modules/qs/lib/parse.js":function(m,t,_){var g=_("../../node_modules/qs/lib/utils.js"),R=Object.prototype.hasOwnProperty,k=Array.isArray,S={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:g.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},C=function(A){return A.replace(/&#(\d+);/g,function(f,l){return String.fromCharCode(parseInt(l,10))})},b=function(A,f){return A&&typeof A=="string"&&f.comma&&A.indexOf(",")>-1?A.split(","):A},j="utf8=%26%2310003%3B",E="utf8=%E2%9C%93",N=function(f,l){var s={},d=l.ignoreQueryPrefix?f.replace(/^\?/,""):f,w=l.parameterLimit===1/0?void 0:l.parameterLimit,u=d.split(l.delimiter,w),r=-1,o,i=l.charset;if(l.charsetSentinel)for(o=0;o<u.length;++o)u[o].indexOf("utf8=")===0&&(u[o]===E?i="utf-8":u[o]===j&&(i="iso-8859-1"),r=o,o=u.length);for(o=0;o<u.length;++o)if(o!==r){var n=u[o],p=n.indexOf("]="),v=p===-1?n.indexOf("="):p+1,P,T;v===-1?(P=l.decoder(n,S.decoder,i,"key"),T=l.strictNullHandling?null:""):(P=l.decoder(n.slice(0,v),S.decoder,i,"key"),T=g.maybeMap(b(n.slice(v+1),l),function(D){return l.decoder(D,S.decoder,i,"value")})),T&&l.interpretNumericEntities&&i==="iso-8859-1"&&(T=C(T)),n.indexOf("[]=")>-1&&(T=k(T)?[T]:T),R.call(s,P)?s[P]=g.combine(s[P],T):s[P]=T}return s},M=function(A,f,l,s){for(var d=s?f:b(f,l),w=A.length-1;w>=0;--w){var u,r=A[w];if(r==="[]"&&l.parseArrays)u=[].concat(d);else{u=l.plainObjects?Object.create(null):{};var o=r.charAt(0)==="["&&r.charAt(r.length-1)==="]"?r.slice(1,-1):r,i=parseInt(o,10);!l.parseArrays&&o===""?u={0:d}:!isNaN(i)&&r!==o&&String(i)===o&&i>=0&&l.parseArrays&&i<=l.arrayLimit?(u=[],u[i]=d):u[o]=d}d=u}return d},x=function(f,l,s,d){if(!!f){var w=s.allowDots?f.replace(/\.([^.[]+)/g,"[$1]"):f,u=/(\[[^[\]]*])/,r=/(\[[^[\]]*])/g,o=s.depth>0&&u.exec(w),i=o?w.slice(0,o.index):w,n=[];if(i){if(!s.plainObjects&&R.call(Object.prototype,i)&&!s.allowPrototypes)return;n.push(i)}for(var p=0;s.depth>0&&(o=r.exec(w))!==null&&p<s.depth;){if(p+=1,!s.plainObjects&&R.call(Object.prototype,o[1].slice(1,-1))&&!s.allowPrototypes)return;n.push(o[1])}return o&&n.push("["+w.slice(o.index)+"]"),M(n,l,s,d)}},I=function(f){if(!f)return S;if(f.decoder!==null&&f.decoder!==void 0&&typeof f.decoder!="function")throw new TypeError("Decoder has to be a function.");if(typeof f.charset!="undefined"&&f.charset!=="utf-8"&&f.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var l=typeof f.charset=="undefined"?S.charset:f.charset;return{allowDots:typeof f.allowDots=="undefined"?S.allowDots:!!f.allowDots,allowPrototypes:typeof f.allowPrototypes=="boolean"?f.allowPrototypes:S.allowPrototypes,allowSparse:typeof f.allowSparse=="boolean"?f.allowSparse:S.allowSparse,arrayLimit:typeof f.arrayLimit=="number"?f.arrayLimit:S.arrayLimit,charset:l,charsetSentinel:typeof f.charsetSentinel=="boolean"?f.charsetSentinel:S.charsetSentinel,comma:typeof f.comma=="boolean"?f.comma:S.comma,decoder:typeof f.decoder=="function"?f.decoder:S.decoder,delimiter:typeof f.delimiter=="string"||g.isRegExp(f.delimiter)?f.delimiter:S.delimiter,depth:typeof f.depth=="number"||f.depth===!1?+f.depth:S.depth,ignoreQueryPrefix:f.ignoreQueryPrefix===!0,interpretNumericEntities:typeof f.interpretNumericEntities=="boolean"?f.interpretNumericEntities:S.interpretNumericEntities,parameterLimit:typeof f.parameterLimit=="number"?f.parameterLimit:S.parameterLimit,parseArrays:f.parseArrays!==!1,plainObjects:typeof f.plainObjects=="boolean"?f.plainObjects:S.plainObjects,strictNullHandling:typeof f.strictNullHandling=="boolean"?f.strictNullHandling:S.strictNullHandling}};m.exports=function(A,f){var l=I(f);if(A===""||A===null||typeof A=="undefined")return l.plainObjects?Object.create(null):{};for(var s=typeof A=="string"?N(A,l):A,d=l.plainObjects?Object.create(null):{},w=Object.keys(s),u=0;u<w.length;++u){var r=w[u],o=x(r,s[r],l,typeof A=="string");d=g.merge(d,o,l)}return l.allowSparse===!0?d:g.compact(d)}},"../../node_modules/qs/lib/stringify.js":function(m,t,_){var g=_("../../node_modules/side-channel/index.js"),R=_("../../node_modules/qs/lib/utils.js"),k=_("../../node_modules/qs/lib/formats.js"),S=Object.prototype.hasOwnProperty,C={brackets:function(s){return s+"[]"},comma:"comma",indices:function(s,d){return s+"["+d+"]"},repeat:function(s){return s}},b=Array.isArray,j=Array.prototype.push,E=function(l,s){j.apply(l,b(s)?s:[s])},N=Date.prototype.toISOString,M=k.default,x={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:R.encode,encodeValuesOnly:!1,format:M,formatter:k.formatters[M],indices:!1,serializeDate:function(s){return N.call(s)},skipNulls:!1,strictNullHandling:!1},I=function(s){return typeof s=="string"||typeof s=="number"||typeof s=="boolean"||typeof s=="symbol"||typeof s=="bigint"},A=function l(s,d,w,u,r,o,i,n,p,v,P,T,D,F,H){var L=s;if(H.has(s))throw new RangeError("Cyclic object value");if(typeof i=="function"?L=i(d,L):L instanceof Date?L=v(L):w==="comma"&&b(L)&&(L=R.maybeMap(L,function(Z){return Z instanceof Date?v(Z):Z})),L===null){if(u)return o&&!D?o(d,x.encoder,F,"key",P):d;L=""}if(I(L)||R.isBuffer(L)){if(o){var z=D?d:o(d,x.encoder,F,"key",P);return[T(z)+"="+T(o(L,x.encoder,F,"value",P))]}return[T(d)+"="+T(String(L))]}var J=[];if(typeof L=="undefined")return J;var X;if(w==="comma"&&b(L))X=[{value:L.length>0?L.join(",")||null:void 0}];else if(b(i))X=i;else{var Y=Object.keys(L);X=n?Y.sort(n):Y}for(var $=0;$<X.length;++$){var G=X[$],B=typeof G=="object"&&G.value!==void 0?G.value:L[G];if(!(r&&B===null)){var K=b(L)?typeof w=="function"?w(d,G):d:d+(p?"."+G:"["+G+"]");H.set(s,!0);var q=g();E(J,l(B,K,w,u,r,o,i,n,p,v,P,T,D,F,q))}}return J},f=function(s){if(!s)return x;if(s.encoder!==null&&s.encoder!==void 0&&typeof s.encoder!="function")throw new TypeError("Encoder has to be a function.");var d=s.charset||x.charset;if(typeof s.charset!="undefined"&&s.charset!=="utf-8"&&s.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var w=k.default;if(typeof s.format!="undefined"){if(!S.call(k.formatters,s.format))throw new TypeError("Unknown format option provided.");w=s.format}var u=k.formatters[w],r=x.filter;return(typeof s.filter=="function"||b(s.filter))&&(r=s.filter),{addQueryPrefix:typeof s.addQueryPrefix=="boolean"?s.addQueryPrefix:x.addQueryPrefix,allowDots:typeof s.allowDots=="undefined"?x.allowDots:!!s.allowDots,charset:d,charsetSentinel:typeof s.charsetSentinel=="boolean"?s.charsetSentinel:x.charsetSentinel,delimiter:typeof s.delimiter=="undefined"?x.delimiter:s.delimiter,encode:typeof s.encode=="boolean"?s.encode:x.encode,encoder:typeof s.encoder=="function"?s.encoder:x.encoder,encodeValuesOnly:typeof s.encodeValuesOnly=="boolean"?s.encodeValuesOnly:x.encodeValuesOnly,filter:r,format:w,formatter:u,serializeDate:typeof s.serializeDate=="function"?s.serializeDate:x.serializeDate,skipNulls:typeof s.skipNulls=="boolean"?s.skipNulls:x.skipNulls,sort:typeof s.sort=="function"?s.sort:null,strictNullHandling:typeof s.strictNullHandling=="boolean"?s.strictNullHandling:x.strictNullHandling}};m.exports=function(l,s){var d=l,w=f(s),u,r;typeof w.filter=="function"?(r=w.filter,d=r("",d)):b(w.filter)&&(r=w.filter,u=r);var o=[];if(typeof d!="object"||d===null)return"";var i;s&&s.arrayFormat in C?i=s.arrayFormat:s&&"indices"in s?i=s.indices?"indices":"repeat":i="indices";var n=C[i];u||(u=Object.keys(d)),w.sort&&u.sort(w.sort);for(var p=g(),v=0;v<u.length;++v){var P=u[v];w.skipNulls&&d[P]===null||E(o,A(d[P],P,n,w.strictNullHandling,w.skipNulls,w.encode?w.encoder:null,w.filter,w.sort,w.allowDots,w.serializeDate,w.format,w.formatter,w.encodeValuesOnly,w.charset,p))}var T=o.join(w.delimiter),D=w.addQueryPrefix===!0?"?":"";return w.charsetSentinel&&(w.charset==="iso-8859-1"?D+="utf8=%26%2310003%3B&":D+="utf8=%E2%9C%93&"),T.length>0?D+T:""}},"../../node_modules/qs/lib/utils.js":function(m,t,_){var g=_("../../node_modules/qs/lib/formats.js"),R=Object.prototype.hasOwnProperty,k=Array.isArray,S=function(){for(var s=[],d=0;d<256;++d)s.push("%"+((d<16?"0":"")+d.toString(16)).toUpperCase());return s}(),C=function(d){for(;d.length>1;){var w=d.pop(),u=w.obj[w.prop];if(k(u)){for(var r=[],o=0;o<u.length;++o)typeof u[o]!="undefined"&&r.push(u[o]);w.obj[w.prop]=r}}},b=function(d,w){for(var u=w&&w.plainObjects?Object.create(null):{},r=0;r<d.length;++r)typeof d[r]!="undefined"&&(u[r]=d[r]);return u},j=function s(d,w,u){if(!w)return d;if(typeof w!="object"){if(k(d))d.push(w);else if(d&&typeof d=="object")(u&&(u.plainObjects||u.allowPrototypes)||!R.call(Object.prototype,w))&&(d[w]=!0);else return[d,w];return d}if(!d||typeof d!="object")return[d].concat(w);var r=d;return k(d)&&!k(w)&&(r=b(d,u)),k(d)&&k(w)?(w.forEach(function(o,i){if(R.call(d,i)){var n=d[i];n&&typeof n=="object"&&o&&typeof o=="object"?d[i]=s(n,o,u):d.push(o)}else d[i]=o}),d):Object.keys(w).reduce(function(o,i){var n=w[i];return R.call(o,i)?o[i]=s(o[i],n,u):o[i]=n,o},r)},E=function(d,w){return Object.keys(w).reduce(function(u,r){return u[r]=w[r],u},d)},N=function(s,d,w){var u=s.replace(/\+/g," ");if(w==="iso-8859-1")return u.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(u)}catch(r){return u}},M=function(d,w,u,r,o){if(d.length===0)return d;var i=d;if(typeof d=="symbol"?i=Symbol.prototype.toString.call(d):typeof d!="string"&&(i=String(d)),u==="iso-8859-1")return escape(i).replace(/%u[0-9a-f]{4}/gi,function(P){return"%26%23"+parseInt(P.slice(2),16)+"%3B"});for(var n="",p=0;p<i.length;++p){var v=i.charCodeAt(p);if(v===45||v===46||v===95||v===126||v>=48&&v<=57||v>=65&&v<=90||v>=97&&v<=122||o===g.RFC1738&&(v===40||v===41)){n+=i.charAt(p);continue}if(v<128){n=n+S[v];continue}if(v<2048){n=n+(S[192|v>>6]+S[128|v&63]);continue}if(v<55296||v>=57344){n=n+(S[224|v>>12]+S[128|v>>6&63]+S[128|v&63]);continue}p+=1,v=65536+((v&1023)<<10|i.charCodeAt(p)&1023),n+=S[240|v>>18]+S[128|v>>12&63]+S[128|v>>6&63]+S[128|v&63]}return n},x=function(d){for(var w=[{obj:{o:d},prop:"o"}],u=[],r=0;r<w.length;++r)for(var o=w[r],i=o.obj[o.prop],n=Object.keys(i),p=0;p<n.length;++p){var v=n[p],P=i[v];typeof P=="object"&&P!==null&&u.indexOf(P)===-1&&(w.push({obj:i,prop:v}),u.push(P))}return C(w),d},I=function(d){return Object.prototype.toString.call(d)==="[object RegExp]"},A=function(d){return!d||typeof d!="object"?!1:!!(d.constructor&&d.constructor.isBuffer&&d.constructor.isBuffer(d))},f=function(d,w){return[].concat(d,w)},l=function(d,w){if(k(d)){for(var u=[],r=0;r<d.length;r+=1)u.push(w(d[r]));return u}return w(d)};m.exports={arrayToObject:b,assign:E,combine:f,compact:x,decode:N,encode:M,isBuffer:A,isRegExp:I,maybeMap:l,merge:j}},"../../node_modules/side-channel/index.js":function(m,t,_){var g=_("../../node_modules/get-intrinsic/index.js"),R=_("../../node_modules/call-bind/callBound.js"),k=_("../../node_modules/object-inspect/index.js"),S=g("%TypeError%"),C=g("%WeakMap%",!0),b=g("%Map%",!0),j=R("WeakMap.prototype.get",!0),E=R("WeakMap.prototype.set",!0),N=R("WeakMap.prototype.has",!0),M=R("Map.prototype.get",!0),x=R("Map.prototype.set",!0),I=R("Map.prototype.has",!0),A=function(d,w){for(var u=d,r;(r=u.next)!==null;u=r)if(r.key===w)return u.next=r.next,r.next=d.next,d.next=r,r},f=function(d,w){var u=A(d,w);return u&&u.value},l=function(d,w,u){var r=A(d,w);r?r.value=u:d.next={key:w,next:d.next,value:u}},s=function(d,w){return!!A(d,w)};m.exports=function(){var w,u,r,o={assert:function(i){if(!o.has(i))throw new S("Side channel does not contain "+k(i))},get:function(i){if(C&&i&&(typeof i=="object"||typeof i=="function")){if(w)return j(w,i)}else if(b){if(u)return M(u,i)}else if(r)return f(r,i)},has:function(i){if(C&&i&&(typeof i=="object"||typeof i=="function")){if(w)return N(w,i)}else if(b){if(u)return I(u,i)}else if(r)return s(r,i);return!1},set:function(i,n){C&&i&&(typeof i=="object"||typeof i=="function")?(w||(w=new C),E(w,i,n)):b?(u||(u=new b),x(u,i,n)):(r||(r={key:{},next:null}),l(r,i,n))}};return o}},"./src/feathers.ts":function(m,t,_){var g=this&&this.__createBinding||(Object.create?function(M,x,I,A){A===void 0&&(A=I),Object.defineProperty(M,A,{enumerable:!0,get:function(){return x[I]}})}:function(M,x,I,A){A===void 0&&(A=I),M[A]=x[I]}),R=this&&this.__setModuleDefault||(Object.create?function(M,x){Object.defineProperty(M,"default",{enumerable:!0,value:x})}:function(M,x){M.default=x}),k=this&&this.__exportStar||function(M,x){for(var I in M)I!=="default"&&!Object.prototype.hasOwnProperty.call(x,I)&&g(x,M,I)},S=this&&this.__importStar||function(M){if(M&&M.__esModule)return M;var x={};if(M!=null)for(var I in M)I!=="default"&&Object.prototype.hasOwnProperty.call(M,I)&&g(x,M,I);return R(x,M),x},C=this&&this.__importDefault||function(M){return M&&M.__esModule?M:{default:M}};Object.defineProperty(t,"__esModule",{value:!0}),t.socketio=t.rest=t.authentication=t.errors=void 0;const b=_("../feathers/lib/index.js"),j=C(_("../authentication-client/lib/index.js"));t.authentication=j.default;const E=C(_("../rest-client/lib/index.js"));t.rest=E.default;const N=C(_("../socketio-client/lib/index.js"));t.socketio=N.default,k(_("../feathers/lib/index.js"),t),t.errors=S(_("../errors/lib/index.js")),t.default=b.feathers,m.exports=Object.assign(b.feathers,m.exports)},"?c95a":function(){}},e={};function a(m){var t=e[m];if(t!==void 0)return t.exports;var _=e[m]={exports:{}};return h[m].call(_.exports,_,_.exports,a),_.exports}var c=a("./src/feathers.ts");return c}()})})(gr);var Pt=Lt(gr.exports);const zo=Re.publicRuntimeConfig.feathersStoreKey,kt=Re.publicRuntimeConfig.offlineMode?void 0:Pt();if(!Re.publicRuntimeConfig.offlineMode){const O=Go(Re.publicRuntimeConfig.apiServer,{withCredentials:!0});kt.configure(Pt.socketio(O,{timeout:1e4})),kt.configure(Pt.authentication({storageKey:zo}))}const Qo=kt;function Zo(O){if(typeof O!="string")throw new Error(Er(7));return O.charAt(0).toUpperCase()+O.slice(1)}export{Fe as A,Nr as _,Xo as a,Zo as b,Qo as c,Wo as d,pr as e,Ur as g,Uo as m,hr as u,Yo as w};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
