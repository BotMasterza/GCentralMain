import{g as Ut,k as $e,r as le,l as Lt,R as ae,u as Nt}from"./vendor.2a83d1c9.js";import{r as tt,P as Wt,A as zt}from"./index.8264432f.js";import{J as qt,K as Se,G as jt,b as Ht,M as $t,c as Gt}from"./_app.41131035.js";import{a as rt}from"./FeedService.c397da2d.js";import{P as nt}from"./PopupsStateService.ba82c5f8.js";import{A as it}from"./capitalize.75c82fb0.js";import{a as Xt}from"./Typography.a1510182.js";import{B as De}from"./Button.11e5af54.js";import{s as Yt}from"./index.module.d63a8143.js";import"./Slide.79bdeba3.js";import"./Paper.678a179e.js";import"./Modal.22c32aef.js";import"./Dialog.4b91e65c.js";import"./Backdrop.311b8a3e.js";import"./makeStyles.39fa1a38.js";import"./Avatar.a262805b.js";import"./index.b1c16674.js";import"./upload.d8a16837.js";var at={},ot={},ve=Ut(qt),xe={},Ge={},Te={},Xe={};(function(n){(function(i){var r="undefined",s=r!==typeof Buffer&&Buffer,c=r!==typeof Uint8Array&&Uint8Array,f=r!==typeof ArrayBuffer&&ArrayBuffer,y=[0,0,0,0,0,0,0,0],u=Array.isArray||F,k=4294967296,B=16777216,j;L("Uint64BE",!0,!0),L("Int64BE",!0,!1),L("Uint64LE",!1,!0),L("Int64LE",!1,!1);function L(p,v,w){var T=v?0:4,m=v?4:0,g=v?0:3,h=v?1:2,P=v?2:1,q=v?3:0,J=v?re:ne,Q=v?X:S,K=_.prototype,ie="is"+p,E="_"+ie;return K.buffer=void 0,K.offset=0,K[E]=!0,K.toNumber=M,K.toString=oe,K.toJSON=M,K.toArray=H,s&&(K.toBuffer=W),c&&(K.toArrayBuffer=R),_[ie]=D,i[p]=_,_;function _(C,I,O,V){return this instanceof _?l(this,C,I,O,V):new _(C,I,O,V)}function D(C){return!!(C&&C[E])}function l(C,I,O,V,U){if(c&&f&&(I instanceof f&&(I=new c(I)),V instanceof f&&(V=new c(V))),!I&&!O&&!V&&!j){C.buffer=Y(y,0);return}if(!N(I,O)){var ee=j||Array;U=O,V=I,O=0,I=new ee(8)}C.buffer=I,C.offset=O|=0,r!==typeof V&&(typeof V=="string"?$(I,O,V,U||10):N(V,U)?z(I,O,V,U):typeof U=="number"?(A(I,O+T,V),A(I,O+m,U)):V>0?J(I,O,V):V<0?Q(I,O,V):z(I,O,y,0))}function $(C,I,O,V){var U=0,ee=O.length,ce=0,a=0;O[0]==="-"&&U++;for(var e=U;U<ee;){var t=parseInt(O[U++],V);if(!(t>=0))break;a=a*V+t,ce=ce*V+Math.floor(a/k),a%=k}e&&(ce=~ce,a?a=k-a:ce++),A(C,I+T,ce),A(C,I+m,a)}function M(){var C=this.buffer,I=this.offset,O=G(C,I+T),V=G(C,I+m);return w||(O|=0),O?O*k+V:V}function oe(C){var I=this.buffer,O=this.offset,V=G(I,O+T),U=G(I,O+m),ee="",ce=!w&&V&2147483648;for(ce&&(V=~V,U=k-U),C=C||10;;){var a=V%C*k+U;if(V=Math.floor(V/C),U=Math.floor(a/C),ee=(a%C).toString(C)+ee,!V&&!U)break}return ce&&(ee="-"+ee),ee}function A(C,I,O){C[I+q]=O&255,O=O>>8,C[I+P]=O&255,O=O>>8,C[I+h]=O&255,O=O>>8,C[I+g]=O&255}function G(C,I){return C[I+g]*B+(C[I+h]<<16)+(C[I+P]<<8)+C[I+q]}}function H(p){var v=this.buffer,w=this.offset;return j=null,p!==!1&&w===0&&v.length===8&&u(v)?v:Y(v,w)}function W(p){var v=this.buffer,w=this.offset;if(j=s,p!==!1&&w===0&&v.length===8&&Buffer.isBuffer(v))return v;var T=new s(8);return z(T,0,v,w),T}function R(p){var v=this.buffer,w=this.offset,T=v.buffer;if(j=c,p!==!1&&w===0&&T instanceof f&&T.byteLength===8)return T;var m=new c(8);return z(m,0,v,w),m.buffer}function N(p,v){var w=p&&p.length;return v|=0,w&&v+8<=w&&typeof p[v]!="string"}function z(p,v,w,T){v|=0,T|=0;for(var m=0;m<8;m++)p[v++]=w[T++]&255}function Y(p,v){return Array.prototype.slice.call(p,v,v+8)}function re(p,v,w){for(var T=v+8;T>v;)p[--T]=w&255,w/=256}function X(p,v,w){var T=v+8;for(w++;T>v;)p[--T]=-w&255^255,w/=256}function ne(p,v,w){for(var T=v+8;v<T;)p[v++]=w&255,w/=256}function S(p,v,w){var T=v+8;for(w++;v<T;)p[v++]=-w&255^255,w/=256}function F(p){return!!p&&Object.prototype.toString.call(p)=="[object Array]"}})(typeof n.nodeName!="string"?n:$e||{})})(Xe);var Ne={},Ye={128:{name:"ChapterDisplay",level:4,type:"m",multiple:!0,minver:1,webm:!0,description:"Contains all possible strings to use for the chapter display."},131:{name:"TrackType",level:3,type:"u",mandatory:!0,minver:1,range:"1-254",description:"A set of track types coded on 8 bits (1: video, 2: audio, 3: complex, 0x10: logo, 0x11: subtitle, 0x12: buttons, 0x20: control)."},133:{name:"ChapString",cppname:"ChapterString",level:5,type:"8",mandatory:!0,minver:1,webm:!0,description:"Contains the string to use as the chapter atom."},134:{name:"CodecID",level:3,type:"s",mandatory:!0,minver:1,description:"An ID corresponding to the codec, see the codec page for more info."},136:{name:"FlagDefault",cppname:"TrackFlagDefault",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if that track (audio, video or subs) SHOULD be active if no language found matches the user preference. (1 bit)"},137:{name:"ChapterTrackNumber",level:5,type:"u",mandatory:!0,multiple:!0,minver:1,webm:!1,range:"not 0",description:"UID of the Track to apply this chapter too. In the absense of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks. Absense of this element indicates that the Chapter should be applied to any currently used Tracks."},145:{name:"ChapterTimeStart",level:4,type:"u",mandatory:!0,minver:1,webm:!0,description:"Timestamp of the start of Chapter (not scaled)."},146:{name:"ChapterTimeEnd",level:4,type:"u",minver:1,webm:!1,description:"Timestamp of the end of Chapter (timestamp excluded, not scaled)."},150:{name:"CueRefTime",level:5,type:"u",mandatory:!0,minver:2,webm:!1,description:"Timestamp of the referenced Block."},151:{name:"CueRefCluster",level:5,type:"u",mandatory:!0,webm:!1,description:"The Position of the Cluster containing the referenced Block."},152:{name:"ChapterFlagHidden",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a chapter is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},16980:{name:"ContentCompAlgo",level:6,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The compression algorithm used. Algorithms that have been specified so far are: 0 - zlib,   3 - Header Stripping"},16981:{name:"ContentCompSettings",level:6,type:"b",minver:1,webm:!1,description:"Settings that might be needed by the decompressor. For Header Stripping (ContentCompAlgo=3), the bytes that were removed from the beggining of each frames of the track."},17026:{name:"DocType",level:1,type:"s",mandatory:!0,default:"matroska",minver:1,description:"A string that describes the type of document that follows this EBML header. 'matroska' in our case or 'webm' for webm files."},17029:{name:"DocTypeReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum DocType version an interpreter has to support to read this file."},17030:{name:"EBMLVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of EBML parser used to create the file."},17031:{name:"DocTypeVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of DocType interpreter used to create the file."},17476:{name:"SegmentFamily",level:2,type:"b",multiple:!0,minver:1,webm:!1,bytesize:16,description:"A randomly generated unique ID that all segments related to each other must use (128 bits)."},17505:{name:"DateUTC",level:2,type:"d",minver:1,description:"Date of the origin of timestamp (value 0), i.e. production date."},17540:{name:"TagDefault",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Indication to know if this is the default/original language to use for the given tag. (1 bit)"},17541:{name:"TagBinary",level:4,type:"b",minver:1,webm:!1,description:"The values of the Tag if it is binary. Note that this cannot be used in the same SimpleTag as TagString."},17543:{name:"TagString",level:4,type:"8",minver:1,webm:!1,description:"The value of the Element."},17545:{name:"Duration",level:2,type:"f",minver:1,range:"> 0",description:"Duration of the segment (based on TimecodeScale)."},17816:{name:"ChapterFlagEnabled",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Specify wether the chapter is enabled. It can be enabled/disabled by a Control Track. When disabled, the movie should skip all the content between the TimeStart and TimeEnd of this chapter (see flag notes). (1 bit)"},18016:{name:"FileMimeType",level:3,type:"s",mandatory:!0,minver:1,webm:!1,description:"MIME type of the file."},18017:{name:"FileUsedStartTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18018:{name:"FileUsedEndTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18037:{name:"FileReferral",level:3,type:"b",webm:!1,description:"A binary value that a track/codec can refer to when the attachment is needed."},20529:{name:"ContentEncodingOrder",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Tells when this modification was used during encoding/muxing starting with 0 and counting upwards. The decoder/demuxer has to start with the highest order number it finds and work its way down. This value has to be unique over all ContentEncodingOrder elements in the segment."},20530:{name:"ContentEncodingScope",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"A bit field that describes which elements have been modified in this way. Values (big endian) can be OR'ed. Possible values: 1 - all frame contents, 2 - the track's private data, 4 - the next ContentEncoding (next ContentEncodingOrder. Either the data inside ContentCompression and/or ContentEncryption)"},20531:{name:"ContentEncodingType",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"A value describing what kind of transformation has been done. Possible values: 0 - compression, 1 - encryption"},20532:{name:"ContentCompression",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the compression used. Must be present if the value of ContentEncodingType is 0 and absent otherwise. Each block must be decompressable even if no previous block is available in order not to prevent seeking."},20533:{name:"ContentEncryption",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the encryption used. Must be present if the value of ContentEncodingType is 1 and absent otherwise."},21368:{name:"CueBlockNumber",level:4,type:"u",minver:1,default:1,range:"not 0",description:"Number of the Block in the specified Cluster."},22100:{name:"ChapterStringUID",level:4,type:"8",mandatory:!1,minver:3,webm:!0,description:"A unique string ID to identify the Chapter. Use for WebVTT cue identifier storage."},22337:{name:"WritingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Writing application ("mkvmerge-0.3.3").'},22612:{name:"SilentTracks",cppname:"ClusterSilentTracks",level:2,type:"m",minver:1,webm:!1,description:"The list of tracks that are not used in that part of the stream. It is useful when using overlay tracks on seeking. Then you should decide what track to use."},25152:{name:"ContentEncoding",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Settings for one content encoding like compression or encryption."},25188:{name:"BitDepth",cppname:"AudioBitDepth",level:4,type:"u",minver:1,range:"not 0",description:"Bits per sample, mostly used for PCM."},25906:{name:"SignedElement",level:3,type:"b",multiple:!0,webm:!1,description:"An element ID whose data will be used to compute the signature."},26148:{name:"TrackTranslate",level:3,type:"m",multiple:!0,minver:1,webm:!1,description:"The track identification for the given Chapter Codec."},26897:{name:"ChapProcessCommand",cppname:"ChapterProcessCommand",level:5,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26914:{name:"ChapProcessTime",cppname:"ChapterProcessTime",level:6,type:"u",mandatory:!0,minver:1,webm:!1,description:"Defines when the process command should be handled (0: during the whole chapter, 1: before starting playback, 2: after playback of the chapter)."},26916:{name:"ChapterTranslate",level:2,type:"m",multiple:!0,minver:1,webm:!1,description:"A tuple of corresponding ID used by chapter codecs to represent this segment."},26931:{name:"ChapProcessData",cppname:"ChapterProcessData",level:6,type:"b",mandatory:!0,minver:1,webm:!1,description:"Contains the command information. The data should be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1, the data correspond to the binary DVD cell pre/post commands."},26948:{name:"ChapProcess",cppname:"ChapterProcess",level:4,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26965:{name:"ChapProcessCodecID",cppname:"ChapterProcessCodecID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Contains the type of the codec used for the processing. A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used. More codec IDs can be added later."},29555:{name:"Tag",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters."},29572:{name:"SegmentFilename",level:2,type:"8",minver:1,webm:!1,description:"A filename corresponding to this segment."},29766:{name:"AttachmentLink",cppname:"TrackAttachmentLink",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"The UID of an attachment that is used by this codec."},2459272:{name:"CodecName",level:3,type:"8",minver:1,description:"A human-readable string specifying the codec."},408125543:{name:"Segment",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"This element contains all other top-level (level 1) elements. Typically a Matroska file is composed of 1 segment."},17530:{name:"TagLanguage",level:4,type:"s",mandatory:!0,minver:1,webm:!1,default:"und",description:"Specifies the language of the tag specified, in the Matroska languages form."},17827:{name:"TagName",level:4,type:"8",mandatory:!0,minver:1,webm:!1,description:"The name of the Tag that is going to be stored."},26568:{name:"SimpleTag",cppname:"TagSimple",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contains general information about the target."},25542:{name:"TagAttachmentUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Attachment(s) the tags belong to. If the value is 0 at this level, the tags apply to all the attachments in the Segment."},25540:{name:"TagChapterUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Chapter(s) the tags belong to. If the value is 0 at this level, the tags apply to all chapters in the Segment."},25545:{name:"TagEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the EditionEntry(s) the tags belong to. If the value is 0 at this level, the tags apply to all editions in the Segment."},25541:{name:"TagTrackUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Track(s) the tags belong to. If the value is 0 at this level, the tags apply to all tracks in the Segment."},25546:{name:"TargetType",cppname:"TagTargetType",level:4,type:"s",minver:1,webm:!1,strong:"informational",description:'An  string that can be used to display the logical level of the target like "ALBUM", "TRACK", "MOVIE", "CHAPTER", etc (see TargetType).'},26826:{name:"TargetTypeValue",cppname:"TagTargetTypeValue",level:4,type:"u",minver:1,webm:!1,default:50,description:"A number to indicate the logical level of the target (see TargetType)."},25536:{name:"Targets",cppname:"TagTargets",level:3,type:"m",mandatory:!0,minver:1,webm:!1,description:"Contain all UIDs where the specified meta data apply. It is empty to describe everything in the segment."},307544935:{name:"Tags",level:1,type:"m",multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters. A list of valid tags can be found here."},17677:{name:"ChapProcessPrivate",cppname:"ChapterProcessPrivate",level:5,type:"b",minver:1,webm:!1,description:'Some optional data attached to the ChapProcessCodecID information. For ChapProcessCodecID = 1, it is the "DVD level" equivalent.'},17278:{name:"ChapCountry",cppname:"ChapterCountry",level:5,type:"s",multiple:!0,minver:1,webm:!1,description:"The countries corresponding to the string, same 2 octets as in Internet domains."},17276:{name:"ChapLanguage",cppname:"ChapterLanguage",level:5,type:"s",mandatory:!0,multiple:!0,minver:1,webm:!0,default:"eng",description:"The languages corresponding to the string, in the bibliographic ISO-639-2 form."},143:{name:"ChapterTrack",level:4,type:"m",minver:1,webm:!1,description:"List of tracks on which the chapter applies. If this element is not present, all tracks apply"},25539:{name:"ChapterPhysicalEquiv",level:4,type:"u",minver:1,webm:!1,description:'Specify the physical equivalent of this ChapterAtom like "DVD" (60) or "SIDE" (50), see complete list of values.'},28348:{name:"ChapterSegmentEditionUID",level:4,type:"u",minver:1,webm:!1,range:"not 0",description:"The EditionUID to play from the segment linked in ChapterSegmentUID."},28263:{name:"ChapterSegmentUID",level:4,type:"b",minver:1,webm:!1,range:">0",bytesize:16,description:"A segment to play in place of this chapter. Edition ChapterSegmentEditionUID should be used for this segment, otherwise no edition is used."},29636:{name:"ChapterUID",level:4,type:"u",mandatory:!0,minver:1,webm:!0,range:"not 0",description:"A unique ID to identify the Chapter."},182:{name:"ChapterAtom",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains the atom information to use as the chapter atom (apply to all tracks)."},17885:{name:"EditionFlagOrdered",level:3,type:"u",minver:1,webm:!1,default:0,range:"0-1",description:"Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)"},17883:{name:"EditionFlagDefault",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a flag is set (1) the edition should be used as the default one. (1 bit)"},17853:{name:"EditionFlagHidden",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If an edition is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},17852:{name:"EditionUID",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"A unique ID to identify the edition. It's useful for tagging an edition."},17849:{name:"EditionEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains all information about a segment edition."},272869232:{name:"Chapters",level:1,type:"m",minver:1,webm:!0,description:"A system to define basic menus and partition data. For more detailed information, look at the Chapters Explanation."},18094:{name:"FileUID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,range:"not 0",description:"Unique ID representing the file, as random as possible."},18012:{name:"FileData",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The data of the file."},18030:{name:"FileName",level:3,type:"8",mandatory:!0,minver:1,webm:!1,description:"Filename of the attached file."},18046:{name:"FileDescription",level:3,type:"8",minver:1,webm:!1,description:"A human-friendly name for the attached file."},24999:{name:"AttachedFile",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"An attached file."},423732329:{name:"Attachments",level:1,type:"m",minver:1,webm:!1,description:"Contain attached files."},235:{name:"CueRefCodecState",level:5,type:"u",webm:!1,default:0,description:"The position of the Codec State corresponding to this referenced element. 0 means that the data is taken from the initial Track Entry."},21343:{name:"CueRefNumber",level:5,type:"u",webm:!1,default:1,range:"not 0",description:"Number of the referenced Block of Track X in the specified Cluster."},219:{name:"CueReference",level:4,type:"m",multiple:!0,minver:2,webm:!1,description:"The Clusters containing the required referenced Blocks."},234:{name:"CueCodecState",level:4,type:"u",minver:2,webm:!1,default:0,description:"The position of the Codec State corresponding to this Cue element. 0 means that the data is taken from the initial Track Entry."},178:{name:"CueDuration",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The duration of the block according to the segment time base. If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues."},240:{name:"CueRelativePosition",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The relative position of the referenced block inside the cluster with 0 being the first possible position for an element inside that cluster.",position:"clusterRelative"},241:{name:"CueClusterPosition",level:4,type:"u",mandatory:!0,minver:1,description:"The position of the Cluster containing the required Block.",position:"segment"},247:{name:"CueTrack",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track for which a position is given."},183:{name:"CueTrackPositions",level:3,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contain positions for different tracks corresponding to the timestamp."},179:{name:"CueTime",level:3,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp according to the segment time base."},187:{name:"CuePoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains all information relative to a seek point in the segment."},475249515:{name:"Cues",level:1,type:"m",minver:1,description:'A top-level element to speed seeking access. All entries are local to the segment. Should be mandatory for non "live" streams.'},18406:{name:"ContentSigHashAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The hash algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - SHA1-160 2 - MD5"},18405:{name:"ContentSigAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - RSA"},18404:{name:"ContentSigKeyID",level:6,type:"b",minver:1,webm:!1,description:"This is the ID of the private key the data was signed with."},18403:{name:"ContentSignature",level:6,type:"b",minver:1,webm:!1,description:"A cryptographic signature of the contents."},18402:{name:"ContentEncKeyID",level:6,type:"b",minver:1,webm:!1,description:"For public key algorithms this is the ID of the public key the the data was encrypted with."},18401:{name:"ContentEncAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The encryption algorithm used. The value '0' means that the contents have not been encrypted but only signed. Predefined values: 1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 - AES"},28032:{name:"ContentEncodings",level:3,type:"m",minver:1,webm:!1,description:"Settings for several content encoding mechanisms like compression or encryption."},196:{name:"TrickMasterTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},199:{name:"TrickMasterTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},198:{name:"TrickTrackFlag",level:3,type:"u",divx:!0,default:0,description:"DivX trick track extenstions"},193:{name:"TrickTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},192:{name:"TrickTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},237:{name:"TrackJoinUID",level:5,type:"u",mandatory:!0,multiple:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of a track whose blocks are used to create this virtual track."},233:{name:"TrackJoinBlocks",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all tracks whose Blocks need to be combined to create this virtual track"},230:{name:"TrackPlaneType",level:6,type:"u",mandatory:!0,minver:3,webm:!1,description:"The kind of plane this track corresponds to (0: left eye, 1: right eye, 2: background)."},229:{name:"TrackPlaneUID",level:6,type:"u",mandatory:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of the track representing the plane."},228:{name:"TrackPlane",level:5,type:"m",mandatory:!0,multiple:!0,minver:3,webm:!1,description:"Contains a video plane track that need to be combined to create this 3D track"},227:{name:"TrackCombinePlanes",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all video plane tracks that need to be combined to create this 3D track"},226:{name:"TrackOperation",level:3,type:"m",minver:3,webm:!1,description:"Operation that needs to be applied on tracks to create this virtual track. For more details look at the Specification Notes on the subject."},32123:{name:"ChannelPositions",cppname:"AudioPosition",level:4,type:"b",webm:!1,description:"Table of horizontal angles for each successive channel, see appendix."},159:{name:"Channels",cppname:"AudioChannels",level:4,type:"u",mandatory:!0,minver:1,default:1,range:"not 0",description:"Numbers of channels in the track."},30901:{name:"OutputSamplingFrequency",cppname:"AudioOutputSamplingFreq",level:4,type:"f",minver:1,default:"Sampling Frequency",range:"> 0",description:"Real output sampling frequency in Hz (used for SBR techniques)."},181:{name:"SamplingFrequency",cppname:"AudioSamplingFreq",level:4,type:"f",mandatory:!0,minver:1,default:8e3,range:"> 0",description:"Sampling frequency in Hz."},225:{name:"Audio",cppname:"TrackAudio",level:3,type:"m",minver:1,description:"Audio settings."},2327523:{name:"FrameRate",cppname:"VideoFrameRate",level:4,type:"f",range:"> 0",strong:"Informational",description:"Number of frames per second.  only."},3126563:{name:"GammaValue",cppname:"VideoGamma",level:4,type:"f",webm:!1,range:"> 0",description:"Gamma Value."},3061028:{name:"ColourSpace",cppname:"VideoColourSpace",level:4,type:"b",minver:1,webm:!1,bytesize:4,description:"Same value as in AVI (32 bits)."},21683:{name:"AspectRatioType",cppname:"VideoAspectRatio",level:4,type:"u",minver:1,default:0,description:"Specify the possible modifications to the aspect ratio (0: free resizing, 1: keep aspect ratio, 2: fixed)."},21682:{name:"DisplayUnit",cppname:"VideoDisplayUnit",level:4,type:"u",minver:1,default:0,description:"How DisplayWidth & DisplayHeight should be interpreted (0: pixels, 1: centimeters, 2: inches, 3: Display Aspect Ratio)."},21690:{name:"DisplayHeight",cppname:"VideoDisplayHeight",level:4,type:"u",minver:1,default:"PixelHeight",range:"not 0",description:"Height of the video frames to display. The default value is only valid when DisplayUnit is 0."},21680:{name:"DisplayWidth",cppname:"VideoDisplayWidth",level:4,type:"u",minver:1,default:"PixelWidth",range:"not 0",description:"Width of the video frames to display. The default value is only valid when DisplayUnit is 0."},21725:{name:"PixelCropRight",cppname:"VideoPixelCropRight",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the right of the image."},21708:{name:"PixelCropLeft",cppname:"VideoPixelCropLeft",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the left of the image."},21691:{name:"PixelCropTop",cppname:"VideoPixelCropTop",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the top of the image."},21674:{name:"PixelCropBottom",cppname:"VideoPixelCropBottom",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the bottom of the image (for HDTV content)."},186:{name:"PixelHeight",cppname:"VideoPixelHeight",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Height of the encoded video frames in pixels."},176:{name:"PixelWidth",cppname:"VideoPixelWidth",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Width of the encoded video frames in pixels."},21433:{name:"OldStereoMode",level:4,type:"u",maxver:"0",webm:!1,divx:!1,description:"DEPRECATED, DO NOT USE. Bogus StereoMode value used in old versions of libmatroska. (0: mono, 1: right eye, 2: left eye, 3: both eyes)."},21440:{name:"AlphaMode",cppname:"VideoAlphaMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Alpha Video Mode. Presence of this element indicates that the BlockAdditional element could contain Alpha data."},21432:{name:"StereoMode",cppname:"VideoStereoMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Stereo-3D video mode (0: mono, 1: side by side (left eye is first), 2: top-bottom (right eye is first), 3: top-bottom (left eye is first), 4: checkboard (right is first), 5: checkboard (left is first), 6: row interleaved (right is first), 7: row interleaved (left is first), 8: column interleaved (right is first), 9: column interleaved (left is first), 10: anaglyph (cyan/red), 11: side by side (right eye is first), 12: anaglyph (green/magenta), 13 both eyes laced in one Block (left eye is first), 14 both eyes laced in one Block (right eye is first)) . There are some more details on 3D support in the Specification Notes."},154:{name:"FlagInterlaced",cppname:"VideoFlagInterlaced",level:4,type:"u",mandatory:!0,minver:2,webm:!0,default:0,range:"0-1",description:"Set if the video is interlaced. (1 bit)"},224:{name:"Video",cppname:"TrackVideo",level:3,type:"m",minver:1,description:"Video settings."},26277:{name:"TrackTranslateTrackID",level:4,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this track in the chapter codec data. The format depends on the ChapProcessCodecID used."},26303:{name:"TrackTranslateCodec",level:4,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},26364:{name:"TrackTranslateEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this translation applies. When not specified, it means for all editions found in the segment."},22203:{name:"SeekPreRoll",level:3,type:"u",mandatory:!0,multiple:!1,default:0,minver:4,webm:!0,description:"After a discontinuity, SeekPreRoll is the duration in nanoseconds of the data the decoder must decode before the decoded data is valid."},22186:{name:"CodecDelay",level:3,type:"u",multiple:!1,default:0,minver:4,webm:!0,description:"CodecDelay is The codec-built-in delay in nanoseconds. This value must be subtracted from each block timestamp in order to get the actual timestamp. The value should be small so the muxing of tracks with the same actual timestamp are in the same Cluster."},28587:{name:"TrackOverlay",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify that this track is an overlay track for the Track specified (in the u-integer). That means when this track has a gap (see SilentTracks) the overlay track should be used instead. The order of multiple TrackOverlay matters, the first one is the one that should be used. If not found it should be the second, etc."},170:{name:"CodecDecodeAll",level:3,type:"u",mandatory:!0,minver:2,webm:!1,default:1,range:"0-1",description:"The codec can decode potentially damaged data (1 bit)."},2536e3:{name:"CodecDownloadURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to download about the codec used."},3883072:{name:"CodecInfoURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to find information about the codec used."},3839639:{name:"CodecSettings",level:3,type:"8",webm:!1,description:"A string describing the encoding setting used."},25506:{name:"CodecPrivate",level:3,type:"b",minver:1,description:"Private data only known to the codec."},2274716:{name:"Language",cppname:"TrackLanguage",level:3,type:"s",minver:1,default:"eng",description:"Specifies the language of the track in the Matroska languages form."},21358:{name:"Name",cppname:"TrackName",level:3,type:"8",minver:1,description:"A human-readable track name."},21998:{name:"MaxBlockAdditionID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The maximum value of BlockAdditions for this track."},21375:{name:"TrackOffset",level:3,type:"i",webm:!1,default:0,description:"A value to add to the Block's Timestamp. This can be used to adjust the playback offset of a track."},2306383:{name:"TrackTimecodeScale",level:3,type:"f",mandatory:!0,minver:1,maxver:"3",webm:!1,default:1,range:"> 0",description:"DEPRECATED, DO NOT USE. The scale to apply on this track to work at normal speed in relation with other tracks (mostly used to adjust video speed when the audio length differs)."},2313850:{name:"DefaultDecodedFieldDuration",cppname:"TrackDefaultDecodedFieldDuration",level:3,type:"u",minver:4,range:"not 0",description:`The period in nanoseconds (not scaled by TimcodeScale)
between two successive fields at the output of the decoding process (see the notes)`},2352003:{name:"DefaultDuration",cppname:"TrackDefaultDuration",level:3,type:"u",minver:1,range:"not 0",description:"Number of nanoseconds (not scaled via TimecodeScale) per frame ('frame' in the Matroska sense -- one element put into a (Simple)Block)."},28152:{name:"MaxCache",cppname:"TrackMaxCache",level:3,type:"u",minver:1,webm:!1,description:"The maximum cache size required to store referenced frames in and the current frame. 0 means no cache is needed."},28135:{name:"MinCache",cppname:"TrackMinCache",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The minimum number of frames a player should be able to cache during playback. If set to 0, the reference pseudo-cache system is not used."},156:{name:"FlagLacing",cppname:"TrackFlagLacing",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if the track may contain blocks using lacing. (1 bit)"},21930:{name:"FlagForced",cppname:"TrackFlagForced",level:3,type:"u",mandatory:!0,minver:1,default:0,range:"0-1",description:"Set if that track MUST be active during playback. There can be many forced track for a kind (audio, video or subs), the player should select the one which language matches the user preference or the default + forced track. Overlay MAY happen between a forced and non-forced track of the same kind. (1 bit)"},185:{name:"FlagEnabled",cppname:"TrackFlagEnabled",level:3,type:"u",mandatory:!0,minver:2,webm:!0,default:1,range:"0-1",description:"Set if the track is usable. (1 bit)"},29637:{name:"TrackUID",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"A unique ID to identify the Track. This should be kept the same when making a direct stream copy of the Track to another file."},215:{name:"TrackNumber",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track number as used in the Block Header (using more than 127 tracks is not encouraged, though the design allows an unlimited number)."},174:{name:"TrackEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Describes a track with all elements."},374648427:{name:"Tracks",level:1,type:"m",multiple:!0,minver:1,description:"A top-level block of information with many tracks described."},175:{name:"EncryptedBlock",level:2,type:"b",multiple:!0,webm:!1,description:"Similar to EncryptedBlock Structure)"},202:{name:"ReferenceTimeCode",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},201:{name:"ReferenceOffset",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},200:{name:"ReferenceFrame",level:3,type:"m",multiple:!1,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},207:{name:"SliceDuration",level:5,type:"u",default:0,description:"The (scaled) duration to apply to the element."},206:{name:"Delay",cppname:"SliceDelay",level:5,type:"u",default:0,description:"The (scaled) delay to apply to the element."},203:{name:"BlockAdditionID",cppname:"SliceBlockAddID",level:5,type:"u",default:0,description:"The ID of the BlockAdditional element (0 is the main Block)."},205:{name:"FrameNumber",cppname:"SliceFrameNumber",level:5,type:"u",default:0,description:"The number of the frame to generate from this lace with this delay (allow you to generate many frames from the same Block/Frame)."},204:{name:"LaceNumber",cppname:"SliceLaceNumber",level:5,type:"u",minver:1,default:0,divx:!1,description:"The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc). While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},232:{name:"TimeSlice",level:4,type:"m",multiple:!0,minver:1,divx:!1,description:"Contains extra time information about the data contained in the Block. While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},142:{name:"Slices",level:3,type:"m",minver:1,divx:!1,description:"Contains slices description."},30114:{name:"DiscardPadding",level:3,type:"i",minver:4,webm:!0,description:"Duration in nanoseconds of the silent data added to the Block (padding at the end of the Block for positive value, at the beginning of the Block for negative value). The duration of DiscardPadding is not calculated in the duration of the TrackEntry and should be discarded during playback."},164:{name:"CodecState",level:3,type:"b",minver:2,webm:!1,description:"The new codec state to use. Data interpretation is private to the codec. This information should always be referenced by a seek entry."},253:{name:"ReferenceVirtual",level:3,type:"i",webm:!1,description:"Relative position of the data that should be in position of the virtual block."},251:{name:"ReferenceBlock",level:3,type:"i",multiple:!0,minver:1,description:"Timestamp of another frame used as a reference (ie: B or P frame). The timestamp is relative to the block it's attached to."},250:{name:"ReferencePriority",cppname:"FlagReferenced",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"This frame is referenced and has the specified cache priority. In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced."},155:{name:"BlockDuration",level:3,type:"u",minver:1,default:"TrackDuration",description:'The duration of the Block (based on TimecodeScale). This element is mandatory when DefaultDuration is set for the track (but can be omitted as other default values). When not written and with no DefaultDuration, the value is assumed to be the difference between the timestamp of this Block and the timestamp of the next Block in "display" order (not coding order). This element can be useful at the end of a Track (as there is not other Block available), or when there is a break in a track like for subtitle tracks. When set to 0 that means the frame is not a keyframe.'},165:{name:"BlockAdditional",level:5,type:"b",mandatory:!0,minver:1,webm:!1,description:"Interpreted by the codec as it wishes (using the BlockAddID)."},238:{name:"BlockAddID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"An ID to identify the BlockAdditional level."},166:{name:"BlockMore",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contain the BlockAdditional and some parameters."},30113:{name:"BlockAdditions",level:3,type:"m",minver:1,webm:!1,description:"Contain additional blocks to complete the main one. An EBML parser that has no knowledge of the Block structure could still see and use/skip these data."},162:{name:"BlockVirtual",level:3,type:"b",webm:!1,description:"A Block with no data. It must be stored in the stream at the place the real Block should be in display order. (see Block Virtual)"},161:{name:"Block",level:3,type:"b",mandatory:!0,minver:1,description:"Block containing the actual data to be rendered and a timestamp relative to the Cluster Timecode. (see Block Structure)"},160:{name:"BlockGroup",level:2,type:"m",multiple:!0,minver:1,description:"Basic container of information containing a single Block or BlockVirtual, and information specific to that Block/VirtualBlock."},163:{name:"SimpleBlock",level:2,type:"b",multiple:!0,minver:2,webm:!0,divx:!0,description:"Similar to SimpleBlock Structure"},171:{name:"PrevSize",cppname:"ClusterPrevSize",level:2,type:"u",minver:1,description:"Size of the previous Cluster, in octets. Can be useful for backward playing.",position:"prevCluster"},167:{name:"Position",cppname:"ClusterPosition",level:2,type:"u",minver:1,webm:!1,description:"The Position of the Cluster in the segment (0 in live broadcast streams). It might help to resynchronise offset on damaged streams.",position:"segment"},22743:{name:"SilentTrackNumber",cppname:"ClusterSilentTrackNumber",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"One of the track number that are not used from now on in the stream. It could change later if not specified as silent in a further Cluster."},231:{name:"Timecode",cppname:"ClusterTimecode",level:2,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp of the cluster (based on TimecodeScale)."},524531317:{name:"Cluster",level:1,type:"m",multiple:!0,minver:1,description:"The lower level element containing the (monolithic) Block structure."},19840:{name:"MuxingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Muxing application or library ("libmatroska-0.4.3").'},31657:{name:"Title",level:2,type:"8",minver:1,webm:!1,description:"General name of the segment."},2807730:{name:"TimecodeScaleDenominator",level:2,type:"u",mandatory:!0,minver:4,default:"1000000000",description:"Timestamp scale numerator, see TimecodeScale."},2807729:{name:"TimecodeScale",level:2,type:"u",mandatory:!0,minver:1,default:"1000000",description:"Timestamp scale in nanoseconds (1.000.000 means all timestamps in the segment are expressed in milliseconds)."},27045:{name:"ChapterTranslateID",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this segment in the chapter codec data. The format depends on the ChapProcessCodecID used."},27071:{name:"ChapterTranslateCodec",level:3,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},27132:{name:"ChapterTranslateEditionUID",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this correspondance applies. When not specified, it means for all editions found in the segment."},4096955:{name:"NextFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the next segment."},4110627:{name:"NextUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the next chained segment (128 bits)."},3965867:{name:"PrevFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the previous segment."},3979555:{name:"PrevUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the previous chained segment (128 bits)."},29604:{name:"SegmentUID",level:2,type:"b",minver:1,webm:!1,range:"not 0",bytesize:16,description:"A randomly generated unique ID to identify the current segment between many others (128 bits)."},357149030:{name:"Info",level:1,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains miscellaneous general information and statistics on the file."},21420:{name:"SeekPosition",level:3,type:"u",mandatory:!0,minver:1,description:"The position of the element in the segment in octets (0 = first level 1 element).",position:"segment"},21419:{name:"SeekID",level:3,type:"b",mandatory:!0,minver:1,description:"The binary ID corresponding to the element name.",type2:"ebmlID"},19899:{name:"Seek",cppname:"SeekPoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains a single seek entry to an EBML element."},290298740:{name:"SeekHead",cppname:"SeekHeader",level:1,type:"m",multiple:!0,minver:1,description:"Contains the position of other level 1 elements."},32379:{name:"SignatureElementList",level:2,type:"m",multiple:!0,webm:!1,i:"Cluster|Block|BlockAdditional",description:"A list consists of a number of consecutive elements that represent one case where data is used in signature. Ex:  means that the BlockAdditional of all Blocks in all Clusters is used for encryption."},32347:{name:"SignatureElements",level:1,type:"m",webm:!1,description:"Contains elements that will be used to compute the signature."},32437:{name:"Signature",level:1,type:"b",webm:!1,description:"The signature of the data (until a new."},32421:{name:"SignaturePublicKey",level:1,type:"b",webm:!1,description:"The public key to use with the algorithm (in the case of a PKI-based signature)."},32410:{name:"SignatureHash",level:1,type:"u",webm:!1,description:"Hash algorithm used (1=SHA1-160, 2=MD5)."},32394:{name:"SignatureAlgo",level:1,type:"u",webm:!1,description:"Signature algorithm used (1=RSA, 2=elliptic)."},458458727:{name:"SignatureSlot",level:-1,type:"m",multiple:!0,webm:!1,description:"Contain signature of some (coming) elements in the stream."},191:{name:"CRC-32",level:-1,type:"b",minver:1,webm:!1,description:"The CRC is computed on all the data of the Master element it's in. The CRC element should be the first in it's parent master for easier reading. All level 1 elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian",crc:!0},236:{name:"Void",level:-1,type:"b",minver:1,description:"Used to void damaged data, to avoid unexpected behaviors when using damaged data. The content is discarded. Also used to reserve space in a sub-element for later use."},17139:{name:"EBMLMaxSizeLength",level:1,type:"u",mandatory:!0,default:8,minver:1,description:"The maximum length of the sizes you'll find in this file (8 or less in Matroska). This does not override the element size indicated at the beginning of an element. Elements that have an indicated size which is larger than what is allowed by EBMLMaxSizeLength shall be considered invalid."},17138:{name:"EBMLMaxIDLength",level:1,type:"u",mandatory:!0,default:4,minver:1,description:"The maximum length of the IDs you'll find in this file (4 or less in Matroska)."},17143:{name:"EBMLReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum EBML version a parser has to support to read this file."},440786851:{name:"EBML",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"Set the EBML characteristics of the data to follow. Each EBML document has to start with this."}},st={},Jt={byEbmlID:Ye,byName:st};for(var lt in Ye){var Zt=Ye[lt];st[Zt.name.replace("-","_")]=parseInt(lt,10)}var ut=Jt;Object.defineProperty(Ne,"__esModule",{value:!0});var Ce=Te,ct=Te,Kt=ut,Qt=Kt.byEbmlID,er=function(){function n(){this._schema=Qt,this._buffers=[],this._stack=[]}return n.prototype.encode=function(i){var r=this;return Ce.concat(i.reduce(function(s,c){return s.concat(r.encodeChunk(c))},[])).buffer},n.prototype.encodeChunk=function(i){return i.type==="m"?i.isEnd?this.endTag(i):this.startTag(i):this.writeTag(i),this.flush()},n.prototype.flush=function(){var i=this._buffers;return this._buffers=[],i},n.prototype.getSchemaInfo=function(i){for(var r=Object.keys(this._schema).map(Number),s=0;s<r.length;s++){var c=r[s];if(this._schema[c].name===i)return new ct.Buffer(c.toString(16),"hex")}return null},n.prototype.writeTag=function(i){var r=i.name,s=this.getSchemaInfo(r),c=i.data;if(s==null)throw new Error("No schema entry found for "+r);var f=Ce.encodeTag(s,c);if(this._stack.length>0){var y=this._stack[this._stack.length-1];y.children.push({tagId:s,elm:i,children:[],data:f});return}this._buffers=this._buffers.concat(f)},n.prototype.startTag=function(i){var r=i.name,s=this.getSchemaInfo(r);if(s==null)throw new Error("No schema entry found for "+r);if(i.unknownSize){var c=Ce.encodeTag(s,new ct.Buffer(0),i.unknownSize);this._buffers=this._buffers.concat(c);return}var f={tagId:s,elm:i,children:[],data:null};this._stack.length>0&&this._stack[this._stack.length-1].children.push(f),this._stack.push(f)},n.prototype.endTag=function(i){i.name;var r=this._stack.pop();if(r==null)throw new Error("EBML structure is broken");if(r.elm.name!==i.name)throw new Error("EBML structure is broken");var s=r.children.reduce(function(f,y){if(y.data===null)throw new Error("EBML structure is broken");return f.concat(y.data)},[]),c=Ce.concat(s);r.elm.type==="m"?r.data=Ce.encodeTag(r.tagId,c,r.elm.unknownSize):r.data=Ce.encodeTag(r.tagId,c),this._stack.length<1&&(this._buffers=this._buffers.concat(r.data))},n}();Ne.default=er;var dt={},We={};We.byteLength=nr;We.toByteArray=ar;We.fromByteArray=lr;var ye=[],me=[],tr=typeof Uint8Array!="undefined"?Uint8Array:Array,Je="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var Re=0,rr=Je.length;Re<rr;++Re)ye[Re]=Je[Re],me[Je.charCodeAt(Re)]=Re;me["-".charCodeAt(0)]=62;me["_".charCodeAt(0)]=63;function ft(n){var i=n.length;if(i%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=n.indexOf("=");r===-1&&(r=i);var s=r===i?0:4-r%4;return[r,s]}function nr(n){var i=ft(n),r=i[0],s=i[1];return(r+s)*3/4-s}function ir(n,i,r){return(i+r)*3/4-r}function ar(n){var i,r=ft(n),s=r[0],c=r[1],f=new tr(ir(n,s,c)),y=0,u=c>0?s-4:s,k;for(k=0;k<u;k+=4)i=me[n.charCodeAt(k)]<<18|me[n.charCodeAt(k+1)]<<12|me[n.charCodeAt(k+2)]<<6|me[n.charCodeAt(k+3)],f[y++]=i>>16&255,f[y++]=i>>8&255,f[y++]=i&255;return c===2&&(i=me[n.charCodeAt(k)]<<2|me[n.charCodeAt(k+1)]>>4,f[y++]=i&255),c===1&&(i=me[n.charCodeAt(k)]<<10|me[n.charCodeAt(k+1)]<<4|me[n.charCodeAt(k+2)]>>2,f[y++]=i>>8&255,f[y++]=i&255),f}function or(n){return ye[n>>18&63]+ye[n>>12&63]+ye[n>>6&63]+ye[n&63]}function sr(n,i,r){for(var s,c=[],f=i;f<r;f+=3)s=(n[f]<<16&16711680)+(n[f+1]<<8&65280)+(n[f+2]&255),c.push(or(s));return c.join("")}function lr(n){for(var i,r=n.length,s=r%3,c=[],f=16383,y=0,u=r-s;y<u;y+=f)c.push(sr(n,y,y+f>u?u:y+f));return s===1?(i=n[r-1],c.push(ye[i>>2]+ye[i<<4&63]+"==")):s===2&&(i=(n[r-2]<<8)+n[r-1],c.push(ye[i>>10]+ye[i>>4&63]+ye[i<<2&63]+"=")),c.join("")}var Ze={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */Ze.read=function(n,i,r,s,c){var f,y,u=c*8-s-1,k=(1<<u)-1,B=k>>1,j=-7,L=r?c-1:0,H=r?-1:1,W=n[i+L];for(L+=H,f=W&(1<<-j)-1,W>>=-j,j+=u;j>0;f=f*256+n[i+L],L+=H,j-=8);for(y=f&(1<<-j)-1,f>>=-j,j+=s;j>0;y=y*256+n[i+L],L+=H,j-=8);if(f===0)f=1-B;else{if(f===k)return y?NaN:(W?-1:1)*(1/0);y=y+Math.pow(2,s),f=f-B}return(W?-1:1)*y*Math.pow(2,f-s)};Ze.write=function(n,i,r,s,c,f){var y,u,k,B=f*8-c-1,j=(1<<B)-1,L=j>>1,H=c===23?Math.pow(2,-24)-Math.pow(2,-77):0,W=s?0:f-1,R=s?1:-1,N=i<0||i===0&&1/i<0?1:0;for(i=Math.abs(i),isNaN(i)||i===1/0?(u=isNaN(i)?1:0,y=j):(y=Math.floor(Math.log(i)/Math.LN2),i*(k=Math.pow(2,-y))<1&&(y--,k*=2),y+L>=1?i+=H/k:i+=H*Math.pow(2,1-L),i*k>=2&&(y++,k/=2),y+L>=j?(u=0,y=j):y+L>=1?(u=(i*k-1)*Math.pow(2,c),y=y+L):(u=i*Math.pow(2,L-1)*Math.pow(2,c),y=0));c>=8;n[r+W]=u&255,W+=R,u/=256,c-=8);for(y=y<<c|u,B+=c;B>0;n[r+W]=y&255,W+=R,y/=256,B-=8);n[r+W-R]|=N*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(n){var i=We,r=Ze,s=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;n.Buffer=u,n.SlowBuffer=re,n.INSPECT_MAX_BYTES=50;var c=2147483647;n.kMaxLength=c,u.TYPED_ARRAY_SUPPORT=f(),!u.TYPED_ARRAY_SUPPORT&&typeof console!="undefined"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function f(){try{var a=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(a,e),a.foo()===42}catch(t){return!1}}Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.byteOffset}});function y(a){if(a>c)throw new RangeError('The value "'+a+'" is invalid for option "size"');var e=new Uint8Array(a);return Object.setPrototypeOf(e,u.prototype),e}function u(a,e,t){if(typeof a=="number"){if(typeof e=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return L(a)}return k(a,e,t)}u.poolSize=8192;function k(a,e,t){if(typeof a=="string")return H(a,e);if(ArrayBuffer.isView(a))return R(a);if(a==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof a);if(U(a,ArrayBuffer)||a&&U(a.buffer,ArrayBuffer)||typeof SharedArrayBuffer!="undefined"&&(U(a,SharedArrayBuffer)||a&&U(a.buffer,SharedArrayBuffer)))return N(a,e,t);if(typeof a=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var o=a.valueOf&&a.valueOf();if(o!=null&&o!==a)return u.from(o,e,t);var d=z(a);if(d)return d;if(typeof Symbol!="undefined"&&Symbol.toPrimitive!=null&&typeof a[Symbol.toPrimitive]=="function")return u.from(a[Symbol.toPrimitive]("string"),e,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof a)}u.from=function(a,e,t){return k(a,e,t)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array);function B(a){if(typeof a!="number")throw new TypeError('"size" argument must be of type number');if(a<0)throw new RangeError('The value "'+a+'" is invalid for option "size"')}function j(a,e,t){return B(a),a<=0?y(a):e!==void 0?typeof t=="string"?y(a).fill(e,t):y(a).fill(e):y(a)}u.alloc=function(a,e,t){return j(a,e,t)};function L(a){return B(a),y(a<0?0:Y(a)|0)}u.allocUnsafe=function(a){return L(a)},u.allocUnsafeSlow=function(a){return L(a)};function H(a,e){if((typeof e!="string"||e==="")&&(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var t=X(a,e)|0,o=y(t),d=o.write(a,e);return d!==t&&(o=o.slice(0,d)),o}function W(a){for(var e=a.length<0?0:Y(a.length)|0,t=y(e),o=0;o<e;o+=1)t[o]=a[o]&255;return t}function R(a){if(U(a,Uint8Array)){var e=new Uint8Array(a);return N(e.buffer,e.byteOffset,e.byteLength)}return W(a)}function N(a,e,t){if(e<0||a.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(a.byteLength<e+(t||0))throw new RangeError('"length" is outside of buffer bounds');var o;return e===void 0&&t===void 0?o=new Uint8Array(a):t===void 0?o=new Uint8Array(a,e):o=new Uint8Array(a,e,t),Object.setPrototypeOf(o,u.prototype),o}function z(a){if(u.isBuffer(a)){var e=Y(a.length)|0,t=y(e);return t.length===0||a.copy(t,0,0,e),t}if(a.length!==void 0)return typeof a.length!="number"||ee(a.length)?y(0):W(a);if(a.type==="Buffer"&&Array.isArray(a.data))return W(a.data)}function Y(a){if(a>=c)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+c.toString(16)+" bytes");return a|0}function re(a){return+a!=a&&(a=0),u.alloc(+a)}u.isBuffer=function(e){return e!=null&&e._isBuffer===!0&&e!==u.prototype},u.compare=function(e,t){if(U(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),U(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var o=e.length,d=t.length,b=0,x=Math.min(o,d);b<x;++b)if(e[b]!==t[b]){o=e[b],d=t[b];break}return o<d?-1:d<o?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(e.length===0)return u.alloc(0);var o;if(t===void 0)for(t=0,o=0;o<e.length;++o)t+=e[o].length;var d=u.allocUnsafe(t),b=0;for(o=0;o<e.length;++o){var x=e[o];if(U(x,Uint8Array))b+x.length>d.length?u.from(x).copy(d,b):Uint8Array.prototype.set.call(d,x,b);else if(u.isBuffer(x))x.copy(d,b);else throw new TypeError('"list" argument must be an Array of Buffers');b+=x.length}return d};function X(a,e){if(u.isBuffer(a))return a.length;if(ArrayBuffer.isView(a)||U(a,ArrayBuffer))return a.byteLength;if(typeof a!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof a);var t=a.length,o=arguments.length>2&&arguments[2]===!0;if(!o&&t===0)return 0;for(var d=!1;;)switch(e){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return G(a).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return O(a).length;default:if(d)return o?-1:G(a).length;e=(""+e).toLowerCase(),d=!0}}u.byteLength=X;function ne(a,e,t){var o=!1;if((e===void 0||e<0)&&(e=0),e>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,e>>>=0,t<=e))return"";for(a||(a="utf8");;)switch(a){case"hex":return ie(this,e,t);case"utf8":case"utf-8":return P(this,e,t);case"ascii":return Q(this,e,t);case"latin1":case"binary":return K(this,e,t);case"base64":return h(this,e,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t);default:if(o)throw new TypeError("Unknown encoding: "+a);a=(a+"").toLowerCase(),o=!0}}u.prototype._isBuffer=!0;function S(a,e,t){var o=a[e];a[e]=a[t],a[t]=o}u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)S(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)S(this,t,t+3),S(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)S(this,t,t+7),S(this,t+1,t+6),S(this,t+2,t+5),S(this,t+3,t+4);return this},u.prototype.toString=function(){var e=this.length;return e===0?"":arguments.length===0?P(this,0,e):ne.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e?!0:u.compare(this,e)===0},u.prototype.inspect=function(){var e="",t=n.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(e,t,o,d,b){if(U(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(t===void 0&&(t=0),o===void 0&&(o=e?e.length:0),d===void 0&&(d=0),b===void 0&&(b=this.length),t<0||o>e.length||d<0||b>this.length)throw new RangeError("out of range index");if(d>=b&&t>=o)return 0;if(d>=b)return-1;if(t>=o)return 1;if(t>>>=0,o>>>=0,d>>>=0,b>>>=0,this===e)return 0;for(var x=b-d,Z=o-t,te=Math.min(x,Z),se=this.slice(d,b),de=e.slice(t,o),ue=0;ue<te;++ue)if(se[ue]!==de[ue]){x=se[ue],Z=de[ue];break}return x<Z?-1:Z<x?1:0};function F(a,e,t,o,d){if(a.length===0)return-1;if(typeof t=="string"?(o=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,ee(t)&&(t=d?0:a.length-1),t<0&&(t=a.length+t),t>=a.length){if(d)return-1;t=a.length-1}else if(t<0)if(d)t=0;else return-1;if(typeof e=="string"&&(e=u.from(e,o)),u.isBuffer(e))return e.length===0?-1:p(a,e,t,o,d);if(typeof e=="number")return e=e&255,typeof Uint8Array.prototype.indexOf=="function"?d?Uint8Array.prototype.indexOf.call(a,e,t):Uint8Array.prototype.lastIndexOf.call(a,e,t):p(a,[e],t,o,d);throw new TypeError("val must be string, number or Buffer")}function p(a,e,t,o,d){var b=1,x=a.length,Z=e.length;if(o!==void 0&&(o=String(o).toLowerCase(),o==="ucs2"||o==="ucs-2"||o==="utf16le"||o==="utf-16le")){if(a.length<2||e.length<2)return-1;b=2,x/=2,Z/=2,t/=2}function te(Ie,Be){return b===1?Ie[Be]:Ie.readUInt16BE(Be*b)}var se;if(d){var de=-1;for(se=t;se<x;se++)if(te(a,se)===te(e,de===-1?0:se-de)){if(de===-1&&(de=se),se-de+1===Z)return de*b}else de!==-1&&(se-=se-de),de=-1}else for(t+Z>x&&(t=x-Z),se=t;se>=0;se--){for(var ue=!0,ke=0;ke<Z;ke++)if(te(a,se+ke)!==te(e,ke)){ue=!1;break}if(ue)return se}return-1}u.prototype.includes=function(e,t,o){return this.indexOf(e,t,o)!==-1},u.prototype.indexOf=function(e,t,o){return F(this,e,t,o,!0)},u.prototype.lastIndexOf=function(e,t,o){return F(this,e,t,o,!1)};function v(a,e,t,o){t=Number(t)||0;var d=a.length-t;o?(o=Number(o),o>d&&(o=d)):o=d;var b=e.length;o>b/2&&(o=b/2);for(var x=0;x<o;++x){var Z=parseInt(e.substr(x*2,2),16);if(ee(Z))return x;a[t+x]=Z}return x}function w(a,e,t,o){return V(G(e,a.length-t),a,t,o)}function T(a,e,t,o){return V(C(e),a,t,o)}function m(a,e,t,o){return V(O(e),a,t,o)}function g(a,e,t,o){return V(I(e,a.length-t),a,t,o)}u.prototype.write=function(e,t,o,d){if(t===void 0)d="utf8",o=this.length,t=0;else if(o===void 0&&typeof t=="string")d=t,o=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(o)?(o=o>>>0,d===void 0&&(d="utf8")):(d=o,o=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var b=this.length-t;if((o===void 0||o>b)&&(o=b),e.length>0&&(o<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");d||(d="utf8");for(var x=!1;;)switch(d){case"hex":return v(this,e,t,o);case"utf8":case"utf-8":return w(this,e,t,o);case"ascii":case"latin1":case"binary":return T(this,e,t,o);case"base64":return m(this,e,t,o);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return g(this,e,t,o);default:if(x)throw new TypeError("Unknown encoding: "+d);d=(""+d).toLowerCase(),x=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function h(a,e,t){return e===0&&t===a.length?i.fromByteArray(a):i.fromByteArray(a.slice(e,t))}function P(a,e,t){t=Math.min(a.length,t);for(var o=[],d=e;d<t;){var b=a[d],x=null,Z=b>239?4:b>223?3:b>191?2:1;if(d+Z<=t){var te,se,de,ue;switch(Z){case 1:b<128&&(x=b);break;case 2:te=a[d+1],(te&192)==128&&(ue=(b&31)<<6|te&63,ue>127&&(x=ue));break;case 3:te=a[d+1],se=a[d+2],(te&192)==128&&(se&192)==128&&(ue=(b&15)<<12|(te&63)<<6|se&63,ue>2047&&(ue<55296||ue>57343)&&(x=ue));break;case 4:te=a[d+1],se=a[d+2],de=a[d+3],(te&192)==128&&(se&192)==128&&(de&192)==128&&(ue=(b&15)<<18|(te&63)<<12|(se&63)<<6|de&63,ue>65535&&ue<1114112&&(x=ue))}}x===null?(x=65533,Z=1):x>65535&&(x-=65536,o.push(x>>>10&1023|55296),x=56320|x&1023),o.push(x),d+=Z}return J(o)}var q=4096;function J(a){var e=a.length;if(e<=q)return String.fromCharCode.apply(String,a);for(var t="",o=0;o<e;)t+=String.fromCharCode.apply(String,a.slice(o,o+=q));return t}function Q(a,e,t){var o="";t=Math.min(a.length,t);for(var d=e;d<t;++d)o+=String.fromCharCode(a[d]&127);return o}function K(a,e,t){var o="";t=Math.min(a.length,t);for(var d=e;d<t;++d)o+=String.fromCharCode(a[d]);return o}function ie(a,e,t){var o=a.length;(!e||e<0)&&(e=0),(!t||t<0||t>o)&&(t=o);for(var d="",b=e;b<t;++b)d+=ce[a[b]];return d}function E(a,e,t){for(var o=a.slice(e,t),d="",b=0;b<o.length-1;b+=2)d+=String.fromCharCode(o[b]+o[b+1]*256);return d}u.prototype.slice=function(e,t){var o=this.length;e=~~e,t=t===void 0?o:~~t,e<0?(e+=o,e<0&&(e=0)):e>o&&(e=o),t<0?(t+=o,t<0&&(t=0)):t>o&&(t=o),t<e&&(t=e);var d=this.subarray(e,t);return Object.setPrototypeOf(d,u.prototype),d};function _(a,e,t){if(a%1!=0||a<0)throw new RangeError("offset is not uint");if(a+e>t)throw new RangeError("Trying to access beyond buffer length")}u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,o){e=e>>>0,t=t>>>0,o||_(e,t,this.length);for(var d=this[e],b=1,x=0;++x<t&&(b*=256);)d+=this[e+x]*b;return d},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,o){e=e>>>0,t=t>>>0,o||_(e,t,this.length);for(var d=this[e+--t],b=1;t>0&&(b*=256);)d+=this[e+--t]*b;return d},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e=e>>>0,t||_(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e=e>>>0,t||_(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e=e>>>0,t||_(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e=e>>>0,t||_(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e=e>>>0,t||_(e,4,this.length),this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,o){e=e>>>0,t=t>>>0,o||_(e,t,this.length);for(var d=this[e],b=1,x=0;++x<t&&(b*=256);)d+=this[e+x]*b;return b*=128,d>=b&&(d-=Math.pow(2,8*t)),d},u.prototype.readIntBE=function(e,t,o){e=e>>>0,t=t>>>0,o||_(e,t,this.length);for(var d=t,b=1,x=this[e+--d];d>0&&(b*=256);)x+=this[e+--d]*b;return b*=128,x>=b&&(x-=Math.pow(2,8*t)),x},u.prototype.readInt8=function(e,t){return e=e>>>0,t||_(e,1,this.length),this[e]&128?(255-this[e]+1)*-1:this[e]},u.prototype.readInt16LE=function(e,t){e=e>>>0,t||_(e,2,this.length);var o=this[e]|this[e+1]<<8;return o&32768?o|4294901760:o},u.prototype.readInt16BE=function(e,t){e=e>>>0,t||_(e,2,this.length);var o=this[e+1]|this[e]<<8;return o&32768?o|4294901760:o},u.prototype.readInt32LE=function(e,t){return e=e>>>0,t||_(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e=e>>>0,t||_(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return e=e>>>0,t||_(e,4,this.length),r.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e=e>>>0,t||_(e,4,this.length),r.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e=e>>>0,t||_(e,8,this.length),r.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e=e>>>0,t||_(e,8,this.length),r.read(this,e,!1,52,8)};function D(a,e,t,o,d,b){if(!u.isBuffer(a))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>d||e<b)throw new RangeError('"value" argument is out of bounds');if(t+o>a.length)throw new RangeError("Index out of range")}u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,o,d){if(e=+e,t=t>>>0,o=o>>>0,!d){var b=Math.pow(2,8*o)-1;D(this,e,t,o,b,0)}var x=1,Z=0;for(this[t]=e&255;++Z<o&&(x*=256);)this[t+Z]=e/x&255;return t+o},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,o,d){if(e=+e,t=t>>>0,o=o>>>0,!d){var b=Math.pow(2,8*o)-1;D(this,e,t,o,b,0)}var x=o-1,Z=1;for(this[t+x]=e&255;--x>=0&&(Z*=256);)this[t+x]=e/Z&255;return t+o},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,1,255,0),this[t]=e&255,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,2,65535,0),this[t]=e&255,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=e&255,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e&255,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255,t+4},u.prototype.writeIntLE=function(e,t,o,d){if(e=+e,t=t>>>0,!d){var b=Math.pow(2,8*o-1);D(this,e,t,o,b-1,-b)}var x=0,Z=1,te=0;for(this[t]=e&255;++x<o&&(Z*=256);)e<0&&te===0&&this[t+x-1]!==0&&(te=1),this[t+x]=(e/Z>>0)-te&255;return t+o},u.prototype.writeIntBE=function(e,t,o,d){if(e=+e,t=t>>>0,!d){var b=Math.pow(2,8*o-1);D(this,e,t,o,b-1,-b)}var x=o-1,Z=1,te=0;for(this[t+x]=e&255;--x>=0&&(Z*=256);)e<0&&te===0&&this[t+x+1]!==0&&(te=1),this[t+x]=(e/Z>>0)-te&255;return t+o},u.prototype.writeInt8=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=e&255,t+1},u.prototype.writeInt16LE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,2,32767,-32768),this[t]=e&255,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=e&255,t+2},u.prototype.writeInt32LE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,4,2147483647,-2147483648),this[t]=e&255,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,o){return e=+e,t=t>>>0,o||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255,t+4};function l(a,e,t,o,d,b){if(t+o>a.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function $(a,e,t,o,d){return e=+e,t=t>>>0,d||l(a,e,t,4),r.write(a,e,t,o,23,4),t+4}u.prototype.writeFloatLE=function(e,t,o){return $(this,e,t,!0,o)},u.prototype.writeFloatBE=function(e,t,o){return $(this,e,t,!1,o)};function M(a,e,t,o,d){return e=+e,t=t>>>0,d||l(a,e,t,8),r.write(a,e,t,o,52,8),t+8}u.prototype.writeDoubleLE=function(e,t,o){return M(this,e,t,!0,o)},u.prototype.writeDoubleBE=function(e,t,o){return M(this,e,t,!1,o)},u.prototype.copy=function(e,t,o,d){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(o||(o=0),!d&&d!==0&&(d=this.length),t>=e.length&&(t=e.length),t||(t=0),d>0&&d<o&&(d=o),d===o||e.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(o<0||o>=this.length)throw new RangeError("Index out of range");if(d<0)throw new RangeError("sourceEnd out of bounds");d>this.length&&(d=this.length),e.length-t<d-o&&(d=e.length-t+o);var b=d-o;return this===e&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,o,d):Uint8Array.prototype.set.call(e,this.subarray(o,d),t),b},u.prototype.fill=function(e,t,o,d){if(typeof e=="string"){if(typeof t=="string"?(d=t,t=0,o=this.length):typeof o=="string"&&(d=o,o=this.length),d!==void 0&&typeof d!="string")throw new TypeError("encoding must be a string");if(typeof d=="string"&&!u.isEncoding(d))throw new TypeError("Unknown encoding: "+d);if(e.length===1){var b=e.charCodeAt(0);(d==="utf8"&&b<128||d==="latin1")&&(e=b)}}else typeof e=="number"?e=e&255:typeof e=="boolean"&&(e=Number(e));if(t<0||this.length<t||this.length<o)throw new RangeError("Out of range index");if(o<=t)return this;t=t>>>0,o=o===void 0?this.length:o>>>0,e||(e=0);var x;if(typeof e=="number")for(x=t;x<o;++x)this[x]=e;else{var Z=u.isBuffer(e)?e:u.from(e,d),te=Z.length;if(te===0)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(x=0;x<o-t;++x)this[x+t]=Z[x%te]}return this};var oe=/[^+/0-9A-Za-z-_]/g;function A(a){if(a=a.split("=")[0],a=a.trim().replace(oe,""),a.length<2)return"";for(;a.length%4!=0;)a=a+"=";return a}function G(a,e){e=e||1/0;for(var t,o=a.length,d=null,b=[],x=0;x<o;++x){if(t=a.charCodeAt(x),t>55295&&t<57344){if(!d){if(t>56319){(e-=3)>-1&&b.push(239,191,189);continue}else if(x+1===o){(e-=3)>-1&&b.push(239,191,189);continue}d=t;continue}if(t<56320){(e-=3)>-1&&b.push(239,191,189),d=t;continue}t=(d-55296<<10|t-56320)+65536}else d&&(e-=3)>-1&&b.push(239,191,189);if(d=null,t<128){if((e-=1)<0)break;b.push(t)}else if(t<2048){if((e-=2)<0)break;b.push(t>>6|192,t&63|128)}else if(t<65536){if((e-=3)<0)break;b.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((e-=4)<0)break;b.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return b}function C(a){for(var e=[],t=0;t<a.length;++t)e.push(a.charCodeAt(t)&255);return e}function I(a,e){for(var t,o,d,b=[],x=0;x<a.length&&!((e-=2)<0);++x)t=a.charCodeAt(x),o=t>>8,d=t%256,b.push(d),b.push(o);return b}function O(a){return i.toByteArray(A(a))}function V(a,e,t,o){for(var d=0;d<o&&!(d+t>=e.length||d>=a.length);++d)e[d+t]=a[d];return d}function U(a,e){return a instanceof e||a!=null&&a.constructor!=null&&a.constructor.name!=null&&a.constructor.name===e.name}function ee(a){return a!==a}var ce=function(){for(var a="0123456789abcdef",e=new Array(256),t=0;t<16;++t)for(var o=t*16,d=0;d<16;++d)e[o+d]=a[t]+a[d];return e}()})(dt);var ur={readVint:function(n,i){i=i||0;for(var r=1;r<=8&&!(n[i]>=Math.pow(2,8-r));r++);if(r>8)throw new Error("Unrepresentable length: "+r+" "+n.toString("hex",i,i+r));if(i+r>n.length)return null;for(var s=n[i]&(1<<8-r)-1,c=1;c<r;c++){if(c===7&&s>=Math.pow(2,53-8)&&n[i+7]>0)return{length:r,value:-1};s*=Math.pow(2,8),s+=n[i+c]}return{length:r,value:s}},writeVint:function(n){if(n<0||n>Math.pow(2,53))throw new Error("Unrepresentable value: "+n);for(var i=1;i<=8&&!(n<Math.pow(2,7*i)-1);i++);for(var r=new Buffer(i),s=1;s<=i;s++){var c=n&255;r[i-s]=c,n-=c,n/=Math.pow(2,8)}return r[0]=r[0]|1<<8-i,r}},cr=ur,dr=function(n,i,r){i=i||0;for(var s=1;s<=8&&!(n[i]>=Math.pow(2,8-s));s++);if(s>8)throw new Error("Unrepresentable length: "+s+" "+n.toString("hex",i,i+s));if(i+s>n.length)return null;var c,f=n[i]&(1<<8-s)-1;for(c=1;c<s;c++){if(c===7&&f>=Math.pow(2,53-8)&&n[i+7]>0)return{length:s,value:-1};f*=Math.pow(2,8),f+=n[i+c]}return r&&(f-=Math.pow(2,s*7-1)-1),{length:s,value:f}},pt=dr;function Ee(n){this.buffer=n,this.offset=0}Ee.prototype.nextInt16BE=function(){var n=this.buffer.readInt16BE(this.offset);return this.offset+=2,n};Ee.prototype.nextUInt8=function(){var n=this.buffer.readUInt8(this.offset);return this.offset+=1,n};Ee.prototype.nextUIntV=function(){var n=pt(this.buffer,this.offset);return this.offset+=n.length,n.value};Ee.prototype.nextIntV=function(){var n=pt(this.buffer,this.offset,!0);return this.offset+=n.length,n.value};Ee.prototype.nextBuffer=function(n){var i=n?this.buffer.slice(this.offset,this.offset+n):this.buffer.slice(this.offset);return this.offset+=n||this.length,i};Object.defineProperty(Ee.prototype,"length",{get:function(){return this.buffer.length-this.offset}});var fr=Ee,pr=fr,mr=1,hr=3,vr=2,yr=function(n){var i={},r=new pr(n);i.trackNumber=r.nextUIntV(),i.timecode=r.nextInt16BE();var s=r.nextUInt8();i.invisible=!!(s&8),i.keyframe=!!(s&128),i.discardable=!!(s&1);var c=(s&6)>>1;return i.frames=gr(r,c),i};function gr(n,i){if(!i)return[n.nextBuffer()];var r,s,c=[],f=n.nextUInt8()+1;if(i===vr){if(n.length%f!=0)throw new Error("Fixed-Size Lacing Error");for(s=n.length/f,r=0;r<f;r++)c.push(n.nextBuffer(s));return c}var y=[];if(i===mr)for(r=0;r<f-1;r++){var u;s=0;do u=n.nextUInt8(),s+=u;while(u===255);y.push(s)}else if(i===hr)for(s=n.nextUIntV(),y.push(s),r=1;r<f-1;r++)s+=n.nextIntV(),y.push(s);for(r=0;r<f-1;r++)c.push(n.nextBuffer(y[r]));return c.push(n.nextBuffer()),c}(function(n){Object.defineProperty(n,"__esModule",{value:!0});var i=Xe,r=Ne,s=dt,c=cr,f=yr;n.Buffer=s.Buffer,n.readVint=c.readVint,n.writeVint=c.writeVint,n.ebmlBlock=f;function y(m){return n.ebmlBlock(new n.Buffer(m))}n.readBlock=y;function u(m,g,h){return h===void 0&&(h=!1),S([m,h?new n.Buffer("01ffffffffffffff","hex"):n.writeVint(g.length),g])}n.encodeTag=u;function k(m){return B(m).reduce(function(g,h){var P=n.ebmlBlock(h.data);return P.frames.reduce(function(q,J){var Q=j(J),K=new Blob([Q],{type:"image/webp"});return q.concat(K)},g)},[])}n.WebPFrameFilter=k;function B(m){return m.reduce(function(g,h){if(h.type!=="b"||h.name!=="SimpleBlock")return g;var P=n.ebmlBlock(h.data),q=P.frames.some(function(J){var Q=J.slice(3,6).toString("hex");return Q==="9d012a"});return q?g.concat(h):g},[])}n.WebPBlockFilter=B;function j(m){var g=L("VP8 ",m),h=S([new n.Buffer("WEBP","ascii"),g]);return L("RIFF",h)}n.VP8BitStreamToRiffWebPBuffer=j;function L(m,g){var h=new n.Buffer(4);return h.writeUInt32LE(g.byteLength,0),S([new n.Buffer(m.substr(0,4),"ascii"),h,g,new n.Buffer(g.byteLength%2==0?0:1)])}n.createRIFFChunk=L;function H(m,g,h){var P=R("EBML",m),q=z(P),J=q+12,Q=m[m.length-1].dataEnd-J,K=R("Info",m);W("Duration",K),K.splice(1,0,{name:"Duration",type:"f",data:w(g,8)});for(var ie=z(K),E=R("Tracks",m),_=z(E),D=47,l=[],$=5+h.length*15,M=[],oe=-1,A=10,G=function(U){var ee=D,ce=ee+ie,a=ce+_,e=a+$,t=e-Q;if(l=[],l.push({name:"SeekHead",type:"m",isEnd:!1}),l.push({name:"Seek",type:"m",isEnd:!1}),l.push({name:"SeekID",type:"b",data:new n.Buffer([21,73,169,102])}),l.push({name:"SeekPosition",type:"u",data:p(ee)}),l.push({name:"Seek",type:"m",isEnd:!0}),l.push({name:"Seek",type:"m",isEnd:!1}),l.push({name:"SeekID",type:"b",data:new n.Buffer([22,84,174,107])}),l.push({name:"SeekPosition",type:"u",data:p(ce)}),l.push({name:"Seek",type:"m",isEnd:!0}),l.push({name:"Seek",type:"m",isEnd:!1}),l.push({name:"SeekID",type:"b",data:new n.Buffer([28,83,187,107])}),l.push({name:"SeekPosition",type:"u",data:p(a)}),l.push({name:"Seek",type:"m",isEnd:!0}),l.push({name:"SeekHead",type:"m",isEnd:!0}),D=z(l),M=[],M.push({name:"Cues",type:"m",isEnd:!1}),h.forEach(function(o){var d=o.CueTrack,b=o.CueClusterPosition,x=o.CueTime;M.push({name:"CuePoint",type:"m",isEnd:!1}),M.push({name:"CueTime",type:"u",data:p(x)}),M.push({name:"CueTrackPositions",type:"m",isEnd:!1}),M.push({name:"CueTrack",type:"u",data:p(d)}),b-=J,b+=t,M.push({name:"CueClusterPosition",type:"u",data:p(b)}),M.push({name:"CueTrackPositions",type:"m",isEnd:!0}),M.push({name:"CuePoint",type:"m",isEnd:!0})}),M.push({name:"Cues",type:"m",isEnd:!0}),$=z(M),oe!==t){if(oe=t,U===A-1)throw new Error("Failed to converge to a stable metadata size")}else return"break"},C=0;C<A;C++){var I=G(C);if(I==="break")break}var O=[].concat.apply([],[P,{name:"Segment",type:"m",isEnd:!1,unknownSize:!0},l,K,E,M]),V=new r.default().encode(O);return V}n.makeMetadataSeekable=H;function W(m,g){for(var h=-1,P=0;P<g.length;P++){var q=g[P];if(q.name===m)if(q.type==="m")if(!q.isEnd)h=P;else{if(h==-1)throw new Error("Detected "+m+" closing element before finding the start");g.splice(h,P-h+1);return}else{g.splice(P,1);return}}}n.removeElement=W;function R(m,g){for(var h=[],P=-1,q=0;q<g.length;q++){var J=g[q];if(J.name===m)if(J.type==="m")if(!J.isEnd)P=q;else{if(P==-1)throw new Error("Detected "+m+" closing element before finding the start");h=g.slice(P,q+1);break}else{h.push(g[q]);break}}return h}n.extractElement=R;function N(m,g){Array.isArray(g.cueInfos)&&!Array.isArray(g.cues)&&(console.warn("putRefinedMetaData: info.cueInfos property is deprecated. please use info.cues"),g.cues=g.cueInfos);for(var h=[],P=[],q=0;q<m.length;q++){var J=m[q];if(J.type==="m"&&J.name==="Segment"){if(h=m.slice(0,q),P=m.slice(q),J.unknownSize){P.shift();break}throw new Error("this metadata is not streaming webm file")}}if(!(P[P.length-1].dataEnd>0))throw new Error("metadata dataEnd has wrong number");var Q=P[P.length-1].dataEnd,K=h[h.length-1].dataEnd,ie=new r.default().encode(h).byteLength,E=ie-K,_=Q-P[0].tagStart;P[0].tagStart-K,P[0].tagStart;var D=new n.Buffer([24,83,128,103]),l=new n.Buffer("01ffffffffffffff","hex"),$=D.byteLength+l.byteLength,M=_,oe;for(oe=1;oe<20;oe++){var A=K+$+M,G=A-Q,C=E+G,I=Y(P,C,g),O=new r.default().encode(I).byteLength;if(O===M)return new r.default().encode([].concat(h,[{type:"m",name:"Segment",isEnd:!1,unknownSize:!0}],I));M=O}throw new Error("unable to refine metadata, stable size could not be found in "+oe+" iterations!")}n.putRefinedMetaData=N;function z(m){var g=new r.default;return m.reduce(function(h,P){return h.concat(g.encode([P]))},[]).reduce(function(h,P){return h+P.byteLength},0)}function Y(m,g,h){var P=h.duration,q=h.clusterPtrs,J=h.cues,Q=m.slice(0);if(typeof P=="number"){var K=!1;Q.forEach(function(E){E.type==="f"&&E.name==="Duration"&&(K=!0,E.data=w(P,8))}),K||ne(Q,"Info",[{name:"Duration",type:"f",data:w(P,8)}])}Array.isArray(J)&&ne(Q,"Cues",X(J,g));var ie=[];return Array.isArray(q)&&(console.warn("append cluster pointers to seekhead is deprecated. please use cues"),ie=re(q,g)),ne(Q,"SeekHead",ie,!0),Q}function re(m,g){var h=[];return m.forEach(function(P){h.push({name:"Seek",type:"m",isEnd:!1}),h.push({name:"SeekID",type:"b",data:new n.Buffer([31,67,182,117])}),h.push({name:"SeekPosition",type:"u",data:p(P+g)}),h.push({name:"Seek",type:"m",isEnd:!0})}),h}function X(m,g){var h=[];return m.forEach(function(P){var q=P.CueTrack,J=P.CueClusterPosition,Q=P.CueTime;h.push({name:"CuePoint",type:"m",isEnd:!1}),h.push({name:"CueTime",type:"u",data:p(Q)}),h.push({name:"CueTrackPositions",type:"m",isEnd:!1}),h.push({name:"CueTrack",type:"u",data:p(q)}),h.push({name:"CueClusterPosition",type:"u",data:p(J+g)}),h.push({name:"CueTrackPositions",type:"m",isEnd:!0}),h.push({name:"CuePoint",type:"m",isEnd:!0})}),h}function ne(m,g,h,P){P===void 0&&(P=!1);for(var q=-1,J=0;J<m.length;J++){var Q=m[J];if(Q.type==="m"&&Q.name===g&&Q.isEnd===!1){q=J;break}}q>=0?Array.prototype.splice.apply(m,[q+1,0].concat(h)):P?[].concat([{name:g,type:"m",isEnd:!1}],h,[{name:g,type:"m",isEnd:!0}]).reverse().forEach(function(K){m.unshift(K)}):(m.push({name:g,type:"m",isEnd:!1}),h.forEach(function(K){m.push(K)}),m.push({name:g,type:"m",isEnd:!0}))}function S(m){for(var g=0,h=0;g<m.length;++g)h+=m[g].length;var P=n.Buffer.allocUnsafe(h),q=0;for(g=0;g<m.length;++g){var J=m[g];J.copy(P,q),q+=J.length}return P}n.concat=S;function F(m){var g=new n.Buffer(0);if(m.type==="m")return m;switch(m.type){case"u":g=p(m.value);break;case"i":g=v(m.value);break;case"f":g=w(m.value);break;case"s":g=new n.Buffer(m.value,"ascii");break;case"8":g=new n.Buffer(m.value,"utf8");break;case"b":g=m.value;break;case"d":g=new i.Int64BE(m.value.getTime().toString()).toBuffer();break}return Object.assign({},m,{data:g})}n.encodeValueToBuffer=F;function p(m){for(var g=1;m>=Math.pow(2,8*g);g++);if(g>=7)return console.warn("7bit or more bigger uint not supported."),new i.Uint64BE(m).toBuffer();var h=new n.Buffer(g);return h.writeUIntBE(m,0,g),h}n.createUIntBuffer=p;function v(m){for(var g=1;m>=Math.pow(2,8*g);g++);if(g>=7)return console.warn("7bit or more bigger uint not supported."),new i.Int64BE(m).toBuffer();var h=new n.Buffer(g);return h.writeIntBE(m,0,g),h}n.createIntBuffer=v;function w(m,g){if(g===void 0&&(g=8),g===8){var h=new n.Buffer(8);return h.writeDoubleBE(m,0),h}else if(g===4){var h=new n.Buffer(4);return h.writeFloatBE(m,0),h}else throw new Error("float type bits must 4bytes or 8bytes")}n.createFloatBuffer=w;function T(m){return m instanceof Date?m:new Date(new Date("2001-01-01T00:00:00.000Z").getTime()+Number(m)/1e3/1e3)}n.convertEBMLDateToJSDate=T})(Te);Object.defineProperty(Ge,"__esModule",{value:!0});var Ae=Te,br=Xe,wr=Te,kr=ut,xr=kr.byEbmlID,ge;(function(n){n[n.STATE_TAG=1]="STATE_TAG",n[n.STATE_SIZE=2]="STATE_SIZE",n[n.STATE_CONTENT=3]="STATE_CONTENT"})(ge||(ge={}));var Tr=function(){function n(){this._buffer=new Ae.Buffer(0),this._tag_stack=[],this._state=ge.STATE_TAG,this._cursor=0,this._total=0,this._schema=xr,this._result=[]}return n.prototype.decode=function(i){this.readChunk(i);var r=this._result;return this._result=[],r},n.prototype.readChunk=function(i){for(this._buffer=wr.concat([this._buffer,new Ae.Buffer(i)]);this._cursor<this._buffer.length&&!(this._state===ge.STATE_TAG&&!this.readTag()||this._state===ge.STATE_SIZE&&!this.readSize()||this._state===ge.STATE_CONTENT&&!this.readContent()););},n.prototype.getSchemaInfo=function(i){return this._schema[i]||{name:"unknown",level:-1,type:"unknown",description:"unknown"}},n.prototype.readTag=function(){if(this._cursor>=this._buffer.length)return!1;var i=Ae.readVint(this._buffer,this._cursor);if(i==null)return!1;var r=this._buffer.slice(this._cursor,this._cursor+i.length),s=r.reduce(function(y,u,k,B){return y+u*Math.pow(16,2*(B.length-1-k))},0),c=this.getSchemaInfo(s),f={EBML_ID:s.toString(16),schema:c,type:c.type,name:c.name,level:c.level,tagStart:this._total,tagEnd:this._total+i.length,sizeStart:this._total+i.length,sizeEnd:null,dataStart:null,dataEnd:null,dataSize:null,data:null};return this._tag_stack.push(f),this._cursor+=i.length,this._total+=i.length,this._state=ge.STATE_SIZE,!0},n.prototype.readSize=function(){if(this._cursor>=this._buffer.length)return!1;var i=Ae.readVint(this._buffer,this._cursor);if(i==null)return!1;var r=this._tag_stack[this._tag_stack.length-1];return r.sizeEnd=r.sizeStart+i.length,r.dataStart=r.sizeEnd,r.dataSize=i.value,i.value===-1?(r.dataEnd=-1,r.type==="m"&&(r.unknownSize=!0)):r.dataEnd=r.sizeEnd+i.value,this._cursor+=i.length,this._total+=i.length,this._state=ge.STATE_CONTENT,!0},n.prototype.readContent=function(){var i=this._tag_stack[this._tag_stack.length-1];if(i.type==="m"){if(i.isEnd=!1,this._result.push(i),this._state=ge.STATE_TAG,i.dataSize===0){var r=Object.assign({},i,{isEnd:!0});this._result.push(r),this._tag_stack.pop()}return!0}if(this._buffer.length<this._cursor+i.dataSize)return!1;var s=this._buffer.slice(this._cursor,this._cursor+i.dataSize);switch(this._buffer=this._buffer.slice(this._cursor+i.dataSize),i.data=s,i.type){case"u":i.value=s.readUIntBE(0,s.length);break;case"i":i.value=s.readIntBE(0,s.length);break;case"f":i.value=i.dataSize===4?s.readFloatBE(0):i.dataSize===8?s.readDoubleBE(0):(console.warn("cannot read "+i.dataSize+" octets float. failback to 0"),0);break;case"s":i.value=s.toString("ascii");break;case"8":i.value=s.toString("utf8");break;case"b":i.value=s;break;case"d":i.value=Ae.convertEBMLDateToJSDate(new br.Int64BE(s).toNumber());break}if(i.value===null)throw new Error("unknown tag type:"+i.type);for(this._result.push(i),this._total+=i.dataSize,this._state=ge.STATE_TAG,this._cursor=0,this._tag_stack.pop();this._tag_stack.length>0;){var c=this._tag_stack[this._tag_stack.length-1];if(c.dataEnd<0)return this._tag_stack.pop(),!0;if(this._total<c.dataEnd)break;if(c.type!=="m")throw new Error("parent element is not master element");var r=Object.assign({},c,{isEnd:!0});this._result.push(r),this._tag_stack.pop()}return!0},n}();Ge.default=Tr;var Ke={};function fe(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}var Er=fe;fe.EventEmitter=fe;fe.prototype._events=void 0;fe.prototype._maxListeners=void 0;fe.defaultMaxListeners=10;fe.prototype.setMaxListeners=function(n){if(!_r(n)||n<0||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this};fe.prototype.emit=function(n){var i,r,s,c,f,y;if(this._events||(this._events={}),n==="error"&&(!this._events.error||Ve(this._events.error)&&!this._events.error.length)){if(i=arguments[1],i instanceof Error)throw i;var u=new Error('Uncaught, unspecified "error" event. ('+i+")");throw u.context=i,u}if(r=this._events[n],mt(r))return!1;if(we(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:c=Array.prototype.slice.call(arguments,1),r.apply(this,c)}else if(Ve(r))for(c=Array.prototype.slice.call(arguments,1),y=r.slice(),s=y.length,f=0;f<s;f++)y[f].apply(this,c);return!0};fe.prototype.addListener=function(n,i){var r;if(!we(i))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",n,we(i.listener)?i.listener:i),this._events[n]?Ve(this._events[n])?this._events[n].push(i):this._events[n]=[this._events[n],i]:this._events[n]=i,Ve(this._events[n])&&!this._events[n].warned&&(mt(this._maxListeners)?r=fe.defaultMaxListeners:r=this._maxListeners,r&&r>0&&this._events[n].length>r&&(this._events[n].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[n].length),typeof console.trace=="function"&&console.trace())),this};fe.prototype.on=fe.prototype.addListener;fe.prototype.once=function(n,i){if(!we(i))throw TypeError("listener must be a function");var r=!1;function s(){this.removeListener(n,s),r||(r=!0,i.apply(this,arguments))}return s.listener=i,this.on(n,s),this};fe.prototype.removeListener=function(n,i){var r,s,c,f;if(!we(i))throw TypeError("listener must be a function");if(!this._events||!this._events[n])return this;if(r=this._events[n],c=r.length,s=-1,r===i||we(r.listener)&&r.listener===i)delete this._events[n],this._events.removeListener&&this.emit("removeListener",n,i);else if(Ve(r)){for(f=c;f-- >0;)if(r[f]===i||r[f].listener&&r[f].listener===i){s=f;break}if(s<0)return this;r.length===1?(r.length=0,delete this._events[n]):r.splice(s,1),this._events.removeListener&&this.emit("removeListener",n,i)}return this};fe.prototype.removeAllListeners=function(n){var i,r;if(!this._events)return this;if(!this._events.removeListener)return arguments.length===0?this._events={}:this._events[n]&&delete this._events[n],this;if(arguments.length===0){for(i in this._events)i!=="removeListener"&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events={},this}if(r=this._events[n],we(r))this.removeListener(n,r);else if(r)for(;r.length;)this.removeListener(n,r[r.length-1]);return delete this._events[n],this};fe.prototype.listeners=function(n){var i;return!this._events||!this._events[n]?i=[]:we(this._events[n])?i=[this._events[n]]:i=this._events[n].slice(),i};fe.prototype.listenerCount=function(n){if(this._events){var i=this._events[n];if(we(i))return 1;if(i)return i.length}return 0};fe.listenerCount=function(n,i){return n.listenerCount(i)};function we(n){return typeof n=="function"}function _r(n){return typeof n=="number"}function Ve(n){return typeof n=="object"&&n!==null}function mt(n){return n===void 0}var Sr=$e&&$e.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,r){i.__proto__=r}||function(i,r){for(var s in r)r.hasOwnProperty(s)&&(i[s]=r[s])};return function(i,r){n(i,r);function s(){this.constructor=i}i.prototype=r===null?Object.create(r):(s.prototype=r.prototype,new s)}}();Object.defineProperty(Ke,"__esModule",{value:!0});var Cr=Er,ht=Te,Rr=function(n){Sr(i,n);function i(){var r=n.call(this)||this;return r.logGroup="",r.hasLoggingStarted=!1,r.metadataloaded=!1,r.chunks=[],r.stack=[],r.segmentOffset=0,r.last2SimpleBlockVideoTrackTimecode=[0,0],r.last2SimpleBlockAudioTrackTimecode=[0,0],r.lastClusterTimecode=0,r.lastClusterPosition=0,r.timecodeScale=1e6,r.metadataSize=0,r.metadatas=[],r.cues=[],r.firstVideoBlockRead=!1,r.firstAudioBlockRead=!1,r.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null},r.trackTypes=[],r.trackDefaultDuration=[],r.trackCodecDelay=[],r.trackInfo={type:"nothing"},r.ended=!1,r.logging=!1,r.use_duration_every_simpleblock=!1,r.use_webp=!1,r.use_segment_info=!0,r.drop_default_duration=!0,r}return i.prototype.stop=function(){for(this.ended=!0,this.emit_segment_info();this.stack.length;)this.stack.pop(),this.logging&&console.groupEnd();this.logging&&this.hasLoggingStarted&&this.logGroup&&console.groupEnd()},i.prototype.emit_segment_info=function(){var r=this.chunks;if(this.chunks=[],this.metadataloaded){if(!this.use_segment_info)return;var f=this.lastClusterTimecode,y=this.duration,u=this.timecodeScale;this.emit("cluster",{timecode:f,data:r}),this.emit("duration",{timecodeScale:u,duration:y})}else{this.metadataloaded=!0,this.metadatas=r;var s=this.trackTypes.indexOf(1),c=this.trackTypes.indexOf(2);if(this.trackInfo=s>=0&&c>=0?{type:"both",trackNumber:s}:s>=0?{type:"video",trackNumber:s}:c>=0?{type:"audio",trackNumber:c}:{type:"nothing"},!this.use_segment_info)return;this.emit("metadata",{data:r,metadataSize:this.metadataSize})}},i.prototype.read=function(r){var s=this,c=!1;if(!this.ended){if(r.type==="m")if(r.isEnd)this.stack.pop();else{var f=this.stack[this.stack.length-1];if(f!=null&&f.level>=r.level){this.stack.pop(),this.logging&&console.groupEnd(),f.dataEnd=r.dataEnd,f.dataSize=r.dataEnd-f.dataStart,f.unknownSize=!1;var y=Object.assign({},f,{name:f.name,type:f.type,isEnd:!0});this.chunks.push(y)}this.stack.push(r)}if(r.type==="m"&&r.name=="Segment")this.segmentOffset!=0&&console.warn("Multiple segments detected!"),this.segmentOffset=r.dataStart,this.emit("segment_offset",this.segmentOffset);else if(r.type==="b"&&r.name==="SimpleBlock"){var u=ht.ebmlBlock(r.data),k=u.timecode,B=u.trackNumber,j=u.frames;if(this.trackTypes[B]===1){if(!this.firstVideoBlockRead&&(this.firstVideoBlockRead=!0,this.trackInfo.type==="both"||this.trackInfo.type==="video")){var L=this.lastClusterTimecode+k;this.cues.push({CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:L}),this.emit("cue_info",{CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:L})}this.last2SimpleBlockVideoTrackTimecode=[this.last2SimpleBlockVideoTrackTimecode[1],k]}else if(this.trackTypes[B]===2){if(!this.firstAudioBlockRead&&(this.firstAudioBlockRead=!0,this.trackInfo.type==="audio")){var L=this.lastClusterTimecode+k;this.cues.push({CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:L}),this.emit("cue_info",{CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:B,CueClusterPosition:this.lastClusterPosition,CueTime:L})}this.last2SimpleBlockAudioTrackTimecode=[this.last2SimpleBlockAudioTrackTimecode[1],k]}this.use_duration_every_simpleblock&&this.emit("duration",{timecodeScale:this.timecodeScale,duration:this.duration}),this.use_webp&&j.forEach(function(H){var W=H.slice(3,6).toString("hex");if(W==="9d012a"){var R=ht.VP8BitStreamToRiffWebPBuffer(H),N=new Blob([R],{type:"image/webp"}),z=s.duration;s.emit("webp",{currentTime:z,webp:N})}})}else r.type==="m"&&r.name==="Cluster"&&r.isEnd===!1?(this.firstVideoBlockRead=!1,this.firstAudioBlockRead=!1,this.emit_segment_info(),this.emit("cluster_ptr",r.tagStart),this.lastClusterPosition=r.tagStart):r.type==="u"&&r.name==="Timecode"?this.lastClusterTimecode=r.value:r.type==="u"&&r.name==="TimecodeScale"?this.timecodeScale=r.value:r.type==="m"&&r.name==="TrackEntry"?r.isEnd?(this.trackTypes[this.currentTrack.TrackNumber]=this.currentTrack.TrackType,this.trackDefaultDuration[this.currentTrack.TrackNumber]=this.currentTrack.DefaultDuration,this.trackCodecDelay[this.currentTrack.TrackNumber]=this.currentTrack.CodecDelay):this.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null}:r.type==="u"&&r.name==="TrackType"?this.currentTrack.TrackType=r.value:r.type==="u"&&r.name==="TrackNumber"?this.currentTrack.TrackNumber=r.value:r.type==="u"&&r.name==="CodecDelay"?this.currentTrack.CodecDelay=r.value:r.type==="u"&&r.name==="DefaultDuration"?this.drop_default_duration?(console.warn("DefaultDuration detected!, remove it"),c=!0):this.currentTrack.DefaultDuration=r.value:r.name==="unknown"&&console.warn(r);!this.metadataloaded&&r.dataEnd>0&&(this.metadataSize=r.dataEnd),c||this.chunks.push(r),this.logging&&this.put(r)}},Object.defineProperty(i.prototype,"duration",{get:function(){if(this.trackInfo.type==="nothing")return console.warn("no video, no audio track"),0;var r=0,s=0,c=0,f=this.trackDefaultDuration[this.trackInfo.trackNumber];if(typeof f=="number")r=f;else if(this.trackInfo.type==="both")if(this.last2SimpleBlockAudioTrackTimecode[1]>this.last2SimpleBlockVideoTrackTimecode[1]){r=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale;var y=this.trackCodecDelay[this.trackTypes.indexOf(2)];typeof y=="number"&&(s=y),c=this.last2SimpleBlockAudioTrackTimecode[1]}else{r=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale;var y=this.trackCodecDelay[this.trackTypes.indexOf(1)];typeof y=="number"&&(s=y),c=this.last2SimpleBlockVideoTrackTimecode[1]}else if(this.trackInfo.type==="video"){r=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale;var y=this.trackCodecDelay[this.trackInfo.trackNumber];typeof y=="number"&&(s=y),c=this.last2SimpleBlockVideoTrackTimecode[1]}else if(this.trackInfo.type==="audio"){r=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale;var y=this.trackCodecDelay[this.trackInfo.trackNumber];typeof y=="number"&&(s=y),c=this.last2SimpleBlockAudioTrackTimecode[1]}var u=(this.lastClusterTimecode+c)*this.timecodeScale+r-s,k=u/this.timecodeScale;return Math.floor(k)},enumerable:!0,configurable:!0}),i.prototype.addListener=function(r,s){return n.prototype.addListener.call(this,r,s)},i.prototype.put=function(r){this.hasLoggingStarted||(this.hasLoggingStarted=!0,this.logging&&this.logGroup&&console.groupCollapsed(this.logGroup)),r.type==="m"?r.isEnd?console.groupEnd():console.group(r.name+":"+r.tagStart):r.type==="b"?console.log(r.name,r.type):console.log(r.name,r.tagStart,r.type,r.value)},i}(Cr.EventEmitter);Ke.default=Rr;const Ir="ts-ebml",Br="2.0.2",Dr="ebml decoder and encoder",Ar={setup:"npm install -g http-server;",init:"npm run update; npm run mkdir; npm run build",update:"npm run reset; npm update",reset:"rm -rf node_modules",mkdir:"mkdir lib dist 2>/dev/null",clean:"rm -rf lib/* dist/* test/*.js; mkdir -p dist",build:"npm run clean   && tsc    -p .; npm run browserify",start:"http-server . -s & tsc -w -p .& watchify lib/example_seekable.js -o test/example_seekable.js",stop:"killall -- node */tsc -w -p",browserify:"browserify lib/index.js --standalone EBML -o dist/EBML.js",watchify:"watchify lib/index.js --standalone EBML -o dist/EBMl.js -v",test:"tsc; espower lib/test.js > lib/test.tmp; mv -f lib/test.tmp lib/test.js; browserify lib/test.js -o test/test.js",example:"tsc; browserify lib/example_seekable.js -o test/example_seekable.js",examples:"tsc; for file in `find lib -name 'example_*.js' -type f -printf '%f\\n'`; do browserify lib/$file -o test/$file; done",examples_bsd:"tsc; for file in `find lib -name 'example_*.js' -type f -print`; do browserify lib/$(basename $file) -o test/$(basename $file); done",check:"tsc -w --noEmit -p ./",lint:"tslint -c ./tslint.json --project ./tsconfig.json --type-check",doc:"typedoc --mode modules --out doc --disableOutputCheck"},Vr={type:"git",url:"git+https://github.com/legokichi/ts-ebml.git"},Or=["ebml","webm","mkv","matrosika","webp"],Pr="legokichi duckscallion",Mr="MIT",Fr={url:"https://github.com/legokichi/ts-ebml/issues"},Ur="https://github.com/legokichi/ts-ebml#readme",Lr={buffer:"^5.0.7",commander:"^2.11.0",ebml:"^2.2.1","ebml-block":"^1.1.0",events:"^1.1.1","int64-buffer":"^0.1.9",matroska:"^2.2.3"},Nr={"@types/commander":"^2.9.1","@types/qunit":"^2.0.31",browserify:"^13.1.0",empower:"^1.2.3","espower-cli":"^1.1.0","power-assert":"^1.4.4","power-assert-formatter":"^1.4.1","qunit-tap":"^1.5.1",qunitjs:"^2.4.0",tslint:"^3.15.1",typedoc:"^0.5.3",typescript:"^2.4.2",watchify:"^3.7.0"},Wr="./lib/cli.js",zr="./lib/index.js",qr="./lib/index.d.ts";var jr={name:Ir,version:Br,description:Dr,scripts:Ar,repository:Vr,keywords:Or,author:Pr,license:Mr,bugs:Fr,homepage:Ur,dependencies:Lr,devDependencies:Nr,bin:Wr,main:zr,typings:qr};Object.defineProperty(xe,"__esModule",{value:!0});var Hr=Ge;xe.Decoder=Hr.default;var $r=Ne;xe.Encoder=$r.default;var Gr=Ke;xe.Reader=Gr.default;var Xr=Te;xe.tools=Xr;var Yr=jr.version;xe.version=Yr;var vt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(le.exports);function r(f){return f&&f.__esModule?f:{default:f}}var s=function(){return i.default.createElement("div",null,"This browser is uncapable of recording video")},c=s;n.default=c})(vt);var yt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(le.exports);function r(f){return f&&f.__esModule?f:{default:f}}var s=function(){return i.default.createElement("div",null,"Oh snap! Your browser failed to record your video.",i.default.createElement("br",null),i.default.createElement("br",null),"Please restart it and try again \u{1F44D}")},c=s;n.default=c})(yt);var gt={},ze={},bt={exports:{}};/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/(function(n){(function(){var i={}.hasOwnProperty;function r(){for(var s=[],c=0;c<arguments.length;c++){var f=arguments[c];if(!!f){var y=typeof f;if(y==="string"||y==="number")s.push(f);else if(Array.isArray(f)){if(f.length){var u=r.apply(null,f);u&&s.push(u)}}else if(y==="object")if(f.toString===Object.prototype.toString)for(var k in f)i.call(f,k)&&f[k]&&s.push(k);else s.push(f.toString())}}return s.join(" ")}n.exports?(r.default=r,n.exports=r):window.classNames=r})()})(bt);Object.defineProperty(ze,"__esModule",{value:!0});var Jr=Object.assign||function(n){for(var i=1;i<arguments.length;i++){var r=arguments[i];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(n[s]=r[s])}return n},Zr=function(){function n(i,r){for(var s=0;s<r.length;s++){var c=r[s];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(i,c.key,c)}}return function(i,r,s){return r&&n(i.prototype,r),s&&n(i,s),i}}(),wt=le.exports,Kr=Qe(wt),Qr=Se.exports,pe=Qe(Qr),en=bt.exports,tn=Qe(en);function Qe(n){return n&&n.__esModule?n:{default:n}}function rn(n,i,r){return i in n?Object.defineProperty(n,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[i]=r,n}function nn(n,i){var r={};for(var s in n)i.indexOf(s)>=0||!Object.prototype.hasOwnProperty.call(n,s)||(r[s]=n[s]);return r}function an(n,i){if(!(n instanceof i))throw new TypeError("Cannot call a class as a function")}function on(n,i){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i&&(typeof i=="object"||typeof i=="function")?i:n}function sn(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof i);n.prototype=Object.create(i&&i.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),i&&(Object.setPrototypeOf?Object.setPrototypeOf(n,i):n.__proto__=i)}var et={title:/<title>.*<\/title>/gi,desc:/<desc>.*<\/desc>/gi,comment:/<!--.*-->/gi,defs:/<defs>.*<\/defs>/gi,width:/ +width="\d+(\.\d+)?(px)?"/gi,height:/ +height="\d+(\.\d+)?(px)?"/gi,fill:/ +fill="(none|#[0-9a-f]+)"/gi,sketchMSShapeGroup:/ +sketch:type="MSShapeGroup"/gi,sketchMSPage:/ +sketch:type="MSPage"/gi,sketchMSLayerGroup:/ +sketch:type="MSLayerGroup"/gi},Oe=function(n){sn(i,n);function i(){return an(this,i),on(this,(i.__proto__||Object.getPrototypeOf(i)).apply(this,arguments))}return Zr(i,[{key:"render",value:function(){var s=this.props,c=s.className,f=s.component,y=s.svg,u=s.fill,k=s.width,B=s.accessibilityLabel,j=s.accessibilityDesc,L=s.classSuffix,H=s.cleanupExceptions,W=nn(s,["className","component","svg","fill","width","accessibilityLabel","accessibilityDesc","classSuffix","cleanupExceptions"]),R=this.props,N=R.cleanup,z=R.height;(N===!0||N.length===0&&H.length>0)&&(N=Object.keys(et)),N=N.filter(function(v){return!(H.indexOf(v)>-1)}),k&&z===void 0&&(z=k),delete W.cleanup,delete W.height;var Y=(0,tn.default)(rn({SVGInline:!0,"SVGInline--cleaned":N.length},c,c)),re=Y.split(" ").join(L+" ")+L,X=i.cleanupSvg(y,N).replace(/<svg/,'<svg class="'+re+'"'+(u?' fill="'+u+'"':"")+(k||z?' style="'+(k?"width: "+k+";":"")+(z?"height: "+z+";":"")+'"':"")),ne=void 0;if(j){ne=/<svg(.|\n|\r\n)*?>/.exec(X);var S=ne.index+ne[0].length;X=X.substr(0,S)+("<desc>"+j+"</desc>")+X.substr(S)}if(B){ne=ne||/<svg(.|\n|\r\n)*?>/.exec(X);var F=ne.index+ne[0].length-1,p="SVGInline-"+i.idCount+++"-title";X=X.substr(0,F)+(' role="img" aria-labelledby="'+p+'"')+X.substr(F,1)+('<title id="'+p+'">'+B+"</title>")+X.substr(F+1)}return Kr.default.createElement(f,Jr({},W,{className:Y,dangerouslySetInnerHTML:{__html:X}}))}}]),i}(wt.Component);Oe.propTypes={className:pe.default.string,classSuffix:pe.default.string,component:pe.default.oneOfType([pe.default.string,pe.default.func]),svg:pe.default.string.isRequired,fill:pe.default.string,cleanup:pe.default.oneOfType([pe.default.bool,pe.default.array]),cleanupExceptions:pe.default.array,width:pe.default.string,height:pe.default.string,accessibilityLabel:pe.default.string,accessibilityDesc:pe.default.string};Oe.defaultProps={component:"span",classSuffix:"-svg",cleanup:[],cleanupExceptions:[]};Oe.idCount=0;Oe.cleanupSvg=function(n){var i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Object.keys(et).filter(function(r){return i.indexOf(r)>-1}).reduce(function(r,s){return r.replace(et[s],"")},n).trim()};ze.default=Oe;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=c(le.exports),r=c(ze),s=c(ve);function c(B){return B&&B.__esModule?B:{default:B}}var f=s.default.div.withConfig({displayName:"disconnected-view__SVGWrapper",componentId:"sc-1hdjm8z-0"})(["max-height:100%;max-width:100%;margin-bottom:140px;"]),y=`
<svg width="210px" height="150px" viewBox="0 0 210 150" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
    <g transform="translate(-915.000000, -356.000000)" fill="#4D4D4D" fill-rule="nonzero">
      <path d="M1117.31284,419.636364 C1117.31284,417.512192 1119.03367,415.79021 1121.15642,415.79021 C1123.27917,415.79021 1125,417.512192 1125,419.636364 C1125,447.023515 1111.3017,469.453876 1087.80267,485.191015 C1067.98313,498.464025 1042.15567,506 1019.49682,506 C996.229145,506 970.976604,499.222345 951.727522,486.61975 C928.403996,471.349569 915,448.691655 915,419.636364 C915,417.512192 916.720828,415.79021 918.843578,415.79021 C920.966327,415.79021 922.687155,417.512192 922.687155,419.636364 C922.687155,445.976297 934.696662,466.276987 955.936236,480.18278 C973.867198,491.922388 997.657898,498.307692 1019.49682,498.307692 C1040.66212,498.307692 1064.99852,491.20678 1083.52721,478.798245 C1105.01628,464.407157 1117.31284,444.272084 1117.31284,419.636364 Z M1079.57501,381.174825 C1072.62783,381.174825 1066.99602,375.539249 1066.99602,368.587413 C1066.99602,361.635577 1072.62783,356 1079.57501,356 C1086.52218,356 1092.15399,361.635577 1092.15399,368.587413 C1092.15399,375.539249 1086.52218,381.174825 1079.57501,381.174825 Z M962.870012,381.174825 C955.922833,381.174825 950.291031,375.539249 950.291031,368.587413 C950.291031,361.635577 955.922833,356 962.870012,356 C969.817192,356 975.448993,361.635577 975.448993,368.587413 C975.448993,375.539249 969.817192,381.174825 962.870012,381.174825 Z"></path>
    </g>
  </g>
</svg>
`,u=function(){return i.default.createElement(f,null,i.default.createElement(r.default,{svg:y}))},k=u;n.default=k})(gt);var kt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=s(le.exports),r=s(ve);function s(u){return u&&u.__esModule?u:{default:u}}var c=r.default.div.withConfig({displayName:"loading-view__LoadingMessage",componentId:"uxy82i-0"})(["font-family:Arial;"]),f=function(){return i.default.createElement(c,null,"Loading...")},y=f;n.default=y})(kt);var xt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=c(le.exports),r=c(ze),s=c(ve);function c(B){return B&&B.__esModule?B:{default:B}}var f=s.default.div.withConfig({displayName:"switch-camera-view__SVGWrapper",componentId:"sc-13l3hbu-0"})(["width:80px;height:80px;bottom:4px;right:4px;z-index:10;background-color:rgba(0,0,0,0.3);border-radius:50%;padding-left:8px;padding-top:10px;position:absolute;cursor:pointer;"]),y=`
<svg width="64px" height="64px" viewBox="0 0 1300 1300" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <path d="M1000.809 230.795h-136l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2h-306.8a31.945 31.945 0 0 0-30.1 21.2l-32.5 90.8h-136a79.978 79.978 0 0 0-80 80v456a79.978 79.978 0 0 0 80 80h704a79.978 79.978 0 0 0 80-80v-456a79.978 79.978 0 0 0-80-80zm8 536a8.023 8.023 0 0 1-8 8h-704a8.024 8.024 0 0 1-8-8v-456a8.024 8.024 0 0 1 8-8h186.7l17.1-47.8 22.9-64.2h250.5l22.9 64.2 17.1 47.8h186.8a8.024 8.024 0 0 1 8 8zm-360-400a160 160 0 1 0 160 160 159.956 159.956 0 0 0-160-160zm0 256a96 96 0 1 1 96-96 96.025 96.025 0 0 1-96 96z"/>
  <path d="M646.53 1051.072L510.64 972.616a23.18 23.18 0 0 0-34.769 20.074v28.335c-209.332-23.19-359.49-86.314-359.49-160.553 0-19.125 9.968-37.511 28.341-54.668V710.41a317.567 317.567 0 0 0-32.93 21.447c-60.674 45.451-73.41 95.028-73.41 128.615s12.736 83.164 73.41 128.615c34.059 25.513 80.563 47.712 138.22 65.98 64.915 20.568 142.076 35.611 225.86 44.406v50.128a23.18 23.18 0 0 0 34.769 20.074l135.888-78.456a23.18 23.18 0 0 0 0-40.147zM1194.334 731.857a330.209 330.209 0 0 0-41.61-26.256v92.688c23.895 19.26 37.02 40.236 37.02 62.183 0 76.572-159.746 141.32-379.404 162.621v78.34c91.47-8.42 175.747-24.178 245.774-46.366 57.658-18.268 104.162-40.467 138.22-65.98 60.675-45.451 73.41-95.028 73.41-128.615s-12.735-83.164-73.41-128.615z"/>
</svg>
`,u=function(j){return i.default.createElement(f,j,i.default.createElement(r.default,{svg:y,fill:"white"}))},k=u;n.default=k})(xt);var Tt={},Et={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(ve);function r(f){return f&&f.__esModule?f:{default:f}}var s=i.default.button.withConfig({displayName:"button__Button",componentId:"hkteey-0"})(["background:",";color:",";border-radius:4px;height:40px;padding:0px 18px;border:none;margin:-8px;font-size:14px;font-weight:bold;outline:none;cursor:pointer;:hover{background:#eee;}"],function(f){return f.backgroundColor},function(f){return f.color});s.defaultProps={color:"black",backgroundColor:"white"};var c=s;n.default=c})(Et);var _t={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=c(le.exports),r=c(ve),s=c(Se.exports);function c(R){return R&&R.__esModule?R:{default:R}}function f(R,N){if(R==null)return{};var z=y(R,N),Y,re;if(Object.getOwnPropertySymbols){var X=Object.getOwnPropertySymbols(R);for(re=0;re<X.length;re++)Y=X[re],!(N.indexOf(Y)>=0)&&(!Object.prototype.propertyIsEnumerable.call(R,Y)||(z[Y]=R[Y]))}return z}function y(R,N){if(R==null)return{};var z={},Y=Object.keys(R),re,X;for(X=0;X<Y.length;X++)re=Y[X],!(N.indexOf(re)>=0)&&(z[re]=R[re]);return z}var u=r.default.button.withConfig({displayName:"record-button__Button",componentId:"sc-1n5amwk-0"})(["background:",";color:",";border-radius:50%;width:64px;height:64px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;z-index:5;:hover{background:#fb6d42;}"],function(R){return R.backgroundColor},function(R){return R.color}),k=r.default.div.withConfig({displayName:"record-button__RecWrapper",componentId:"sc-1n5amwk-1"})(["display:flex;flex-direction:column;align-items:center;"]),B=r.default.div.withConfig({displayName:"record-button__ButtonBorder",componentId:"sc-1n5amwk-2"})(["border:8px solid rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]),j=r.default.div.withConfig({displayName:"record-button__Instructions",componentId:"sc-1n5amwk-3"})(["font-family:Arial;font-size:14px;color:#ffffff;letter-spacing:1.75px;display:flex;margin-bottom:20px;"]),L=r.default.div.withConfig({displayName:"record-button__InstuctionsHighlight",componentId:"sc-1n5amwk-4"})(["font-weight:700;color:#dc6547;padding:0 5px;"]);u.defaultProps={color:"black",backgroundColor:"white"};var H=function(N){var z=N.t,Y=f(N,["t"]);return i.default.createElement(k,null,i.default.createElement(j,null,i.default.createElement("div",null,z("PRESS")," "),i.default.createElement(L,null," ",z("REC")," "),z("WHEN READY")),i.default.createElement(B,null,i.default.createElement(u,Y)))};H.propTypes={t:s.default.func};var W=H;n.default=W})(_t);var St={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=s(le.exports),r=s(ve);function s(u){return u&&u.__esModule?u:{default:u}}var c=r.default.button.withConfig({displayName:"stop-button__Button",componentId:"sc-1h536gx-0"})(["background:",";color:",";border-radius:4px;width:40px;height:40px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;margin:20px;:hover{background:#fb6d42;}"],function(u){return u.backgroundColor},function(u){return u.color}),f=r.default.div.withConfig({displayName:"stop-button__Border",componentId:"sc-1h536gx-1"})(["background:rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]);c.defaultProps={color:"black",backgroundColor:"white"};var y=function(k){return i.default.createElement(f,null,i.default.createElement(c,k))};n.default=y})(St);var Ct={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=y(le.exports),r=c(Se.exports),s=c(ve);function c(p){return p&&p.__esModule?p:{default:p}}function f(){if(typeof WeakMap!="function")return null;var p=new WeakMap;return f=function(){return p},p}function y(p){if(p&&p.__esModule)return p;if(p===null||u(p)!=="object"&&typeof p!="function")return{default:p};var v=f();if(v&&v.has(p))return v.get(p);var w={},T=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var m in p)if(Object.prototype.hasOwnProperty.call(p,m)){var g=T?Object.getOwnPropertyDescriptor(p,m):null;g&&(g.get||g.set)?Object.defineProperty(w,m,g):w[m]=p[m]}return w.default=p,v&&v.set(p,w),w}function u(p){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?u=function(w){return typeof w}:u=function(w){return w&&typeof Symbol=="function"&&w.constructor===Symbol&&w!==Symbol.prototype?"symbol":typeof w},u(p)}function k(p,v){if(!(p instanceof v))throw new TypeError("Cannot call a class as a function")}function B(p,v){for(var w=0;w<v.length;w++){var T=v[w];T.enumerable=T.enumerable||!1,T.configurable=!0,"value"in T&&(T.writable=!0),Object.defineProperty(p,T.key,T)}}function j(p,v,w){return v&&B(p.prototype,v),w&&B(p,w),p}function L(p,v){if(typeof v!="function"&&v!==null)throw new TypeError("Super expression must either be null or a function");p.prototype=Object.create(v&&v.prototype,{constructor:{value:p,writable:!0,configurable:!0}}),v&&H(p,v)}function H(p,v){return H=Object.setPrototypeOf||function(T,m){return T.__proto__=m,T},H(p,v)}function W(p){var v=z();return function(){var T=Y(p),m;if(v){var g=Y(this).constructor;m=Reflect.construct(T,arguments,g)}else m=T.apply(this,arguments);return R(this,m)}}function R(p,v){return v&&(u(v)==="object"||typeof v=="function")?v:N(p)}function N(p){if(p===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return p}function z(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(p){return!1}}function Y(p){return Y=Object.setPrototypeOf?Object.getPrototypeOf:function(w){return w.__proto__||Object.getPrototypeOf(w)},Y(p)}function re(p,v,w){return v in p?Object.defineProperty(p,v,{value:w,enumerable:!0,configurable:!0,writable:!0}):p[v]=w,p}var X=s.default.div.withConfig({displayName:"timer__Text",componentId:"avqbub-0"})(["position:absolute;top:50px;right:50px;font-family:Menlo,monospace;font-size:28px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),ne=s.default.div.withConfig({displayName:"timer__RecIcon",componentId:"avqbub-1"})(["width:16px;height:16px;background:#e55226;border-radius:50%;float:left;margin:2px 8px;margin-left:0;"]),S=function(p){L(w,p);var v=W(w);function w(T){var m;k(this,w),m=v.call(this,T);var g=T.timeLimit?T.timeLimit/1e3:0;return m.state=m.getState(g),m}return j(w,[{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"componentDidMount",value:function(){var m=this,g=this.props.timeLimit;this.timer=setInterval(function(){var h=m.state.seconds,P=g?h-1:h+1,q=m.getState(P);m.setState(q)},1e3)}},{key:"pad",value:function(m){var g=""+m,h="00";return h.substring(0,h.length-g.length)+g}},{key:"getState",value:function(m){var g=Math.floor(m/60),h=g!==0?"".concat(g,":").concat(this.pad(m-g*60)):"".concat(m-g*60,"s");return{seconds:m,human:h}}},{key:"render",value:function(){var m=this.props.defaultText||"0:00";return i.default.createElement(X,this.props,i.default.createElement(ne,null),this.state.human||m)}}]),w}(i.Component);re(S,"propTypes",{timeLimit:r.default.number,defaultText:r.default.string});var F=S;n.default=F})(Ct);var Rt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=y(le.exports),r=c(Se.exports),s=c(ve);function c(S){return S&&S.__esModule?S:{default:S}}function f(){if(typeof WeakMap!="function")return null;var S=new WeakMap;return f=function(){return S},S}function y(S){if(S&&S.__esModule)return S;if(S===null||u(S)!=="object"&&typeof S!="function")return{default:S};var F=f();if(F&&F.has(S))return F.get(S);var p={},v=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var w in S)if(Object.prototype.hasOwnProperty.call(S,w)){var T=v?Object.getOwnPropertyDescriptor(S,w):null;T&&(T.get||T.set)?Object.defineProperty(p,w,T):p[w]=S[w]}return p.default=S,F&&F.set(S,p),p}function u(S){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?u=function(p){return typeof p}:u=function(p){return p&&typeof Symbol=="function"&&p.constructor===Symbol&&p!==Symbol.prototype?"symbol":typeof p},u(S)}function k(S,F){if(!(S instanceof F))throw new TypeError("Cannot call a class as a function")}function B(S,F){for(var p=0;p<F.length;p++){var v=F[p];v.enumerable=v.enumerable||!1,v.configurable=!0,"value"in v&&(v.writable=!0),Object.defineProperty(S,v.key,v)}}function j(S,F,p){return F&&B(S.prototype,F),p&&B(S,p),S}function L(S,F){if(typeof F!="function"&&F!==null)throw new TypeError("Super expression must either be null or a function");S.prototype=Object.create(F&&F.prototype,{constructor:{value:S,writable:!0,configurable:!0}}),F&&H(S,F)}function H(S,F){return H=Object.setPrototypeOf||function(v,w){return v.__proto__=w,v},H(S,F)}function W(S){var F=z();return function(){var v=Y(S),w;if(F){var T=Y(this).constructor;w=Reflect.construct(v,arguments,T)}else w=v.apply(this,arguments);return R(this,w)}}function R(S,F){return F&&(u(F)==="object"||typeof F=="function")?F:N(S)}function N(S){if(S===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return S}function z(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(S){return!1}}function Y(S){return Y=Object.setPrototypeOf?Object.getPrototypeOf:function(p){return p.__proto__||Object.getPrototypeOf(p)},Y(S)}function re(S,F,p){return F in S?Object.defineProperty(S,F,{value:p,enumerable:!0,configurable:!0,writable:!0}):S[F]=p,S}var X=s.default.div.withConfig({displayName:"countdown__Root",componentId:"sc-19d3j7o-0"})(["position:absolute;top:0;bottom:0;left:0;right:0;display:flex;justify-content:center;align-items:center;font-family:Menlo,monospace;font-size:100px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),ne=function(S){L(p,S);var F=W(p);function p(v){var w;return k(this,p),w=F.call(this,v),re(N(w),"updateNumber",function(){var T=w.state.number-1;w.setState({number:T}),T!==0&&(w.timeout=setTimeout(w.updateNumber,1e3))}),w.state={number:v.countdownTime/1e3},w}return j(p,[{key:"componentDidMount",value:function(){this.timeout=setTimeout(this.updateNumber,1e3)}},{key:"componentWillUnmount",value:function(){clearInterval(this.timeout)}},{key:"render",value:function(){return i.default.createElement(X,null,this.state.number!==0?this.state.number:null)}}]),p}(i.Component);n.default=ne,re(ne,"propTypes",{countdownTime:r.default.number})})(Rt);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=B(le.exports),r=B(Se.exports),s=B(ve),c=B(Et),f=B(_t),y=B(St),u=B(Ct),k=B(Rt);function B(W){return W&&W.__esModule?W:{default:W}}var j=s.default.div.withConfig({displayName:"render-actions__ActionsWrapper",componentId:"dp6lnv-0"})(["position:absolute;left:0;right:0;top:50%;display:flex;align-items:center;justify-content:center;"]),L=function(R){var N=R.t,z=R.isVideoInputSupported,Y=R.isInlineRecordingSupported,re=R.thereWasAnError,X=R.isRecording,ne=R.isCameraOn,S=R.streamIsReady,F=R.isConnecting,p=R.isRunningCountdown,v=R.isReplayingVideo,w=R.countdownTime,T=R.timeLimit;R.showReplayControls,R.replayVideoAutoplayAndLoopOff;var m=R.useVideoInput,g=R.onTurnOnCamera;R.onTurnOffCamera;var h=R.onOpenVideoInput,P=R.onStartRecording,q=R.onStopRecording;R.onPauseRecording,R.onResumeRecording;var J=R.onStopReplaying;R.onConfirm;var Q=function(){var ie=!Y&&z;return!Y&&!z||re||F||p?null:v?i.default.createElement(c.default,{type:"button",onClick:J,"data-qa":"start-replaying"},N("Use another video")):X?i.default.createElement(y.default,{type:"button",onClick:q,"data-qa":"stop-recording"}):ne&&S?i.default.createElement(f.default,{t:N,type:"button",onClick:P,"data-qa":"start-recording"}):m?i.default.createElement(c.default,{type:"button",onClick:h,"data-qa":"open-input"},N("Upload a video")):ie?i.default.createElement(c.default,{type:"button",onClick:h,"data-qa":"open-input"},N("Record a video")):i.default.createElement(c.default,{type:"button",onClick:g,"data-qa":"turn-on-camera"},N("Turn my camera ON"))};return i.default.createElement("div",null,X&&i.default.createElement(u.default,{timeLimit:T}),p&&i.default.createElement(k.default,{countdownTime:w}),i.default.createElement(j,null,Q()))};L.propTypes={t:r.default.func,isVideoInputSupported:r.default.bool,isInlineRecordingSupported:r.default.bool,thereWasAnError:r.default.bool,isRecording:r.default.bool,isCameraOn:r.default.bool,streamIsReady:r.default.bool,isConnecting:r.default.bool,isRunningCountdown:r.default.bool,countdownTime:r.default.number,timeLimit:r.default.number,showReplayControls:r.default.bool,replayVideoAutoplayAndLoopOff:r.default.bool,isReplayingVideo:r.default.bool,useVideoInput:r.default.bool,onTurnOnCamera:r.default.func,onTurnOffCamera:r.default.func,onOpenVideoInput:r.default.func,onStartRecording:r.default.func,onStopRecording:r.default.func,onPauseRecording:r.default.func,onResumeRecording:r.default.func,onStopReplaying:r.default.func,onConfirm:r.default.func};var H=L;n.default=H})(Tt);var It={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.captureThumb=void 0;var i=function(f){return new Promise(function(y,u){var k=document.createElement("canvas");k.width=f.videoWidth,k.height=f.videoHeight,k.getContext("2d").drawImage(f,0,0,f.videoWidth,f.videoHeight),k.toBlob(function(B){y(B)},"image/jpeg")})};n.captureThumb=i;var r=function(f){return new Promise(function(y,u){var k=document.createElement("video");k.preload="metadata",k.muted=!0,k.defaultMuted=!0,k.playsInline=!0,k.autoplay=!0;var B=!1,j=function(){B=!0,y({duration:null,thumbnail:null}),k.removeEventListener&&k.removeEventListener("loadeddata",W),window.URL.revokeObjectURL(k.src)},L=setTimeout(j,1e3),H=function(N){i(k).then(function(z){k.pause(),B||(clearTimeout(L),B=!0,y({duration:N,thumbnail:z})),window.URL.revokeObjectURL(k.src)}).catch(function(z){B||(clearTimeout(L),B=!0,u(z))})},W=function(){var N=k.duration*1e3;k.duration===1/0?(k.currentTime=Number.MAX_SAFE_INTEGER,k.ontimeupdate=function(){k.ontimeupdate=null,N=k.duration*1e3,k.currentTime=0,H(N)}):H(N)};k.addEventListener("loadeddata",W),k.src=window.URL.createObjectURL(f)})},s=r;n.default=s})(It);var he={};Object.defineProperty(he,"__esModule",{value:!0});he.ReactVideoRecorderDeviceUnavailableError=he.ReactVideoRecorderMediaRecorderUnavailableError=he.ReactVideoRecorderDataAvailableTimeoutError=he.ReactVideoRecorderRecordedBlobsUnavailableError=he.ReactVideoRecorderDataIssueError=void 0;function qe(n){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?qe=function(r){return typeof r}:qe=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},qe(n)}function Pe(n,i){if(!(n instanceof i))throw new TypeError("Cannot call a class as a function")}function Me(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(i&&i.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),i&&Ue(n,i)}function Fe(n){var i=Bt();return function(){var s=Le(n),c;if(i){var f=Le(this).constructor;c=Reflect.construct(s,arguments,f)}else c=s.apply(this,arguments);return ln(this,c)}}function ln(n,i){return i&&(qe(i)==="object"||typeof i=="function")?i:un(n)}function un(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function _e(n){var i=typeof Map=="function"?new Map:void 0;return _e=function(s){if(s===null||!cn(s))return s;if(typeof s!="function")throw new TypeError("Super expression must either be null or a function");if(typeof i!="undefined"){if(i.has(s))return i.get(s);i.set(s,c)}function c(){return je(s,arguments,Le(this).constructor)}return c.prototype=Object.create(s.prototype,{constructor:{value:c,enumerable:!1,writable:!0,configurable:!0}}),Ue(c,s)},_e(n)}function je(n,i,r){return Bt()?je=Reflect.construct:je=function(c,f,y){var u=[null];u.push.apply(u,f);var k=Function.bind.apply(c,u),B=new k;return y&&Ue(B,y.prototype),B},je.apply(null,arguments)}function Bt(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(n){return!1}}function cn(n){return Function.toString.call(n).indexOf("[native code]")!==-1}function Ue(n,i){return Ue=Object.setPrototypeOf||function(s,c){return s.__proto__=c,s},Ue(n,i)}function Le(n){return Le=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},Le(n)}var dn=function(n){Me(r,n);var i=Fe(r);function r(s){var c;return Pe(this,r),c=i.call(this,"Couldn't get data from event"),c.name="ReactVideoRecorderDataIssueError",c.event=s,c}return r}(_e(Error));he.ReactVideoRecorderDataIssueError=dn;var fn=function(n){Me(r,n);var i=Fe(r);function r(s){var c;return Pe(this,r),c=i.call(this,"Couldn't get recordedBlobs"),c.name="ReactVideoRecorderRecordedBlobsUnavailableError",c.event=s,c}return r}(_e(Error));he.ReactVideoRecorderRecordedBlobsUnavailableError=fn;var pn=function(n){Me(r,n);var i=Fe(r);function r(s){var c;return Pe(this,r),c=i.call(this,"Method mediaRecorder.ondataavailable wasn't called after ".concat(s,"ms")),c.name="ReactVideoRecorderDataAvailableTimeoutError",c.dataAvailableTimeout=s,c}return r}(_e(Error));he.ReactVideoRecorderDataAvailableTimeoutError=pn;var mn=function(n){Me(r,n);var i=Fe(r);function r(){var s;return Pe(this,r),s=i.call(this,"Couldn't get mediaRecorder"),s.name="ReactVideoRecorderMediaRecorderUnavailableError",s}return r}(_e(Error));he.ReactVideoRecorderMediaRecorderUnavailableError=mn;var hn=function(n){Me(r,n);var i=Fe(r);function r(){var s;return Pe(this,r),s=i.call(this,"Couldn't get selected device"),s.name="ReactVideoRecorderDeviceUnavailableError",s}return r}(_e(Error));he.ReactVideoRecorderDeviceUnavailableError=hn;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=N(le.exports),r=W(Se.exports),s=N(ve),c=xe,f=W(vt),y=W(yt),u=W(gt),k=W(kt),B=W(xt),j=W(Tt),L=N(It),H=he;function W(E){return E&&E.__esModule?E:{default:E}}function R(){if(typeof WeakMap!="function")return null;var E=new WeakMap;return R=function(){return E},E}function N(E){if(E&&E.__esModule)return E;if(E===null||z(E)!=="object"&&typeof E!="function")return{default:E};var _=R();if(_&&_.has(E))return _.get(E);var D={},l=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var $ in E)if(Object.prototype.hasOwnProperty.call(E,$)){var M=l?Object.getOwnPropertyDescriptor(E,$):null;M&&(M.get||M.set)?Object.defineProperty(D,$,M):D[$]=E[$]}return D.default=E,_&&_.set(E,D),D}function z(E){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?z=function(D){return typeof D}:z=function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},z(E)}function Y(E,_){var D=Object.keys(E);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(E);_&&(l=l.filter(function($){return Object.getOwnPropertyDescriptor(E,$).enumerable})),D.push.apply(D,l)}return D}function re(E){for(var _=1;_<arguments.length;_++){var D=arguments[_]!=null?arguments[_]:{};_%2?Y(Object(D),!0).forEach(function(l){h(E,l,D[l])}):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(D)):Y(Object(D)).forEach(function(l){Object.defineProperty(E,l,Object.getOwnPropertyDescriptor(D,l))})}return E}function X(E,_){if(!(E instanceof _))throw new TypeError("Cannot call a class as a function")}function ne(E,_){for(var D=0;D<_.length;D++){var l=_[D];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(E,l.key,l)}}function S(E,_,D){return _&&ne(E.prototype,_),D&&ne(E,D),E}function F(E,_){if(typeof _!="function"&&_!==null)throw new TypeError("Super expression must either be null or a function");E.prototype=Object.create(_&&_.prototype,{constructor:{value:E,writable:!0,configurable:!0}}),_&&p(E,_)}function p(E,_){return p=Object.setPrototypeOf||function(l,$){return l.__proto__=$,l},p(E,_)}function v(E){var _=m();return function(){var l=g(E),$;if(_){var M=g(this).constructor;$=Reflect.construct(l,arguments,M)}else $=l.apply(this,arguments);return w(this,$)}}function w(E,_){return _&&(z(_)==="object"||typeof _=="function")?_:T(E)}function T(E){if(E===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return E}function m(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(E){return!1}}function g(E){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(D){return D.__proto__||Object.getPrototypeOf(D)},g(E)}function h(E,_,D){return _ in E?Object.defineProperty(E,_,{value:D,enumerable:!0,configurable:!0,writable:!0}):E[_]=D,E}var P=['video/webm;codecs="vp8,opus"',"video/webm;codecs=h264","video/webm;codecs=vp9","video/webm","video/mp4"],q={audio:!0,video:!0},J=s.default.div.withConfig({displayName:"video-recorder__Wrapper",componentId:"sc-7k20rv-0"})(["position:relative;display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;height:100%;overflow:hidden;min-height:300px;background-color:#000;color:white;box-sizing:border-box;*{box-sizing:inherit;}"]),Q=s.default.div.withConfig({displayName:"video-recorder__CameraView",componentId:"sc-7k20rv-1"})(["width:100%;height:100%;"]),K=s.default.video.withConfig({displayName:"video-recorder__Video",componentId:"sc-7k20rv-2"})(["position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);min-height:100%;min-width:100%;width:100%;height:100%;object-fit:cover;",";",";"],function(E){return E.isFlipped&&(0,s.css)(["transform:translate(-50%,-50%) scaleX(-1);"])},function(E){return E.onClick&&(0,s.css)(["cursor:pointer;"])}),ie=function(E){F(D,E);var _=v(D);function D(){var l;X(this,D);for(var $=arguments.length,M=new Array($),oe=0;oe<$;oe++)M[oe]=arguments[oe];return l=_.call.apply(_,[this].concat(M)),h(T(l),"videoInput",i.default.createRef()),h(T(l),"isComponentUnmounted",!1),h(T(l),"timeSinceInactivity",0),h(T(l),"state",{isRecording:!1,isCameraOn:!1,isConnecting:!1,isReplayingVideo:!1,isReplayVideoMuted:!0,thereWasAnError:!1,error:null,streamIsReady:!1,isInlineRecordingSupported:null,isVideoInputSupported:null,stream:void 0,currentDeviceId:null,availableDeviceIds:[]}),h(T(l),"turnOnCamera",function(){var A=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;l.props.onTurnOnCamera&&l.props.onTurnOnCamera(),navigator.mediaDevices.enumerateDevices().then(function(G){var C=G.filter(function(U){return U.kind==="videoinput"});if(A&&C[0]&&C.find(function(U){return U.deviceId})===void 0)return l.handleError(new H.ReactVideoRecorderDeviceUnavailableError);var I=typeof A=="string"?A:C[0].deviceId;l.setState({isConnecting:!0,isReplayingVideo:!1,thereWasAnError:!1,currentDeviceId:I,availableDeviceIds:C.map(function(U){return U.deviceId}),error:null});var O={audio:!0,video:!0},V=re(re({},l.props.constraints),{},{video:{deviceId:{exact:I}}});navigator.mediaDevices.getUserMedia(V).catch(function(U){if(U.name==="NotReadableError"||U.name==="OverconstrainedError")return console.warn("Got ".concat(U.name,", trying getUserMedia again with fallback constraints")),navigator.mediaDevices.getUserMedia(O);throw U}).then(l.handleSuccess).catch(l.handleError)}).catch(l.handleError)}),h(T(l),"handleSwitchCamera",function(){l.props.onSwitchCamera&&l.props.onSwitchCamera();var A=l.state,G=A.currentDeviceId,C=A.availableDeviceIds;l.stream&&l.stream.getTracks().forEach(function(V){return V.stop()});var I=C.findIndex(function(V){return V===G}),O=C.length-1;return I<0?l.handleError(new H.ReactVideoRecorderDeviceUnavailableError):I+1>O?l.turnOnCamera(C[0]):l.turnOnCamera(C[I+1])}),h(T(l),"turnOffCamera",function(){l.props.onTurnOffCamera&&l.props.onTurnOffCamera(),l.stream&&l.stream.getTracks().forEach(function(A){return A.stop()}),l.setState({isCameraOn:!1}),clearInterval(l.inactivityTimer)}),h(T(l),"handleSuccess",function(A){l.isComponentUnmounted||(l.stream=A,l.setState({isCameraOn:!0,stream:A}),l.props.onCameraOn&&l.props.onCameraOn(),window.URL?l.cameraVideo.srcObject=A:l.cameraVideo.src=A,setTimeout(function(){l.setState({isConnecting:!1,streamIsReady:!0})},200))}),h(T(l),"handleError",function(A){var G=l.props.onError;G&&G(A),!l.isComponentUnmounted&&(console.error("Captured error",A),clearTimeout(l.timeLimitTimeout),l.setState({isConnecting:l.state.isConnecting&&!1,isRecording:!1,thereWasAnError:!0,error:A}),l.state.isCameraOn&&l.turnOffCamera())}),h(T(l),"handleDataIssue",function(A){var G=new H.ReactVideoRecorderDataIssueError(A);return console.error(G.message,A),l.handleError(G),!1}),h(T(l),"getMimeType",function(){if(l.props.mimeType)return l.props.mimeType;var A=window.MediaRecorder.isTypeSupported?P.find(window.MediaRecorder.isTypeSupported):"video/webm";return l.mediaRecorder&&l.mediaRecorder.mimeType||A||""}),h(T(l),"isDataHealthOK",function(A){if(!A.data)return l.handleDataIssue(A);var G=l.props.chunkSize,C=2e3/G,I=l.recordedBlobs.length;if(I>C&&I%C==0){var O=new window.Blob(l.recordedBlobs,{type:l.getMimeType()});if(O.size<=0)return l.handleDataIssue(A)}return!0}),h(T(l),"tryToUnmuteReplayVideo",function(){var A=l.replayVideo;A.muted=!1;var G=A.play();if(!G){A.muted=!0;return}G.then(function(){l.setState({isReplayVideoMuted:!1}),l.props.replayVideoAutoplayAndLoopOff&&(A.pause(),A.loop=!1)}).catch(function(C){return console.warn("Could not autoplay replay video",C),A.muted=!0,A.play()}).catch(function(C){console.warn("Could play muted replay video after failed autoplay",C)})}),h(T(l),"handleDataAvailable",function(A){l.isDataHealthOK(A)&&l.recordedBlobs.push(A.data)}),h(T(l),"handleStopRecording",function(){if(l.props.onStopRecording&&l.props.onStopRecording(),!l.mediaRecorder){l.handleError(new H.ReactVideoRecorderMediaRecorderUnavailableError);return}l.mediaRecorder.stop()}),h(T(l),"handlePauseRecording",function(){if(l.props.onPauseRecording&&l.props.onPauseRecording(),!l.mediaRecorder){l.handleError(new H.ReactVideoRecorderMediaRecorderUnavailableError);return}l.mediaRecorder.pause()}),h(T(l),"handleResumeRecording",function(){if(l.props.onResumeRecording&&l.props.onResumeRecording(),!l.mediaRecorder){l.handleError(new H.ReactVideoRecorderMediaRecorderUnavailableError);return}l.mediaRecorder.resume()}),h(T(l),"handleStartRecording",function(){l.props.onStartRecording&&l.props.onStartRecording(),l.setState({isRunningCountdown:!0,isReplayingVideo:!1}),setTimeout(function(){return l.startRecording()},l.props.countdownTime)}),h(T(l),"startRecording",function(){(0,L.captureThumb)(l.cameraVideo).then(function(A){l.thumbnail=A,l.recordedBlobs=[];var G={mimeType:l.getMimeType()};try{l.setState({isRunningCountdown:!1,isRecording:!0}),l.startedAt=new Date().getTime(),l.mediaRecorder=new window.MediaRecorder(l.stream,G),l.mediaRecorder.addEventListener("stop",l.handleStop),l.mediaRecorder.addEventListener("error",l.handleError),l.mediaRecorder.addEventListener("dataavailable",l.handleDataAvailable);var C=l.props,I=C.timeLimit,O=C.chunkSize,V=C.dataAvailableTimeout;l.mediaRecorder.start(O),I&&(l.timeLimitTimeout=setTimeout(function(){l.handleStopRecording()},I)),Number.isInteger(V)&&setTimeout(function(){l.recordedBlobs.length===0&&l.handleError(new H.ReactVideoRecorderDataAvailableTimeoutError(V))},V)}catch(U){console.error("Couldn't create MediaRecorder",U,G),l.handleError(U)}})}),h(T(l),"handleStop",function(A){var G=new Date().getTime();if(!l.recordedBlobs||l.recordedBlobs.length<=0){var C=new H.ReactVideoRecorderRecordedBlobsUnavailableError(A);console.error(C.message,A),l.handleError(C);return}clearTimeout(l.timeLimitTimeout);var I=l.recordedBlobs.length===1?l.recordedBlobs[0]:new window.Blob(l.recordedBlobs,{type:l.getMimeType()}),O=l.thumbnail,V=l.startedAt,U=G-V;l.mediaRecorder.ondataavailable=null,l.fixVideoMetadata(I).then(function(ee){l.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,fixedVideoBlob:ee,videoUrl:window.URL.createObjectURL(ee)}),l.turnOffCamera(),l.props.onRecordingComplete(ee,V,O,U)})}),h(T(l),"fixVideoMetadata",function(A){var G,C,I=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);return I?Promise.resolve(A):((C=(G=Blob.prototype).arrayBuffer)!==null&&C!==void 0||(G.arrayBuffer=function(){return new Response(this).arrayBuffer()}),A.arrayBuffer().then(function(O){var V,U=new c.Decoder,ee=U.decode(O),ce=["m","u","i","f","s","8","b","d"];ee=(V=ee)===null||V===void 0?void 0:V.filter(function(d){return ce.includes(d.type)});var a=new c.Reader;a.logging=!1,a.drop_default_duration=!1,ee.forEach(function(d){return a.read(d)}),a.stop();var e=c.tools.makeMetadataSeekable(a.metadatas,a.duration,a.cues),t=O.slice(a.metadataSize),o=new Blob([e,t],{type:A.type});return o}))}),h(T(l),"handleVideoSelected",function(A){l.state.isReplayingVideo&&l.setState({isReplayingVideo:!1});var G=A.target.files||A.dataTransfer.files;if(G.length!==0){var C=new Date().getTime(),I=G[0];A.target.value=null;var O=I.type==="video/quicktime"?"mov":void 0;(0,L.default)(I).then(function(V){var U=V.duration,ee=V.thumbnail;l.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,videoBlob:I,videoUrl:window.URL.createObjectURL(I)}),l.props.onRecordingComplete(I,C,ee,U,O)}).catch(function(V){l.handleError(V)})}}),h(T(l),"handleOpenVideoInput",function(){l.props.onOpenVideoInput&&l.props.onOpenVideoInput(),l.videoInput.current.value=null,l.videoInput.current.click(),l.videoInput.current.addEventListener("change",l.handleVideoSelected)}),h(T(l),"handleStopReplaying",function(){if(l.props.onStopReplaying&&l.props.onStopReplaying(),l.props.useVideoInput&&l.props.isOnInitially)return l.handleOpenVideoInput();l.setState({isReplayingVideo:!1}),l.state.isInlineRecordingSupported&&l.props.isOnInitially?l.turnOnCamera():l.state.isVideoInputSupported&&l.props.isOnInitially&&l.handleOpenVideoInput()}),h(T(l),"handleReplayVideoClick",function(){l.replayVideo.paused&&!l.props.showReplayControls&&l.replayVideo.play(),l.props.replayVideoAutoplayAndLoopOff||l.setState({isReplayVideoMuted:!l.state.isReplayVideoMuted})}),l}return S(D,[{key:"componentDidMount",value:function(){var $=this,M=!!window.MediaRecorder&&!!navigator.mediaDevices,oe=document.createElement("input").capture!==void 0;this.setState({isInlineRecordingSupported:M,isVideoInputSupported:oe},function(){$.props.useVideoInput&&$.props.isOnInitially?$.handleOpenVideoInput():$.state.isInlineRecordingSupported&&$.props.isOnInitially?$.turnOnCamera():$.state.isVideoInputSupported&&$.props.isOnInitially&&$.handleOpenVideoInput()})}},{key:"componentDidUpdate",value:function($,M){this.replayVideo&&this.state.isReplayingVideo&&!M.isReplayingVideo&&this.tryToUnmuteReplayVideo()}},{key:"componentWillUnmount",value:function(){this.turnOffCamera(),this.isComponentUnmounted=!0}},{key:"renderCameraView",value:function(){var $=this,M=this.props,oe=M.cameraViewClassName,A=M.showReplayControls,G=M.videoControlsList,C=M.disablePictureInPicture,I=M.replayVideoAutoplayAndLoopOff,O=M.renderDisconnectedView,V=M.renderVideoInputView,U=M.renderUnsupportedView,ee=M.renderErrorView,ce=M.renderLoadingView,a=M.useVideoInput,e=M.videoClassName,t=this.state,o=t.isVideoInputSupported,d=t.isReplayingVideo,b=t.isInlineRecordingSupported,x=t.thereWasAnError,Z=t.error,te=t.isCameraOn,se=t.isConnecting,de=t.isReplayVideoMuted,ue=t.isRecording,ke=t.availableDeviceIds,Ie=a||!b&&o,Be=Ie?i.default.createElement("input",{ref:this.videoInput,key:"videoInput",type:"file",accept:"video/*",capture:a?void 0:"user",style:{display:"none"},onChange:this.handleVideoSelected}):null;if(d)return i.default.createElement(Q,{key:"replay",className:oe},i.default.createElement(K,{ref:function(He){return $.replayVideo=He},className:e,src:this.state.videoUrl,loop:!0,muted:de,playsInline:!0,autoPlay:!I,controls:A,onClick:this.handleReplayVideoClick,onDurationChange:this.handleDurationChange,controlsList:G,disablePictureInPicture:C}),Be);if(Ie)return V({videoInput:Be});if(!b)return U();if(x)return ee({error:Z});if(te){var Mt=ke&&ke.length>=2&&!ue?i.default.createElement(B.default,{onClick:this.handleSwitchCamera}):null;return i.default.createElement(Q,{key:"camera"},i.default.createElement(K,{isFlipped:this.props.isFlipped,ref:function(He){return $.cameraVideo=He},autoPlay:!0,muted:!0,playsInline:!0}),Mt)}return se?ce():O()}},{key:"render",value:function(){var $=this,M=this.state,oe=M.isVideoInputSupported,A=M.isInlineRecordingSupported,G=M.thereWasAnError,C=M.isRecording,I=M.isCameraOn,O=M.streamIsReady,V=M.isConnecting,U=M.isRunningCountdown,ee=M.isReplayingVideo,ce=M.isReplayVideoMuted,a=this.props,e=a.countdownTime,t=a.timeLimit,o=a.showReplayControls,d=a.replayVideoAutoplayAndLoopOff,b=a.renderActions,x=a.t,Z=a.useVideoInput,te=a.wrapperClassName;return i.default.createElement(J,{className:te},this.renderCameraView(),b({t:x,isVideoInputSupported:oe,isInlineRecordingSupported:A,thereWasAnError:G,isRecording:C,isCameraOn:I,streamIsReady:O,isConnecting:V,isRunningCountdown:U,isReplayingVideo:ee,isReplayVideoMuted:ce,countdownTime:e,timeLimit:t,showReplayControls:o,replayVideoAutoplayAndLoopOff:d,useVideoInput:Z,onTurnOnCamera:function(){return $.turnOnCamera()},onSwitchCamera:this.handleSwitchCamera,onTurnOffCamera:this.turnOffCamera,onOpenVideoInput:this.handleOpenVideoInput,onStartRecording:this.handleStartRecording,onStopRecording:this.handleStopRecording,onPauseRecording:this.handlePauseRecording,onResumeRecording:this.handleResumeRecording,onStopReplaying:this.handleStopReplaying}))}}]),D}(i.Component);n.default=ie,h(ie,"propTypes",{isOnInitially:r.default.bool,isFlipped:r.default.bool,mimeType:r.default.string,countdownTime:r.default.number,timeLimit:r.default.number,showReplayControls:r.default.bool,replayVideoAutoplayAndLoopOff:r.default.bool,constraints:r.default.shape({audio:r.default.any,video:r.default.any}),chunkSize:r.default.number,dataAvailableTimeout:r.default.number,useVideoInput:r.default.bool,videoControlsList:r.default.string,disablePictureInPicture:r.default.bool,renderDisconnectedView:r.default.func,renderLoadingView:r.default.func,renderVideoInputView:r.default.func,renderUnsupportedView:r.default.func,renderErrorView:r.default.func,renderActions:r.default.func,cameraViewClassName:r.default.string,videoClassName:r.default.string,wrapperClassName:r.default.string,t:r.default.func,onCameraOn:r.default.func,onTurnOnCamera:r.default.func,onSwitchCamera:r.default.func,onTurnOffCamera:r.default.func,onStartRecording:r.default.func,onStopRecording:r.default.func,onPauseRecording:r.default.func,onResumeRecording:r.default.func,onRecordingComplete:r.default.func,onOpenVideoInput:r.default.func,onStopReplaying:r.default.func,onError:r.default.func}),h(ie,"defaultProps",{renderUnsupportedView:function(){return i.default.createElement(f.default,null)},renderErrorView:function(){return i.default.createElement(y.default,null)},renderVideoInputView:function(_){var D=_.videoInput;return i.default.createElement(i.default.Fragment,null,D)},renderDisconnectedView:function(){return i.default.createElement(u.default,null)},renderLoadingView:function(){return i.default.createElement(k.default,null)},t:function(_){return _},renderActions:j.default,isFlipped:!0,countdownTime:3e3,constraints:q,chunkSize:250,dataAvailableTimeout:500})})(ot);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return i.default}});var i=r(ot);function r(s){return s&&s.__esModule?s:{default:s}}})(at);var vn=Lt(at),Dt;(function(n){n.Documents="DOCUMENTS",n.Data="DATA",n.Cache="CACHE",n.External="EXTERNAL",n.ExternalStorage="EXTERNAL_STORAGE"})(Dt||(Dt={}));var At;(function(n){n.UTF8="utf8",n.ASCII="ascii",n.UTF16="utf16"})(At||(At={}));const yn=tt("Filesystem",{web:()=>import("./web.23d9a8a6.js").then(n=>new n.FilesystemWeb)}),gn=tt("Share",{web:()=>import("./web.5c5ac3e1.js").then(n=>new n.ShareWeb)}),bn="_feedFormContainer_ysq8i_1",wn="_alignSection_ysq8i_14",kn="_feedVideoPreview_ysq8i_19",xn="_flexContainer_ysq8i_27",Tn="_preCard_ysq8i_31",En="_displayNone_ysq8i_44",_n="_previewImage_ysq8i_47",Sn="_textArea_ysq8i_50",Cn="_buttonWraper_ysq8i_59",Rn="_submit_ysq8i_67",In="_videoWrapper_ysq8i_91",Bn="_backButton_ysq8i_110",Dn="_ldsRing_ysq8i_152",An="_ldsring_ysq8i_1";var be={feedFormContainer:bn,alignSection:wn,feedVideoPreview:kn,flexContainer:xn,preCard:Tn,displayNone:En,previewImage:_n,textArea:Sn,buttonWraper:Cn,submit:Rn,videoWrapper:In,backButton:Bn,ldsRing:Dn,ldsring:An};const Vt={setWebXrNative:()=>({type:"SET_WEBXRNATIVE"}),tougleWebXrNative:()=>({type:"TOGGLE_WEBXRNATIVE"})},Ot={getWebXrNative:()=>(console.log("getWebXrNative Service"),async n=>{try{n(Vt.setWebXrNative())}catch(i){console.log(i),it.dispatchAlertError(n,i.message)}}),changeWebXrNative:()=>(console.log("changeWebXrNative Service"),async n=>{try{n(Vt.tougleWebXrNative())}catch(i){console.log(i),it.dispatchAlertError(n,i.message)}})},Vn="_ldsRing_1vveq_1",On="_ldsring_1vveq_1";var Pn={ldsRing:Vn,ldsring:On};const Pt=({text:n})=>ae.createElement("div",{className:Pn.ldsRing},ae.createElement("div",null),ae.createElement("div",null),ae.createElement("div",null),ae.createElement("div",null),ae.createElement("span",null,n)),Mn=({feed:n})=>{const[i,r]=le.exports.useState(!1),[s,c]=le.exports.useState(!1),[f,y]=le.exports.useState(!1),[u,k]=le.exports.useState(n?n.title:""),[B,j]=le.exports.useState(n?n.description:""),[L,H]=le.exports.useState(null);le.exports.useState(null),le.exports.useState(null);const[W,R]=le.exports.useState(null);le.exports.useState(!1);const[N,z]=le.exports.useState(!1),[Y,re]=le.exports.useState(!1);ae.useRef(),ae.useRef(),ae.useRef();const{t:X}=Nt(),ne=jt(),S=ne?.popups?.videoPath?.value,F=ne?.popups?.fPath?.value,p=ne?.popups?.nameId?.value,{XRPlugin:v}=Wt,w=Ht(),m=$t().webxrnative.value,g=Gt(),h=g.feeds.lastFeedVideoUrl?.value;le.exports.useEffect(()=>{console.log("videoUrl",h),console.log(h)},[h]);const P=async()=>{const ie={title:u.trim(),description:B.trim(),video:L,preview:W};if(console.log(ie),!ie.video&&!ie.preview){alert("Error! Please try again."),Q();return}n?w(rt.updateFeedAsAdmin(n.id,ie)):await w(rt.createFeed(ie)),k(""),j(""),H(null),R(null),r(!0),m&&w(Ot.changeWebXrNative()),v.deleteVideo({videoDir:F}),w(nt.updateNewFeedPageState(!1,null,null,null))},q=(ie,E)=>{gn.share({title:X("social:shareForm.arcMedia"),text:X("social:shareForm.videoCreated"),url:F,dialogTitle:X("social:shareForm.shareWithBuddies")})},J=async()=>{const ie=await yn.readFile({path:F});var E=E||"",_=1024;try{var D=atob(ie.data)}catch(ee){alert(JSON.stringify(ee))}for(var l=D.length,$=Math.ceil(l/_),M=new Array($),oe=0;oe<$;++oe){for(var A=oe*_,G=Math.min(A+_,l),C=new Array(G-A),I=A,O=0;I<G;++O,++I)C[O]=D[I].charCodeAt(0);M[oe]=new Uint8Array(C)}const V=new Blob(M,{type:E}),U=new File([V],"test.mp4");console.log(U.size),H(U),new FileReader,R(U),z(!0)};le.exports.useEffect(()=>{J()},[]);const Q=()=>{w(nt.updateNewFeedPageState(!1,null,null,null)),m&&w(Ot.changeWebXrNative()),v.deleteVideo({videoDir:F})};le.exports.useEffect(()=>()=>{r(null)});const K=g.feeds.feedsFetching.value;return ae.createElement("section",{className:be.feedFormContainer},K&&ae.createElement(Pt,{text:"Publishing..."}),!N&&ae.createElement(Pt,{text:"Loading..."}),i?ae.createElement(Xt,null,X("social:feedForm.thanks")):ae.createElement("section",{className:be.alignSection},S&&ae.createElement("video",{className:be.feedVideoPreview,id:L,autoPlay:!1,loop:!0,muted:!1,playsInline:!0,controls:!0},ae.createElement("source",{src:S,type:"video/mp4"})),ae.createElement("div",{className:be.buttonWraper},S&&ae.createElement("div",null,ae.createElement(De,{variant:"contained",className:be.submit,onClick:()=>P()},X("social:shareForm.addFeed"))),!!h&&ae.createElement(De,{variant:"contained",className:be.submit,onClick:()=>q()},X("social:shareForm.arcMedia")),Y?"":ae.createElement(De,{variant:"contained",className:be.submit,onClick:()=>{v.saveVideoTo({videoDir:F,nameId:p}),re(!0)}},X("social:save")),ae.createElement(De,{variant:"contained",className:be.submit,onClick:()=>Q()},X("social:cancel"))),s===!0&&ae.createElement("section",{className:be.videoWrapper},ae.createElement(vn,{onRecordingComplete:ie=>{H(ie),y(!0)}}),f&&ae.createElement(De,{variant:"contained",color:"secondary",className:be.submit,onClick:()=>{c(!1),y(!1)}},X("social:feedForm.save")))))};var Fn=Mn;function ri(){return ae.createElement("div",{className:Yt.viewport},ae.createElement(Fn,null),ae.createElement(zt,null))}export{ri as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
